{"ast":null,"code":"import { __assign, __awaiter, __generator, __read } from \"tslib\";\nimport { GRAPHQL_AUTH_MODE } from '@aws-amplify/api-graphql';\nimport { GraphQLAuthError } from '@aws-amplify/api';\nimport { Logger } from '@aws-amplify/core';\nimport { isEnumFieldType, isGraphQLScalarType, isPredicateObj, isSchemaModel, isSchemaModelWithAttributes, isTargetNameAssociation, isNonModelFieldType, OpType, ModelOperation } from '../types';\nimport { extractPrimaryKeyFieldNames, establishRelationAndKeys, IDENTIFIER_KEY_SEPARATOR } from '../util';\nvar logger = new Logger('DataStore');\nvar GraphQLOperationType;\n(function (GraphQLOperationType) {\n  GraphQLOperationType[\"LIST\"] = \"query\";\n  GraphQLOperationType[\"CREATE\"] = \"mutation\";\n  GraphQLOperationType[\"UPDATE\"] = \"mutation\";\n  GraphQLOperationType[\"DELETE\"] = \"mutation\";\n  GraphQLOperationType[\"GET\"] = \"query\";\n})(GraphQLOperationType || (GraphQLOperationType = {}));\nexport var TransformerMutationType;\n(function (TransformerMutationType) {\n  TransformerMutationType[\"CREATE\"] = \"Create\";\n  TransformerMutationType[\"UPDATE\"] = \"Update\";\n  TransformerMutationType[\"DELETE\"] = \"Delete\";\n  TransformerMutationType[\"GET\"] = \"Get\";\n})(TransformerMutationType || (TransformerMutationType = {}));\nvar dummyMetadata = {\n  _version: undefined,\n  _lastChangedAt: undefined,\n  _deleted: undefined\n};\nvar metadataFields = Object.keys(dummyMetadata);\nexport function getMetadataFields() {\n  return metadataFields;\n}\nexport function generateSelectionSet(namespace, modelDefinition) {\n  var scalarFields = getScalarFields(modelDefinition);\n  var nonModelFields = getNonModelFields(namespace, modelDefinition);\n  var implicitOwnerField = getImplicitOwnerField(modelDefinition, scalarFields);\n  var scalarAndMetadataFields = Object.values(scalarFields).map(function (_a) {\n    var name = _a.name;\n    return name;\n  }).concat(implicitOwnerField).concat(nonModelFields);\n  if (isSchemaModel(modelDefinition)) {\n    scalarAndMetadataFields = scalarAndMetadataFields.concat(getMetadataFields()).concat(getConnectionFields(modelDefinition, namespace));\n  }\n  var result = scalarAndMetadataFields.join('\\n');\n  return result;\n}\nfunction getImplicitOwnerField(modelDefinition, scalarFields) {\n  var ownerFields = getOwnerFields(modelDefinition);\n  if (!scalarFields.owner && ownerFields.includes('owner')) {\n    return ['owner'];\n  }\n  return [];\n}\nfunction getOwnerFields(modelDefinition) {\n  var ownerFields = [];\n  if (isSchemaModelWithAttributes(modelDefinition)) {\n    modelDefinition.attributes.forEach(function (attr) {\n      if (attr.properties && attr.properties.rules) {\n        var rule = attr.properties.rules.find(function (rule) {\n          return rule.allow === 'owner';\n        });\n        if (rule && rule.ownerField) {\n          ownerFields.push(rule.ownerField);\n        }\n      }\n    });\n  }\n  return ownerFields;\n}\nfunction getScalarFields(modelDefinition) {\n  var fields = modelDefinition.fields;\n  var result = Object.values(fields).filter(function (field) {\n    if (isGraphQLScalarType(field.type) || isEnumFieldType(field.type)) {\n      return true;\n    }\n    return false;\n  }).reduce(function (acc, field) {\n    acc[field.name] = field;\n    return acc;\n  }, {});\n  return result;\n}\n// Used for generating the selection set for queries and mutations\nfunction getConnectionFields(modelDefinition, namespace) {\n  var result = [];\n  Object.values(modelDefinition.fields).filter(function (_a) {\n    var association = _a.association;\n    return association && Object.keys(association).length;\n  }).forEach(function (_a) {\n    var name = _a.name,\n      association = _a.association;\n    var connectionType = (association || {}).connectionType;\n    switch (connectionType) {\n      case 'HAS_ONE':\n      case 'HAS_MANY':\n        // Intentionally blank\n        break;\n      case 'BELONGS_TO':\n        if (isTargetNameAssociation(association)) {\n          // New codegen (CPK)\n          if (association.targetNames && association.targetNames.length > 0) {\n            // Need to retrieve relations in order to get connected model keys\n            var _b = __read(establishRelationAndKeys(namespace), 1),\n              relations = _b[0];\n            var connectedModelName = modelDefinition.fields[name].type['model'];\n            var byPkIndex = relations[connectedModelName].indexes.find(function (_a) {\n              var _b = __read(_a, 1),\n                name = _b[0];\n              return name === 'byPk';\n            });\n            var keyFields = byPkIndex && byPkIndex[1];\n            var keyFieldSelectionSet = keyFields === null || keyFields === void 0 ? void 0 : keyFields.join(' ');\n            // We rely on `_deleted` when we process the sync query (e.g. in batchSave in the adapters)\n            result.push(name + \" { \" + keyFieldSelectionSet + \" _deleted }\");\n          } else {\n            // backwards-compatability for schema generated prior to custom primary key support\n            result.push(name + \" { id _deleted }\");\n          }\n        }\n        break;\n      default:\n        throw new Error(\"Invalid connection type \" + connectionType);\n    }\n  });\n  return result;\n}\nfunction getNonModelFields(namespace, modelDefinition) {\n  var result = [];\n  Object.values(modelDefinition.fields).forEach(function (_a) {\n    var name = _a.name,\n      type = _a.type;\n    if (isNonModelFieldType(type)) {\n      var typeDefinition = namespace.nonModels[type.nonModel];\n      var scalarFields = Object.values(getScalarFields(typeDefinition)).map(function (_a) {\n        var name = _a.name;\n        return name;\n      });\n      var nested_1 = [];\n      Object.values(typeDefinition.fields).forEach(function (field) {\n        var type = field.type,\n          name = field.name;\n        if (isNonModelFieldType(type)) {\n          var typeDefinition_1 = namespace.nonModels[type.nonModel];\n          nested_1.push(name + \" { \" + generateSelectionSet(namespace, typeDefinition_1) + \" }\");\n        }\n      });\n      result.push(name + \" { \" + scalarFields.join(' ') + \" \" + nested_1.join(' ') + \" }\");\n    }\n  });\n  return result;\n}\nexport function getAuthorizationRules(modelDefinition) {\n  // Searching for owner authorization on attributes\n  var authConfig = [].concat(modelDefinition.attributes || []).find(function (attr) {\n    return attr && attr.type === 'auth';\n  });\n  var _a = (authConfig || {}).properties,\n    _b = (_a === void 0 ? {} : _a).rules,\n    rules = _b === void 0 ? [] : _b;\n  var resultRules = [];\n  // Multiple rules can be declared for allow: owner\n  rules.forEach(function (rule) {\n    // setting defaults for backwards compatibility with old cli\n    var _a = rule.identityClaim,\n      identityClaim = _a === void 0 ? 'cognito:username' : _a,\n      _b = rule.ownerField,\n      ownerField = _b === void 0 ? 'owner' : _b,\n      _c = rule.operations,\n      operations = _c === void 0 ? ['create', 'update', 'delete', 'read'] : _c,\n      _d = rule.provider,\n      provider = _d === void 0 ? 'userPools' : _d,\n      _e = rule.groupClaim,\n      groupClaim = _e === void 0 ? 'cognito:groups' : _e,\n      _f = rule.allow,\n      authStrategy = _f === void 0 ? 'iam' : _f,\n      _g = rule.groups,\n      groups = _g === void 0 ? [] : _g;\n    var isReadAuthorized = operations.includes('read');\n    var isOwnerAuth = authStrategy === 'owner';\n    if (!isReadAuthorized && !isOwnerAuth) {\n      return;\n    }\n    var authRule = {\n      identityClaim: identityClaim,\n      ownerField: ownerField,\n      provider: provider,\n      groupClaim: groupClaim,\n      authStrategy: authStrategy,\n      groups: groups,\n      areSubscriptionsPublic: false\n    };\n    if (isOwnerAuth) {\n      // look for the subscription level override\n      // only pay attention to the public level\n      var modelConfig = [].concat(modelDefinition.attributes || []).find(function (attr) {\n        return attr && attr.type === 'model';\n      });\n      // find the subscriptions level. ON is default\n      var _h = (modelConfig || {}).properties,\n        _j = (_h === void 0 ? {} : _h).subscriptions,\n        _k = (_j === void 0 ? {} : _j).level,\n        level = _k === void 0 ? 'on' : _k;\n      // treat subscriptions as public for owner auth with unprotected reads\n      // when `read` is omitted from `operations`\n      authRule.areSubscriptionsPublic = !operations.includes('read') || level === 'public';\n    }\n    if (isOwnerAuth) {\n      // owner rules has least priority\n      resultRules.push(authRule);\n      return;\n    }\n    resultRules.unshift(authRule);\n  });\n  return resultRules;\n}\nexport function buildSubscriptionGraphQLOperation(namespace, modelDefinition, transformerMutationType, isOwnerAuthorization, ownerField) {\n  var selectionSet = generateSelectionSet(namespace, modelDefinition);\n  var typeName = modelDefinition.name,\n    pluralTypeName = modelDefinition.pluralName;\n  var opName = \"on\" + transformerMutationType + typeName;\n  var docArgs = '';\n  var opArgs = '';\n  if (isOwnerAuthorization) {\n    docArgs = \"($\" + ownerField + \": String!)\";\n    opArgs = \"(\" + ownerField + \": $\" + ownerField + \")\";\n  }\n  return [transformerMutationType, opName, \"subscription operation\" + docArgs + \"{\\n\\t\\t\\t\" + opName + opArgs + \"{\\n\\t\\t\\t\\t\" + selectionSet + \"\\n\\t\\t\\t}\\n\\t\\t}\"];\n}\nexport function buildGraphQLOperation(namespace, modelDefinition, graphQLOpType) {\n  var selectionSet = generateSelectionSet(namespace, modelDefinition);\n  var typeName = modelDefinition.name,\n    pluralTypeName = modelDefinition.pluralName;\n  var operation;\n  var documentArgs;\n  var operationArgs;\n  var transformerMutationType;\n  switch (graphQLOpType) {\n    case 'LIST':\n      operation = \"sync\" + pluralTypeName;\n      documentArgs = \"($limit: Int, $nextToken: String, $lastSync: AWSTimestamp, $filter: Model\" + typeName + \"FilterInput)\";\n      operationArgs = '(limit: $limit, nextToken: $nextToken, lastSync: $lastSync, filter: $filter)';\n      selectionSet = \"items {\\n\\t\\t\\t\\t\\t\\t\\t\" + selectionSet + \"\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tnextToken\\n\\t\\t\\t\\t\\t\\tstartedAt\";\n      break;\n    case 'CREATE':\n      operation = \"create\" + typeName;\n      documentArgs = \"($input: Create\" + typeName + \"Input!)\";\n      operationArgs = '(input: $input)';\n      transformerMutationType = TransformerMutationType.CREATE;\n      break;\n    case 'UPDATE':\n      operation = \"update\" + typeName;\n      documentArgs = \"($input: Update\" + typeName + \"Input!, $condition: Model\" + typeName + \"ConditionInput)\";\n      operationArgs = '(input: $input, condition: $condition)';\n      transformerMutationType = TransformerMutationType.UPDATE;\n      break;\n    case 'DELETE':\n      operation = \"delete\" + typeName;\n      documentArgs = \"($input: Delete\" + typeName + \"Input!, $condition: Model\" + typeName + \"ConditionInput)\";\n      operationArgs = '(input: $input, condition: $condition)';\n      transformerMutationType = TransformerMutationType.DELETE;\n      break;\n    case 'GET':\n      operation = \"get\" + typeName;\n      documentArgs = \"($id: ID!)\";\n      operationArgs = '(id: $id)';\n      transformerMutationType = TransformerMutationType.GET;\n      break;\n    default:\n      throw new Error(\"Invalid graphQlOpType \" + graphQLOpType);\n  }\n  return [[transformerMutationType, operation, GraphQLOperationType[graphQLOpType] + \" operation\" + documentArgs + \"{\\n\\t\\t\" + operation + operationArgs + \"{\\n\\t\\t\\t\" + selectionSet + \"\\n\\t\\t}\\n\\t}\"]];\n}\nexport function createMutationInstanceFromModelOperation(relationships, modelDefinition, opType, model, element, condition, MutationEventConstructor, modelInstanceCreator, id) {\n  var operation;\n  switch (opType) {\n    case OpType.INSERT:\n      operation = TransformerMutationType.CREATE;\n      break;\n    case OpType.UPDATE:\n      operation = TransformerMutationType.UPDATE;\n      break;\n    case OpType.DELETE:\n      operation = TransformerMutationType.DELETE;\n      break;\n    default:\n      throw new Error(\"Invalid opType \" + opType);\n  }\n  // stringify nested objects of type AWSJSON\n  // this allows us to return parsed JSON to users (see `castInstanceType()` in datastore.ts),\n  // but still send the object correctly over the wire\n  var replacer = function (k, v) {\n    var isAWSJSON = k && v !== null && typeof v === 'object' && modelDefinition.fields[k] && modelDefinition.fields[k].type === 'AWSJSON';\n    if (isAWSJSON) {\n      return JSON.stringify(v);\n    }\n    return v;\n  };\n  var modelId = getIdentifierValue(modelDefinition, element);\n  var optionalId = OpType.INSERT && id ? {\n    id: id\n  } : {};\n  var mutationEvent = modelInstanceCreator(MutationEventConstructor, __assign(__assign({}, optionalId), {\n    data: JSON.stringify(element, replacer),\n    modelId: modelId,\n    model: model.name,\n    operation: operation,\n    condition: JSON.stringify(condition)\n  }));\n  return mutationEvent;\n}\nexport function predicateToGraphQLCondition(predicate, modelDefinition) {\n  var result = {};\n  if (!predicate || !Array.isArray(predicate.predicates)) {\n    return result;\n  }\n  // This is compatible with how the GQL Transform currently generates the Condition Input,\n  // i.e. any PK and SK fields are omitted and can't be used as conditions.\n  // However, I think this limits usability.\n  // What if we want to delete all records where SK > some value\n  // Or all records where PK = some value but SKs are different values\n  // TODO: if the Transform gets updated we'll need to modify this logic to only omit\n  // key fields from the predicate/condition when ALL of the keyFields are present and using `eq` operators\n  var keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n  return predicateToGraphQLFilter(predicate, keyFields);\n}\nexport function predicateToGraphQLFilter(predicatesGroup, fieldsToOmit) {\n  if (fieldsToOmit === void 0) {\n    fieldsToOmit = [];\n  }\n  var result = {};\n  if (!predicatesGroup || !Array.isArray(predicatesGroup.predicates)) {\n    return result;\n  }\n  var type = predicatesGroup.type,\n    predicates = predicatesGroup.predicates;\n  var isList = type === 'and' || type === 'or';\n  result[type] = isList ? [] : {};\n  var appendToFilter = function (value) {\n    return isList ? result[type].push(value) : result[type] = value;\n  };\n  predicates.forEach(function (predicate) {\n    var _a, _b;\n    if (isPredicateObj(predicate)) {\n      var field = predicate.field,\n        operator = predicate.operator,\n        operand = predicate.operand;\n      if (fieldsToOmit.includes(field)) return;\n      var gqlField = (_a = {}, _a[field] = (_b = {}, _b[operator] = operand, _b), _a);\n      appendToFilter(gqlField);\n      return;\n    }\n    var child = predicateToGraphQLFilter(predicate, fieldsToOmit);\n    Object.keys(child).length > 0 && appendToFilter(child);\n  });\n  if (isList) {\n    if (result[type].length === 0) return {};\n  } else {\n    if (Object.keys(result[type]).length === 0) return {};\n  }\n  return result;\n}\nexport function getUserGroupsFromToken(token, rule) {\n  // validate token against groupClaim\n  var userGroups = token[rule.groupClaim] || [];\n  if (typeof userGroups === 'string') {\n    var parsedGroups = void 0;\n    try {\n      parsedGroups = JSON.parse(userGroups);\n    } catch (e) {\n      parsedGroups = userGroups;\n    }\n    userGroups = [].concat(parsedGroups);\n  }\n  return userGroups;\n}\nexport function getModelAuthModes(_a) {\n  var authModeStrategy = _a.authModeStrategy,\n    defaultAuthMode = _a.defaultAuthMode,\n    modelName = _a.modelName,\n    schema = _a.schema;\n  return __awaiter(this, void 0, void 0, function () {\n    var operations, modelAuthModes, error_1;\n    var _this = this;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          operations = Object.values(ModelOperation);\n          modelAuthModes = {\n            CREATE: [],\n            READ: [],\n            UPDATE: [],\n            DELETE: []\n          };\n          _b.label = 1;\n        case 1:\n          _b.trys.push([1, 3,, 4]);\n          return [4 /*yield*/, Promise.all(operations.map(function (operation) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var authModes;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    return [4 /*yield*/, authModeStrategy({\n                      schema: schema,\n                      modelName: modelName,\n                      operation: operation\n                    })];\n                  case 1:\n                    authModes = _a.sent();\n                    if (typeof authModes === 'string') {\n                      modelAuthModes[operation] = [authModes];\n                    } else if (Array.isArray(authModes) && authModes.length) {\n                      modelAuthModes[operation] = authModes;\n                    } else {\n                      // Use default auth mode if nothing is returned from authModeStrategy\n                      modelAuthModes[operation] = [defaultAuthMode];\n                    }\n                    return [2 /*return*/];\n                }\n              });\n            });\n          }))];\n\n        case 2:\n          _b.sent();\n          return [3 /*break*/, 4];\n        case 3:\n          error_1 = _b.sent();\n          logger.debug(\"Error getting auth modes for model: \" + modelName, error_1);\n          return [3 /*break*/, 4];\n        case 4:\n          return [2 /*return*/, modelAuthModes];\n      }\n    });\n  });\n}\nexport function getForbiddenError(error) {\n  var forbiddenErrorMessages = ['Request failed with status code 401', 'Request failed with status code 403'];\n  var forbiddenError;\n  if (error && error.errors) {\n    forbiddenError = error.errors.find(function (err) {\n      return forbiddenErrorMessages.includes(err.message);\n    });\n  } else if (error && error.message) {\n    forbiddenError = error;\n  }\n  if (forbiddenError) {\n    return forbiddenError.message;\n  }\n  return null;\n}\nexport function getClientSideAuthError(error) {\n  var clientSideAuthErrors = Object.values(GraphQLAuthError);\n  var clientSideError = error && error.message && clientSideAuthErrors.find(function (clientError) {\n    return error.message.includes(clientError);\n  });\n  return clientSideError || null;\n}\nexport function getTokenForCustomAuth(authMode, amplifyConfig) {\n  if (amplifyConfig === void 0) {\n    amplifyConfig = {};\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var _a, functionAuthProvider, token, error_2;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          if (!(authMode === GRAPHQL_AUTH_MODE.AWS_LAMBDA)) return [3 /*break*/, 6];\n          _a = amplifyConfig.authProviders, functionAuthProvider = (_a === void 0 ? {\n            functionAuthProvider: null\n          } : _a).functionAuthProvider;\n          if (!(functionAuthProvider && typeof functionAuthProvider === 'function')) return [3 /*break*/, 5];\n          _b.label = 1;\n        case 1:\n          _b.trys.push([1, 3,, 4]);\n          return [4 /*yield*/, functionAuthProvider()];\n        case 2:\n          token = _b.sent().token;\n          return [2 /*return*/, token];\n        case 3:\n          error_2 = _b.sent();\n          throw new Error(\"Error retrieving token from `functionAuthProvider`: \" + error_2);\n        case 4:\n          return [3 /*break*/, 6];\n        case 5:\n          // TODO: add docs link once available\n          throw new Error(\"You must provide a `functionAuthProvider` function to `DataStore.configure` when using \" + GRAPHQL_AUTH_MODE.AWS_LAMBDA);\n        case 6:\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n// Util that takes a modelDefinition and model and returns either the id value(s) or the custom primary key value(s)\nexport function getIdentifierValue(modelDefinition, model) {\n  var pkFieldNames = extractPrimaryKeyFieldNames(modelDefinition);\n  var idOrPk = pkFieldNames.map(function (f) {\n    return model[f];\n  }).join(IDENTIFIER_KEY_SEPARATOR);\n  return idOrPk;\n}","map":{"version":3,"names":["GRAPHQL_AUTH_MODE","GraphQLAuthError","Logger","isEnumFieldType","isGraphQLScalarType","isPredicateObj","isSchemaModel","isSchemaModelWithAttributes","isTargetNameAssociation","isNonModelFieldType","OpType","ModelOperation","extractPrimaryKeyFieldNames","establishRelationAndKeys","IDENTIFIER_KEY_SEPARATOR","logger","GraphQLOperationType","TransformerMutationType","dummyMetadata","_version","undefined","_lastChangedAt","_deleted","metadataFields","Object","keys","getMetadataFields","generateSelectionSet","namespace","modelDefinition","scalarFields","getScalarFields","nonModelFields","getNonModelFields","implicitOwnerField","getImplicitOwnerField","scalarAndMetadataFields","values","map","_a","name","concat","getConnectionFields","result","join","ownerFields","getOwnerFields","owner","includes","attributes","forEach","attr","properties","rules","rule","find","allow","ownerField","push","fields","filter","field","type","reduce","acc","association","length","connectionType","targetNames","_b","__read","relations","connectedModelName","byPkIndex","indexes","keyFields","keyFieldSelectionSet","Error","typeDefinition","nonModels","nonModel","nested_1","typeDefinition_1","getAuthorizationRules","authConfig","resultRules","identityClaim","_c","operations","_d","provider","_e","groupClaim","_f","authStrategy","_g","groups","isReadAuthorized","isOwnerAuth","authRule","areSubscriptionsPublic","modelConfig","_h","_j","subscriptions","_k","level","unshift","buildSubscriptionGraphQLOperation","transformerMutationType","isOwnerAuthorization","selectionSet","typeName","pluralTypeName","pluralName","opName","docArgs","opArgs","buildGraphQLOperation","graphQLOpType","operation","documentArgs","operationArgs","CREATE","UPDATE","DELETE","GET","createMutationInstanceFromModelOperation","relationships","opType","model","element","condition","MutationEventConstructor","modelInstanceCreator","id","INSERT","replacer","k","v","isAWSJSON","JSON","stringify","modelId","getIdentifierValue","optionalId","mutationEvent","__assign","data","predicateToGraphQLCondition","predicate","Array","isArray","predicates","predicateToGraphQLFilter","predicatesGroup","fieldsToOmit","isList","appendToFilter","value","operator","operand","gqlField","child","getUserGroupsFromToken","token","userGroups","parsedGroups","parse","e","getModelAuthModes","authModeStrategy","defaultAuthMode","modelName","schema","modelAuthModes","READ","Promise","all","__awaiter","_this","authModes","sent","debug","error_1","getForbiddenError","error","forbiddenErrorMessages","forbiddenError","errors","err","message","getClientSideAuthError","clientSideAuthErrors","clientSideError","clientError","getTokenForCustomAuth","authMode","amplifyConfig","AWS_LAMBDA","authProviders","functionAuthProvider","error_2","pkFieldNames","idOrPk","f"],"sources":["/Users/ericli/node_modules/@aws-amplify/datastore/src/sync/utils.ts"],"sourcesContent":["import { GRAPHQL_AUTH_MODE } from '@aws-amplify/api-graphql';\nimport { GraphQLAuthError } from '@aws-amplify/api';\nimport { Logger } from '@aws-amplify/core';\nimport { ModelInstanceCreator } from '../datastore/datastore';\nimport {\n\tAuthorizationRule,\n\tGraphQLCondition,\n\tGraphQLFilter,\n\tGraphQLField,\n\tisEnumFieldType,\n\tisGraphQLScalarType,\n\tisPredicateObj,\n\tisSchemaModel,\n\tisSchemaModelWithAttributes,\n\tisTargetNameAssociation,\n\tisNonModelFieldType,\n\tModelFields,\n\tModelInstanceMetadata,\n\tOpType,\n\tPersistentModel,\n\tPersistentModelConstructor,\n\tPredicatesGroup,\n\tRelationshipType,\n\tSchemaModel,\n\tSchemaNamespace,\n\tSchemaNonModel,\n\tModelOperation,\n\tInternalSchema,\n\tAuthModeStrategy,\n\tModelAttributes,\n} from '../types';\nimport {\n\textractPrimaryKeyFieldNames,\n\testablishRelationAndKeys,\n\tIDENTIFIER_KEY_SEPARATOR,\n} from '../util';\nimport { MutationEvent } from './';\n\nconst logger = new Logger('DataStore');\n\nenum GraphQLOperationType {\n\tLIST = 'query',\n\tCREATE = 'mutation',\n\tUPDATE = 'mutation',\n\tDELETE = 'mutation',\n\tGET = 'query',\n}\n\nexport enum TransformerMutationType {\n\tCREATE = 'Create',\n\tUPDATE = 'Update',\n\tDELETE = 'Delete',\n\tGET = 'Get',\n}\n\nconst dummyMetadata: ModelInstanceMetadata = {\n\t_version: undefined!,\n\t_lastChangedAt: undefined!,\n\t_deleted: undefined!,\n};\n\nconst metadataFields = <(keyof ModelInstanceMetadata)[]>(\n\tObject.keys(dummyMetadata)\n);\nexport function getMetadataFields(): ReadonlyArray<string> {\n\treturn metadataFields;\n}\n\nexport function generateSelectionSet(\n\tnamespace: SchemaNamespace,\n\tmodelDefinition: SchemaModel | SchemaNonModel\n): string {\n\tconst scalarFields = getScalarFields(modelDefinition);\n\tconst nonModelFields = getNonModelFields(namespace, modelDefinition);\n\tconst implicitOwnerField = getImplicitOwnerField(\n\t\tmodelDefinition,\n\t\tscalarFields\n\t);\n\n\tlet scalarAndMetadataFields = Object.values(scalarFields)\n\t\t.map(({ name }) => name)\n\t\t.concat(implicitOwnerField)\n\t\t.concat(nonModelFields);\n\n\tif (isSchemaModel(modelDefinition)) {\n\t\tscalarAndMetadataFields = scalarAndMetadataFields\n\t\t\t.concat(getMetadataFields())\n\t\t\t.concat(getConnectionFields(modelDefinition, namespace));\n\t}\n\n\tconst result = scalarAndMetadataFields.join('\\n');\n\n\treturn result;\n}\n\nfunction getImplicitOwnerField(\n\tmodelDefinition: SchemaModel | SchemaNonModel,\n\tscalarFields: ModelFields\n) {\n\tconst ownerFields = getOwnerFields(modelDefinition);\n\n\tif (!scalarFields.owner && ownerFields.includes('owner')) {\n\t\treturn ['owner'];\n\t}\n\treturn [];\n}\n\nfunction getOwnerFields(\n\tmodelDefinition: SchemaModel | SchemaNonModel\n): string[] {\n\tconst ownerFields: string[] = [];\n\tif (isSchemaModelWithAttributes(modelDefinition)) {\n\t\tmodelDefinition.attributes!.forEach(attr => {\n\t\t\tif (attr.properties && attr.properties.rules) {\n\t\t\t\tconst rule = attr.properties.rules.find(rule => rule.allow === 'owner');\n\t\t\t\tif (rule && rule.ownerField) {\n\t\t\t\t\townerFields.push(rule.ownerField);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\treturn ownerFields;\n}\n\nfunction getScalarFields(\n\tmodelDefinition: SchemaModel | SchemaNonModel\n): ModelFields {\n\tconst { fields } = modelDefinition;\n\n\tconst result = Object.values(fields)\n\t\t.filter(field => {\n\t\t\tif (isGraphQLScalarType(field.type) || isEnumFieldType(field.type)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t})\n\t\t.reduce((acc, field) => {\n\t\t\tacc[field.name] = field;\n\n\t\t\treturn acc;\n\t\t}, {} as ModelFields);\n\n\treturn result;\n}\n\n// Used for generating the selection set for queries and mutations\nfunction getConnectionFields(\n\tmodelDefinition: SchemaModel,\n\tnamespace: SchemaNamespace\n): string[] {\n\tconst result: string[] = [];\n\n\tObject.values(modelDefinition.fields)\n\t\t.filter(({ association }) => association && Object.keys(association).length)\n\t\t.forEach(({ name, association }) => {\n\t\t\tconst { connectionType } = association || {};\n\n\t\t\tswitch (connectionType) {\n\t\t\t\tcase 'HAS_ONE':\n\t\t\t\tcase 'HAS_MANY':\n\t\t\t\t\t// Intentionally blank\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'BELONGS_TO':\n\t\t\t\t\tif (isTargetNameAssociation(association)) {\n\t\t\t\t\t\t// New codegen (CPK)\n\t\t\t\t\t\tif (association.targetNames && association.targetNames.length > 0) {\n\t\t\t\t\t\t\t// Need to retrieve relations in order to get connected model keys\n\t\t\t\t\t\t\tconst [relations] = establishRelationAndKeys(namespace);\n\n\t\t\t\t\t\t\tconst connectedModelName =\n\t\t\t\t\t\t\t\tmodelDefinition.fields[name].type['model'];\n\n\t\t\t\t\t\t\tconst byPkIndex = relations[connectedModelName].indexes.find(\n\t\t\t\t\t\t\t\t([name]) => name === 'byPk'\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tconst keyFields = byPkIndex && byPkIndex[1];\n\t\t\t\t\t\t\tconst keyFieldSelectionSet = keyFields?.join(' ');\n\n\t\t\t\t\t\t\t// We rely on `_deleted` when we process the sync query (e.g. in batchSave in the adapters)\n\t\t\t\t\t\t\tresult.push(`${name} { ${keyFieldSelectionSet} _deleted }`);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// backwards-compatability for schema generated prior to custom primary key support\n\t\t\t\t\t\t\tresult.push(`${name} { id _deleted }`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Invalid connection type ${connectionType}`);\n\t\t\t}\n\t\t});\n\n\treturn result;\n}\n\nfunction getNonModelFields(\n\tnamespace: SchemaNamespace,\n\tmodelDefinition: SchemaModel | SchemaNonModel\n): string[] {\n\tconst result: string[] = [];\n\n\tObject.values(modelDefinition.fields).forEach(({ name, type }) => {\n\t\tif (isNonModelFieldType(type)) {\n\t\t\tconst typeDefinition = namespace.nonModels![type.nonModel];\n\t\t\tconst scalarFields = Object.values(getScalarFields(typeDefinition)).map(\n\t\t\t\t({ name }) => name\n\t\t\t);\n\n\t\t\tconst nested: string[] = [];\n\t\t\tObject.values(typeDefinition.fields).forEach(field => {\n\t\t\t\tconst { type, name } = field;\n\n\t\t\t\tif (isNonModelFieldType(type)) {\n\t\t\t\t\tconst typeDefinition = namespace.nonModels![type.nonModel];\n\t\t\t\t\tnested.push(\n\t\t\t\t\t\t`${name} { ${generateSelectionSet(namespace, typeDefinition)} }`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tresult.push(`${name} { ${scalarFields.join(' ')} ${nested.join(' ')} }`);\n\t\t}\n\t});\n\n\treturn result;\n}\n\nexport function getAuthorizationRules(\n\tmodelDefinition: SchemaModel\n): AuthorizationRule[] {\n\t// Searching for owner authorization on attributes\n\tconst authConfig = ([] as ModelAttributes)\n\t\t.concat(modelDefinition.attributes || [])\n\t\t.find(attr => attr && attr.type === 'auth');\n\n\tconst { properties: { rules = [] } = {} } = authConfig || {};\n\n\tconst resultRules: AuthorizationRule[] = [];\n\t// Multiple rules can be declared for allow: owner\n\trules.forEach(rule => {\n\t\t// setting defaults for backwards compatibility with old cli\n\t\tconst {\n\t\t\tidentityClaim = 'cognito:username',\n\t\t\townerField = 'owner',\n\t\t\toperations = ['create', 'update', 'delete', 'read'],\n\t\t\tprovider = 'userPools',\n\t\t\tgroupClaim = 'cognito:groups',\n\t\t\tallow: authStrategy = 'iam',\n\t\t\tgroups = [],\n\t\t} = rule;\n\n\t\tconst isReadAuthorized = operations.includes('read');\n\t\tconst isOwnerAuth = authStrategy === 'owner';\n\n\t\tif (!isReadAuthorized && !isOwnerAuth) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst authRule: AuthorizationRule = {\n\t\t\tidentityClaim,\n\t\t\townerField,\n\t\t\tprovider,\n\t\t\tgroupClaim,\n\t\t\tauthStrategy,\n\t\t\tgroups,\n\t\t\tareSubscriptionsPublic: false,\n\t\t};\n\n\t\tif (isOwnerAuth) {\n\t\t\t// look for the subscription level override\n\t\t\t// only pay attention to the public level\n\t\t\tconst modelConfig = ([] as ModelAttributes)\n\t\t\t\t.concat(modelDefinition.attributes || [])\n\t\t\t\t.find(attr => attr && attr.type === 'model');\n\n\t\t\t// find the subscriptions level. ON is default\n\t\t\tconst { properties: { subscriptions: { level = 'on' } = {} } = {} } =\n\t\t\t\tmodelConfig || {};\n\n\t\t\t// treat subscriptions as public for owner auth with unprotected reads\n\t\t\t// when `read` is omitted from `operations`\n\t\t\tauthRule.areSubscriptionsPublic =\n\t\t\t\t!operations.includes('read') || level === 'public';\n\t\t}\n\n\t\tif (isOwnerAuth) {\n\t\t\t// owner rules has least priority\n\t\t\tresultRules.push(authRule);\n\t\t\treturn;\n\t\t}\n\n\t\tresultRules.unshift(authRule);\n\t});\n\n\treturn resultRules;\n}\n\nexport function buildSubscriptionGraphQLOperation(\n\tnamespace: SchemaNamespace,\n\tmodelDefinition: SchemaModel,\n\ttransformerMutationType: TransformerMutationType,\n\tisOwnerAuthorization: boolean,\n\townerField: string\n): [TransformerMutationType, string, string] {\n\tconst selectionSet = generateSelectionSet(namespace, modelDefinition);\n\n\tconst { name: typeName, pluralName: pluralTypeName } = modelDefinition;\n\n\tconst opName = `on${transformerMutationType}${typeName}`;\n\tlet docArgs = '';\n\tlet opArgs = '';\n\n\tif (isOwnerAuthorization) {\n\t\tdocArgs = `($${ownerField}: String!)`;\n\t\topArgs = `(${ownerField}: $${ownerField})`;\n\t}\n\n\treturn [\n\t\ttransformerMutationType,\n\t\topName,\n\t\t`subscription operation${docArgs}{\n\t\t\t${opName}${opArgs}{\n\t\t\t\t${selectionSet}\n\t\t\t}\n\t\t}`,\n\t];\n}\n\nexport function buildGraphQLOperation(\n\tnamespace: SchemaNamespace,\n\tmodelDefinition: SchemaModel,\n\tgraphQLOpType: keyof typeof GraphQLOperationType\n): [TransformerMutationType, string, string][] {\n\tlet selectionSet = generateSelectionSet(namespace, modelDefinition);\n\n\tconst { name: typeName, pluralName: pluralTypeName } = modelDefinition;\n\n\tlet operation: string;\n\tlet documentArgs: string;\n\tlet operationArgs: string;\n\tlet transformerMutationType: TransformerMutationType;\n\n\tswitch (graphQLOpType) {\n\t\tcase 'LIST':\n\t\t\toperation = `sync${pluralTypeName}`;\n\t\t\tdocumentArgs = `($limit: Int, $nextToken: String, $lastSync: AWSTimestamp, $filter: Model${typeName}FilterInput)`;\n\t\t\toperationArgs =\n\t\t\t\t'(limit: $limit, nextToken: $nextToken, lastSync: $lastSync, filter: $filter)';\n\t\t\tselectionSet = `items {\n\t\t\t\t\t\t\t${selectionSet}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnextToken\n\t\t\t\t\t\tstartedAt`;\n\t\t\tbreak;\n\t\tcase 'CREATE':\n\t\t\toperation = `create${typeName}`;\n\t\t\tdocumentArgs = `($input: Create${typeName}Input!)`;\n\t\t\toperationArgs = '(input: $input)';\n\t\t\ttransformerMutationType = TransformerMutationType.CREATE;\n\t\t\tbreak;\n\t\tcase 'UPDATE':\n\t\t\toperation = `update${typeName}`;\n\t\t\tdocumentArgs = `($input: Update${typeName}Input!, $condition: Model${typeName}ConditionInput)`;\n\t\t\toperationArgs = '(input: $input, condition: $condition)';\n\t\t\ttransformerMutationType = TransformerMutationType.UPDATE;\n\t\t\tbreak;\n\t\tcase 'DELETE':\n\t\t\toperation = `delete${typeName}`;\n\t\t\tdocumentArgs = `($input: Delete${typeName}Input!, $condition: Model${typeName}ConditionInput)`;\n\t\t\toperationArgs = '(input: $input, condition: $condition)';\n\t\t\ttransformerMutationType = TransformerMutationType.DELETE;\n\t\t\tbreak;\n\t\tcase 'GET':\n\t\t\toperation = `get${typeName}`;\n\t\t\tdocumentArgs = `($id: ID!)`;\n\t\t\toperationArgs = '(id: $id)';\n\t\t\ttransformerMutationType = TransformerMutationType.GET;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new Error(`Invalid graphQlOpType ${graphQLOpType}`);\n\t}\n\n\treturn [\n\t\t[\n\t\t\ttransformerMutationType!,\n\t\t\toperation!,\n\t\t\t`${GraphQLOperationType[graphQLOpType]} operation${documentArgs}{\n\t\t${operation!}${operationArgs}{\n\t\t\t${selectionSet}\n\t\t}\n\t}`,\n\t\t],\n\t];\n}\n\nexport function createMutationInstanceFromModelOperation<\n\tT extends PersistentModel\n>(\n\trelationships: RelationshipType,\n\tmodelDefinition: SchemaModel,\n\topType: OpType,\n\tmodel: PersistentModelConstructor<T>,\n\telement: T,\n\tcondition: GraphQLCondition,\n\tMutationEventConstructor: PersistentModelConstructor<MutationEvent>,\n\tmodelInstanceCreator: ModelInstanceCreator,\n\tid?: string\n): MutationEvent {\n\tlet operation: TransformerMutationType;\n\n\tswitch (opType) {\n\t\tcase OpType.INSERT:\n\t\t\toperation = TransformerMutationType.CREATE;\n\t\t\tbreak;\n\t\tcase OpType.UPDATE:\n\t\t\toperation = TransformerMutationType.UPDATE;\n\t\t\tbreak;\n\t\tcase OpType.DELETE:\n\t\t\toperation = TransformerMutationType.DELETE;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new Error(`Invalid opType ${opType}`);\n\t}\n\n\t// stringify nested objects of type AWSJSON\n\t// this allows us to return parsed JSON to users (see `castInstanceType()` in datastore.ts),\n\t// but still send the object correctly over the wire\n\tconst replacer = (k, v) => {\n\t\tconst isAWSJSON =\n\t\t\tk &&\n\t\t\tv !== null &&\n\t\t\ttypeof v === 'object' &&\n\t\t\tmodelDefinition.fields[k] &&\n\t\t\tmodelDefinition.fields[k].type === 'AWSJSON';\n\n\t\tif (isAWSJSON) {\n\t\t\treturn JSON.stringify(v);\n\t\t}\n\t\treturn v;\n\t};\n\n\tconst modelId = getIdentifierValue(modelDefinition, element);\n\tconst optionalId = OpType.INSERT && id ? { id } : {};\n\n\tconst mutationEvent = modelInstanceCreator(MutationEventConstructor, {\n\t\t...optionalId,\n\t\tdata: JSON.stringify(element, replacer),\n\t\tmodelId,\n\t\tmodel: model.name,\n\t\toperation: operation!,\n\t\tcondition: JSON.stringify(condition),\n\t});\n\n\treturn mutationEvent;\n}\n\nexport function predicateToGraphQLCondition(\n\tpredicate: PredicatesGroup<any>,\n\tmodelDefinition: SchemaModel\n): GraphQLCondition {\n\tconst result = {};\n\n\tif (!predicate || !Array.isArray(predicate.predicates)) {\n\t\treturn result;\n\t}\n\n\t// This is compatible with how the GQL Transform currently generates the Condition Input,\n\t// i.e. any PK and SK fields are omitted and can't be used as conditions.\n\t// However, I think this limits usability.\n\t// What if we want to delete all records where SK > some value\n\t// Or all records where PK = some value but SKs are different values\n\n\t// TODO: if the Transform gets updated we'll need to modify this logic to only omit\n\t// key fields from the predicate/condition when ALL of the keyFields are present and using `eq` operators\n\n\tconst keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n\treturn predicateToGraphQLFilter(predicate, keyFields) as GraphQLCondition;\n}\n\nexport function predicateToGraphQLFilter(\n\tpredicatesGroup: PredicatesGroup<any>,\n\tfieldsToOmit: string[] = []\n): GraphQLFilter {\n\tconst result: GraphQLFilter = {};\n\n\tif (!predicatesGroup || !Array.isArray(predicatesGroup.predicates)) {\n\t\treturn result;\n\t}\n\n\tconst { type, predicates } = predicatesGroup;\n\tconst isList = type === 'and' || type === 'or';\n\n\tresult[type] = isList ? [] : {};\n\n\tconst appendToFilter = value =>\n\t\tisList ? result[type].push(value) : (result[type] = value);\n\n\tpredicates.forEach(predicate => {\n\t\tif (isPredicateObj(predicate)) {\n\t\t\tconst { field, operator, operand } = predicate;\n\n\t\t\tif (fieldsToOmit.includes(field as string)) return;\n\n\t\t\tconst gqlField: GraphQLField = {\n\t\t\t\t[field]: { [operator]: operand },\n\t\t\t};\n\n\t\t\tappendToFilter(gqlField);\n\t\t\treturn;\n\t\t}\n\n\t\tconst child = predicateToGraphQLFilter(predicate, fieldsToOmit);\n\t\tObject.keys(child).length > 0 && appendToFilter(child);\n\t});\n\n\tif (isList) {\n\t\tif (result[type].length === 0) return {};\n\t} else {\n\t\tif (Object.keys(result[type]).length === 0) return {};\n\t}\n\n\treturn result;\n}\n\nexport function getUserGroupsFromToken(\n\ttoken: { [field: string]: any },\n\trule: AuthorizationRule\n): string[] {\n\t// validate token against groupClaim\n\tlet userGroups: string[] | string = token[rule.groupClaim] || [];\n\n\tif (typeof userGroups === 'string') {\n\t\tlet parsedGroups;\n\t\ttry {\n\t\t\tparsedGroups = JSON.parse(userGroups);\n\t\t} catch (e) {\n\t\t\tparsedGroups = userGroups;\n\t\t}\n\t\tuserGroups = [].concat(parsedGroups);\n\t}\n\n\treturn userGroups;\n}\n\nexport async function getModelAuthModes({\n\tauthModeStrategy,\n\tdefaultAuthMode,\n\tmodelName,\n\tschema,\n}: {\n\tauthModeStrategy: AuthModeStrategy;\n\tdefaultAuthMode: GRAPHQL_AUTH_MODE;\n\tmodelName: string;\n\tschema: InternalSchema;\n}): Promise<{\n\t[key in ModelOperation]: GRAPHQL_AUTH_MODE[];\n}> {\n\tconst operations = Object.values(ModelOperation);\n\n\tconst modelAuthModes: {\n\t\t[key in ModelOperation]: GRAPHQL_AUTH_MODE[];\n\t} = {\n\t\tCREATE: [],\n\t\tREAD: [],\n\t\tUPDATE: [],\n\t\tDELETE: [],\n\t};\n\n\ttry {\n\t\tawait Promise.all(\n\t\t\toperations.map(async operation => {\n\t\t\t\tconst authModes = await authModeStrategy({\n\t\t\t\t\tschema,\n\t\t\t\t\tmodelName,\n\t\t\t\t\toperation,\n\t\t\t\t});\n\n\t\t\t\tif (typeof authModes === 'string') {\n\t\t\t\t\tmodelAuthModes[operation] = [authModes];\n\t\t\t\t} else if (Array.isArray(authModes) && authModes.length) {\n\t\t\t\t\tmodelAuthModes[operation] = authModes;\n\t\t\t\t} else {\n\t\t\t\t\t// Use default auth mode if nothing is returned from authModeStrategy\n\t\t\t\t\tmodelAuthModes[operation] = [defaultAuthMode];\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t} catch (error) {\n\t\tlogger.debug(`Error getting auth modes for model: ${modelName}`, error);\n\t}\n\treturn modelAuthModes;\n}\n\nexport function getForbiddenError(error) {\n\tconst forbiddenErrorMessages = [\n\t\t'Request failed with status code 401',\n\t\t'Request failed with status code 403',\n\t];\n\tlet forbiddenError;\n\tif (error && error.errors) {\n\t\tforbiddenError = (error.errors as [any]).find(err =>\n\t\t\tforbiddenErrorMessages.includes(err.message)\n\t\t);\n\t} else if (error && error.message) {\n\t\tforbiddenError = error;\n\t}\n\n\tif (forbiddenError) {\n\t\treturn forbiddenError.message;\n\t}\n\treturn null;\n}\n\nexport function getClientSideAuthError(error) {\n\tconst clientSideAuthErrors = Object.values(GraphQLAuthError);\n\tconst clientSideError =\n\t\terror &&\n\t\terror.message &&\n\t\tclientSideAuthErrors.find(clientError =>\n\t\t\terror.message.includes(clientError)\n\t\t);\n\treturn clientSideError || null;\n}\n\nexport async function getTokenForCustomAuth(\n\tauthMode: GRAPHQL_AUTH_MODE,\n\tamplifyConfig: Record<string, any> = {}\n): Promise<string | undefined> {\n\tif (authMode === GRAPHQL_AUTH_MODE.AWS_LAMBDA) {\n\t\tconst {\n\t\t\tauthProviders: { functionAuthProvider } = { functionAuthProvider: null },\n\t\t} = amplifyConfig;\n\t\tif (functionAuthProvider && typeof functionAuthProvider === 'function') {\n\t\t\ttry {\n\t\t\t\tconst { token } = await functionAuthProvider();\n\t\t\t\treturn token;\n\t\t\t} catch (error) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Error retrieving token from \\`functionAuthProvider\\`: ${error}`\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\t// TODO: add docs link once available\n\t\t\tthrow new Error(\n\t\t\t\t`You must provide a \\`functionAuthProvider\\` function to \\`DataStore.configure\\` when using ${GRAPHQL_AUTH_MODE.AWS_LAMBDA}`\n\t\t\t);\n\t\t}\n\t}\n}\n\n// Util that takes a modelDefinition and model and returns either the id value(s) or the custom primary key value(s)\nexport function getIdentifierValue(\n\tmodelDefinition: SchemaModel,\n\tmodel: ModelInstanceMetadata | PersistentModel\n): string {\n\tconst pkFieldNames = extractPrimaryKeyFieldNames(modelDefinition);\n\n\tconst idOrPk = pkFieldNames.map(f => model[f]).join(IDENTIFIER_KEY_SEPARATOR);\n\n\treturn idOrPk;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}