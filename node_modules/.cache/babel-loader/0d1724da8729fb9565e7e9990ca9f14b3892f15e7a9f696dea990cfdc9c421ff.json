{"ast":null,"code":"var _jsxFileName = \"/Users/ericli/Desktop/pill2/src/components/Forms/ListingForm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Dropzone from \"react-dropzone\";\nimport { S3Client, PutObjectCommand } from \"@aws-sdk/client-s3\";\nimport { BsCloudUpload } from \"react-icons/bs\";\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-google-places-autocomplete\";\n\n// Configure the AWS SDK\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst s3 = new S3Client({\n  region: \"us-east-1\",\n  // Replace with your desired region\n  credentials: {\n    accessKeyId: \"YOUR_ACCESS_KEY\",\n    secretAccessKey: \"YOUR_SECRET_ACCESS_KEY\"\n  }\n});\n\n// Add your Google Maps API key here\nconst GOOGLE_MAPS_API_KEY = \"YOUR_GOOGLE_MAPS_API_KEY\";\nconst ImageUpload = () => {\n  _s();\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [cost, setCost] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const handleRemoveFile = index => {\n    const newSelectedFiles = [...selectedFiles];\n    newSelectedFiles.splice(index, 1);\n    setSelectedFiles(newSelectedFiles);\n  };\n  const handleFileDrop = acceptedFiles => {\n    if (acceptedFiles.length === 0) {\n      alert(\"Please select a file.\");\n      return;\n    }\n    const file = acceptedFiles[0];\n    if (!file.name) {\n      alert(\"Invalid file. Please select a valid file.\");\n      return;\n    }\n    if (acceptedFiles.length > 1) {\n      alert(\"You can only add one file at a time!\");\n    } else {\n      const fileExtension = file.name.split(\".\").pop();\n      const acceptedExtensions = [\"png\"];\n      if (acceptedExtensions.includes(fileExtension)) {\n        setSelectedFiles(prevFiles => [...prevFiles, file]);\n      } else {\n        alert(\"Invalid file type. Only PNG files are allowed.\");\n      }\n    }\n  };\n  const handleUpload = async () => {\n    for (const file of selectedFiles) {\n      const params = {\n        Bucket: \"YOUR_BUCKET_NAME\",\n        Key: file.name,\n        Body: file,\n        ACL: \"public-read\"\n      };\n      try {\n        const data = await s3.send(new PutObjectCommand(params));\n        console.log(\"Image uploaded successfully:\", data);\n      } catch (err) {\n        console.log(\"Error:\", err);\n      }\n    }\n  };\n  const handleAddressSelect = selected => {\n    setAddress(selected.label);\n    geocodeByAddress(selected.label).then(results => getLatLng(results[0])).then(latLng => {\n      console.log(\"Latitude:\", latLng.lat);\n      console.log(\"Longitude:\", latLng.lng);\n    }).catch(error => console.error(\"Error:\", error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      height: \"100vh\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Dropzone, {\n        onDrop: handleFileDrop,\n        multiple: true,\n        maxSize: 10 * 1024 * 1024,\n        children: _ref => {\n          let {\n            getRootProps,\n            getInputProps\n          } = _ref;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            ...getRootProps(),\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              ...getInputProps()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 15\n            }, this), selectedFiles.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: selectedFiles.map((file, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: file.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 111,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleRemoveFile(index),\n                  children: \"Remove\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 112,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                children: \"Create a new listing\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(BsCloudUpload, {\n                size: 48\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: \"Drag and drop images here or click to select\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Cost:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: cost,\n            onChange: e => setCost(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Address:\", /*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n            value: address,\n            onSelect: handleAddressSelect,\n            apiKey: GOOGLE_MAPS_API_KEY\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Email:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: email,\n            onChange: e => setEmail(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpload,\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(ImageUpload, \"SorOgT8LmMk8B+/4W+u574XNLQA=\");\n_c = ImageUpload;\nexport default ImageUpload;\nvar _c;\n$RefreshReg$(_c, \"ImageUpload\");","map":{"version":3,"names":["React","useState","Dropzone","S3Client","PutObjectCommand","BsCloudUpload","PlacesAutocomplete","geocodeByAddress","getLatLng","jsxDEV","_jsxDEV","s3","region","credentials","accessKeyId","secretAccessKey","GOOGLE_MAPS_API_KEY","ImageUpload","_s","selectedFiles","setSelectedFiles","cost","setCost","address","setAddress","email","setEmail","handleRemoveFile","index","newSelectedFiles","splice","handleFileDrop","acceptedFiles","length","alert","file","name","fileExtension","split","pop","acceptedExtensions","includes","prevFiles","handleUpload","params","Bucket","Key","Body","ACL","data","send","console","log","err","handleAddressSelect","selected","label","then","results","latLng","lat","lng","catch","error","style","display","justifyContent","alignItems","height","children","onDrop","multiple","maxSize","_ref","getRootProps","getInputProps","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","size","type","value","onChange","e","target","onSelect","apiKey","_c","$RefreshReg$"],"sources":["/Users/ericli/Desktop/pill2/src/components/Forms/ListingForm.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport Dropzone from \"react-dropzone\";\nimport { S3Client, PutObjectCommand } from \"@aws-sdk/client-s3\";\nimport { BsCloudUpload } from \"react-icons/bs\";\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from \"react-google-places-autocomplete\";\n\n// Configure the AWS SDK\nconst s3 = new S3Client({\n  region: \"us-east-1\", // Replace with your desired region\n  credentials: {\n    accessKeyId: \"YOUR_ACCESS_KEY\",\n    secretAccessKey: \"YOUR_SECRET_ACCESS_KEY\",\n  },\n});\n\n// Add your Google Maps API key here\nconst GOOGLE_MAPS_API_KEY = \"YOUR_GOOGLE_MAPS_API_KEY\";\n\nconst ImageUpload = () => {\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [cost, setCost] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const handleRemoveFile = (index) => {\n    const newSelectedFiles = [...selectedFiles];\n    newSelectedFiles.splice(index, 1);\n    setSelectedFiles(newSelectedFiles);\n  };\n\n  const handleFileDrop = (acceptedFiles) => {\n    if (acceptedFiles.length === 0) {\n      alert(\"Please select a file.\");\n      return;\n    }\n\n    const file = acceptedFiles[0];\n\n    if (!file.name) {\n      alert(\"Invalid file. Please select a valid file.\");\n      return;\n    }\n\n    if (acceptedFiles.length > 1) {\n      alert(\"You can only add one file at a time!\");\n    } else {\n      const fileExtension = file.name.split(\".\").pop();\n      const acceptedExtensions = [\"png\"];\n\n      if (acceptedExtensions.includes(fileExtension)) {\n        setSelectedFiles((prevFiles) => [...prevFiles, file]);\n      } else {\n        alert(\"Invalid file type. Only PNG files are allowed.\");\n      }\n    }\n  };\n\n  const handleUpload = async () => {\n    for (const file of selectedFiles) {\n      const params = {\n        Bucket: \"YOUR_BUCKET_NAME\",\n        Key: file.name,\n        Body: file,\n        ACL: \"public-read\",\n      };\n\n      try {\n        const data = await s3.send(new PutObjectCommand(params));\n        console.log(\"Image uploaded successfully:\", data);\n      } catch (err) {\n        console.log(\"Error:\", err);\n      }\n    }\n  };\n\n  const handleAddressSelect = (selected) => {\n    setAddress(selected.label);\n    geocodeByAddress(selected.label)\n      .then((results) => getLatLng(results[0]))\n      .then((latLng) => {\n        console.log(\"Latitude:\", latLng.lat);\n        console.log(\"Longitude:\", latLng.lng);\n      })\n      .catch((error) => console.error(\"Error:\", error));\n  };\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"100vh\",\n      }}\n    >\n      <div>\n        <Dropzone\n          onDrop={handleFileDrop}\n          multiple={true}\n          maxSize={10 * 1024 * 1024}\n        >\n          {({ getRootProps, getInputProps }) => (\n            <div {...getRootProps()}>\n              <input {...getInputProps()} />\n              {selectedFiles.length > 0 ? (\n                <div>\n                  {selectedFiles.map((file, index) => (\n                    <div key={index}>\n                      <span>{file.name}</span>\n                      <button onClick={() => handleRemoveFile(index)}>\n                        Remove\n                      </button>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div>\n                  <h1>Create a new listing</h1>\n                  <BsCloudUpload size={48} />\n                  <div>Drag and drop images here or click to select</div>\n                </div>\n              )}\n            </div>\n          )}\n        </Dropzone>\n        <form>\n          <label>\n            Cost:\n            <input\n              type=\"text\"\n              value={cost}\n              onChange={(e) => setCost(e.target.value)}\n            />\n          </label>\n          <label>\n            Address:\n            <PlacesAutocomplete\n              value={address}\n              onSelect={handleAddressSelect}\n              apiKey={GOOGLE_MAPS_API_KEY}\n            />\n          </label>\n          <label>\n            Email:\n            <input\n              type=\"text\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n          </label>\n        </form>\n        <button onClick={handleUpload}>Upload</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ImageUpload;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}