{"ast":null,"code":"import { __assign, __read, __spread, __values } from \"tslib\";\nimport { extractPrimaryKeyFieldNames, extractPrimaryKeyValues } from '../util';\nexport { ModelSortPredicateCreator } from './sort';\nvar predicatesAllSet = new WeakSet();\nexport function isPredicatesAll(predicate) {\n  return predicatesAllSet.has(predicate);\n}\nvar groupKeys = new Set(['and', 'or', 'not']);\nvar isGroup = function (o) {\n  var keys = __spread(Object.keys(o));\n  return keys.length === 1 && groupKeys.has(keys[0]);\n};\nexport var comparisonKeys = new Set(['eq', 'ne', 'gt', 'lt', 'ge', 'le', 'contains', 'notContains', 'beginsWith', 'between']);\nvar isComparison = function (o) {\n  var keys = __spread(Object.keys(o));\n  return !Array.isArray(o) && keys.length === 1 && comparisonKeys.has(keys[0]);\n};\nvar isValid = function (o) {\n  if (Array.isArray(o)) {\n    return o.every(function (v) {\n      return isValid(v);\n    });\n  } else {\n    return Object.keys(o).length === 1;\n  }\n};\n// This symbol is not used at runtime, only its type (unique symbol)\nexport var PredicateAll = Symbol('A predicate that matches all records');\nvar Predicates = /** @class */function () {\n  function Predicates() {}\n  Object.defineProperty(Predicates, \"ALL\", {\n    get: function () {\n      var predicate = function (c) {\n        return c;\n      };\n      predicatesAllSet.add(predicate);\n      return predicate;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Predicates;\n}();\nexport { Predicates };\nvar ModelPredicateCreator = /** @class */function () {\n  function ModelPredicateCreator() {}\n  ModelPredicateCreator.createPredicateBuilder = function (modelDefinition) {\n    var modelName = modelDefinition.name;\n    var fieldNames = new Set(Object.keys(modelDefinition.fields));\n    var handler;\n    var predicate = new Proxy({}, handler = {\n      get: function (_, propertyKey, self) {\n        var groupType = propertyKey;\n        switch (groupType) {\n          case 'and':\n          case 'or':\n          case 'not':\n            var result_1 = function (newPredicate) {\n              var group = {\n                type: groupType,\n                predicates: []\n              };\n              // Create a new recorder\n              var tmpPredicateRecorder = new Proxy({}, handler);\n              // Set the recorder group\n              ModelPredicateCreator.predicateGroupsMap.set(tmpPredicateRecorder, group);\n              // Apply the predicates to the recorder (this is the step that records the changes)\n              newPredicate(tmpPredicateRecorder);\n              // Push the group to the top-level recorder\n              ModelPredicateCreator.predicateGroupsMap.get(self).predicates.push(group);\n              return self;\n            };\n            return result_1;\n          default:\n          // intentionally blank.\n        }\n\n        var field = propertyKey;\n        if (!fieldNames.has(field)) {\n          throw new Error(\"Invalid field for model. field: \" + field + \", model: \" + modelName);\n        }\n        var result = function (operator, operand) {\n          ModelPredicateCreator.predicateGroupsMap.get(self).predicates.push({\n            field: field,\n            operator: operator,\n            operand: operand\n          });\n          return self;\n        };\n        return result;\n      }\n    });\n    var group = {\n      type: 'and',\n      predicates: []\n    };\n    ModelPredicateCreator.predicateGroupsMap.set(predicate, group);\n    return predicate;\n  };\n  ModelPredicateCreator.isValidPredicate = function (predicate) {\n    return ModelPredicateCreator.predicateGroupsMap.has(predicate);\n  };\n  ModelPredicateCreator.getPredicates = function (predicate, throwOnInvalid) {\n    if (throwOnInvalid === void 0) {\n      throwOnInvalid = true;\n    }\n    if (throwOnInvalid && !ModelPredicateCreator.isValidPredicate(predicate)) {\n      throw new Error('The predicate is not valid');\n    }\n    return ModelPredicateCreator.predicateGroupsMap.get(predicate);\n  };\n  // transforms cb-style predicate into Proxy\n  ModelPredicateCreator.createFromExisting = function (modelDefinition, existing) {\n    if (!existing || !modelDefinition) {\n      return undefined;\n    }\n    return existing(ModelPredicateCreator.createPredicateBuilder(modelDefinition));\n  };\n  ModelPredicateCreator.createForSingleField = function (modelDefinition, fieldName, value) {\n    return ModelPredicateCreator.createPredicateBuilder(modelDefinition)[fieldName]('eq', value);\n  };\n  ModelPredicateCreator.createForPk = function (modelDefinition, model) {\n    var keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n    var keyValues = extractPrimaryKeyValues(model, keyFields);\n    var modelPredicate = ModelPredicateCreator.createPredicateBuilder(modelDefinition);\n    keyFields.forEach(function (field, idx) {\n      var operand = keyValues[idx];\n      modelPredicate = modelPredicate[field]('eq', operand);\n    });\n    return modelPredicate;\n  };\n  /**\n   * Searches a `Model` table for records matching the given equalities object.\n   *\n   * This only matches against fields given in the equalities object. No other\n   * fields are tested by the predicate.\n   *\n   * @param modelDefinition The model we need a predicate for.\n   * @param flatEqualities An object holding field equalities to search for.\n   */\n  ModelPredicateCreator.createFromFlatEqualities = function (modelDefinition, flatEqualities) {\n    var e_1, _a;\n    var predicate = ModelPredicateCreator.createPredicateBuilder(modelDefinition);\n    try {\n      for (var _b = __values(Object.entries(flatEqualities)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var _d = __read(_c.value, 2),\n          field = _d[0],\n          value = _d[1];\n        predicate = predicate[field]('eq', value);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n    return predicate;\n  };\n  ModelPredicateCreator.createGroupFromExisting = function (modelDefinition, group, existingPredicates) {\n    var outer = ModelPredicateCreator.createPredicateBuilder(modelDefinition);\n    outer = outer[group](function (seed) {\n      var e_2, _a;\n      var _b;\n      var inner = seed;\n      try {\n        for (var existingPredicates_1 = __values(existingPredicates), existingPredicates_1_1 = existingPredicates_1.next(); !existingPredicates_1_1.done; existingPredicates_1_1 = existingPredicates_1.next()) {\n          var existing = existingPredicates_1_1.value;\n          if (typeof existing === 'function') {\n            inner = existing(inner);\n          } else {\n            (_b = ModelPredicateCreator.predicateGroupsMap.get(inner)) === null || _b === void 0 ? void 0 : _b.predicates.push(ModelPredicateCreator.predicateGroupsMap.get(existing));\n          }\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (existingPredicates_1_1 && !existingPredicates_1_1.done && (_a = existingPredicates_1.return)) _a.call(existingPredicates_1);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n      return inner;\n    });\n    return outer;\n  };\n  ModelPredicateCreator.transformGraphQLtoPredicateAST = function (gql) {\n    var _this = this;\n    if (!isValid(gql)) {\n      throw new Error('Invalid QGL AST: ' + gql);\n    }\n    if (isGroup(gql)) {\n      var groupkey = Object.keys(gql)[0];\n      var children = this.transformGraphQLtoPredicateAST(gql[groupkey]);\n      return {\n        type: groupkey,\n        predicates: Array.isArray(children) ? children : [children]\n      };\n    } else if (isComparison(gql)) {\n      var operatorKey = Object.keys(gql)[0];\n      return {\n        operator: operatorKey,\n        operand: gql[operatorKey]\n      };\n    } else {\n      if (Array.isArray(gql)) {\n        return gql.map(function (o) {\n          return _this.transformGraphQLtoPredicateAST(o);\n        });\n      } else {\n        var fieldKey = Object.keys(gql)[0];\n        return __assign({\n          field: fieldKey\n        }, this.transformGraphQLtoPredicateAST(gql[fieldKey]));\n      }\n    }\n  };\n  ModelPredicateCreator.createFromAST = function (modelDefinition, ast) {\n    var predicate = ModelPredicateCreator.createPredicateBuilder(modelDefinition);\n    ModelPredicateCreator.predicateGroupsMap.set(predicate, this.transformGraphQLtoPredicateAST(ast));\n    return predicate;\n  };\n  ModelPredicateCreator.predicateGroupsMap = new WeakMap();\n  return ModelPredicateCreator;\n}();\nexport { ModelPredicateCreator };","map":{"version":3,"names":["extractPrimaryKeyFieldNames","extractPrimaryKeyValues","ModelSortPredicateCreator","predicatesAllSet","WeakSet","isPredicatesAll","predicate","has","groupKeys","Set","isGroup","o","keys","__spread","Object","length","comparisonKeys","isComparison","Array","isArray","isValid","every","v","PredicateAll","Symbol","Predicates","defineProperty","get","c","add","ModelPredicateCreator","createPredicateBuilder","modelDefinition","modelName","name","fieldNames","fields","handler","Proxy","_","propertyKey","self","groupType","result_1","newPredicate","group","type","predicates","tmpPredicateRecorder","predicateGroupsMap","set","push","field","Error","result","operator","operand","isValidPredicate","getPredicates","throwOnInvalid","createFromExisting","existing","undefined","createForSingleField","fieldName","value","createForPk","model","keyFields","keyValues","modelPredicate","forEach","idx","createFromFlatEqualities","flatEqualities","_b","__values","entries","_c","next","done","_d","__read","createGroupFromExisting","existingPredicates","outer","seed","inner","existingPredicates_1","existingPredicates_1_1","transformGraphQLtoPredicateAST","gql","_this","groupkey","children","operatorKey","map","fieldKey","__assign","createFromAST","ast","WeakMap"],"sources":["/Users/ericli/node_modules/@aws-amplify/datastore/src/predicates/index.ts"],"sourcesContent":["import {\n\tAllOperators,\n\tModelPredicate,\n\tPersistentModel,\n\tPredicateExpression,\n\tPredicateGroups,\n\tPredicatesGroup,\n\tProducerModelPredicate,\n\tSchemaModel,\n} from '../types';\nimport { extractPrimaryKeyFieldNames, extractPrimaryKeyValues } from '../util';\n\nexport { ModelSortPredicateCreator } from './sort';\n\nconst predicatesAllSet = new WeakSet<ProducerModelPredicate<any>>();\n\nexport function isPredicatesAll(\n\tpredicate: any\n): predicate is typeof PredicateAll {\n\treturn predicatesAllSet.has(predicate);\n}\n\nconst groupKeys = new Set(['and', 'or', 'not']);\nconst isGroup = o => {\n\tconst keys = [...Object.keys(o)];\n\treturn keys.length === 1 && groupKeys.has(keys[0]);\n};\n\nexport const comparisonKeys = new Set([\n\t'eq',\n\t'ne',\n\t'gt',\n\t'lt',\n\t'ge',\n\t'le',\n\t'contains',\n\t'notContains',\n\t'beginsWith',\n\t'between',\n]);\nconst isComparison = o => {\n\tconst keys = [...Object.keys(o)];\n\treturn !Array.isArray(o) && keys.length === 1 && comparisonKeys.has(keys[0]);\n};\n\nconst isValid = o => {\n\tif (Array.isArray(o)) {\n\t\treturn o.every(v => isValid(v));\n\t} else {\n\t\treturn Object.keys(o).length === 1;\n\t}\n};\n\n// This symbol is not used at runtime, only its type (unique symbol)\nexport const PredicateAll = Symbol('A predicate that matches all records');\n\nexport class Predicates {\n\tpublic static get ALL(): typeof PredicateAll {\n\t\tconst predicate = <ProducerModelPredicate<any>>(c => c);\n\n\t\tpredicatesAllSet.add(predicate);\n\n\t\treturn <typeof PredicateAll>(<unknown>predicate);\n\t}\n}\n\nexport class ModelPredicateCreator {\n\tprivate static predicateGroupsMap = new WeakMap<\n\t\tModelPredicate<any>,\n\t\tPredicatesGroup<any>\n\t>();\n\n\tstatic createPredicateBuilder<T extends PersistentModel>(\n\t\tmodelDefinition: SchemaModel\n\t) {\n\t\tconst { name: modelName } = modelDefinition;\n\t\tconst fieldNames = new Set<keyof T>(Object.keys(modelDefinition.fields));\n\n\t\tlet handler: ProxyHandler<ModelPredicate<T>>;\n\n\t\tconst predicate = new Proxy(\n\t\t\t{} as ModelPredicate<T>,\n\t\t\t(handler = {\n\t\t\t\tget(\n\t\t\t\t\t_,\n\t\t\t\t\tpropertyKey,\n\t\t\t\t\tself: ModelPredicate<T>\n\t\t\t\t): PredicateExpression<T, any> {\n\t\t\t\t\tconst groupType = propertyKey as keyof PredicateGroups<T>;\n\n\t\t\t\t\tswitch (groupType) {\n\t\t\t\t\t\tcase 'and':\n\t\t\t\t\t\tcase 'or':\n\t\t\t\t\t\tcase 'not':\n\t\t\t\t\t\t\tconst result: PredicateExpression<T, any> = (\n\t\t\t\t\t\t\t\tnewPredicate: (criteria: ModelPredicate<T>) => ModelPredicate<T>\n\t\t\t\t\t\t\t) => {\n\t\t\t\t\t\t\t\tconst group: PredicatesGroup<T> = {\n\t\t\t\t\t\t\t\t\ttype: groupType,\n\t\t\t\t\t\t\t\t\tpredicates: [],\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t// Create a new recorder\n\t\t\t\t\t\t\t\tconst tmpPredicateRecorder = new Proxy(\n\t\t\t\t\t\t\t\t\t{} as ModelPredicate<T>,\n\t\t\t\t\t\t\t\t\thandler\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t// Set the recorder group\n\t\t\t\t\t\t\t\tModelPredicateCreator.predicateGroupsMap.set(\n\t\t\t\t\t\t\t\t\ttmpPredicateRecorder as any,\n\t\t\t\t\t\t\t\t\tgroup\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t// Apply the predicates to the recorder (this is the step that records the changes)\n\t\t\t\t\t\t\t\tnewPredicate(tmpPredicateRecorder);\n\n\t\t\t\t\t\t\t\t// Push the group to the top-level recorder\n\t\t\t\t\t\t\t\tModelPredicateCreator.predicateGroupsMap\n\t\t\t\t\t\t\t\t\t.get(self as any)!\n\t\t\t\t\t\t\t\t\t.predicates.push(group);\n\n\t\t\t\t\t\t\t\treturn self;\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t// intentionally blank.\n\t\t\t\t\t}\n\n\t\t\t\t\tconst field = propertyKey as keyof T;\n\n\t\t\t\t\tif (!fieldNames.has(field)) {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`Invalid field for model. field: ${field}, model: ${modelName}`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst result: PredicateExpression<T, any> = (\n\t\t\t\t\t\toperator: keyof AllOperators,\n\t\t\t\t\t\toperand: any\n\t\t\t\t\t) => {\n\t\t\t\t\t\tModelPredicateCreator.predicateGroupsMap\n\t\t\t\t\t\t\t.get(self as any)!\n\t\t\t\t\t\t\t.predicates.push({ field, operator, operand });\n\t\t\t\t\t\treturn self;\n\t\t\t\t\t};\n\t\t\t\t\treturn result;\n\t\t\t\t},\n\t\t\t})\n\t\t);\n\n\t\tconst group: PredicatesGroup<T> = {\n\t\t\ttype: 'and',\n\t\t\tpredicates: [],\n\t\t};\n\t\tModelPredicateCreator.predicateGroupsMap.set(predicate as any, group);\n\n\t\treturn predicate;\n\t}\n\n\tstatic isValidPredicate<T extends PersistentModel>(\n\t\tpredicate: any\n\t): predicate is ModelPredicate<T> {\n\t\treturn ModelPredicateCreator.predicateGroupsMap.has(predicate);\n\t}\n\n\tstatic getPredicates<T extends PersistentModel>(\n\t\tpredicate: ModelPredicate<T>,\n\t\tthrowOnInvalid: boolean = true\n\t) {\n\t\tif (throwOnInvalid && !ModelPredicateCreator.isValidPredicate(predicate)) {\n\t\t\tthrow new Error('The predicate is not valid');\n\t\t}\n\n\t\treturn ModelPredicateCreator.predicateGroupsMap.get(predicate as any);\n\t}\n\n\t// transforms cb-style predicate into Proxy\n\tstatic createFromExisting<T extends PersistentModel>(\n\t\tmodelDefinition?: SchemaModel,\n\t\texisting?: ProducerModelPredicate<T>\n\t) {\n\t\tif (!existing || !modelDefinition) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn existing(\n\t\t\tModelPredicateCreator.createPredicateBuilder(modelDefinition)\n\t\t);\n\t}\n\n\tstatic createForSingleField<T extends PersistentModel>(\n\t\tmodelDefinition: SchemaModel,\n\t\tfieldName: string,\n\t\tvalue: string\n\t) {\n\t\treturn ModelPredicateCreator.createPredicateBuilder<T>(modelDefinition)[\n\t\t\tfieldName\n\t\t](<any>'eq', <any>value);\n\t}\n\n\tstatic createForPk<T extends PersistentModel>(\n\t\tmodelDefinition: SchemaModel,\n\t\tmodel: T\n\t) {\n\t\tconst keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n\t\tconst keyValues = extractPrimaryKeyValues(model, keyFields);\n\n\t\tlet modelPredicate =\n\t\t\tModelPredicateCreator.createPredicateBuilder<T>(modelDefinition);\n\n\t\tkeyFields.forEach((field, idx) => {\n\t\t\tconst operand = keyValues[idx];\n\t\t\tmodelPredicate = modelPredicate[field](<any>'eq', <any>operand);\n\t\t});\n\n\t\treturn modelPredicate;\n\t}\n\n\t/**\n\t * Searches a `Model` table for records matching the given equalities object.\n\t *\n\t * This only matches against fields given in the equalities object. No other\n\t * fields are tested by the predicate.\n\t *\n\t * @param modelDefinition The model we need a predicate for.\n\t * @param flatEqualities An object holding field equalities to search for.\n\t */\n\tstatic createFromFlatEqualities<T extends PersistentModel>(\n\t\tmodelDefinition: SchemaModel,\n\t\tflatEqualities: Record<string, any>\n\t) {\n\t\tlet predicate =\n\t\t\tModelPredicateCreator.createPredicateBuilder<T>(modelDefinition);\n\n\t\tfor (const [field, value] of Object.entries(flatEqualities)) {\n\t\t\tpredicate = predicate[field]('eq' as any, value);\n\t\t}\n\n\t\treturn predicate;\n\t}\n\n\tstatic createGroupFromExisting<T extends PersistentModel>(\n\t\tmodelDefinition: SchemaModel,\n\t\tgroup: 'and' | 'or' | 'not',\n\t\texistingPredicates: (ProducerModelPredicate<T> | ModelPredicate<T>)[]\n\t) {\n\t\tlet outer =\n\t\t\tModelPredicateCreator.createPredicateBuilder<T>(modelDefinition);\n\n\t\touter = outer[group](seed => {\n\t\t\tlet inner = seed;\n\t\t\tfor (const existing of existingPredicates) {\n\t\t\t\tif (typeof existing === 'function') {\n\t\t\t\t\tinner = existing(inner);\n\t\t\t\t} else {\n\t\t\t\t\tModelPredicateCreator.predicateGroupsMap\n\t\t\t\t\t\t.get(inner)\n\t\t\t\t\t\t?.predicates.push(\n\t\t\t\t\t\t\tModelPredicateCreator.predicateGroupsMap.get(\n\t\t\t\t\t\t\t\texisting as ModelPredicate<T>\n\t\t\t\t\t\t\t)!\n\t\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn inner;\n\t\t});\n\n\t\treturn outer;\n\t}\n\n\tstatic transformGraphQLtoPredicateAST(gql: any) {\n\t\tif (!isValid(gql)) {\n\t\t\tthrow new Error('Invalid QGL AST: ' + gql);\n\t\t}\n\n\t\tif (isGroup(gql)) {\n\t\t\tconst groupkey = Object.keys(gql)[0];\n\t\t\tconst children = this.transformGraphQLtoPredicateAST(gql[groupkey]);\n\t\t\treturn {\n\t\t\t\ttype: groupkey,\n\t\t\t\tpredicates: Array.isArray(children) ? children : [children],\n\t\t\t};\n\t\t} else if (isComparison(gql)) {\n\t\t\tconst operatorKey = Object.keys(gql)[0];\n\t\t\treturn {\n\t\t\t\toperator: operatorKey,\n\t\t\t\toperand: gql[operatorKey],\n\t\t\t};\n\t\t} else {\n\t\t\tif (Array.isArray(gql)) {\n\t\t\t\treturn gql.map(o => this.transformGraphQLtoPredicateAST(o));\n\t\t\t} else {\n\t\t\t\tconst fieldKey = Object.keys(gql)[0];\n\t\t\t\treturn {\n\t\t\t\t\tfield: fieldKey,\n\t\t\t\t\t...this.transformGraphQLtoPredicateAST(gql[fieldKey]),\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic createFromAST(\n\t\tmodelDefinition: SchemaModel,\n\t\tast: any\n\t): ModelPredicate<any> {\n\t\tconst predicate =\n\t\t\tModelPredicateCreator.createPredicateBuilder(modelDefinition);\n\n\t\tModelPredicateCreator.predicateGroupsMap.set(\n\t\t\tpredicate,\n\t\t\tthis.transformGraphQLtoPredicateAST(ast)\n\t\t);\n\n\t\treturn predicate;\n\t}\n}\n"],"mappings":";AAUA,SAASA,2BAA2B,EAAEC,uBAAuB,QAAQ,SAAS;AAE9E,SAASC,yBAAyB,QAAQ,QAAQ;AAElD,IAAMC,gBAAgB,GAAG,IAAIC,OAAO,EAA+B;AAEnE,OAAM,SAAUC,eAAeA,CAC9BC,SAAc;EAEd,OAAOH,gBAAgB,CAACI,GAAG,CAACD,SAAS,CAAC;AACvC;AAEA,IAAME,SAAS,GAAG,IAAIC,GAAG,CAAC,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;AAC/C,IAAMC,OAAO,GAAG,SAAAA,CAAAC,CAAC;EAChB,IAAMC,IAAI,GAAAC,QAAA,CAAOC,MAAM,CAACF,IAAI,CAACD,CAAC,CAAC,CAAC;EAChC,OAAOC,IAAI,CAACG,MAAM,KAAK,CAAC,IAAIP,SAAS,CAACD,GAAG,CAACK,IAAI,CAAC,CAAC,CAAC,CAAC;AACnD,CAAC;AAED,OAAO,IAAMI,cAAc,GAAG,IAAIP,GAAG,CAAC,CACrC,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,UAAU,EACV,aAAa,EACb,YAAY,EACZ,SAAS,CACT,CAAC;AACF,IAAMQ,YAAY,GAAG,SAAAA,CAAAN,CAAC;EACrB,IAAMC,IAAI,GAAAC,QAAA,CAAOC,MAAM,CAACF,IAAI,CAACD,CAAC,CAAC,CAAC;EAChC,OAAO,CAACO,KAAK,CAACC,OAAO,CAACR,CAAC,CAAC,IAAIC,IAAI,CAACG,MAAM,KAAK,CAAC,IAAIC,cAAc,CAACT,GAAG,CAACK,IAAI,CAAC,CAAC,CAAC,CAAC;AAC7E,CAAC;AAED,IAAMQ,OAAO,GAAG,SAAAA,CAAAT,CAAC;EAChB,IAAIO,KAAK,CAACC,OAAO,CAACR,CAAC,CAAC,EAAE;IACrB,OAAOA,CAAC,CAACU,KAAK,CAAC,UAAAC,CAAC;MAAI,OAAAF,OAAO,CAACE,CAAC,CAAC;IAAV,CAAU,CAAC;GAC/B,MAAM;IACN,OAAOR,MAAM,CAACF,IAAI,CAACD,CAAC,CAAC,CAACI,MAAM,KAAK,CAAC;;AAEpC,CAAC;AAED;AACA,OAAO,IAAMQ,YAAY,GAAGC,MAAM,CAAC,sCAAsC,CAAC;AAE1E,IAAAC,UAAA;EAAA,SAAAA,WAAA,GAQA;EAPCX,MAAA,CAAAY,cAAA,CAAkBD,UAAA,OAAG;SAArB,SAAAE,CAAA;MACC,IAAMrB,SAAS,GAAiC,SAAAA,CAAAsB,CAAC;QAAI,OAAAA,CAAC;MAAD,CAAE;MAEvDzB,gBAAgB,CAAC0B,GAAG,CAACvB,SAAS,CAAC;MAE/B,OAAsCA,SAAU;IACjD,CAAC;;;;EACF,OAAAmB,UAAC;AAAD,CAAC,EARD;;AAUA,IAAAK,qBAAA;EAAA,SAAAA,sBAAA,GA2PA;EArPQA,qBAAA,CAAAC,sBAAsB,GAA7B,UACCC,eAA4B;IAEpB,IAAAC,SAAA,GAAAD,eAAA,CAAAE,IAAe;IACvB,IAAMC,UAAU,GAAG,IAAI1B,GAAG,CAAUK,MAAM,CAACF,IAAI,CAACoB,eAAe,CAACI,MAAM,CAAC,CAAC;IAExE,IAAIC,OAAwC;IAE5C,IAAM/B,SAAS,GAAG,IAAIgC,KAAK,CAC1B,EAAuB,EACtBD,OAAO,GAAG;MACVV,GAAG,EAAH,SAAAA,CACCY,CAAC,EACDC,WAAW,EACXC,IAAuB;QAEvB,IAAMC,SAAS,GAAGF,WAAuC;QAEzD,QAAQE,SAAS;UAChB,KAAK,KAAK;UACV,KAAK,IAAI;UACT,KAAK,KAAK;YACT,IAAMC,QAAM,GAAgC,SAAAA,CAC3CC,YAAgE;cAEhE,IAAMC,KAAK,GAAuB;gBACjCC,IAAI,EAAEJ,SAAS;gBACfK,UAAU,EAAE;eACZ;cAED;cACA,IAAMC,oBAAoB,GAAG,IAAIV,KAAK,CACrC,EAAuB,EACvBD,OAAO,CACP;cAED;cACAP,qBAAqB,CAACmB,kBAAkB,CAACC,GAAG,CAC3CF,oBAA2B,EAC3BH,KAAK,CACL;cAED;cACAD,YAAY,CAACI,oBAAoB,CAAC;cAElC;cACAlB,qBAAqB,CAACmB,kBAAkB,CACtCtB,GAAG,CAACc,IAAW,CAAE,CACjBM,UAAU,CAACI,IAAI,CAACN,KAAK,CAAC;cAExB,OAAOJ,IAAI;YACZ,CAAC;YAED,OAAOE,QAAM;UACd;UACA;QAAA;;QAGD,IAAMS,KAAK,GAAGZ,WAAsB;QAEpC,IAAI,CAACL,UAAU,CAAC5B,GAAG,CAAC6C,KAAK,CAAC,EAAE;UAC3B,MAAM,IAAIC,KAAK,CACd,qCAAmCD,KAAK,iBAAYnB,SAAW,CAC/D;;QAGF,IAAMqB,MAAM,GAAgC,SAAAA,CAC3CC,QAA4B,EAC5BC,OAAY;UAEZ1B,qBAAqB,CAACmB,kBAAkB,CACtCtB,GAAG,CAACc,IAAW,CAAE,CACjBM,UAAU,CAACI,IAAI,CAAC;YAAEC,KAAK,EAAAA,KAAA;YAAEG,QAAQ,EAAAA,QAAA;YAAEC,OAAO,EAAAA;UAAA,CAAE,CAAC;UAC/C,OAAOf,IAAI;QACZ,CAAC;QACD,OAAOa,MAAM;MACd;KACA,CACD;IAED,IAAMT,KAAK,GAAuB;MACjCC,IAAI,EAAE,KAAK;MACXC,UAAU,EAAE;KACZ;IACDjB,qBAAqB,CAACmB,kBAAkB,CAACC,GAAG,CAAC5C,SAAgB,EAAEuC,KAAK,CAAC;IAErE,OAAOvC,SAAS;EACjB,CAAC;EAEMwB,qBAAA,CAAA2B,gBAAgB,GAAvB,UACCnD,SAAc;IAEd,OAAOwB,qBAAqB,CAACmB,kBAAkB,CAAC1C,GAAG,CAACD,SAAS,CAAC;EAC/D,CAAC;EAEMwB,qBAAA,CAAA4B,aAAa,GAApB,UACCpD,SAA4B,EAC5BqD,cAA8B;IAA9B,IAAAA,cAAA;MAAAA,cAAA,OAA8B;IAAA;IAE9B,IAAIA,cAAc,IAAI,CAAC7B,qBAAqB,CAAC2B,gBAAgB,CAACnD,SAAS,CAAC,EAAE;MACzE,MAAM,IAAI+C,KAAK,CAAC,4BAA4B,CAAC;;IAG9C,OAAOvB,qBAAqB,CAACmB,kBAAkB,CAACtB,GAAG,CAACrB,SAAgB,CAAC;EACtE,CAAC;EAED;EACOwB,qBAAA,CAAA8B,kBAAkB,GAAzB,UACC5B,eAA6B,EAC7B6B,QAAoC;IAEpC,IAAI,CAACA,QAAQ,IAAI,CAAC7B,eAAe,EAAE;MAClC,OAAO8B,SAAS;;IAGjB,OAAOD,QAAQ,CACd/B,qBAAqB,CAACC,sBAAsB,CAACC,eAAe,CAAC,CAC7D;EACF,CAAC;EAEMF,qBAAA,CAAAiC,oBAAoB,GAA3B,UACC/B,eAA4B,EAC5BgC,SAAiB,EACjBC,KAAa;IAEb,OAAOnC,qBAAqB,CAACC,sBAAsB,CAAIC,eAAe,CAAC,CACtEgC,SAAS,CACT,CAAM,IAAI,EAAOC,KAAK,CAAC;EACzB,CAAC;EAEMnC,qBAAA,CAAAoC,WAAW,GAAlB,UACClC,eAA4B,EAC5BmC,KAAQ;IAER,IAAMC,SAAS,GAAGpE,2BAA2B,CAACgC,eAAe,CAAC;IAC9D,IAAMqC,SAAS,GAAGpE,uBAAuB,CAACkE,KAAK,EAAEC,SAAS,CAAC;IAE3D,IAAIE,cAAc,GACjBxC,qBAAqB,CAACC,sBAAsB,CAAIC,eAAe,CAAC;IAEjEoC,SAAS,CAACG,OAAO,CAAC,UAACnB,KAAK,EAAEoB,GAAG;MAC5B,IAAMhB,OAAO,GAAGa,SAAS,CAACG,GAAG,CAAC;MAC9BF,cAAc,GAAGA,cAAc,CAAClB,KAAK,CAAC,CAAM,IAAI,EAAOI,OAAO,CAAC;IAChE,CAAC,CAAC;IAEF,OAAOc,cAAc;EACtB,CAAC;EAED;;;;;;;;;EASOxC,qBAAA,CAAA2C,wBAAwB,GAA/B,UACCzC,eAA4B,EAC5B0C,cAAmC;;IAEnC,IAAIpE,SAAS,GACZwB,qBAAqB,CAACC,sBAAsB,CAAIC,eAAe,CAAC;;MAEjE,KAA6B,IAAA2C,EAAA,GAAAC,QAAA,CAAA9D,MAAM,CAAC+D,OAAO,CAACH,cAAc,CAAC,GAAAI,EAAA,GAAAH,EAAA,CAAAI,IAAA,KAAAD,EAAA,CAAAE,IAAA,EAAAF,EAAA,GAAAH,EAAA,CAAAI,IAAA,IAAE;QAAlD,IAAAE,EAAA,GAAAC,MAAA,CAAAJ,EAAA,CAAAb,KAAA,IAAc;UAAbb,KAAA,GAAA6B,EAAA,GAAK;UAAEhB,KAAA,GAAAgB,EAAA,GAAK;QACvB3E,SAAS,GAAGA,SAAS,CAAC8C,KAAK,CAAC,CAAC,IAAW,EAAEa,KAAK,CAAC;;;;;;;;;;;;;IAGjD,OAAO3D,SAAS;EACjB,CAAC;EAEMwB,qBAAA,CAAAqD,uBAAuB,GAA9B,UACCnD,eAA4B,EAC5Ba,KAA2B,EAC3BuC,kBAAqE;IAErE,IAAIC,KAAK,GACRvD,qBAAqB,CAACC,sBAAsB,CAAIC,eAAe,CAAC;IAEjEqD,KAAK,GAAGA,KAAK,CAACxC,KAAK,CAAC,CAAC,UAAAyC,IAAI;;;MACxB,IAAIC,KAAK,GAAGD,IAAI;;QAChB,KAAuB,IAAAE,oBAAA,GAAAZ,QAAA,CAAAQ,kBAAkB,GAAAK,sBAAA,GAAAD,oBAAA,CAAAT,IAAA,KAAAU,sBAAA,CAAAT,IAAA,EAAAS,sBAAA,GAAAD,oBAAA,CAAAT,IAAA,IAAE;UAAtC,IAAMlB,QAAQ,GAAA4B,sBAAA,CAAAxB,KAAA;UAClB,IAAI,OAAOJ,QAAQ,KAAK,UAAU,EAAE;YACnC0B,KAAK,GAAG1B,QAAQ,CAAC0B,KAAK,CAAC;WACvB,MAAM;YACN,CAAAZ,EAAA,GAAA7C,qBAAqB,CAACmB,kBAAkB,CACtCtB,GAAG,CAAC4D,KAAK,CAAC,cAAAZ,EAAA,uBAAAA,EAAA,CACT5B,UAAU,CAACI,IAAI,CAChBrB,qBAAqB,CAACmB,kBAAkB,CAACtB,GAAG,CAC3CkC,QAA6B,CAC5B;;;;;;;;;;;;;;MAIN,OAAO0B,KAAK;IACb,CAAC,CAAC;IAEF,OAAOF,KAAK;EACb,CAAC;EAEMvD,qBAAA,CAAA4D,8BAA8B,GAArC,UAAsCC,GAAQ;IAA9C,IAAAC,KAAA;IACC,IAAI,CAACxE,OAAO,CAACuE,GAAG,CAAC,EAAE;MAClB,MAAM,IAAItC,KAAK,CAAC,mBAAmB,GAAGsC,GAAG,CAAC;;IAG3C,IAAIjF,OAAO,CAACiF,GAAG,CAAC,EAAE;MACjB,IAAME,QAAQ,GAAG/E,MAAM,CAACF,IAAI,CAAC+E,GAAG,CAAC,CAAC,CAAC,CAAC;MACpC,IAAMG,QAAQ,GAAG,IAAI,CAACJ,8BAA8B,CAACC,GAAG,CAACE,QAAQ,CAAC,CAAC;MACnE,OAAO;QACN/C,IAAI,EAAE+C,QAAQ;QACd9C,UAAU,EAAE7B,KAAK,CAACC,OAAO,CAAC2E,QAAQ,CAAC,GAAGA,QAAQ,GAAG,CAACA,QAAQ;OAC1D;KACD,MAAM,IAAI7E,YAAY,CAAC0E,GAAG,CAAC,EAAE;MAC7B,IAAMI,WAAW,GAAGjF,MAAM,CAACF,IAAI,CAAC+E,GAAG,CAAC,CAAC,CAAC,CAAC;MACvC,OAAO;QACNpC,QAAQ,EAAEwC,WAAW;QACrBvC,OAAO,EAAEmC,GAAG,CAACI,WAAW;OACxB;KACD,MAAM;MACN,IAAI7E,KAAK,CAACC,OAAO,CAACwE,GAAG,CAAC,EAAE;QACvB,OAAOA,GAAG,CAACK,GAAG,CAAC,UAAArF,CAAC;UAAI,OAAAiF,KAAI,CAACF,8BAA8B,CAAC/E,CAAC,CAAC;QAAtC,CAAsC,CAAC;OAC3D,MAAM;QACN,IAAMsF,QAAQ,GAAGnF,MAAM,CAACF,IAAI,CAAC+E,GAAG,CAAC,CAAC,CAAC,CAAC;QACpC,OAAAO,QAAA;UACC9C,KAAK,EAAE6C;QAAQ,GACZ,IAAI,CAACP,8BAA8B,CAACC,GAAG,CAACM,QAAQ,CAAC,CAAC;;;EAIzD,CAAC;EAEMnE,qBAAA,CAAAqE,aAAa,GAApB,UACCnE,eAA4B,EAC5BoE,GAAQ;IAER,IAAM9F,SAAS,GACdwB,qBAAqB,CAACC,sBAAsB,CAACC,eAAe,CAAC;IAE9DF,qBAAqB,CAACmB,kBAAkB,CAACC,GAAG,CAC3C5C,SAAS,EACT,IAAI,CAACoF,8BAA8B,CAACU,GAAG,CAAC,CACxC;IAED,OAAO9F,SAAS;EACjB,CAAC;EAzPcwB,qBAAA,CAAAmB,kBAAkB,GAAG,IAAIoD,OAAO,EAG5C;EAuPJ,OAAAvE,qBAAC;CAAA,EA3PD;SAAaA,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}