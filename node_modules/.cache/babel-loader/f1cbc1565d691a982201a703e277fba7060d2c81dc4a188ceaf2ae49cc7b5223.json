{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nexport var resolveEndpointsConfig = function (input) {\n  var _a;\n  return __assign(__assign({}, input), {\n    tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,\n    endpoint: input.endpoint ? normalizeEndpoint(input) : function () {\n      return getEndPointFromRegion(input);\n    }\n  });\n};\nvar normalizeEndpoint = function (input) {\n  var endpoint = input.endpoint,\n    urlParser = input.urlParser;\n  if (typeof endpoint === \"string\") {\n    var promisified_1 = Promise.resolve(urlParser(endpoint));\n    return function () {\n      return promisified_1;\n    };\n  } else if (typeof endpoint === \"object\") {\n    var promisified_2 = Promise.resolve(endpoint);\n    return function () {\n      return promisified_2;\n    };\n  }\n  return endpoint;\n};\nvar getEndPointFromRegion = function (input) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var _a, tls, region, dnsHostRegex, hostname;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          _a = input.tls, tls = _a === void 0 ? true : _a;\n          return [4 /*yield*/, input.region()];\n        case 1:\n          region = _c.sent();\n          dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);\n          if (!dnsHostRegex.test(region)) {\n            throw new Error(\"Invalid region in client config\");\n          }\n          return [4 /*yield*/, input.regionInfoProvider(region)];\n        case 2:\n          hostname = ((_b = _c.sent()) !== null && _b !== void 0 ? _b : {}).hostname;\n          if (!hostname) {\n            throw new Error(\"Cannot resolve hostname from client config\");\n          }\n          return [2 /*return*/, input.urlParser((tls ? \"https:\" : \"http:\") + \"//\" + hostname)];\n      }\n    });\n  });\n};","map":{"version":3,"names":["resolveEndpointsConfig","input","__assign","tls","_a","endpoint","normalizeEndpoint","getEndPointFromRegion","urlParser","promisified_1","Promise","resolve","promisified_2","__awaiter","region","_c","sent","dnsHostRegex","RegExp","test","Error","regionInfoProvider","hostname","_b"],"sources":["/Users/ericli/node_modules/@aws-sdk/client-pinpoint/node_modules/@aws-sdk/config-resolver/src/EndpointsConfig.ts"],"sourcesContent":["import { Endpoint, Provider, RegionInfoProvider, UrlParser } from \"@aws-sdk/types\";\n\nexport interface EndpointsInputConfig {\n  /**\n   * The fully qualified endpoint of the webservice. This is only required when using a custom endpoint (for example, when using a local version of S3).\n   */\n  endpoint?: string | Endpoint | Provider<Endpoint>;\n\n  /**\n   * Whether TLS is enabled for requests.\n   */\n  tls?: boolean;\n}\n\ninterface PreviouslyResolved {\n  regionInfoProvider: RegionInfoProvider;\n  urlParser: UrlParser;\n  region: Provider<string>;\n}\n\nexport interface EndpointsResolvedConfig extends Required<EndpointsInputConfig> {\n  endpoint: Provider<Endpoint>;\n}\n\nexport const resolveEndpointsConfig = <T>(\n  input: T & EndpointsInputConfig & PreviouslyResolved\n): T & EndpointsResolvedConfig => ({\n  ...input,\n  tls: input.tls ?? true,\n  endpoint: input.endpoint ? normalizeEndpoint(input) : () => getEndPointFromRegion(input),\n});\n\nconst normalizeEndpoint = (input: EndpointsInputConfig & PreviouslyResolved): Provider<Endpoint> => {\n  const { endpoint, urlParser } = input;\n  if (typeof endpoint === \"string\") {\n    const promisified = Promise.resolve(urlParser(endpoint));\n    return () => promisified;\n  } else if (typeof endpoint === \"object\") {\n    const promisified = Promise.resolve(endpoint);\n    return () => promisified;\n  }\n  return endpoint!;\n};\n\nconst getEndPointFromRegion = async (input: EndpointsInputConfig & PreviouslyResolved) => {\n  const { tls = true } = input;\n  const region = await input.region();\n\n  const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);\n  if (!dnsHostRegex.test(region)) {\n    throw new Error(\"Invalid region in client config\");\n  }\n\n  const { hostname } = (await input.regionInfoProvider(region)) ?? {};\n  if (!hostname) {\n    throw new Error(\"Cannot resolve hostname from client config\");\n  }\n\n  return input.urlParser(`${tls ? \"https:\" : \"http:\"}//${hostname}`);\n};\n"],"mappings":";AAwBA,OAAO,IAAMA,sBAAsB,GAAG,SAAAA,CACpCC,KAAoD;;EACpB,OAAAC,QAAA,CAAAA,QAAA,KAC7BD,KAAK;IACRE,GAAG,GAAAC,EAAA,GAAEH,KAAK,CAACE,GAAG,cAAAC,EAAA,cAAAA,EAAA,GAAI,IAAI;IACtBC,QAAQ,EAAEJ,KAAK,CAACI,QAAQ,GAAGC,iBAAiB,CAACL,KAAK,CAAC,GAAG;MAAM,OAAAM,qBAAqB,CAACN,KAAK,CAAC;IAA5B;EAA4B;CACxF;AAEF,IAAMK,iBAAiB,GAAG,SAAAA,CAACL,KAAgD;EACjE,IAAAI,QAAQ,GAAgBJ,KAAK,CAAAI,QAArB;IAAEG,SAAS,GAAKP,KAAK,CAAAO,SAAV;EAC3B,IAAI,OAAOH,QAAQ,KAAK,QAAQ,EAAE;IAChC,IAAMI,aAAW,GAAGC,OAAO,CAACC,OAAO,CAACH,SAAS,CAACH,QAAQ,CAAC,CAAC;IACxD,OAAO;MAAM,OAAAI,aAAW;IAAX,CAAW;GACzB,MAAM,IAAI,OAAOJ,QAAQ,KAAK,QAAQ,EAAE;IACvC,IAAMO,aAAW,GAAGF,OAAO,CAACC,OAAO,CAACN,QAAQ,CAAC;IAC7C,OAAO;MAAM,OAAAO,aAAW;IAAX,CAAW;;EAE1B,OAAOP,QAAS;AAClB,CAAC;AAED,IAAME,qBAAqB,GAAG,SAAAA,CAAON,KAAgD;EAAA,OAAAY,SAAA;;;;;;UAC3ET,EAAA,GAAeH,KAAK,CAAAE,GAAV,EAAVA,GAAG,GAAAC,EAAA,cAAG,IAAI,GAAAA,EAAA;UACH,qBAAMH,KAAK,CAACa,MAAM,EAAE;;UAA7BA,MAAM,GAAGC,EAAA,CAAAC,IAAA,EAAoB;UAE7BC,YAAY,GAAG,IAAIC,MAAM,CAAC,0DAA0D,CAAC;UAC3F,IAAI,CAACD,YAAY,CAACE,IAAI,CAACL,MAAM,CAAC,EAAE;YAC9B,MAAM,IAAIM,KAAK,CAAC,iCAAiC,CAAC;;UAG9B,qBAAMnB,KAAK,CAACoB,kBAAkB,CAACP,MAAM,CAAC;;UAApDQ,QAAQ,KAAAC,EAAA,GAAMR,EAAA,CAAAC,IAAA,EAAuC,cAAAO,EAAA,cAAAA,EAAA,GAAI,EAAE,EAAAD,QAAnD;UAChB,IAAI,CAACA,QAAQ,EAAE;YACb,MAAM,IAAIF,KAAK,CAAC,4CAA4C,CAAC;;UAG/D,sBAAOnB,KAAK,CAACO,SAAS,CAAC,CAAGL,GAAG,GAAG,QAAQ,GAAG,OAAO,WAAKmB,QAAU,CAAC;MAAC;;;CACpE"},"metadata":{},"sourceType":"module","externalDependencies":[]}