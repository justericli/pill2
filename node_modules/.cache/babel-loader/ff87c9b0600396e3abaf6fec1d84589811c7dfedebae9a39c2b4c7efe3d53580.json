{"ast":null,"code":"export function blobReader(blob, onChunk) {\n  let chunkSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1024 * 1024;\n  return new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.addEventListener(\"error\", reject);\n    fileReader.addEventListener(\"abort\", reject);\n    const size = blob.size;\n    let totalBytesRead = 0;\n    function read() {\n      if (totalBytesRead >= size) {\n        resolve();\n        return;\n      }\n      fileReader.readAsArrayBuffer(blob.slice(totalBytesRead, Math.min(size, totalBytesRead + chunkSize)));\n    }\n    fileReader.addEventListener(\"load\", event => {\n      const result = event.target.result;\n      onChunk(new Uint8Array(result));\n      totalBytesRead += result.byteLength;\n      read();\n    });\n    read();\n  });\n}","map":{"version":3,"names":["blobReader","blob","onChunk","chunkSize","arguments","length","undefined","Promise","resolve","reject","fileReader","FileReader","addEventListener","size","totalBytesRead","read","readAsArrayBuffer","slice","Math","min","event","result","target","Uint8Array","byteLength"],"sources":["/Users/ericli/Desktop/pill2/node_modules/@aws-sdk/chunked-blob-reader/dist-es/index.js"],"sourcesContent":["export function blobReader(blob, onChunk, chunkSize = 1024 * 1024) {\n    return new Promise((resolve, reject) => {\n        const fileReader = new FileReader();\n        fileReader.addEventListener(\"error\", reject);\n        fileReader.addEventListener(\"abort\", reject);\n        const size = blob.size;\n        let totalBytesRead = 0;\n        function read() {\n            if (totalBytesRead >= size) {\n                resolve();\n                return;\n            }\n            fileReader.readAsArrayBuffer(blob.slice(totalBytesRead, Math.min(size, totalBytesRead + chunkSize)));\n        }\n        fileReader.addEventListener(\"load\", (event) => {\n            const result = event.target.result;\n            onChunk(new Uint8Array(result));\n            totalBytesRead += result.byteLength;\n            read();\n        });\n        read();\n    });\n}\n"],"mappings":"AAAA,OAAO,SAASA,UAAUA,CAACC,IAAI,EAAEC,OAAO,EAA2B;EAAA,IAAzBC,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI,GAAG,IAAI;EAC7D,OAAO,IAAIG,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACpC,MAAMC,UAAU,GAAG,IAAIC,UAAU,EAAE;IACnCD,UAAU,CAACE,gBAAgB,CAAC,OAAO,EAAEH,MAAM,CAAC;IAC5CC,UAAU,CAACE,gBAAgB,CAAC,OAAO,EAAEH,MAAM,CAAC;IAC5C,MAAMI,IAAI,GAAGZ,IAAI,CAACY,IAAI;IACtB,IAAIC,cAAc,GAAG,CAAC;IACtB,SAASC,IAAIA,CAAA,EAAG;MACZ,IAAID,cAAc,IAAID,IAAI,EAAE;QACxBL,OAAO,EAAE;QACT;MACJ;MACAE,UAAU,CAACM,iBAAiB,CAACf,IAAI,CAACgB,KAAK,CAACH,cAAc,EAAEI,IAAI,CAACC,GAAG,CAACN,IAAI,EAAEC,cAAc,GAAGX,SAAS,CAAC,CAAC,CAAC;IACxG;IACAO,UAAU,CAACE,gBAAgB,CAAC,MAAM,EAAGQ,KAAK,IAAK;MAC3C,MAAMC,MAAM,GAAGD,KAAK,CAACE,MAAM,CAACD,MAAM;MAClCnB,OAAO,CAAC,IAAIqB,UAAU,CAACF,MAAM,CAAC,CAAC;MAC/BP,cAAc,IAAIO,MAAM,CAACG,UAAU;MACnCT,IAAI,EAAE;IACV,CAAC,CAAC;IACFA,IAAI,EAAE;EACV,CAAC,CAAC;AACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}