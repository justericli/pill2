{"ast":null,"code":"import _toArray from \"/Users/ericli/Desktop/pill2/node_modules/@babel/runtime/helpers/esm/toArray.js\";\nexport var validate = function validate(str) {\n  return typeof str === \"string\" && str.indexOf(\"arn:\") === 0 && str.split(\":\").length >= 6;\n};\nexport var parse = function parse(arn) {\n  var segments = arn.split(\":\");\n  if (segments.length < 6 || segments[0] !== \"arn\") throw new Error(\"Malformed ARN\");\n  var _segments = _toArray(segments),\n    partition = _segments[1],\n    service = _segments[2],\n    region = _segments[3],\n    accountId = _segments[4],\n    resource = _segments.slice(5);\n  return {\n    partition: partition,\n    service: service,\n    region: region,\n    accountId: accountId,\n    resource: resource.join(\":\")\n  };\n};\nexport var build = function build(arnObject) {\n  var _arnObject$partition = arnObject.partition,\n    partition = _arnObject$partition === void 0 ? \"aws\" : _arnObject$partition,\n    service = arnObject.service,\n    region = arnObject.region,\n    accountId = arnObject.accountId,\n    resource = arnObject.resource;\n  if ([service, region, accountId, resource].some(function (segment) {\n    return typeof segment !== \"string\";\n  })) {\n    throw new Error(\"Input ARN object is invalid\");\n  }\n  return \"arn:\".concat(partition, \":\").concat(service, \":\").concat(region, \":\").concat(accountId, \":\").concat(resource);\n};","map":{"version":3,"names":["validate","str","indexOf","split","length","parse","arn","segments","Error","_segments","_toArray","partition","service","region","accountId","resource","slice","join","build","arnObject","_arnObject$partition","some","segment","concat"],"sources":["/Users/ericli/Desktop/pill2/node_modules/@aws-sdk/util-arn-parser/dist-es/index.js"],"sourcesContent":["export const validate = (str) => typeof str === \"string\" && str.indexOf(\"arn:\") === 0 && str.split(\":\").length >= 6;\nexport const parse = (arn) => {\n    const segments = arn.split(\":\");\n    if (segments.length < 6 || segments[0] !== \"arn\")\n        throw new Error(\"Malformed ARN\");\n    const [, partition, service, region, accountId, ...resource] = segments;\n    return {\n        partition,\n        service,\n        region,\n        accountId,\n        resource: resource.join(\":\"),\n    };\n};\nexport const build = (arnObject) => {\n    const { partition = \"aws\", service, region, accountId, resource } = arnObject;\n    if ([service, region, accountId, resource].some((segment) => typeof segment !== \"string\")) {\n        throw new Error(\"Input ARN object is invalid\");\n    }\n    return `arn:${partition}:${service}:${region}:${accountId}:${resource}`;\n};\n"],"mappings":";AAAA,OAAO,IAAMA,QAAQ,GAAG,SAAXA,QAAQA,CAAIC,GAAG;EAAA,OAAK,OAAOA,GAAG,KAAK,QAAQ,IAAIA,GAAG,CAACC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAID,GAAG,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,IAAI,CAAC;AAAA;AACnH,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAKA,CAAIC,GAAG,EAAK;EAC1B,IAAMC,QAAQ,GAAGD,GAAG,CAACH,KAAK,CAAC,GAAG,CAAC;EAC/B,IAAII,QAAQ,CAACH,MAAM,GAAG,CAAC,IAAIG,QAAQ,CAAC,CAAC,CAAC,KAAK,KAAK,EAC5C,MAAM,IAAIC,KAAK,CAAC,eAAe,CAAC;EACpC,IAAAC,SAAA,GAAAC,QAAA,CAA+DH,QAAQ;IAA9DI,SAAS,GAAAF,SAAA;IAAEG,OAAO,GAAAH,SAAA;IAAEI,MAAM,GAAAJ,SAAA;IAAEK,SAAS,GAAAL,SAAA;IAAKM,QAAQ,GAAAN,SAAA,CAAAO,KAAA;EAC3D,OAAO;IACHL,SAAS,EAATA,SAAS;IACTC,OAAO,EAAPA,OAAO;IACPC,MAAM,EAANA,MAAM;IACNC,SAAS,EAATA,SAAS;IACTC,QAAQ,EAAEA,QAAQ,CAACE,IAAI,CAAC,GAAG;EAC/B,CAAC;AACL,CAAC;AACD,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAKA,CAAIC,SAAS,EAAK;EAChC,IAAAC,oBAAA,GAAoED,SAAS,CAArER,SAAS;IAATA,SAAS,GAAAS,oBAAA,cAAG,KAAK,GAAAA,oBAAA;IAAER,OAAO,GAAkCO,SAAS,CAAlDP,OAAO;IAAEC,MAAM,GAA0BM,SAAS,CAAzCN,MAAM;IAAEC,SAAS,GAAeK,SAAS,CAAjCL,SAAS;IAAEC,QAAQ,GAAKI,SAAS,CAAtBJ,QAAQ;EAC/D,IAAI,CAACH,OAAO,EAAEC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,CAAC,CAACM,IAAI,CAAC,UAACC,OAAO;IAAA,OAAK,OAAOA,OAAO,KAAK,QAAQ;EAAA,EAAC,EAAE;IACvF,MAAM,IAAId,KAAK,CAAC,6BAA6B,CAAC;EAClD;EACA,cAAAe,MAAA,CAAcZ,SAAS,OAAAY,MAAA,CAAIX,OAAO,OAAAW,MAAA,CAAIV,MAAM,OAAAU,MAAA,CAAIT,SAAS,OAAAS,MAAA,CAAIR,QAAQ;AACzE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}