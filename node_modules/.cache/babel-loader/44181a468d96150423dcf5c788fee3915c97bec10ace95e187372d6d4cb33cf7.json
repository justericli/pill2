{"ast":null,"code":"import { __assign, __awaiter, __generator, __read } from \"tslib\";\nimport { HttpRequest as __HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { LazyJsonString as __LazyJsonString, extendedEncodeURIComponent as __extendedEncodeURIComponent } from \"@aws-sdk/smithy-client\";\nexport var serializeAws_restJson1DeleteSessionCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, labelValue, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {};\n          resolvedPath = \"/bot/{botName}/alias/{botAlias}/user/{userId}/session\";\n          if (input.botName !== undefined) {\n            labelValue = input.botName;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: botName.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{botName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: botName.\");\n          }\n          if (input.botAlias !== undefined) {\n            labelValue = input.botAlias;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: botAlias.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{botAlias}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: botAlias.\");\n          }\n          if (input.userId !== undefined) {\n            labelValue = input.userId;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: userId.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{userId}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: userId.\");\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"DELETE\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1GetSessionCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {};\n          resolvedPath = \"/bot/{botName}/alias/{botAlias}/user/{userId}/session\";\n          if (input.botName !== undefined) {\n            labelValue = input.botName;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: botName.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{botName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: botName.\");\n          }\n          if (input.botAlias !== undefined) {\n            labelValue = input.botAlias;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: botAlias.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{botAlias}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: botAlias.\");\n          }\n          if (input.userId !== undefined) {\n            labelValue = input.userId;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: userId.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{userId}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: userId.\");\n          }\n          query = __assign({}, input.checkpointLabelFilter !== undefined && {\n            checkpointLabelFilter: input.checkpointLabelFilter\n          });\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"GET\",\n            headers: headers,\n            path: resolvedPath,\n            query: query,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1PostContentCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, labelValue, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign(__assign(__assign(__assign(__assign({\n            \"content-type\": \"application/octet-stream\",\n            \"x-amz-content-sha256\": \"UNSIGNED-PAYLOAD\"\n          }, isSerializableHeaderValue(input.sessionAttributes) && {\n            \"x-amz-lex-session-attributes\": Buffer.from(__LazyJsonString.fromObject(input.sessionAttributes)).toString(\"base64\")\n          }), isSerializableHeaderValue(input.requestAttributes) && {\n            \"x-amz-lex-request-attributes\": Buffer.from(__LazyJsonString.fromObject(input.requestAttributes)).toString(\"base64\")\n          }), isSerializableHeaderValue(input.contentType) && {\n            \"content-type\": input.contentType\n          }), isSerializableHeaderValue(input.accept) && {\n            accept: input.accept\n          }), isSerializableHeaderValue(input.activeContexts) && {\n            \"x-amz-lex-active-contexts\": Buffer.from(__LazyJsonString.fromObject(input.activeContexts)).toString(\"base64\")\n          });\n          resolvedPath = \"/bot/{botName}/alias/{botAlias}/user/{userId}/content\";\n          if (input.botName !== undefined) {\n            labelValue = input.botName;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: botName.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{botName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: botName.\");\n          }\n          if (input.botAlias !== undefined) {\n            labelValue = input.botAlias;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: botAlias.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{botAlias}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: botAlias.\");\n          }\n          if (input.userId !== undefined) {\n            labelValue = input.userId;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: userId.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{userId}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: userId.\");\n          }\n          if (input.inputStream !== undefined) {\n            body = input.inputStream;\n          }\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1PostTextCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, labelValue, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = {\n            \"content-type\": \"application/json\"\n          };\n          resolvedPath = \"/bot/{botName}/alias/{botAlias}/user/{userId}/text\";\n          if (input.botName !== undefined) {\n            labelValue = input.botName;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: botName.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{botName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: botName.\");\n          }\n          if (input.botAlias !== undefined) {\n            labelValue = input.botAlias;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: botAlias.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{botAlias}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: botAlias.\");\n          }\n          if (input.userId !== undefined) {\n            labelValue = input.userId;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: userId.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{userId}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: userId.\");\n          }\n          body = JSON.stringify(__assign(__assign(__assign(__assign({}, input.activeContexts !== undefined && input.activeContexts !== null && {\n            activeContexts: serializeAws_restJson1ActiveContextsList(input.activeContexts, context)\n          }), input.inputText !== undefined && input.inputText !== null && {\n            inputText: input.inputText\n          }), input.requestAttributes !== undefined && input.requestAttributes !== null && {\n            requestAttributes: serializeAws_restJson1StringMap(input.requestAttributes, context)\n          }), input.sessionAttributes !== undefined && input.sessionAttributes !== null && {\n            sessionAttributes: serializeAws_restJson1StringMap(input.sessionAttributes, context)\n          }));\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var serializeAws_restJson1PutSessionCommand = function (input, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, labelValue, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          headers = __assign({\n            \"content-type\": \"application/json\"\n          }, isSerializableHeaderValue(input.accept) && {\n            accept: input.accept\n          });\n          resolvedPath = \"/bot/{botName}/alias/{botAlias}/user/{userId}/session\";\n          if (input.botName !== undefined) {\n            labelValue = input.botName;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: botName.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{botName}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: botName.\");\n          }\n          if (input.botAlias !== undefined) {\n            labelValue = input.botAlias;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: botAlias.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{botAlias}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: botAlias.\");\n          }\n          if (input.userId !== undefined) {\n            labelValue = input.userId;\n            if (labelValue.length <= 0) {\n              throw new Error(\"Empty value provided for input HTTP label: userId.\");\n            }\n            resolvedPath = resolvedPath.replace(\"{userId}\", __extendedEncodeURIComponent(labelValue));\n          } else {\n            throw new Error(\"No value provided for input HTTP label: userId.\");\n          }\n          body = JSON.stringify(__assign(__assign(__assign(__assign({}, input.activeContexts !== undefined && input.activeContexts !== null && {\n            activeContexts: serializeAws_restJson1ActiveContextsList(input.activeContexts, context)\n          }), input.dialogAction !== undefined && input.dialogAction !== null && {\n            dialogAction: serializeAws_restJson1DialogAction(input.dialogAction, context)\n          }), input.recentIntentSummaryView !== undefined && input.recentIntentSummaryView !== null && {\n            recentIntentSummaryView: serializeAws_restJson1IntentSummaryList(input.recentIntentSummaryView, context)\n          }), input.sessionAttributes !== undefined && input.sessionAttributes !== null && {\n            sessionAttributes: serializeAws_restJson1StringMap(input.sessionAttributes, context)\n          }));\n          return [4 /*yield*/, context.endpoint()];\n        case 1:\n          _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n          return [2 /*return*/, new __HttpRequest({\n            protocol: protocol,\n            hostname: hostname,\n            port: port,\n            method: \"POST\",\n            headers: headers,\n            path: resolvedPath,\n            body: body\n          })];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1DeleteSessionCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restJson1DeleteSessionCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            botAlias: undefined,\n            botName: undefined,\n            sessionId: undefined,\n            userId: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data.botAlias !== undefined && data.botAlias !== null) {\n            contents.botAlias = data.botAlias;\n          }\n          if (data.botName !== undefined && data.botName !== null) {\n            contents.botName = data.botName;\n          }\n          if (data.sessionId !== undefined && data.sessionId !== null) {\n            contents.sessionId = data.sessionId;\n          }\n          if (data.userId !== undefined && data.userId !== null) {\n            contents.userId = data.userId;\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1DeleteSessionCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n      switch (_j.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _h = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"BadRequestException\":\n              return [3 /*break*/, 2];\n            case \"com.amazonaws.lexruntimeservice#BadRequestException\":\n              return [3 /*break*/, 2];\n            case \"ConflictException\":\n              return [3 /*break*/, 4];\n            case \"com.amazonaws.lexruntimeservice#ConflictException\":\n              return [3 /*break*/, 4];\n            case \"InternalFailureException\":\n              return [3 /*break*/, 6];\n            case \"com.amazonaws.lexruntimeservice#InternalFailureException\":\n              return [3 /*break*/, 6];\n            case \"LimitExceededException\":\n              return [3 /*break*/, 8];\n            case \"com.amazonaws.lexruntimeservice#LimitExceededException\":\n              return [3 /*break*/, 8];\n            case \"NotFoundException\":\n              return [3 /*break*/, 10];\n            case \"com.amazonaws.lexruntimeservice#NotFoundException\":\n              return [3 /*break*/, 10];\n          }\n          return [3 /*break*/, 12];\n        case 2:\n          _c = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 13];\n        case 4:\n          _d = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 13];\n        case 6:\n          _e = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)];\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 13];\n        case 8:\n          _f = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 13];\n        case 10:\n          _g = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_j.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 13];\n        case 12:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _j.label = 13;\n        case 13:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1GetSessionCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restJson1GetSessionCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            activeContexts: undefined,\n            dialogAction: undefined,\n            recentIntentSummaryView: undefined,\n            sessionAttributes: undefined,\n            sessionId: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data.activeContexts !== undefined && data.activeContexts !== null) {\n            contents.activeContexts = deserializeAws_restJson1ActiveContextsList(data.activeContexts, context);\n          }\n          if (data.dialogAction !== undefined && data.dialogAction !== null) {\n            contents.dialogAction = deserializeAws_restJson1DialogAction(data.dialogAction, context);\n          }\n          if (data.recentIntentSummaryView !== undefined && data.recentIntentSummaryView !== null) {\n            contents.recentIntentSummaryView = deserializeAws_restJson1IntentSummaryList(data.recentIntentSummaryView, context);\n          }\n          if (data.sessionAttributes !== undefined && data.sessionAttributes !== null) {\n            contents.sessionAttributes = deserializeAws_restJson1StringMap(data.sessionAttributes, context);\n          }\n          if (data.sessionId !== undefined && data.sessionId !== null) {\n            contents.sessionId = data.sessionId;\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1GetSessionCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;\n    var _g;\n    return __generator(this, function (_h) {\n      switch (_h.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _g = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"BadRequestException\":\n              return [3 /*break*/, 2];\n            case \"com.amazonaws.lexruntimeservice#BadRequestException\":\n              return [3 /*break*/, 2];\n            case \"InternalFailureException\":\n              return [3 /*break*/, 4];\n            case \"com.amazonaws.lexruntimeservice#InternalFailureException\":\n              return [3 /*break*/, 4];\n            case \"LimitExceededException\":\n              return [3 /*break*/, 6];\n            case \"com.amazonaws.lexruntimeservice#LimitExceededException\":\n              return [3 /*break*/, 6];\n            case \"NotFoundException\":\n              return [3 /*break*/, 8];\n            case \"com.amazonaws.lexruntimeservice#NotFoundException\":\n              return [3 /*break*/, 8];\n          }\n          return [3 /*break*/, 10];\n        case 2:\n          _c = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_h.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 11];\n        case 4:\n          _d = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)];\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 11];\n        case 6:\n          _e = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_h.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 11];\n        case 8:\n          _f = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_h.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 11];\n        case 10:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _h.label = 11;\n        case 11:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1PostContentCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return [2 /*return*/, deserializeAws_restJson1PostContentCommandError(output, context)];\n      }\n      contents = {\n        $metadata: deserializeMetadata(output),\n        activeContexts: undefined,\n        alternativeIntents: undefined,\n        audioStream: undefined,\n        botVersion: undefined,\n        contentType: undefined,\n        dialogState: undefined,\n        inputTranscript: undefined,\n        intentName: undefined,\n        message: undefined,\n        messageFormat: undefined,\n        nluIntentConfidence: undefined,\n        sentimentResponse: undefined,\n        sessionAttributes: undefined,\n        sessionId: undefined,\n        slotToElicit: undefined,\n        slots: undefined\n      };\n      if (output.headers[\"content-type\"] !== undefined) {\n        contents.contentType = output.headers[\"content-type\"];\n      }\n      if (output.headers[\"x-amz-lex-intent-name\"] !== undefined) {\n        contents.intentName = output.headers[\"x-amz-lex-intent-name\"];\n      }\n      if (output.headers[\"x-amz-lex-nlu-intent-confidence\"] !== undefined) {\n        contents.nluIntentConfidence = new __LazyJsonString(Buffer.from(output.headers[\"x-amz-lex-nlu-intent-confidence\"], \"base64\").toString(\"ascii\"));\n      }\n      if (output.headers[\"x-amz-lex-alternative-intents\"] !== undefined) {\n        contents.alternativeIntents = new __LazyJsonString(Buffer.from(output.headers[\"x-amz-lex-alternative-intents\"], \"base64\").toString(\"ascii\"));\n      }\n      if (output.headers[\"x-amz-lex-slots\"] !== undefined) {\n        contents.slots = new __LazyJsonString(Buffer.from(output.headers[\"x-amz-lex-slots\"], \"base64\").toString(\"ascii\"));\n      }\n      if (output.headers[\"x-amz-lex-session-attributes\"] !== undefined) {\n        contents.sessionAttributes = new __LazyJsonString(Buffer.from(output.headers[\"x-amz-lex-session-attributes\"], \"base64\").toString(\"ascii\"));\n      }\n      if (output.headers[\"x-amz-lex-sentiment\"] !== undefined) {\n        contents.sentimentResponse = output.headers[\"x-amz-lex-sentiment\"];\n      }\n      if (output.headers[\"x-amz-lex-message\"] !== undefined) {\n        contents.message = output.headers[\"x-amz-lex-message\"];\n      }\n      if (output.headers[\"x-amz-lex-message-format\"] !== undefined) {\n        contents.messageFormat = output.headers[\"x-amz-lex-message-format\"];\n      }\n      if (output.headers[\"x-amz-lex-dialog-state\"] !== undefined) {\n        contents.dialogState = output.headers[\"x-amz-lex-dialog-state\"];\n      }\n      if (output.headers[\"x-amz-lex-slot-to-elicit\"] !== undefined) {\n        contents.slotToElicit = output.headers[\"x-amz-lex-slot-to-elicit\"];\n      }\n      if (output.headers[\"x-amz-lex-input-transcript\"] !== undefined) {\n        contents.inputTranscript = output.headers[\"x-amz-lex-input-transcript\"];\n      }\n      if (output.headers[\"x-amz-lex-bot-version\"] !== undefined) {\n        contents.botVersion = output.headers[\"x-amz-lex-bot-version\"];\n      }\n      if (output.headers[\"x-amz-lex-session-id\"] !== undefined) {\n        contents.sessionId = output.headers[\"x-amz-lex-session-id\"];\n      }\n      if (output.headers[\"x-amz-lex-active-contexts\"] !== undefined) {\n        contents.activeContexts = new __LazyJsonString(Buffer.from(output.headers[\"x-amz-lex-active-contexts\"], \"base64\").toString(\"ascii\"));\n      }\n      data = output.body;\n      contents.audioStream = data;\n      return [2 /*return*/, Promise.resolve(contents)];\n    });\n  });\n};\nvar deserializeAws_restJson1PostContentCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, parsedBody, message;\n    var _p;\n    return __generator(this, function (_q) {\n      switch (_q.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _p = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_p.body = _q.sent(), _p)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"BadGatewayException\":\n              return [3 /*break*/, 2];\n            case \"com.amazonaws.lexruntimeservice#BadGatewayException\":\n              return [3 /*break*/, 2];\n            case \"BadRequestException\":\n              return [3 /*break*/, 4];\n            case \"com.amazonaws.lexruntimeservice#BadRequestException\":\n              return [3 /*break*/, 4];\n            case \"ConflictException\":\n              return [3 /*break*/, 6];\n            case \"com.amazonaws.lexruntimeservice#ConflictException\":\n              return [3 /*break*/, 6];\n            case \"DependencyFailedException\":\n              return [3 /*break*/, 8];\n            case \"com.amazonaws.lexruntimeservice#DependencyFailedException\":\n              return [3 /*break*/, 8];\n            case \"InternalFailureException\":\n              return [3 /*break*/, 10];\n            case \"com.amazonaws.lexruntimeservice#InternalFailureException\":\n              return [3 /*break*/, 10];\n            case \"LimitExceededException\":\n              return [3 /*break*/, 12];\n            case \"com.amazonaws.lexruntimeservice#LimitExceededException\":\n              return [3 /*break*/, 12];\n            case \"LoopDetectedException\":\n              return [3 /*break*/, 14];\n            case \"com.amazonaws.lexruntimeservice#LoopDetectedException\":\n              return [3 /*break*/, 14];\n            case \"NotAcceptableException\":\n              return [3 /*break*/, 16];\n            case \"com.amazonaws.lexruntimeservice#NotAcceptableException\":\n              return [3 /*break*/, 16];\n            case \"NotFoundException\":\n              return [3 /*break*/, 18];\n            case \"com.amazonaws.lexruntimeservice#NotFoundException\":\n              return [3 /*break*/, 18];\n            case \"RequestTimeoutException\":\n              return [3 /*break*/, 20];\n            case \"com.amazonaws.lexruntimeservice#RequestTimeoutException\":\n              return [3 /*break*/, 20];\n            case \"UnsupportedMediaTypeException\":\n              return [3 /*break*/, 22];\n            case \"com.amazonaws.lexruntimeservice#UnsupportedMediaTypeException\":\n              return [3 /*break*/, 22];\n          }\n          return [3 /*break*/, 24];\n        case 2:\n          _c = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1BadGatewayExceptionResponse(parsedOutput, context)];\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_q.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 25];\n        case 4:\n          _d = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_q.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 25];\n        case 6:\n          _e = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_q.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 25];\n        case 8:\n          _f = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1DependencyFailedExceptionResponse(parsedOutput, context)];\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_q.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 25];\n        case 10:\n          _g = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)];\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_q.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 25];\n        case 12:\n          _h = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];\n        case 13:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_q.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 25];\n        case 14:\n          _j = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1LoopDetectedExceptionResponse(parsedOutput, context)];\n        case 15:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_q.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 25];\n        case 16:\n          _k = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1NotAcceptableExceptionResponse(parsedOutput, context)];\n        case 17:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([_q.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 25];\n        case 18:\n          _l = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];\n        case 19:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([_q.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 25];\n        case 20:\n          _m = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1RequestTimeoutExceptionResponse(parsedOutput, context)];\n        case 21:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([_q.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 25];\n        case 22:\n          _o = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1UnsupportedMediaTypeExceptionResponse(parsedOutput, context)];\n        case 23:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([_q.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 25];\n        case 24:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _q.label = 25;\n        case 25:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1PostTextCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restJson1PostTextCommandError(output, context)];\n          }\n          contents = {\n            $metadata: deserializeMetadata(output),\n            activeContexts: undefined,\n            alternativeIntents: undefined,\n            botVersion: undefined,\n            dialogState: undefined,\n            intentName: undefined,\n            message: undefined,\n            messageFormat: undefined,\n            nluIntentConfidence: undefined,\n            responseCard: undefined,\n            sentimentResponse: undefined,\n            sessionAttributes: undefined,\n            sessionId: undefined,\n            slotToElicit: undefined,\n            slots: undefined\n          };\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          data = _a.sent();\n          if (data.activeContexts !== undefined && data.activeContexts !== null) {\n            contents.activeContexts = deserializeAws_restJson1ActiveContextsList(data.activeContexts, context);\n          }\n          if (data.alternativeIntents !== undefined && data.alternativeIntents !== null) {\n            contents.alternativeIntents = deserializeAws_restJson1IntentList(data.alternativeIntents, context);\n          }\n          if (data.botVersion !== undefined && data.botVersion !== null) {\n            contents.botVersion = data.botVersion;\n          }\n          if (data.dialogState !== undefined && data.dialogState !== null) {\n            contents.dialogState = data.dialogState;\n          }\n          if (data.intentName !== undefined && data.intentName !== null) {\n            contents.intentName = data.intentName;\n          }\n          if (data.message !== undefined && data.message !== null) {\n            contents.message = data.message;\n          }\n          if (data.messageFormat !== undefined && data.messageFormat !== null) {\n            contents.messageFormat = data.messageFormat;\n          }\n          if (data.nluIntentConfidence !== undefined && data.nluIntentConfidence !== null) {\n            contents.nluIntentConfidence = deserializeAws_restJson1IntentConfidence(data.nluIntentConfidence, context);\n          }\n          if (data.responseCard !== undefined && data.responseCard !== null) {\n            contents.responseCard = deserializeAws_restJson1ResponseCard(data.responseCard, context);\n          }\n          if (data.sentimentResponse !== undefined && data.sentimentResponse !== null) {\n            contents.sentimentResponse = deserializeAws_restJson1SentimentResponse(data.sentimentResponse, context);\n          }\n          if (data.sessionAttributes !== undefined && data.sessionAttributes !== null) {\n            contents.sessionAttributes = deserializeAws_restJson1StringMap(data.sessionAttributes, context);\n          }\n          if (data.sessionId !== undefined && data.sessionId !== null) {\n            contents.sessionId = data.sessionId;\n          }\n          if (data.slotToElicit !== undefined && data.slotToElicit !== null) {\n            contents.slotToElicit = data.slotToElicit;\n          }\n          if (data.slots !== undefined && data.slots !== null) {\n            contents.slots = deserializeAws_restJson1StringMap(data.slots, context);\n          }\n          return [2 /*return*/, Promise.resolve(contents)];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1PostTextCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;\n    var _l;\n    return __generator(this, function (_m) {\n      switch (_m.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _l = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_l.body = _m.sent(), _l)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"BadGatewayException\":\n              return [3 /*break*/, 2];\n            case \"com.amazonaws.lexruntimeservice#BadGatewayException\":\n              return [3 /*break*/, 2];\n            case \"BadRequestException\":\n              return [3 /*break*/, 4];\n            case \"com.amazonaws.lexruntimeservice#BadRequestException\":\n              return [3 /*break*/, 4];\n            case \"ConflictException\":\n              return [3 /*break*/, 6];\n            case \"com.amazonaws.lexruntimeservice#ConflictException\":\n              return [3 /*break*/, 6];\n            case \"DependencyFailedException\":\n              return [3 /*break*/, 8];\n            case \"com.amazonaws.lexruntimeservice#DependencyFailedException\":\n              return [3 /*break*/, 8];\n            case \"InternalFailureException\":\n              return [3 /*break*/, 10];\n            case \"com.amazonaws.lexruntimeservice#InternalFailureException\":\n              return [3 /*break*/, 10];\n            case \"LimitExceededException\":\n              return [3 /*break*/, 12];\n            case \"com.amazonaws.lexruntimeservice#LimitExceededException\":\n              return [3 /*break*/, 12];\n            case \"LoopDetectedException\":\n              return [3 /*break*/, 14];\n            case \"com.amazonaws.lexruntimeservice#LoopDetectedException\":\n              return [3 /*break*/, 14];\n            case \"NotFoundException\":\n              return [3 /*break*/, 16];\n            case \"com.amazonaws.lexruntimeservice#NotFoundException\":\n              return [3 /*break*/, 16];\n          }\n          return [3 /*break*/, 18];\n        case 2:\n          _c = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1BadGatewayExceptionResponse(parsedOutput, context)];\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_m.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 19];\n        case 4:\n          _d = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_m.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 19];\n        case 6:\n          _e = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_m.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 19];\n        case 8:\n          _f = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1DependencyFailedExceptionResponse(parsedOutput, context)];\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_m.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 19];\n        case 10:\n          _g = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)];\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_m.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 19];\n        case 12:\n          _h = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];\n        case 13:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_m.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 19];\n        case 14:\n          _j = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1LoopDetectedExceptionResponse(parsedOutput, context)];\n        case 15:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_m.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 19];\n        case 16:\n          _k = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];\n        case 17:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([_m.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 19];\n        case 18:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _m.label = 19;\n        case 19:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nexport var deserializeAws_restJson1PutSessionCommand = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      if (output.statusCode !== 200 && output.statusCode >= 300) {\n        return [2 /*return*/, deserializeAws_restJson1PutSessionCommandError(output, context)];\n      }\n      contents = {\n        $metadata: deserializeMetadata(output),\n        activeContexts: undefined,\n        audioStream: undefined,\n        contentType: undefined,\n        dialogState: undefined,\n        intentName: undefined,\n        message: undefined,\n        messageFormat: undefined,\n        sessionAttributes: undefined,\n        sessionId: undefined,\n        slotToElicit: undefined,\n        slots: undefined\n      };\n      if (output.headers[\"content-type\"] !== undefined) {\n        contents.contentType = output.headers[\"content-type\"];\n      }\n      if (output.headers[\"x-amz-lex-intent-name\"] !== undefined) {\n        contents.intentName = output.headers[\"x-amz-lex-intent-name\"];\n      }\n      if (output.headers[\"x-amz-lex-slots\"] !== undefined) {\n        contents.slots = new __LazyJsonString(Buffer.from(output.headers[\"x-amz-lex-slots\"], \"base64\").toString(\"ascii\"));\n      }\n      if (output.headers[\"x-amz-lex-session-attributes\"] !== undefined) {\n        contents.sessionAttributes = new __LazyJsonString(Buffer.from(output.headers[\"x-amz-lex-session-attributes\"], \"base64\").toString(\"ascii\"));\n      }\n      if (output.headers[\"x-amz-lex-message\"] !== undefined) {\n        contents.message = output.headers[\"x-amz-lex-message\"];\n      }\n      if (output.headers[\"x-amz-lex-message-format\"] !== undefined) {\n        contents.messageFormat = output.headers[\"x-amz-lex-message-format\"];\n      }\n      if (output.headers[\"x-amz-lex-dialog-state\"] !== undefined) {\n        contents.dialogState = output.headers[\"x-amz-lex-dialog-state\"];\n      }\n      if (output.headers[\"x-amz-lex-slot-to-elicit\"] !== undefined) {\n        contents.slotToElicit = output.headers[\"x-amz-lex-slot-to-elicit\"];\n      }\n      if (output.headers[\"x-amz-lex-session-id\"] !== undefined) {\n        contents.sessionId = output.headers[\"x-amz-lex-session-id\"];\n      }\n      if (output.headers[\"x-amz-lex-active-contexts\"] !== undefined) {\n        contents.activeContexts = new __LazyJsonString(Buffer.from(output.headers[\"x-amz-lex-active-contexts\"], \"base64\").toString(\"ascii\"));\n      }\n      data = output.body;\n      contents.audioStream = data;\n      return [2 /*return*/, Promise.resolve(contents)];\n    });\n  });\n};\nvar deserializeAws_restJson1PutSessionCommandError = function (output, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;\n    var _l;\n    return __generator(this, function (_m) {\n      switch (_m.label) {\n        case 0:\n          _a = [__assign({}, output)];\n          _l = {};\n          return [4 /*yield*/, parseBody(output.body, context)];\n        case 1:\n          parsedOutput = __assign.apply(void 0, _a.concat([(_l.body = _m.sent(), _l)]));\n          errorCode = \"UnknownError\";\n          errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n          _b = errorCode;\n          switch (_b) {\n            case \"BadGatewayException\":\n              return [3 /*break*/, 2];\n            case \"com.amazonaws.lexruntimeservice#BadGatewayException\":\n              return [3 /*break*/, 2];\n            case \"BadRequestException\":\n              return [3 /*break*/, 4];\n            case \"com.amazonaws.lexruntimeservice#BadRequestException\":\n              return [3 /*break*/, 4];\n            case \"ConflictException\":\n              return [3 /*break*/, 6];\n            case \"com.amazonaws.lexruntimeservice#ConflictException\":\n              return [3 /*break*/, 6];\n            case \"DependencyFailedException\":\n              return [3 /*break*/, 8];\n            case \"com.amazonaws.lexruntimeservice#DependencyFailedException\":\n              return [3 /*break*/, 8];\n            case \"InternalFailureException\":\n              return [3 /*break*/, 10];\n            case \"com.amazonaws.lexruntimeservice#InternalFailureException\":\n              return [3 /*break*/, 10];\n            case \"LimitExceededException\":\n              return [3 /*break*/, 12];\n            case \"com.amazonaws.lexruntimeservice#LimitExceededException\":\n              return [3 /*break*/, 12];\n            case \"NotAcceptableException\":\n              return [3 /*break*/, 14];\n            case \"com.amazonaws.lexruntimeservice#NotAcceptableException\":\n              return [3 /*break*/, 14];\n            case \"NotFoundException\":\n              return [3 /*break*/, 16];\n            case \"com.amazonaws.lexruntimeservice#NotFoundException\":\n              return [3 /*break*/, 16];\n          }\n          return [3 /*break*/, 18];\n        case 2:\n          _c = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1BadGatewayExceptionResponse(parsedOutput, context)];\n        case 3:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([_m.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 19];\n        case 4:\n          _d = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];\n        case 5:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_m.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 19];\n        case 6:\n          _e = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];\n        case 7:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([_m.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 19];\n        case 8:\n          _f = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1DependencyFailedExceptionResponse(parsedOutput, context)];\n        case 9:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([_m.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 19];\n        case 10:\n          _g = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)];\n        case 11:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([_m.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 19];\n        case 12:\n          _h = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];\n        case 13:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([_m.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 19];\n        case 14:\n          _j = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1NotAcceptableExceptionResponse(parsedOutput, context)];\n        case 15:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([_m.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 19];\n        case 16:\n          _k = [{}];\n          return [4 /*yield*/, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];\n        case 17:\n          response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([_m.sent()])), {\n            name: errorCode,\n            $metadata: deserializeMetadata(output)\n          }]);\n          return [3 /*break*/, 19];\n        case 18:\n          parsedBody = parsedOutput.body;\n          errorCode = parsedBody.code || parsedBody.Code || errorCode;\n          response = __assign(__assign({}, parsedBody), {\n            name: \"\" + errorCode,\n            message: parsedBody.message || parsedBody.Message || errorCode,\n            $fault: \"client\",\n            $metadata: deserializeMetadata(output)\n          });\n          _m.label = 19;\n        case 19:\n          message = response.message || response.Message || errorCode;\n          response.message = message;\n          delete response.Message;\n          return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n      }\n    });\n  });\n};\nvar deserializeAws_restJson1BadGatewayExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"BadGatewayException\",\n        $fault: \"server\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.Message !== undefined && data.Message !== null) {\n        contents.Message = data.Message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1BadRequestExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"BadRequestException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1ConflictExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"ConflictException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1DependencyFailedExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"DependencyFailedException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.Message !== undefined && data.Message !== null) {\n        contents.Message = data.Message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1InternalFailureExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"InternalFailureException\",\n        $fault: \"server\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1LimitExceededExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"LimitExceededException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined,\n        retryAfterSeconds: undefined\n      };\n      if (parsedOutput.headers[\"retry-after\"] !== undefined) {\n        contents.retryAfterSeconds = parsedOutput.headers[\"retry-after\"];\n      }\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1LoopDetectedExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"LoopDetectedException\",\n        $fault: \"server\",\n        $metadata: deserializeMetadata(parsedOutput),\n        Message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.Message !== undefined && data.Message !== null) {\n        contents.Message = data.Message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1NotAcceptableExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"NotAcceptableException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1NotFoundExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"NotFoundException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1RequestTimeoutExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"RequestTimeoutException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar deserializeAws_restJson1UnsupportedMediaTypeExceptionResponse = function (parsedOutput, context) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n      contents = {\n        name: \"UnsupportedMediaTypeException\",\n        $fault: \"client\",\n        $metadata: deserializeMetadata(parsedOutput),\n        message: undefined\n      };\n      data = parsedOutput.body;\n      if (data.message !== undefined && data.message !== null) {\n        contents.message = data.message;\n      }\n      return [2 /*return*/, contents];\n    });\n  });\n};\nvar serializeAws_restJson1ActiveContext = function (input, context) {\n  return __assign(__assign(__assign({}, input.name !== undefined && input.name !== null && {\n    name: input.name\n  }), input.parameters !== undefined && input.parameters !== null && {\n    parameters: serializeAws_restJson1ActiveContextParametersMap(input.parameters, context)\n  }), input.timeToLive !== undefined && input.timeToLive !== null && {\n    timeToLive: serializeAws_restJson1ActiveContextTimeToLive(input.timeToLive, context)\n  });\n};\nvar serializeAws_restJson1ActiveContextParametersMap = function (input, context) {\n  return Object.entries(input).reduce(function (acc, _a) {\n    var _b;\n    var _c = __read(_a, 2),\n      key = _c[0],\n      value = _c[1];\n    if (value === null) {\n      return acc;\n    }\n    return __assign(__assign({}, acc), (_b = {}, _b[key] = value, _b));\n  }, {});\n};\nvar serializeAws_restJson1ActiveContextsList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return serializeAws_restJson1ActiveContext(entry, context);\n  });\n};\nvar serializeAws_restJson1ActiveContextTimeToLive = function (input, context) {\n  return __assign(__assign({}, input.timeToLiveInSeconds !== undefined && input.timeToLiveInSeconds !== null && {\n    timeToLiveInSeconds: input.timeToLiveInSeconds\n  }), input.turnsToLive !== undefined && input.turnsToLive !== null && {\n    turnsToLive: input.turnsToLive\n  });\n};\nvar serializeAws_restJson1DialogAction = function (input, context) {\n  return __assign(__assign(__assign(__assign(__assign(__assign(__assign({}, input.fulfillmentState !== undefined && input.fulfillmentState !== null && {\n    fulfillmentState: input.fulfillmentState\n  }), input.intentName !== undefined && input.intentName !== null && {\n    intentName: input.intentName\n  }), input.message !== undefined && input.message !== null && {\n    message: input.message\n  }), input.messageFormat !== undefined && input.messageFormat !== null && {\n    messageFormat: input.messageFormat\n  }), input.slotToElicit !== undefined && input.slotToElicit !== null && {\n    slotToElicit: input.slotToElicit\n  }), input.slots !== undefined && input.slots !== null && {\n    slots: serializeAws_restJson1StringMap(input.slots, context)\n  }), input.type !== undefined && input.type !== null && {\n    type: input.type\n  });\n};\nvar serializeAws_restJson1IntentSummary = function (input, context) {\n  return __assign(__assign(__assign(__assign(__assign(__assign(__assign({}, input.checkpointLabel !== undefined && input.checkpointLabel !== null && {\n    checkpointLabel: input.checkpointLabel\n  }), input.confirmationStatus !== undefined && input.confirmationStatus !== null && {\n    confirmationStatus: input.confirmationStatus\n  }), input.dialogActionType !== undefined && input.dialogActionType !== null && {\n    dialogActionType: input.dialogActionType\n  }), input.fulfillmentState !== undefined && input.fulfillmentState !== null && {\n    fulfillmentState: input.fulfillmentState\n  }), input.intentName !== undefined && input.intentName !== null && {\n    intentName: input.intentName\n  }), input.slotToElicit !== undefined && input.slotToElicit !== null && {\n    slotToElicit: input.slotToElicit\n  }), input.slots !== undefined && input.slots !== null && {\n    slots: serializeAws_restJson1StringMap(input.slots, context)\n  });\n};\nvar serializeAws_restJson1IntentSummaryList = function (input, context) {\n  return input.filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return serializeAws_restJson1IntentSummary(entry, context);\n  });\n};\nvar serializeAws_restJson1StringMap = function (input, context) {\n  return Object.entries(input).reduce(function (acc, _a) {\n    var _b;\n    var _c = __read(_a, 2),\n      key = _c[0],\n      value = _c[1];\n    if (value === null) {\n      return acc;\n    }\n    return __assign(__assign({}, acc), (_b = {}, _b[key] = value, _b));\n  }, {});\n};\nvar deserializeAws_restJson1ActiveContext = function (output, context) {\n  return {\n    name: output.name !== undefined && output.name !== null ? output.name : undefined,\n    parameters: output.parameters !== undefined && output.parameters !== null ? deserializeAws_restJson1ActiveContextParametersMap(output.parameters, context) : undefined,\n    timeToLive: output.timeToLive !== undefined && output.timeToLive !== null ? deserializeAws_restJson1ActiveContextTimeToLive(output.timeToLive, context) : undefined\n  };\n};\nvar deserializeAws_restJson1ActiveContextParametersMap = function (output, context) {\n  return Object.entries(output).reduce(function (acc, _a) {\n    var _b;\n    var _c = __read(_a, 2),\n      key = _c[0],\n      value = _c[1];\n    if (value === null) {\n      return acc;\n    }\n    return __assign(__assign({}, acc), (_b = {}, _b[key] = value, _b));\n  }, {});\n};\nvar deserializeAws_restJson1ActiveContextsList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1ActiveContext(entry, context);\n  });\n};\nvar deserializeAws_restJson1ActiveContextTimeToLive = function (output, context) {\n  return {\n    timeToLiveInSeconds: output.timeToLiveInSeconds !== undefined && output.timeToLiveInSeconds !== null ? output.timeToLiveInSeconds : undefined,\n    turnsToLive: output.turnsToLive !== undefined && output.turnsToLive !== null ? output.turnsToLive : undefined\n  };\n};\nvar deserializeAws_restJson1Button = function (output, context) {\n  return {\n    text: output.text !== undefined && output.text !== null ? output.text : undefined,\n    value: output.value !== undefined && output.value !== null ? output.value : undefined\n  };\n};\nvar deserializeAws_restJson1DialogAction = function (output, context) {\n  return {\n    fulfillmentState: output.fulfillmentState !== undefined && output.fulfillmentState !== null ? output.fulfillmentState : undefined,\n    intentName: output.intentName !== undefined && output.intentName !== null ? output.intentName : undefined,\n    message: output.message !== undefined && output.message !== null ? output.message : undefined,\n    messageFormat: output.messageFormat !== undefined && output.messageFormat !== null ? output.messageFormat : undefined,\n    slotToElicit: output.slotToElicit !== undefined && output.slotToElicit !== null ? output.slotToElicit : undefined,\n    slots: output.slots !== undefined && output.slots !== null ? deserializeAws_restJson1StringMap(output.slots, context) : undefined,\n    type: output.type !== undefined && output.type !== null ? output.type : undefined\n  };\n};\nvar deserializeAws_restJson1GenericAttachment = function (output, context) {\n  return {\n    attachmentLinkUrl: output.attachmentLinkUrl !== undefined && output.attachmentLinkUrl !== null ? output.attachmentLinkUrl : undefined,\n    buttons: output.buttons !== undefined && output.buttons !== null ? deserializeAws_restJson1listOfButtons(output.buttons, context) : undefined,\n    imageUrl: output.imageUrl !== undefined && output.imageUrl !== null ? output.imageUrl : undefined,\n    subTitle: output.subTitle !== undefined && output.subTitle !== null ? output.subTitle : undefined,\n    title: output.title !== undefined && output.title !== null ? output.title : undefined\n  };\n};\nvar deserializeAws_restJson1genericAttachmentList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1GenericAttachment(entry, context);\n  });\n};\nvar deserializeAws_restJson1IntentConfidence = function (output, context) {\n  return {\n    score: output.score !== undefined && output.score !== null ? output.score : undefined\n  };\n};\nvar deserializeAws_restJson1IntentList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1PredictedIntent(entry, context);\n  });\n};\nvar deserializeAws_restJson1IntentSummary = function (output, context) {\n  return {\n    checkpointLabel: output.checkpointLabel !== undefined && output.checkpointLabel !== null ? output.checkpointLabel : undefined,\n    confirmationStatus: output.confirmationStatus !== undefined && output.confirmationStatus !== null ? output.confirmationStatus : undefined,\n    dialogActionType: output.dialogActionType !== undefined && output.dialogActionType !== null ? output.dialogActionType : undefined,\n    fulfillmentState: output.fulfillmentState !== undefined && output.fulfillmentState !== null ? output.fulfillmentState : undefined,\n    intentName: output.intentName !== undefined && output.intentName !== null ? output.intentName : undefined,\n    slotToElicit: output.slotToElicit !== undefined && output.slotToElicit !== null ? output.slotToElicit : undefined,\n    slots: output.slots !== undefined && output.slots !== null ? deserializeAws_restJson1StringMap(output.slots, context) : undefined\n  };\n};\nvar deserializeAws_restJson1IntentSummaryList = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1IntentSummary(entry, context);\n  });\n};\nvar deserializeAws_restJson1listOfButtons = function (output, context) {\n  return (output || []).filter(function (e) {\n    return e != null;\n  }).map(function (entry) {\n    if (entry === null) {\n      return null;\n    }\n    return deserializeAws_restJson1Button(entry, context);\n  });\n};\nvar deserializeAws_restJson1PredictedIntent = function (output, context) {\n  return {\n    intentName: output.intentName !== undefined && output.intentName !== null ? output.intentName : undefined,\n    nluIntentConfidence: output.nluIntentConfidence !== undefined && output.nluIntentConfidence !== null ? deserializeAws_restJson1IntentConfidence(output.nluIntentConfidence, context) : undefined,\n    slots: output.slots !== undefined && output.slots !== null ? deserializeAws_restJson1StringMap(output.slots, context) : undefined\n  };\n};\nvar deserializeAws_restJson1ResponseCard = function (output, context) {\n  return {\n    contentType: output.contentType !== undefined && output.contentType !== null ? output.contentType : undefined,\n    genericAttachments: output.genericAttachments !== undefined && output.genericAttachments !== null ? deserializeAws_restJson1genericAttachmentList(output.genericAttachments, context) : undefined,\n    version: output.version !== undefined && output.version !== null ? output.version : undefined\n  };\n};\nvar deserializeAws_restJson1SentimentResponse = function (output, context) {\n  return {\n    sentimentLabel: output.sentimentLabel !== undefined && output.sentimentLabel !== null ? output.sentimentLabel : undefined,\n    sentimentScore: output.sentimentScore !== undefined && output.sentimentScore !== null ? output.sentimentScore : undefined\n  };\n};\nvar deserializeAws_restJson1StringMap = function (output, context) {\n  return Object.entries(output).reduce(function (acc, _a) {\n    var _b;\n    var _c = __read(_a, 2),\n      key = _c[0],\n      value = _c[1];\n    if (value === null) {\n      return acc;\n    }\n    return __assign(__assign({}, acc), (_b = {}, _b[key] = value, _b));\n  }, {});\n};\nvar deserializeMetadata = function (output) {\n  var _a;\n  return {\n    httpStatusCode: output.statusCode,\n    requestId: (_a = output.headers[\"x-amzn-requestid\"]) !== null && _a !== void 0 ? _a : output.headers[\"x-amzn-request-id\"],\n    extendedRequestId: output.headers[\"x-amz-id-2\"],\n    cfId: output.headers[\"x-amz-cf-id\"]\n  };\n};\n// Collect low-level response body stream to Uint8Array.\nvar collectBody = function (streamBody, context) {\n  if (streamBody === void 0) {\n    streamBody = new Uint8Array();\n  }\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\n// Encode Uint8Array data into string with utf-8.\nvar collectBodyString = function (streamBody, context) {\n  return collectBody(streamBody, context).then(function (body) {\n    return context.utf8Encoder(body);\n  });\n};\nvar isSerializableHeaderValue = function (value) {\n  return value !== undefined && value !== null && value !== \"\" && (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\n};\nvar parseBody = function (streamBody, context) {\n  return collectBodyString(streamBody, context).then(function (encoded) {\n    if (encoded.length) {\n      return JSON.parse(encoded);\n    }\n    return {};\n  });\n};\n/**\n * Load an error code for the aws.rest-json-1.1 protocol.\n */\nvar loadRestJsonErrorCode = function (output, data) {\n  var findKey = function (object, key) {\n    return Object.keys(object).find(function (k) {\n      return k.toLowerCase() === key.toLowerCase();\n    });\n  };\n  var sanitizeErrorCode = function (rawValue) {\n    var cleanValue = rawValue;\n    if (cleanValue.indexOf(\":\") >= 0) {\n      cleanValue = cleanValue.split(\":\")[0];\n    }\n    if (cleanValue.indexOf(\"#\") >= 0) {\n      cleanValue = cleanValue.split(\"#\")[1];\n    }\n    return cleanValue;\n  };\n  var headerKey = findKey(output.headers, \"x-amzn-errortype\");\n  if (headerKey !== undefined) {\n    return sanitizeErrorCode(output.headers[headerKey]);\n  }\n  if (data.code !== undefined) {\n    return sanitizeErrorCode(data.code);\n  }\n  if (data[\"__type\"] !== undefined) {\n    return sanitizeErrorCode(data[\"__type\"]);\n  }\n  return \"\";\n};","map":{"version":3,"names":["HttpRequest","__HttpRequest","LazyJsonString","__LazyJsonString","extendedEncodeURIComponent","__extendedEncodeURIComponent","serializeAws_restJson1DeleteSessionCommand","input","context","__awaiter","headers","resolvedPath","botName","undefined","labelValue","length","Error","replace","botAlias","userId","endpoint","_a","_c","sent","hostname","_b","protocol","port","method","path","body","serializeAws_restJson1GetSessionCommand","query","__assign","checkpointLabelFilter","serializeAws_restJson1PostContentCommand","isSerializableHeaderValue","sessionAttributes","Buffer","from","fromObject","toString","requestAttributes","contentType","accept","activeContexts","inputStream","serializeAws_restJson1PostTextCommand","JSON","stringify","serializeAws_restJson1ActiveContextsList","inputText","serializeAws_restJson1StringMap","serializeAws_restJson1PutSessionCommand","dialogAction","serializeAws_restJson1DialogAction","recentIntentSummaryView","serializeAws_restJson1IntentSummaryList","deserializeAws_restJson1DeleteSessionCommand","output","statusCode","deserializeAws_restJson1DeleteSessionCommandError","contents","$metadata","deserializeMetadata","sessionId","parseBody","data","Promise","resolve","parsedOutput","apply","concat","_h","_j","errorCode","loadRestJsonErrorCode","deserializeAws_restJson1BadRequestExceptionResponse","response","name","deserializeAws_restJson1ConflictExceptionResponse","_d","deserializeAws_restJson1InternalFailureExceptionResponse","_e","deserializeAws_restJson1LimitExceededExceptionResponse","_f","deserializeAws_restJson1NotFoundExceptionResponse","_g","parsedBody","code","Code","message","Message","$fault","reject","Object","assign","deserializeAws_restJson1GetSessionCommand","deserializeAws_restJson1GetSessionCommandError","deserializeAws_restJson1ActiveContextsList","deserializeAws_restJson1DialogAction","deserializeAws_restJson1IntentSummaryList","deserializeAws_restJson1StringMap","deserializeAws_restJson1PostContentCommand","deserializeAws_restJson1PostContentCommandError","alternativeIntents","audioStream","botVersion","dialogState","inputTranscript","intentName","messageFormat","nluIntentConfidence","sentimentResponse","slotToElicit","slots","_p","_q","deserializeAws_restJson1BadGatewayExceptionResponse","deserializeAws_restJson1DependencyFailedExceptionResponse","deserializeAws_restJson1LoopDetectedExceptionResponse","deserializeAws_restJson1NotAcceptableExceptionResponse","_k","_l","deserializeAws_restJson1RequestTimeoutExceptionResponse","_m","deserializeAws_restJson1UnsupportedMediaTypeExceptionResponse","_o","deserializeAws_restJson1PostTextCommand","deserializeAws_restJson1PostTextCommandError","responseCard","deserializeAws_restJson1IntentList","deserializeAws_restJson1IntentConfidence","deserializeAws_restJson1ResponseCard","deserializeAws_restJson1SentimentResponse","deserializeAws_restJson1PutSessionCommand","deserializeAws_restJson1PutSessionCommandError","retryAfterSeconds","serializeAws_restJson1ActiveContext","parameters","serializeAws_restJson1ActiveContextParametersMap","timeToLive","serializeAws_restJson1ActiveContextTimeToLive","entries","reduce","acc","__read","key","value","filter","e","map","entry","timeToLiveInSeconds","turnsToLive","fulfillmentState","type","serializeAws_restJson1IntentSummary","checkpointLabel","confirmationStatus","dialogActionType","deserializeAws_restJson1ActiveContext","deserializeAws_restJson1ActiveContextParametersMap","deserializeAws_restJson1ActiveContextTimeToLive","deserializeAws_restJson1Button","text","deserializeAws_restJson1GenericAttachment","attachmentLinkUrl","buttons","deserializeAws_restJson1listOfButtons","imageUrl","subTitle","title","deserializeAws_restJson1genericAttachmentList","score","deserializeAws_restJson1PredictedIntent","deserializeAws_restJson1IntentSummary","genericAttachments","version","sentimentLabel","sentimentScore","httpStatusCode","requestId","extendedRequestId","cfId","collectBody","streamBody","Uint8Array","streamCollector","collectBodyString","then","utf8Encoder","getOwnPropertyNames","includes","size","encoded","parse","findKey","object","keys","find","k","toLowerCase","sanitizeErrorCode","rawValue","cleanValue","indexOf","split","headerKey"],"sources":["/Users/ericli/node_modules/@aws-sdk/client-lex-runtime-service/protocols/Aws_restJson1.ts"],"sourcesContent":["import { DeleteSessionCommandInput, DeleteSessionCommandOutput } from \"../commands/DeleteSessionCommand\";\nimport { GetSessionCommandInput, GetSessionCommandOutput } from \"../commands/GetSessionCommand\";\nimport { PostContentCommandInput, PostContentCommandOutput } from \"../commands/PostContentCommand\";\nimport { PostTextCommandInput, PostTextCommandOutput } from \"../commands/PostTextCommand\";\nimport { PutSessionCommandInput, PutSessionCommandOutput } from \"../commands/PutSessionCommand\";\nimport {\n  ActiveContext,\n  ActiveContextTimeToLive,\n  BadGatewayException,\n  BadRequestException,\n  Button,\n  ConflictException,\n  DependencyFailedException,\n  DialogAction,\n  GenericAttachment,\n  IntentConfidence,\n  IntentSummary,\n  InternalFailureException,\n  LimitExceededException,\n  LoopDetectedException,\n  NotAcceptableException,\n  NotFoundException,\n  PredictedIntent,\n  RequestTimeoutException,\n  ResponseCard,\n  SentimentResponse,\n  UnsupportedMediaTypeException,\n} from \"../models/models_0\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport {\n  LazyJsonString as __LazyJsonString,\n  SmithyException as __SmithyException,\n  extendedEncodeURIComponent as __extendedEncodeURIComponent,\n} from \"@aws-sdk/smithy-client\";\nimport {\n  Endpoint as __Endpoint,\n  MetadataBearer as __MetadataBearer,\n  ResponseMetadata as __ResponseMetadata,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport const serializeAws_restJson1DeleteSessionCommand = async (\n  input: DeleteSessionCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/bot/{botName}/alias/{botAlias}/user/{userId}/session\";\n  if (input.botName !== undefined) {\n    const labelValue: string = input.botName;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: botName.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{botName}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: botName.\");\n  }\n  if (input.botAlias !== undefined) {\n    const labelValue: string = input.botAlias;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: botAlias.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{botAlias}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: botAlias.\");\n  }\n  if (input.userId !== undefined) {\n    const labelValue: string = input.userId;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: userId.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{userId}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: userId.\");\n  }\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"DELETE\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1GetSessionCommand = async (\n  input: GetSessionCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {};\n  let resolvedPath = \"/bot/{botName}/alias/{botAlias}/user/{userId}/session\";\n  if (input.botName !== undefined) {\n    const labelValue: string = input.botName;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: botName.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{botName}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: botName.\");\n  }\n  if (input.botAlias !== undefined) {\n    const labelValue: string = input.botAlias;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: botAlias.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{botAlias}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: botAlias.\");\n  }\n  if (input.userId !== undefined) {\n    const labelValue: string = input.userId;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: userId.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{userId}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: userId.\");\n  }\n  const query: any = {\n    ...(input.checkpointLabelFilter !== undefined && { checkpointLabelFilter: input.checkpointLabelFilter }),\n  };\n  let body: any;\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"GET\",\n    headers,\n    path: resolvedPath,\n    query,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1PostContentCommand = async (\n  input: PostContentCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/octet-stream\",\n    \"x-amz-content-sha256\": \"UNSIGNED-PAYLOAD\",\n    ...(isSerializableHeaderValue(input.sessionAttributes) && {\n      \"x-amz-lex-session-attributes\": Buffer.from(__LazyJsonString.fromObject(input.sessionAttributes!)).toString(\n        \"base64\"\n      ),\n    }),\n    ...(isSerializableHeaderValue(input.requestAttributes) && {\n      \"x-amz-lex-request-attributes\": Buffer.from(__LazyJsonString.fromObject(input.requestAttributes!)).toString(\n        \"base64\"\n      ),\n    }),\n    ...(isSerializableHeaderValue(input.contentType) && { \"content-type\": input.contentType! }),\n    ...(isSerializableHeaderValue(input.accept) && { accept: input.accept! }),\n    ...(isSerializableHeaderValue(input.activeContexts) && {\n      \"x-amz-lex-active-contexts\": Buffer.from(__LazyJsonString.fromObject(input.activeContexts!)).toString(\"base64\"),\n    }),\n  };\n  let resolvedPath = \"/bot/{botName}/alias/{botAlias}/user/{userId}/content\";\n  if (input.botName !== undefined) {\n    const labelValue: string = input.botName;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: botName.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{botName}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: botName.\");\n  }\n  if (input.botAlias !== undefined) {\n    const labelValue: string = input.botAlias;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: botAlias.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{botAlias}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: botAlias.\");\n  }\n  if (input.userId !== undefined) {\n    const labelValue: string = input.userId;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: userId.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{userId}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: userId.\");\n  }\n  let body: any;\n  if (input.inputStream !== undefined) {\n    body = input.inputStream;\n  }\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1PostTextCommand = async (\n  input: PostTextCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/json\",\n  };\n  let resolvedPath = \"/bot/{botName}/alias/{botAlias}/user/{userId}/text\";\n  if (input.botName !== undefined) {\n    const labelValue: string = input.botName;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: botName.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{botName}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: botName.\");\n  }\n  if (input.botAlias !== undefined) {\n    const labelValue: string = input.botAlias;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: botAlias.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{botAlias}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: botAlias.\");\n  }\n  if (input.userId !== undefined) {\n    const labelValue: string = input.userId;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: userId.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{userId}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: userId.\");\n  }\n  let body: any;\n  body = JSON.stringify({\n    ...(input.activeContexts !== undefined &&\n      input.activeContexts !== null && {\n        activeContexts: serializeAws_restJson1ActiveContextsList(input.activeContexts, context),\n      }),\n    ...(input.inputText !== undefined && input.inputText !== null && { inputText: input.inputText }),\n    ...(input.requestAttributes !== undefined &&\n      input.requestAttributes !== null && {\n        requestAttributes: serializeAws_restJson1StringMap(input.requestAttributes, context),\n      }),\n    ...(input.sessionAttributes !== undefined &&\n      input.sessionAttributes !== null && {\n        sessionAttributes: serializeAws_restJson1StringMap(input.sessionAttributes, context),\n      }),\n  });\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const serializeAws_restJson1PutSessionCommand = async (\n  input: PutSessionCommandInput,\n  context: __SerdeContext\n): Promise<__HttpRequest> => {\n  const headers: any = {\n    \"content-type\": \"application/json\",\n    ...(isSerializableHeaderValue(input.accept) && { accept: input.accept! }),\n  };\n  let resolvedPath = \"/bot/{botName}/alias/{botAlias}/user/{userId}/session\";\n  if (input.botName !== undefined) {\n    const labelValue: string = input.botName;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: botName.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{botName}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: botName.\");\n  }\n  if (input.botAlias !== undefined) {\n    const labelValue: string = input.botAlias;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: botAlias.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{botAlias}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: botAlias.\");\n  }\n  if (input.userId !== undefined) {\n    const labelValue: string = input.userId;\n    if (labelValue.length <= 0) {\n      throw new Error(\"Empty value provided for input HTTP label: userId.\");\n    }\n    resolvedPath = resolvedPath.replace(\"{userId}\", __extendedEncodeURIComponent(labelValue));\n  } else {\n    throw new Error(\"No value provided for input HTTP label: userId.\");\n  }\n  let body: any;\n  body = JSON.stringify({\n    ...(input.activeContexts !== undefined &&\n      input.activeContexts !== null && {\n        activeContexts: serializeAws_restJson1ActiveContextsList(input.activeContexts, context),\n      }),\n    ...(input.dialogAction !== undefined &&\n      input.dialogAction !== null && { dialogAction: serializeAws_restJson1DialogAction(input.dialogAction, context) }),\n    ...(input.recentIntentSummaryView !== undefined &&\n      input.recentIntentSummaryView !== null && {\n        recentIntentSummaryView: serializeAws_restJson1IntentSummaryList(input.recentIntentSummaryView, context),\n      }),\n    ...(input.sessionAttributes !== undefined &&\n      input.sessionAttributes !== null && {\n        sessionAttributes: serializeAws_restJson1StringMap(input.sessionAttributes, context),\n      }),\n  });\n  const { hostname, protocol = \"https\", port } = await context.endpoint();\n  return new __HttpRequest({\n    protocol,\n    hostname,\n    port,\n    method: \"POST\",\n    headers,\n    path: resolvedPath,\n    body,\n  });\n};\n\nexport const deserializeAws_restJson1DeleteSessionCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteSessionCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1DeleteSessionCommandError(output, context);\n  }\n  const contents: DeleteSessionCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    botAlias: undefined,\n    botName: undefined,\n    sessionId: undefined,\n    userId: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.botAlias !== undefined && data.botAlias !== null) {\n    contents.botAlias = data.botAlias;\n  }\n  if (data.botName !== undefined && data.botName !== null) {\n    contents.botName = data.botName;\n  }\n  if (data.sessionId !== undefined && data.sessionId !== null) {\n    contents.sessionId = data.sessionId;\n  }\n  if (data.userId !== undefined && data.userId !== null) {\n    contents.userId = data.userId;\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1DeleteSessionCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<DeleteSessionCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"BadRequestException\":\n    case \"com.amazonaws.lexruntimeservice#BadRequestException\":\n      response = {\n        ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ConflictException\":\n    case \"com.amazonaws.lexruntimeservice#ConflictException\":\n      response = {\n        ...(await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InternalFailureException\":\n    case \"com.amazonaws.lexruntimeservice#InternalFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LimitExceededException\":\n    case \"com.amazonaws.lexruntimeservice#LimitExceededException\":\n      response = {\n        ...(await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"NotFoundException\":\n    case \"com.amazonaws.lexruntimeservice#NotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1GetSessionCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetSessionCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1GetSessionCommandError(output, context);\n  }\n  const contents: GetSessionCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    activeContexts: undefined,\n    dialogAction: undefined,\n    recentIntentSummaryView: undefined,\n    sessionAttributes: undefined,\n    sessionId: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.activeContexts !== undefined && data.activeContexts !== null) {\n    contents.activeContexts = deserializeAws_restJson1ActiveContextsList(data.activeContexts, context);\n  }\n  if (data.dialogAction !== undefined && data.dialogAction !== null) {\n    contents.dialogAction = deserializeAws_restJson1DialogAction(data.dialogAction, context);\n  }\n  if (data.recentIntentSummaryView !== undefined && data.recentIntentSummaryView !== null) {\n    contents.recentIntentSummaryView = deserializeAws_restJson1IntentSummaryList(data.recentIntentSummaryView, context);\n  }\n  if (data.sessionAttributes !== undefined && data.sessionAttributes !== null) {\n    contents.sessionAttributes = deserializeAws_restJson1StringMap(data.sessionAttributes, context);\n  }\n  if (data.sessionId !== undefined && data.sessionId !== null) {\n    contents.sessionId = data.sessionId;\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1GetSessionCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<GetSessionCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"BadRequestException\":\n    case \"com.amazonaws.lexruntimeservice#BadRequestException\":\n      response = {\n        ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InternalFailureException\":\n    case \"com.amazonaws.lexruntimeservice#InternalFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LimitExceededException\":\n    case \"com.amazonaws.lexruntimeservice#LimitExceededException\":\n      response = {\n        ...(await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"NotFoundException\":\n    case \"com.amazonaws.lexruntimeservice#NotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1PostContentCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PostContentCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1PostContentCommandError(output, context);\n  }\n  const contents: PostContentCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    activeContexts: undefined,\n    alternativeIntents: undefined,\n    audioStream: undefined,\n    botVersion: undefined,\n    contentType: undefined,\n    dialogState: undefined,\n    inputTranscript: undefined,\n    intentName: undefined,\n    message: undefined,\n    messageFormat: undefined,\n    nluIntentConfidence: undefined,\n    sentimentResponse: undefined,\n    sessionAttributes: undefined,\n    sessionId: undefined,\n    slotToElicit: undefined,\n    slots: undefined,\n  };\n  if (output.headers[\"content-type\"] !== undefined) {\n    contents.contentType = output.headers[\"content-type\"];\n  }\n  if (output.headers[\"x-amz-lex-intent-name\"] !== undefined) {\n    contents.intentName = output.headers[\"x-amz-lex-intent-name\"];\n  }\n  if (output.headers[\"x-amz-lex-nlu-intent-confidence\"] !== undefined) {\n    contents.nluIntentConfidence = new __LazyJsonString(\n      Buffer.from(output.headers[\"x-amz-lex-nlu-intent-confidence\"], \"base64\").toString(\"ascii\")\n    );\n  }\n  if (output.headers[\"x-amz-lex-alternative-intents\"] !== undefined) {\n    contents.alternativeIntents = new __LazyJsonString(\n      Buffer.from(output.headers[\"x-amz-lex-alternative-intents\"], \"base64\").toString(\"ascii\")\n    );\n  }\n  if (output.headers[\"x-amz-lex-slots\"] !== undefined) {\n    contents.slots = new __LazyJsonString(Buffer.from(output.headers[\"x-amz-lex-slots\"], \"base64\").toString(\"ascii\"));\n  }\n  if (output.headers[\"x-amz-lex-session-attributes\"] !== undefined) {\n    contents.sessionAttributes = new __LazyJsonString(\n      Buffer.from(output.headers[\"x-amz-lex-session-attributes\"], \"base64\").toString(\"ascii\")\n    );\n  }\n  if (output.headers[\"x-amz-lex-sentiment\"] !== undefined) {\n    contents.sentimentResponse = output.headers[\"x-amz-lex-sentiment\"];\n  }\n  if (output.headers[\"x-amz-lex-message\"] !== undefined) {\n    contents.message = output.headers[\"x-amz-lex-message\"];\n  }\n  if (output.headers[\"x-amz-lex-message-format\"] !== undefined) {\n    contents.messageFormat = output.headers[\"x-amz-lex-message-format\"];\n  }\n  if (output.headers[\"x-amz-lex-dialog-state\"] !== undefined) {\n    contents.dialogState = output.headers[\"x-amz-lex-dialog-state\"];\n  }\n  if (output.headers[\"x-amz-lex-slot-to-elicit\"] !== undefined) {\n    contents.slotToElicit = output.headers[\"x-amz-lex-slot-to-elicit\"];\n  }\n  if (output.headers[\"x-amz-lex-input-transcript\"] !== undefined) {\n    contents.inputTranscript = output.headers[\"x-amz-lex-input-transcript\"];\n  }\n  if (output.headers[\"x-amz-lex-bot-version\"] !== undefined) {\n    contents.botVersion = output.headers[\"x-amz-lex-bot-version\"];\n  }\n  if (output.headers[\"x-amz-lex-session-id\"] !== undefined) {\n    contents.sessionId = output.headers[\"x-amz-lex-session-id\"];\n  }\n  if (output.headers[\"x-amz-lex-active-contexts\"] !== undefined) {\n    contents.activeContexts = new __LazyJsonString(\n      Buffer.from(output.headers[\"x-amz-lex-active-contexts\"], \"base64\").toString(\"ascii\")\n    );\n  }\n  const data: any = output.body;\n  contents.audioStream = data;\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1PostContentCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PostContentCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"BadGatewayException\":\n    case \"com.amazonaws.lexruntimeservice#BadGatewayException\":\n      response = {\n        ...(await deserializeAws_restJson1BadGatewayExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"BadRequestException\":\n    case \"com.amazonaws.lexruntimeservice#BadRequestException\":\n      response = {\n        ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ConflictException\":\n    case \"com.amazonaws.lexruntimeservice#ConflictException\":\n      response = {\n        ...(await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"DependencyFailedException\":\n    case \"com.amazonaws.lexruntimeservice#DependencyFailedException\":\n      response = {\n        ...(await deserializeAws_restJson1DependencyFailedExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InternalFailureException\":\n    case \"com.amazonaws.lexruntimeservice#InternalFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LimitExceededException\":\n    case \"com.amazonaws.lexruntimeservice#LimitExceededException\":\n      response = {\n        ...(await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LoopDetectedException\":\n    case \"com.amazonaws.lexruntimeservice#LoopDetectedException\":\n      response = {\n        ...(await deserializeAws_restJson1LoopDetectedExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"NotAcceptableException\":\n    case \"com.amazonaws.lexruntimeservice#NotAcceptableException\":\n      response = {\n        ...(await deserializeAws_restJson1NotAcceptableExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"NotFoundException\":\n    case \"com.amazonaws.lexruntimeservice#NotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"RequestTimeoutException\":\n    case \"com.amazonaws.lexruntimeservice#RequestTimeoutException\":\n      response = {\n        ...(await deserializeAws_restJson1RequestTimeoutExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"UnsupportedMediaTypeException\":\n    case \"com.amazonaws.lexruntimeservice#UnsupportedMediaTypeException\":\n      response = {\n        ...(await deserializeAws_restJson1UnsupportedMediaTypeExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1PostTextCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PostTextCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1PostTextCommandError(output, context);\n  }\n  const contents: PostTextCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    activeContexts: undefined,\n    alternativeIntents: undefined,\n    botVersion: undefined,\n    dialogState: undefined,\n    intentName: undefined,\n    message: undefined,\n    messageFormat: undefined,\n    nluIntentConfidence: undefined,\n    responseCard: undefined,\n    sentimentResponse: undefined,\n    sessionAttributes: undefined,\n    sessionId: undefined,\n    slotToElicit: undefined,\n    slots: undefined,\n  };\n  const data: any = await parseBody(output.body, context);\n  if (data.activeContexts !== undefined && data.activeContexts !== null) {\n    contents.activeContexts = deserializeAws_restJson1ActiveContextsList(data.activeContexts, context);\n  }\n  if (data.alternativeIntents !== undefined && data.alternativeIntents !== null) {\n    contents.alternativeIntents = deserializeAws_restJson1IntentList(data.alternativeIntents, context);\n  }\n  if (data.botVersion !== undefined && data.botVersion !== null) {\n    contents.botVersion = data.botVersion;\n  }\n  if (data.dialogState !== undefined && data.dialogState !== null) {\n    contents.dialogState = data.dialogState;\n  }\n  if (data.intentName !== undefined && data.intentName !== null) {\n    contents.intentName = data.intentName;\n  }\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  if (data.messageFormat !== undefined && data.messageFormat !== null) {\n    contents.messageFormat = data.messageFormat;\n  }\n  if (data.nluIntentConfidence !== undefined && data.nluIntentConfidence !== null) {\n    contents.nluIntentConfidence = deserializeAws_restJson1IntentConfidence(data.nluIntentConfidence, context);\n  }\n  if (data.responseCard !== undefined && data.responseCard !== null) {\n    contents.responseCard = deserializeAws_restJson1ResponseCard(data.responseCard, context);\n  }\n  if (data.sentimentResponse !== undefined && data.sentimentResponse !== null) {\n    contents.sentimentResponse = deserializeAws_restJson1SentimentResponse(data.sentimentResponse, context);\n  }\n  if (data.sessionAttributes !== undefined && data.sessionAttributes !== null) {\n    contents.sessionAttributes = deserializeAws_restJson1StringMap(data.sessionAttributes, context);\n  }\n  if (data.sessionId !== undefined && data.sessionId !== null) {\n    contents.sessionId = data.sessionId;\n  }\n  if (data.slotToElicit !== undefined && data.slotToElicit !== null) {\n    contents.slotToElicit = data.slotToElicit;\n  }\n  if (data.slots !== undefined && data.slots !== null) {\n    contents.slots = deserializeAws_restJson1StringMap(data.slots, context);\n  }\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1PostTextCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PostTextCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"BadGatewayException\":\n    case \"com.amazonaws.lexruntimeservice#BadGatewayException\":\n      response = {\n        ...(await deserializeAws_restJson1BadGatewayExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"BadRequestException\":\n    case \"com.amazonaws.lexruntimeservice#BadRequestException\":\n      response = {\n        ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ConflictException\":\n    case \"com.amazonaws.lexruntimeservice#ConflictException\":\n      response = {\n        ...(await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"DependencyFailedException\":\n    case \"com.amazonaws.lexruntimeservice#DependencyFailedException\":\n      response = {\n        ...(await deserializeAws_restJson1DependencyFailedExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InternalFailureException\":\n    case \"com.amazonaws.lexruntimeservice#InternalFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LimitExceededException\":\n    case \"com.amazonaws.lexruntimeservice#LimitExceededException\":\n      response = {\n        ...(await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LoopDetectedException\":\n    case \"com.amazonaws.lexruntimeservice#LoopDetectedException\":\n      response = {\n        ...(await deserializeAws_restJson1LoopDetectedExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"NotFoundException\":\n    case \"com.amazonaws.lexruntimeservice#NotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nexport const deserializeAws_restJson1PutSessionCommand = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutSessionCommandOutput> => {\n  if (output.statusCode !== 200 && output.statusCode >= 300) {\n    return deserializeAws_restJson1PutSessionCommandError(output, context);\n  }\n  const contents: PutSessionCommandOutput = {\n    $metadata: deserializeMetadata(output),\n    activeContexts: undefined,\n    audioStream: undefined,\n    contentType: undefined,\n    dialogState: undefined,\n    intentName: undefined,\n    message: undefined,\n    messageFormat: undefined,\n    sessionAttributes: undefined,\n    sessionId: undefined,\n    slotToElicit: undefined,\n    slots: undefined,\n  };\n  if (output.headers[\"content-type\"] !== undefined) {\n    contents.contentType = output.headers[\"content-type\"];\n  }\n  if (output.headers[\"x-amz-lex-intent-name\"] !== undefined) {\n    contents.intentName = output.headers[\"x-amz-lex-intent-name\"];\n  }\n  if (output.headers[\"x-amz-lex-slots\"] !== undefined) {\n    contents.slots = new __LazyJsonString(Buffer.from(output.headers[\"x-amz-lex-slots\"], \"base64\").toString(\"ascii\"));\n  }\n  if (output.headers[\"x-amz-lex-session-attributes\"] !== undefined) {\n    contents.sessionAttributes = new __LazyJsonString(\n      Buffer.from(output.headers[\"x-amz-lex-session-attributes\"], \"base64\").toString(\"ascii\")\n    );\n  }\n  if (output.headers[\"x-amz-lex-message\"] !== undefined) {\n    contents.message = output.headers[\"x-amz-lex-message\"];\n  }\n  if (output.headers[\"x-amz-lex-message-format\"] !== undefined) {\n    contents.messageFormat = output.headers[\"x-amz-lex-message-format\"];\n  }\n  if (output.headers[\"x-amz-lex-dialog-state\"] !== undefined) {\n    contents.dialogState = output.headers[\"x-amz-lex-dialog-state\"];\n  }\n  if (output.headers[\"x-amz-lex-slot-to-elicit\"] !== undefined) {\n    contents.slotToElicit = output.headers[\"x-amz-lex-slot-to-elicit\"];\n  }\n  if (output.headers[\"x-amz-lex-session-id\"] !== undefined) {\n    contents.sessionId = output.headers[\"x-amz-lex-session-id\"];\n  }\n  if (output.headers[\"x-amz-lex-active-contexts\"] !== undefined) {\n    contents.activeContexts = new __LazyJsonString(\n      Buffer.from(output.headers[\"x-amz-lex-active-contexts\"], \"base64\").toString(\"ascii\")\n    );\n  }\n  const data: any = output.body;\n  contents.audioStream = data;\n  return Promise.resolve(contents);\n};\n\nconst deserializeAws_restJson1PutSessionCommandError = async (\n  output: __HttpResponse,\n  context: __SerdeContext\n): Promise<PutSessionCommandOutput> => {\n  const parsedOutput: any = {\n    ...output,\n    body: await parseBody(output.body, context),\n  };\n  let response: __SmithyException & __MetadataBearer & { [key: string]: any };\n  let errorCode: string = \"UnknownError\";\n  errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n  switch (errorCode) {\n    case \"BadGatewayException\":\n    case \"com.amazonaws.lexruntimeservice#BadGatewayException\":\n      response = {\n        ...(await deserializeAws_restJson1BadGatewayExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"BadRequestException\":\n    case \"com.amazonaws.lexruntimeservice#BadRequestException\":\n      response = {\n        ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"ConflictException\":\n    case \"com.amazonaws.lexruntimeservice#ConflictException\":\n      response = {\n        ...(await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"DependencyFailedException\":\n    case \"com.amazonaws.lexruntimeservice#DependencyFailedException\":\n      response = {\n        ...(await deserializeAws_restJson1DependencyFailedExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"InternalFailureException\":\n    case \"com.amazonaws.lexruntimeservice#InternalFailureException\":\n      response = {\n        ...(await deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"LimitExceededException\":\n    case \"com.amazonaws.lexruntimeservice#LimitExceededException\":\n      response = {\n        ...(await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"NotAcceptableException\":\n    case \"com.amazonaws.lexruntimeservice#NotAcceptableException\":\n      response = {\n        ...(await deserializeAws_restJson1NotAcceptableExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    case \"NotFoundException\":\n    case \"com.amazonaws.lexruntimeservice#NotFoundException\":\n      response = {\n        ...(await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)),\n        name: errorCode,\n        $metadata: deserializeMetadata(output),\n      };\n      break;\n    default:\n      const parsedBody = parsedOutput.body;\n      errorCode = parsedBody.code || parsedBody.Code || errorCode;\n      response = {\n        ...parsedBody,\n        name: `${errorCode}`,\n        message: parsedBody.message || parsedBody.Message || errorCode,\n        $fault: \"client\",\n        $metadata: deserializeMetadata(output),\n      } as any;\n  }\n  const message = response.message || response.Message || errorCode;\n  response.message = message;\n  delete response.Message;\n  return Promise.reject(Object.assign(new Error(message), response));\n};\n\nconst deserializeAws_restJson1BadGatewayExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<BadGatewayException> => {\n  const contents: BadGatewayException = {\n    name: \"BadGatewayException\",\n    $fault: \"server\",\n    $metadata: deserializeMetadata(parsedOutput),\n    Message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.Message !== undefined && data.Message !== null) {\n    contents.Message = data.Message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1BadRequestExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<BadRequestException> => {\n  const contents: BadRequestException = {\n    name: \"BadRequestException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1ConflictExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<ConflictException> => {\n  const contents: ConflictException = {\n    name: \"ConflictException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1DependencyFailedExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<DependencyFailedException> => {\n  const contents: DependencyFailedException = {\n    name: \"DependencyFailedException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    Message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.Message !== undefined && data.Message !== null) {\n    contents.Message = data.Message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1InternalFailureExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<InternalFailureException> => {\n  const contents: InternalFailureException = {\n    name: \"InternalFailureException\",\n    $fault: \"server\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1LimitExceededExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<LimitExceededException> => {\n  const contents: LimitExceededException = {\n    name: \"LimitExceededException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n    retryAfterSeconds: undefined,\n  };\n  if (parsedOutput.headers[\"retry-after\"] !== undefined) {\n    contents.retryAfterSeconds = parsedOutput.headers[\"retry-after\"];\n  }\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1LoopDetectedExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<LoopDetectedException> => {\n  const contents: LoopDetectedException = {\n    name: \"LoopDetectedException\",\n    $fault: \"server\",\n    $metadata: deserializeMetadata(parsedOutput),\n    Message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.Message !== undefined && data.Message !== null) {\n    contents.Message = data.Message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1NotAcceptableExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<NotAcceptableException> => {\n  const contents: NotAcceptableException = {\n    name: \"NotAcceptableException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1NotFoundExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<NotFoundException> => {\n  const contents: NotFoundException = {\n    name: \"NotFoundException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1RequestTimeoutExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<RequestTimeoutException> => {\n  const contents: RequestTimeoutException = {\n    name: \"RequestTimeoutException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst deserializeAws_restJson1UnsupportedMediaTypeExceptionResponse = async (\n  parsedOutput: any,\n  context: __SerdeContext\n): Promise<UnsupportedMediaTypeException> => {\n  const contents: UnsupportedMediaTypeException = {\n    name: \"UnsupportedMediaTypeException\",\n    $fault: \"client\",\n    $metadata: deserializeMetadata(parsedOutput),\n    message: undefined,\n  };\n  const data: any = parsedOutput.body;\n  if (data.message !== undefined && data.message !== null) {\n    contents.message = data.message;\n  }\n  return contents;\n};\n\nconst serializeAws_restJson1ActiveContext = (input: ActiveContext, context: __SerdeContext): any => {\n  return {\n    ...(input.name !== undefined && input.name !== null && { name: input.name }),\n    ...(input.parameters !== undefined &&\n      input.parameters !== null && {\n        parameters: serializeAws_restJson1ActiveContextParametersMap(input.parameters, context),\n      }),\n    ...(input.timeToLive !== undefined &&\n      input.timeToLive !== null && {\n        timeToLive: serializeAws_restJson1ActiveContextTimeToLive(input.timeToLive, context),\n      }),\n  };\n};\n\nconst serializeAws_restJson1ActiveContextParametersMap = (\n  input: { [key: string]: string },\n  context: __SerdeContext\n): any => {\n  return Object.entries(input).reduce((acc: { [key: string]: string }, [key, value]: [string, any]) => {\n    if (value === null) {\n      return acc;\n    }\n    return {\n      ...acc,\n      [key]: value,\n    };\n  }, {});\n};\n\nconst serializeAws_restJson1ActiveContextsList = (input: ActiveContext[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return serializeAws_restJson1ActiveContext(entry, context);\n    });\n};\n\nconst serializeAws_restJson1ActiveContextTimeToLive = (\n  input: ActiveContextTimeToLive,\n  context: __SerdeContext\n): any => {\n  return {\n    ...(input.timeToLiveInSeconds !== undefined &&\n      input.timeToLiveInSeconds !== null && { timeToLiveInSeconds: input.timeToLiveInSeconds }),\n    ...(input.turnsToLive !== undefined && input.turnsToLive !== null && { turnsToLive: input.turnsToLive }),\n  };\n};\n\nconst serializeAws_restJson1DialogAction = (input: DialogAction, context: __SerdeContext): any => {\n  return {\n    ...(input.fulfillmentState !== undefined &&\n      input.fulfillmentState !== null && { fulfillmentState: input.fulfillmentState }),\n    ...(input.intentName !== undefined && input.intentName !== null && { intentName: input.intentName }),\n    ...(input.message !== undefined && input.message !== null && { message: input.message }),\n    ...(input.messageFormat !== undefined && input.messageFormat !== null && { messageFormat: input.messageFormat }),\n    ...(input.slotToElicit !== undefined && input.slotToElicit !== null && { slotToElicit: input.slotToElicit }),\n    ...(input.slots !== undefined &&\n      input.slots !== null && { slots: serializeAws_restJson1StringMap(input.slots, context) }),\n    ...(input.type !== undefined && input.type !== null && { type: input.type }),\n  };\n};\n\nconst serializeAws_restJson1IntentSummary = (input: IntentSummary, context: __SerdeContext): any => {\n  return {\n    ...(input.checkpointLabel !== undefined &&\n      input.checkpointLabel !== null && { checkpointLabel: input.checkpointLabel }),\n    ...(input.confirmationStatus !== undefined &&\n      input.confirmationStatus !== null && { confirmationStatus: input.confirmationStatus }),\n    ...(input.dialogActionType !== undefined &&\n      input.dialogActionType !== null && { dialogActionType: input.dialogActionType }),\n    ...(input.fulfillmentState !== undefined &&\n      input.fulfillmentState !== null && { fulfillmentState: input.fulfillmentState }),\n    ...(input.intentName !== undefined && input.intentName !== null && { intentName: input.intentName }),\n    ...(input.slotToElicit !== undefined && input.slotToElicit !== null && { slotToElicit: input.slotToElicit }),\n    ...(input.slots !== undefined &&\n      input.slots !== null && { slots: serializeAws_restJson1StringMap(input.slots, context) }),\n  };\n};\n\nconst serializeAws_restJson1IntentSummaryList = (input: IntentSummary[], context: __SerdeContext): any => {\n  return input\n    .filter((e: any) => e != null)\n    .map((entry) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return serializeAws_restJson1IntentSummary(entry, context);\n    });\n};\n\nconst serializeAws_restJson1StringMap = (input: { [key: string]: string }, context: __SerdeContext): any => {\n  return Object.entries(input).reduce((acc: { [key: string]: string }, [key, value]: [string, any]) => {\n    if (value === null) {\n      return acc;\n    }\n    return {\n      ...acc,\n      [key]: value,\n    };\n  }, {});\n};\n\nconst deserializeAws_restJson1ActiveContext = (output: any, context: __SerdeContext): ActiveContext => {\n  return {\n    name: output.name !== undefined && output.name !== null ? output.name : undefined,\n    parameters:\n      output.parameters !== undefined && output.parameters !== null\n        ? deserializeAws_restJson1ActiveContextParametersMap(output.parameters, context)\n        : undefined,\n    timeToLive:\n      output.timeToLive !== undefined && output.timeToLive !== null\n        ? deserializeAws_restJson1ActiveContextTimeToLive(output.timeToLive, context)\n        : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1ActiveContextParametersMap = (\n  output: any,\n  context: __SerdeContext\n): { [key: string]: string } => {\n  return Object.entries(output).reduce((acc: { [key: string]: string }, [key, value]: [string, any]) => {\n    if (value === null) {\n      return acc;\n    }\n    return {\n      ...acc,\n      [key]: value,\n    };\n  }, {});\n};\n\nconst deserializeAws_restJson1ActiveContextsList = (output: any, context: __SerdeContext): ActiveContext[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restJson1ActiveContext(entry, context);\n    });\n};\n\nconst deserializeAws_restJson1ActiveContextTimeToLive = (\n  output: any,\n  context: __SerdeContext\n): ActiveContextTimeToLive => {\n  return {\n    timeToLiveInSeconds:\n      output.timeToLiveInSeconds !== undefined && output.timeToLiveInSeconds !== null\n        ? output.timeToLiveInSeconds\n        : undefined,\n    turnsToLive: output.turnsToLive !== undefined && output.turnsToLive !== null ? output.turnsToLive : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1Button = (output: any, context: __SerdeContext): Button => {\n  return {\n    text: output.text !== undefined && output.text !== null ? output.text : undefined,\n    value: output.value !== undefined && output.value !== null ? output.value : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1DialogAction = (output: any, context: __SerdeContext): DialogAction => {\n  return {\n    fulfillmentState:\n      output.fulfillmentState !== undefined && output.fulfillmentState !== null ? output.fulfillmentState : undefined,\n    intentName: output.intentName !== undefined && output.intentName !== null ? output.intentName : undefined,\n    message: output.message !== undefined && output.message !== null ? output.message : undefined,\n    messageFormat:\n      output.messageFormat !== undefined && output.messageFormat !== null ? output.messageFormat : undefined,\n    slotToElicit: output.slotToElicit !== undefined && output.slotToElicit !== null ? output.slotToElicit : undefined,\n    slots:\n      output.slots !== undefined && output.slots !== null\n        ? deserializeAws_restJson1StringMap(output.slots, context)\n        : undefined,\n    type: output.type !== undefined && output.type !== null ? output.type : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1GenericAttachment = (output: any, context: __SerdeContext): GenericAttachment => {\n  return {\n    attachmentLinkUrl:\n      output.attachmentLinkUrl !== undefined && output.attachmentLinkUrl !== null\n        ? output.attachmentLinkUrl\n        : undefined,\n    buttons:\n      output.buttons !== undefined && output.buttons !== null\n        ? deserializeAws_restJson1listOfButtons(output.buttons, context)\n        : undefined,\n    imageUrl: output.imageUrl !== undefined && output.imageUrl !== null ? output.imageUrl : undefined,\n    subTitle: output.subTitle !== undefined && output.subTitle !== null ? output.subTitle : undefined,\n    title: output.title !== undefined && output.title !== null ? output.title : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1genericAttachmentList = (output: any, context: __SerdeContext): GenericAttachment[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restJson1GenericAttachment(entry, context);\n    });\n};\n\nconst deserializeAws_restJson1IntentConfidence = (output: any, context: __SerdeContext): IntentConfidence => {\n  return {\n    score: output.score !== undefined && output.score !== null ? output.score : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1IntentList = (output: any, context: __SerdeContext): PredictedIntent[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restJson1PredictedIntent(entry, context);\n    });\n};\n\nconst deserializeAws_restJson1IntentSummary = (output: any, context: __SerdeContext): IntentSummary => {\n  return {\n    checkpointLabel:\n      output.checkpointLabel !== undefined && output.checkpointLabel !== null ? output.checkpointLabel : undefined,\n    confirmationStatus:\n      output.confirmationStatus !== undefined && output.confirmationStatus !== null\n        ? output.confirmationStatus\n        : undefined,\n    dialogActionType:\n      output.dialogActionType !== undefined && output.dialogActionType !== null ? output.dialogActionType : undefined,\n    fulfillmentState:\n      output.fulfillmentState !== undefined && output.fulfillmentState !== null ? output.fulfillmentState : undefined,\n    intentName: output.intentName !== undefined && output.intentName !== null ? output.intentName : undefined,\n    slotToElicit: output.slotToElicit !== undefined && output.slotToElicit !== null ? output.slotToElicit : undefined,\n    slots:\n      output.slots !== undefined && output.slots !== null\n        ? deserializeAws_restJson1StringMap(output.slots, context)\n        : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1IntentSummaryList = (output: any, context: __SerdeContext): IntentSummary[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restJson1IntentSummary(entry, context);\n    });\n};\n\nconst deserializeAws_restJson1listOfButtons = (output: any, context: __SerdeContext): Button[] => {\n  return (output || [])\n    .filter((e: any) => e != null)\n    .map((entry: any) => {\n      if (entry === null) {\n        return null as any;\n      }\n      return deserializeAws_restJson1Button(entry, context);\n    });\n};\n\nconst deserializeAws_restJson1PredictedIntent = (output: any, context: __SerdeContext): PredictedIntent => {\n  return {\n    intentName: output.intentName !== undefined && output.intentName !== null ? output.intentName : undefined,\n    nluIntentConfidence:\n      output.nluIntentConfidence !== undefined && output.nluIntentConfidence !== null\n        ? deserializeAws_restJson1IntentConfidence(output.nluIntentConfidence, context)\n        : undefined,\n    slots:\n      output.slots !== undefined && output.slots !== null\n        ? deserializeAws_restJson1StringMap(output.slots, context)\n        : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1ResponseCard = (output: any, context: __SerdeContext): ResponseCard => {\n  return {\n    contentType: output.contentType !== undefined && output.contentType !== null ? output.contentType : undefined,\n    genericAttachments:\n      output.genericAttachments !== undefined && output.genericAttachments !== null\n        ? deserializeAws_restJson1genericAttachmentList(output.genericAttachments, context)\n        : undefined,\n    version: output.version !== undefined && output.version !== null ? output.version : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1SentimentResponse = (output: any, context: __SerdeContext): SentimentResponse => {\n  return {\n    sentimentLabel:\n      output.sentimentLabel !== undefined && output.sentimentLabel !== null ? output.sentimentLabel : undefined,\n    sentimentScore:\n      output.sentimentScore !== undefined && output.sentimentScore !== null ? output.sentimentScore : undefined,\n  } as any;\n};\n\nconst deserializeAws_restJson1StringMap = (output: any, context: __SerdeContext): { [key: string]: string } => {\n  return Object.entries(output).reduce((acc: { [key: string]: string }, [key, value]: [string, any]) => {\n    if (value === null) {\n      return acc;\n    }\n    return {\n      ...acc,\n      [key]: value,\n    };\n  }, {});\n};\n\nconst deserializeMetadata = (output: __HttpResponse): __ResponseMetadata => ({\n  httpStatusCode: output.statusCode,\n  requestId: output.headers[\"x-amzn-requestid\"] ?? output.headers[\"x-amzn-request-id\"],\n  extendedRequestId: output.headers[\"x-amz-id-2\"],\n  cfId: output.headers[\"x-amz-cf-id\"],\n});\n\n// Collect low-level response body stream to Uint8Array.\nconst collectBody = (streamBody: any = new Uint8Array(), context: __SerdeContext): Promise<Uint8Array> => {\n  if (streamBody instanceof Uint8Array) {\n    return Promise.resolve(streamBody);\n  }\n  return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\n\n// Encode Uint8Array data into string with utf-8.\nconst collectBodyString = (streamBody: any, context: __SerdeContext): Promise<string> =>\n  collectBody(streamBody, context).then((body) => context.utf8Encoder(body));\n\nconst isSerializableHeaderValue = (value: any): boolean =>\n  value !== undefined &&\n  value !== null &&\n  value !== \"\" &&\n  (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) &&\n  (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\n\nconst parseBody = (streamBody: any, context: __SerdeContext): any =>\n  collectBodyString(streamBody, context).then((encoded) => {\n    if (encoded.length) {\n      return JSON.parse(encoded);\n    }\n    return {};\n  });\n\n/**\n * Load an error code for the aws.rest-json-1.1 protocol.\n */\nconst loadRestJsonErrorCode = (output: __HttpResponse, data: any): string => {\n  const findKey = (object: any, key: string) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());\n\n  const sanitizeErrorCode = (rawValue: string): string => {\n    let cleanValue = rawValue;\n    if (cleanValue.indexOf(\":\") >= 0) {\n      cleanValue = cleanValue.split(\":\")[0];\n    }\n    if (cleanValue.indexOf(\"#\") >= 0) {\n      cleanValue = cleanValue.split(\"#\")[1];\n    }\n    return cleanValue;\n  };\n\n  const headerKey = findKey(output.headers, \"x-amzn-errortype\");\n  if (headerKey !== undefined) {\n    return sanitizeErrorCode(output.headers[headerKey]);\n  }\n\n  if (data.code !== undefined) {\n    return sanitizeErrorCode(data.code);\n  }\n\n  if (data[\"__type\"] !== undefined) {\n    return sanitizeErrorCode(data[\"__type\"]);\n  }\n\n  return \"\";\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}