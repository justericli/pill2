{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ericli/Desktop/pill2/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/ericli/Desktop/pill2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { streamCollector } from \"@aws-sdk/fetch-http-handler\";\nimport { toBase64 } from \"@aws-sdk/util-base64\";\nimport { toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { toUtf8 } from \"@aws-sdk/util-utf8\";\nvar ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = \"The stream has already been transformed.\";\nexport var sdkStreamMixin = function sdkStreamMixin(stream) {\n  if (!isBlobInstance(stream) && !isReadableStreamInstance(stream)) {\n    var _stream$__proto__, _stream$__proto__$con;\n    var name = (stream === null || stream === void 0 ? void 0 : (_stream$__proto__ = stream.__proto__) === null || _stream$__proto__ === void 0 ? void 0 : (_stream$__proto__$con = _stream$__proto__.constructor) === null || _stream$__proto__$con === void 0 ? void 0 : _stream$__proto__$con.name) || stream;\n    throw new Error(\"Unexpected stream implementation, expect Blob or ReadableStream, got \".concat(name));\n  }\n  var transformed = false;\n  var transformToByteArray = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (!transformed) {\n              _context.next = 2;\n              break;\n            }\n            throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);\n          case 2:\n            transformed = true;\n            _context.next = 5;\n            return streamCollector(stream);\n          case 5:\n            return _context.abrupt(\"return\", _context.sent);\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function transformToByteArray() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var blobToWebStream = function blobToWebStream(blob) {\n    if (typeof blob.stream !== \"function\") {\n      throw new Error(\"Cannot transform payload Blob to web stream. Please make sure the Blob.stream() is polyfilled.\\n\" + \"If you are using React Native, this API is not yet supported, see: https://react-native.canny.io/feature-requests/p/fetch-streaming-body\");\n    }\n    return blob.stream();\n  };\n  return Object.assign(stream, {\n    transformToByteArray: transformToByteArray,\n    transformToString: function () {\n      var _transformToString = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(encoding) {\n        var buf;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return transformToByteArray();\n            case 2:\n              buf = _context2.sent;\n              if (!(encoding === \"base64\")) {\n                _context2.next = 7;\n                break;\n              }\n              return _context2.abrupt(\"return\", toBase64(buf));\n            case 7:\n              if (!(encoding === \"hex\")) {\n                _context2.next = 11;\n                break;\n              }\n              return _context2.abrupt(\"return\", toHex(buf));\n            case 11:\n              if (!(encoding === undefined || encoding === \"utf8\" || encoding === \"utf-8\")) {\n                _context2.next = 15;\n                break;\n              }\n              return _context2.abrupt(\"return\", toUtf8(buf));\n            case 15:\n              if (!(typeof TextDecoder === \"function\")) {\n                _context2.next = 19;\n                break;\n              }\n              return _context2.abrupt(\"return\", new TextDecoder(encoding).decode(buf));\n            case 19:\n              throw new Error(\"TextDecoder is not available, please make sure polyfill is provided.\");\n            case 20:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n      function transformToString(_x) {\n        return _transformToString.apply(this, arguments);\n      }\n      return transformToString;\n    }(),\n    transformToWebStream: function transformToWebStream() {\n      if (transformed) {\n        throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);\n      }\n      transformed = true;\n      if (isBlobInstance(stream)) {\n        return blobToWebStream(stream);\n      } else if (isReadableStreamInstance(stream)) {\n        return stream;\n      } else {\n        throw new Error(\"Cannot transform payload to web stream, got \".concat(stream));\n      }\n    }\n  });\n};\nvar isBlobInstance = function isBlobInstance(stream) {\n  return typeof Blob === \"function\" && stream instanceof Blob;\n};\nvar isReadableStreamInstance = function isReadableStreamInstance(stream) {\n  return typeof ReadableStream === \"function\" && stream instanceof ReadableStream;\n};","map":{"version":3,"names":["streamCollector","toBase64","toHex","toUtf8","ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED","sdkStreamMixin","stream","isBlobInstance","isReadableStreamInstance","_stream$__proto__","_stream$__proto__$con","name","__proto__","constructor","Error","concat","transformed","transformToByteArray","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","abrupt","sent","stop","apply","arguments","blobToWebStream","blob","Object","assign","transformToString","_transformToString","_callee2","encoding","buf","_callee2$","_context2","undefined","TextDecoder","decode","_x","transformToWebStream","Blob","ReadableStream"],"sources":["/Users/ericli/Desktop/pill2/node_modules/@aws-sdk/util-stream-browser/dist-es/sdk-stream-mixin.js"],"sourcesContent":["import { streamCollector } from \"@aws-sdk/fetch-http-handler\";\nimport { toBase64 } from \"@aws-sdk/util-base64\";\nimport { toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { toUtf8 } from \"@aws-sdk/util-utf8\";\nconst ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = \"The stream has already been transformed.\";\nexport const sdkStreamMixin = (stream) => {\n    if (!isBlobInstance(stream) && !isReadableStreamInstance(stream)) {\n        const name = stream?.__proto__?.constructor?.name || stream;\n        throw new Error(`Unexpected stream implementation, expect Blob or ReadableStream, got ${name}`);\n    }\n    let transformed = false;\n    const transformToByteArray = async () => {\n        if (transformed) {\n            throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);\n        }\n        transformed = true;\n        return await streamCollector(stream);\n    };\n    const blobToWebStream = (blob) => {\n        if (typeof blob.stream !== \"function\") {\n            throw new Error(\"Cannot transform payload Blob to web stream. Please make sure the Blob.stream() is polyfilled.\\n\" +\n                \"If you are using React Native, this API is not yet supported, see: https://react-native.canny.io/feature-requests/p/fetch-streaming-body\");\n        }\n        return blob.stream();\n    };\n    return Object.assign(stream, {\n        transformToByteArray: transformToByteArray,\n        transformToString: async (encoding) => {\n            const buf = await transformToByteArray();\n            if (encoding === \"base64\") {\n                return toBase64(buf);\n            }\n            else if (encoding === \"hex\") {\n                return toHex(buf);\n            }\n            else if (encoding === undefined || encoding === \"utf8\" || encoding === \"utf-8\") {\n                return toUtf8(buf);\n            }\n            else if (typeof TextDecoder === \"function\") {\n                return new TextDecoder(encoding).decode(buf);\n            }\n            else {\n                throw new Error(\"TextDecoder is not available, please make sure polyfill is provided.\");\n            }\n        },\n        transformToWebStream: () => {\n            if (transformed) {\n                throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);\n            }\n            transformed = true;\n            if (isBlobInstance(stream)) {\n                return blobToWebStream(stream);\n            }\n            else if (isReadableStreamInstance(stream)) {\n                return stream;\n            }\n            else {\n                throw new Error(`Cannot transform payload to web stream, got ${stream}`);\n            }\n        },\n    });\n};\nconst isBlobInstance = (stream) => typeof Blob === \"function\" && stream instanceof Blob;\nconst isReadableStreamInstance = (stream) => typeof ReadableStream === \"function\" && stream instanceof ReadableStream;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}