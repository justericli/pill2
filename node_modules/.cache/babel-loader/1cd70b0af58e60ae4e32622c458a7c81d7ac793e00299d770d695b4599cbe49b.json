{"ast":null,"code":"export var InAppMessageInteractionEvent;\n(function (InAppMessageInteractionEvent) {\n  InAppMessageInteractionEvent[\"MESSAGE_RECEIVED\"] = \"MESSAGE_RECEIVED_EVENT\";\n  InAppMessageInteractionEvent[\"MESSAGE_DISPLAYED\"] = \"MESSAGE_DISPLAYED_EVENT\";\n  InAppMessageInteractionEvent[\"MESSAGE_DISMISSED\"] = \"MESSAGE_DISMISSED_EVENT\";\n  InAppMessageInteractionEvent[\"MESSAGE_ACTION_TAKEN\"] = \"MESSAGE_ACTION_TAKEN_EVENT\";\n})(InAppMessageInteractionEvent || (InAppMessageInteractionEvent = {}));","map":{"version":3,"names":["InAppMessageInteractionEvent"],"sources":["/Users/ericli/Desktop/pill2/node_modules/@aws-amplify/notifications/src/InAppMessaging/types.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { NotificationsCategory } from '../types';\nimport { AWSPinpointProviderConfig } from './Providers/AWSPinpointProvider/types';\n\nexport type NotificationsSubcategory = 'InAppMessaging';\n\nexport type UserInfo = {\n\tattributes?: Record<string, string[]>;\n\tdemographic?: {\n\t\tappVersion?: string;\n\t\tlocale?: string;\n\t\tmake?: string;\n\t\tmodel?: string;\n\t\tmodelVersion?: string;\n\t\tplatform?: string;\n\t\tplatformVersion?: string;\n\t\ttimezone?: string;\n\t};\n\tlocation?: {\n\t\tcity?: string;\n\t\tcountry?: string;\n\t\tlatitude?: number;\n\t\tlongitude?: number;\n\t\tpostalCode?: string;\n\t\tregion?: string;\n\t};\n\tmetrics?: Record<string, number>;\n};\n\nexport type InAppMessagingEvent = {\n\tname: string;\n\tattributes?: Record<string, string>;\n\tmetrics?: Record<string, number>;\n};\n\nexport interface InAppMessagingConfig {\n\tlistenForAnalyticsEvents?: boolean;\n\tAWSPinpoint?: AWSPinpointProviderConfig;\n}\n\nexport interface InAppMessagingProvider {\n\t// you need to implement these methods\n\n\t// configure your provider\n\tconfigure(config: object): object;\n\n\t// return category ('Notifications')\n\tgetCategory(): NotificationsCategory;\n\n\t// return sub-category ('InAppMessaging')\n\tgetSubCategory(): NotificationsSubcategory;\n\n\t// return the name of you provider\n\tgetProviderName(): string;\n\n\t// get in-app messages from provider\n\tgetInAppMessages(): Promise<any>;\n\n\t// filters in-app messages based on event input and provider logic\n\tprocessInAppMessages(\n\t\tmessages: InAppMessage[],\n\t\tevent: InAppMessagingEvent\n\t): Promise<InAppMessage[]>;\n\n\t// identify the current user with the provider\n\tidentifyUser(userId: string, userInfo: UserInfo): Promise<void>;\n}\n\nexport type InAppMessageLayout =\n\t| 'BOTTOM_BANNER'\n\t| 'CAROUSEL'\n\t| 'FULL_SCREEN'\n\t| 'MIDDLE_BANNER'\n\t| 'MODAL'\n\t| 'TOP_BANNER';\n\nexport type InAppMessageAction = 'CLOSE' | 'DEEP_LINK' | 'LINK';\n\nexport type InAppMessageTextAlign = 'center' | 'left' | 'right';\n\ninterface InAppMessageContainer {\n\tstyle?: InAppMessageStyle;\n}\n\ninterface InAppMessageHeader {\n\tcontent: string;\n\tstyle?: InAppMessageStyle;\n}\n\ninterface InAppMessageBody {\n\tcontent: string;\n\tstyle?: InAppMessageStyle;\n}\n\nexport interface InAppMessageImage {\n\tsrc: string;\n}\n\nexport interface InAppMessageButton {\n\ttitle: string;\n\taction: InAppMessageAction;\n\turl?: string;\n\tstyle?: InAppMessageStyle;\n}\n\nexport interface InAppMessageStyle {\n\tbackgroundColor?: string;\n\tborderRadius?: number;\n\tcolor?: string;\n\ttextAlign?: InAppMessageTextAlign;\n}\n\nexport interface InAppMessageContent {\n\tcontainer?: InAppMessageContainer;\n\theader?: InAppMessageHeader;\n\tbody?: InAppMessageBody;\n\timage?: InAppMessageImage;\n\tprimaryButton?: InAppMessageButton;\n\tsecondaryButton?: InAppMessageButton;\n}\n\nexport interface InAppMessage {\n\tid: string;\n\tlayout: InAppMessageLayout;\n\tcontent: InAppMessageContent[];\n\tmetadata?: any;\n}\n\nexport type OnMessageInteractionEventHandler = (message: InAppMessage) => any;\n\nexport interface OnMessageInteractionEventListener {\n\thandleEvent: OnMessageInteractionEventHandler;\n\tremove: () => void;\n}\n\nexport enum InAppMessageInteractionEvent {\n\tMESSAGE_RECEIVED = 'MESSAGE_RECEIVED_EVENT',\n\tMESSAGE_DISPLAYED = 'MESSAGE_DISPLAYED_EVENT',\n\tMESSAGE_DISMISSED = 'MESSAGE_DISMISSED_EVENT',\n\tMESSAGE_ACTION_TAKEN = 'MESSAGE_ACTION_TAKEN_EVENT',\n}\n\nexport type InAppMessageConflictHandler = (\n\tmessages: InAppMessage[]\n) => InAppMessage;\n"],"mappings":"AAwIA,WAAYA,4BAKX;AALD,WAAYA,4BAA4B;EACvCA,4BAAA,+CAA2C;EAC3CA,4BAAA,iDAA6C;EAC7CA,4BAAA,iDAA6C;EAC7CA,4BAAA,uDAAmD;AACpD,CAAC,EALWA,4BAA4B,KAA5BA,4BAA4B"},"metadata":{},"sourceType":"module","externalDependencies":[]}