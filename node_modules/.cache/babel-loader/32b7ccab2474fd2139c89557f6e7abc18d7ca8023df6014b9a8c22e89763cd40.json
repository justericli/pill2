{"ast":null,"code":"import _objectSpread from \"/Users/ericli/Desktop/pill2/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { normalizeProvider } from \"@aws-sdk/util-middleware\";\nimport { getEndpointFromRegion } from \"./utils/getEndpointFromRegion\";\nexport var resolveEndpointsConfig = function resolveEndpointsConfig(input) {\n  var _input$useDualstackEn, _input$tls;\n  var useDualstackEndpoint = normalizeProvider((_input$useDualstackEn = input.useDualstackEndpoint) !== null && _input$useDualstackEn !== void 0 ? _input$useDualstackEn : false);\n  var endpoint = input.endpoint,\n    useFipsEndpoint = input.useFipsEndpoint,\n    urlParser = input.urlParser;\n  return _objectSpread(_objectSpread({}, input), {}, {\n    tls: (_input$tls = input.tls) !== null && _input$tls !== void 0 ? _input$tls : true,\n    endpoint: endpoint ? normalizeProvider(typeof endpoint === \"string\" ? urlParser(endpoint) : endpoint) : function () {\n      return getEndpointFromRegion(_objectSpread(_objectSpread({}, input), {}, {\n        useDualstackEndpoint: useDualstackEndpoint,\n        useFipsEndpoint: useFipsEndpoint\n      }));\n    },\n    isCustomEndpoint: !!endpoint,\n    useDualstackEndpoint: useDualstackEndpoint\n  });\n};","map":{"version":3,"names":["normalizeProvider","getEndpointFromRegion","resolveEndpointsConfig","input","_input$useDualstackEn","_input$tls","useDualstackEndpoint","endpoint","useFipsEndpoint","urlParser","_objectSpread","tls","isCustomEndpoint"],"sources":["/Users/ericli/Desktop/pill2/node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/resolveEndpointsConfig.js"],"sourcesContent":["import { normalizeProvider } from \"@aws-sdk/util-middleware\";\nimport { getEndpointFromRegion } from \"./utils/getEndpointFromRegion\";\nexport const resolveEndpointsConfig = (input) => {\n    const useDualstackEndpoint = normalizeProvider(input.useDualstackEndpoint ?? false);\n    const { endpoint, useFipsEndpoint, urlParser } = input;\n    return {\n        ...input,\n        tls: input.tls ?? true,\n        endpoint: endpoint\n            ? normalizeProvider(typeof endpoint === \"string\" ? urlParser(endpoint) : endpoint)\n            : () => getEndpointFromRegion({ ...input, useDualstackEndpoint, useFipsEndpoint }),\n        isCustomEndpoint: !!endpoint,\n        useDualstackEndpoint,\n    };\n};\n"],"mappings":";AAAA,SAASA,iBAAiB,QAAQ,0BAA0B;AAC5D,SAASC,qBAAqB,QAAQ,+BAA+B;AACrE,OAAO,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAAIC,KAAK,EAAK;EAAA,IAAAC,qBAAA,EAAAC,UAAA;EAC7C,IAAMC,oBAAoB,GAAGN,iBAAiB,EAAAI,qBAAA,GAACD,KAAK,CAACG,oBAAoB,cAAAF,qBAAA,cAAAA,qBAAA,GAAI,KAAK,CAAC;EACnF,IAAQG,QAAQ,GAAiCJ,KAAK,CAA9CI,QAAQ;IAAEC,eAAe,GAAgBL,KAAK,CAApCK,eAAe;IAAEC,SAAS,GAAKN,KAAK,CAAnBM,SAAS;EAC5C,OAAAC,aAAA,CAAAA,aAAA,KACOP,KAAK;IACRQ,GAAG,GAAAN,UAAA,GAAEF,KAAK,CAACQ,GAAG,cAAAN,UAAA,cAAAA,UAAA,GAAI,IAAI;IACtBE,QAAQ,EAAEA,QAAQ,GACZP,iBAAiB,CAAC,OAAOO,QAAQ,KAAK,QAAQ,GAAGE,SAAS,CAACF,QAAQ,CAAC,GAAGA,QAAQ,CAAC,GAChF;MAAA,OAAMN,qBAAqB,CAAAS,aAAA,CAAAA,aAAA,KAAMP,KAAK;QAAEG,oBAAoB,EAApBA,oBAAoB;QAAEE,eAAe,EAAfA;MAAe,GAAG;IAAA;IACtFI,gBAAgB,EAAE,CAAC,CAACL,QAAQ;IAC5BD,oBAAoB,EAApBA;EAAoB;AAE5B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}