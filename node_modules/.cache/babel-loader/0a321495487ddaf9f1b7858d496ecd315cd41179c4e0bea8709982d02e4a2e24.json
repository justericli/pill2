{"ast":null,"code":"/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *\t http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nimport { isUsernamePasswordOpts, isCognitoHostedOpts, isFederatedSignInOptions, isFederatedSignInOptionsCustom, hasCustomState } from './types';\nimport { Amplify, ConsoleLogger as Logger, Credentials, Hub, StorageHelper, Parser, JS, UniversalStorage, urlSafeDecode } from '@aws-amplify/core';\nimport { CookieStorage, CognitoUserPool, AuthenticationDetails, CognitoUser, CognitoUserSession, CognitoUserAttribute, CognitoIdToken, CognitoRefreshToken, CognitoAccessToken } from 'amazon-cognito-identity-js';\nimport { parse } from 'url';\nimport OAuth from './OAuth/OAuth';\nimport { default as urlListener } from './urlListener';\nimport { AuthError, NoUserPoolError } from './Errors';\nimport { AuthErrorTypes, CognitoHostedUIIdentityProvider } from './types/Auth';\nvar logger = new Logger('AuthClass');\nvar USER_ADMIN_SCOPE = 'aws.cognito.signin.user.admin';\n// 10 sec, following this guide https://www.nngroup.com/articles/response-times-3-important-limits/\nvar OAUTH_FLOW_MS_TIMEOUT = 10 * 1000;\nvar AMPLIFY_SYMBOL = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function' ? Symbol.for('amplify_default') : '@@amplify_default';\nvar dispatchAuthEvent = function (event, data, message) {\n  Hub.dispatch('auth', {\n    event: event,\n    data: data,\n    message: message\n  }, 'Auth', AMPLIFY_SYMBOL);\n};\n/**\n * Provide authentication steps\n */\nvar AuthClass = /** @class */function () {\n  /**\n   * Initialize Auth with AWS configurations\n   * @param {Object} config - Configuration of the Auth\n   */\n  function AuthClass(config) {\n    var _this = this;\n    this.userPool = null;\n    this.user = null;\n    this.oAuthFlowInProgress = false;\n    this.Credentials = Credentials;\n    this.wrapRefreshSessionCallback = function (callback) {\n      var wrapped = function (error, data) {\n        if (data) {\n          dispatchAuthEvent('tokenRefresh', undefined, \"New token retrieved\");\n        } else {\n          dispatchAuthEvent('tokenRefresh_failure', error, \"Failed to retrieve new token\");\n        }\n        return callback(error, data);\n      };\n      return wrapped;\n    }; // prettier-ignore\n    this.configure(config);\n    this.currentCredentials = this.currentCredentials.bind(this);\n    this.currentUserCredentials = this.currentUserCredentials.bind(this);\n    Hub.listen('auth', function (_a) {\n      var payload = _a.payload;\n      var event = payload.event;\n      switch (event) {\n        case 'signIn':\n          _this._storage.setItem('amplify-signin-with-hostedUI', 'false');\n          break;\n        case 'signOut':\n          _this._storage.removeItem('amplify-signin-with-hostedUI');\n          break;\n        case 'cognitoHostedUI':\n          _this._storage.setItem('amplify-signin-with-hostedUI', 'true');\n          break;\n      }\n    });\n  }\n  AuthClass.prototype.getModuleName = function () {\n    return 'Auth';\n  };\n  AuthClass.prototype.configure = function (config) {\n    var _this = this;\n    if (!config) return this._config || {};\n    logger.debug('configure Auth');\n    var conf = Object.assign({}, this._config, Parser.parseMobilehubConfig(config).Auth, config);\n    this._config = conf;\n    var _a = this._config,\n      userPoolId = _a.userPoolId,\n      userPoolWebClientId = _a.userPoolWebClientId,\n      cookieStorage = _a.cookieStorage,\n      oauth = _a.oauth,\n      region = _a.region,\n      identityPoolId = _a.identityPoolId,\n      mandatorySignIn = _a.mandatorySignIn,\n      refreshHandlers = _a.refreshHandlers,\n      identityPoolRegion = _a.identityPoolRegion,\n      clientMetadata = _a.clientMetadata,\n      endpoint = _a.endpoint;\n    if (!this._config.storage) {\n      // backward compatability\n      if (cookieStorage) this._storage = new CookieStorage(cookieStorage);else {\n        this._storage = config.ssr ? new UniversalStorage() : new StorageHelper().getStorage();\n      }\n    } else {\n      if (!this._isValidAuthStorage(this._config.storage)) {\n        logger.error('The storage in the Auth config is not valid!');\n        throw new Error('Empty storage object');\n      }\n      this._storage = this._config.storage;\n    }\n    this._storageSync = Promise.resolve();\n    if (typeof this._storage['sync'] === 'function') {\n      this._storageSync = this._storage['sync']();\n    }\n    if (userPoolId) {\n      var userPoolData = {\n        UserPoolId: userPoolId,\n        ClientId: userPoolWebClientId,\n        endpoint: endpoint\n      };\n      userPoolData.Storage = this._storage;\n      this.userPool = new CognitoUserPool(userPoolData, this.wrapRefreshSessionCallback);\n    }\n    this.Credentials.configure({\n      mandatorySignIn: mandatorySignIn,\n      region: identityPoolRegion || region,\n      userPoolId: userPoolId,\n      identityPoolId: identityPoolId,\n      refreshHandlers: refreshHandlers,\n      storage: this._storage\n    });\n    // initialize cognitoauth client if hosted ui options provided\n    // to keep backward compatibility:\n    var cognitoHostedUIConfig = oauth ? isCognitoHostedOpts(this._config.oauth) ? oauth : oauth.awsCognito : undefined;\n    if (cognitoHostedUIConfig) {\n      var cognitoAuthParams = Object.assign({\n        cognitoClientId: userPoolWebClientId,\n        UserPoolId: userPoolId,\n        domain: cognitoHostedUIConfig['domain'],\n        scopes: cognitoHostedUIConfig['scope'],\n        redirectSignIn: cognitoHostedUIConfig['redirectSignIn'],\n        redirectSignOut: cognitoHostedUIConfig['redirectSignOut'],\n        responseType: cognitoHostedUIConfig['responseType'],\n        Storage: this._storage,\n        urlOpener: cognitoHostedUIConfig['urlOpener'],\n        clientMetadata: clientMetadata\n      }, cognitoHostedUIConfig['options']);\n      this._oAuthHandler = new OAuth({\n        scopes: cognitoAuthParams.scopes,\n        config: cognitoAuthParams,\n        cognitoClientId: cognitoAuthParams.cognitoClientId\n      });\n      // **NOTE** - Remove this in a future major release as it is a breaking change\n      // Prevents _handleAuthResponse from being called multiple times in Expo\n      // See https://github.com/aws-amplify/amplify-js/issues/4388\n      var usedResponseUrls_1 = {};\n      urlListener(function (_a) {\n        var url = _a.url;\n        if (usedResponseUrls_1[url]) {\n          return;\n        }\n        usedResponseUrls_1[url] = true;\n        _this._handleAuthResponse(url);\n      });\n    }\n    dispatchAuthEvent('configured', null, \"The Auth category has been configured successfully\");\n    return this._config;\n  };\n  /**\n   * Sign up with username, password and other attributes like phone, email\n   * @param {String | object} params - The user attributes used for signin\n   * @param {String[]} restOfAttrs - for the backward compatability\n   * @return - A promise resolves callback data if success\n   */\n  AuthClass.prototype.signUp = function (params) {\n    var _this = this;\n    var restOfAttrs = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      restOfAttrs[_i - 1] = arguments[_i];\n    }\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n    var username = null;\n    var password = null;\n    var attributes = [];\n    var validationData = null;\n    var clientMetadata;\n    if (params && typeof params === 'string') {\n      username = params;\n      password = restOfAttrs ? restOfAttrs[0] : null;\n      var email = restOfAttrs ? restOfAttrs[1] : null;\n      var phone_number = restOfAttrs ? restOfAttrs[2] : null;\n      if (email) attributes.push(new CognitoUserAttribute({\n        Name: 'email',\n        Value: email\n      }));\n      if (phone_number) attributes.push(new CognitoUserAttribute({\n        Name: 'phone_number',\n        Value: phone_number\n      }));\n    } else if (params && typeof params === 'object') {\n      username = params['username'];\n      password = params['password'];\n      if (params && params.clientMetadata) {\n        clientMetadata = params.clientMetadata;\n      } else if (this._config.clientMetadata) {\n        clientMetadata = this._config.clientMetadata;\n      }\n      var attrs_1 = params['attributes'];\n      if (attrs_1) {\n        Object.keys(attrs_1).map(function (key) {\n          attributes.push(new CognitoUserAttribute({\n            Name: key,\n            Value: attrs_1[key]\n          }));\n        });\n      }\n      var validationDataObject_1 = params['validationData'];\n      if (validationDataObject_1) {\n        validationData = [];\n        Object.keys(validationDataObject_1).map(function (key) {\n          validationData.push(new CognitoUserAttribute({\n            Name: key,\n            Value: validationDataObject_1[key]\n          }));\n        });\n      }\n    } else {\n      return this.rejectAuthError(AuthErrorTypes.SignUpError);\n    }\n    if (!username) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n    }\n    if (!password) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyPassword);\n    }\n    logger.debug('signUp attrs:', attributes);\n    logger.debug('signUp validation data:', validationData);\n    return new Promise(function (resolve, reject) {\n      _this.userPool.signUp(username, password, attributes, validationData, function (err, data) {\n        if (err) {\n          dispatchAuthEvent('signUp_failure', err, username + \" failed to signup\");\n          reject(err);\n        } else {\n          dispatchAuthEvent('signUp', data, username + \" has signed up successfully\");\n          resolve(data);\n        }\n      }, clientMetadata);\n    });\n  };\n  /**\n   * Send the verification code to confirm sign up\n   * @param {String} username - The username to be confirmed\n   * @param {String} code - The verification code\n   * @param {ConfirmSignUpOptions} options - other options for confirm signup\n   * @return - A promise resolves callback data if success\n   */\n  AuthClass.prototype.confirmSignUp = function (username, code, options) {\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n    if (!username) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n    }\n    if (!code) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyCode);\n    }\n    var user = this.createCognitoUser(username);\n    var forceAliasCreation = options && typeof options.forceAliasCreation === 'boolean' ? options.forceAliasCreation : true;\n    var clientMetadata;\n    if (options && options.clientMetadata) {\n      clientMetadata = options.clientMetadata;\n    } else if (this._config.clientMetadata) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    return new Promise(function (resolve, reject) {\n      user.confirmRegistration(code, forceAliasCreation, function (err, data) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(data);\n        }\n      }, clientMetadata);\n    });\n  };\n  /**\n   * Resend the verification code\n   * @param {String} username - The username to be confirmed\n   * @param {ClientMetadata} clientMetadata - Metadata to be passed to Cognito Lambda triggers\n   * @return - A promise resolves code delivery details if successful\n   */\n  AuthClass.prototype.resendSignUp = function (username, clientMetadata) {\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n    if (!username) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n    }\n    var user = this.createCognitoUser(username);\n    return new Promise(function (resolve, reject) {\n      user.resendConfirmationCode(function (err, data) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(data);\n        }\n      }, clientMetadata);\n    });\n  };\n  /**\n   * Sign in\n   * @param {String | SignInOpts} usernameOrSignInOpts - The username to be signed in or the sign in options\n   * @param {String} password - The password of the username\n   * @return - A promise resolves the CognitoUser\n   */\n  AuthClass.prototype.signIn = function (usernameOrSignInOpts, pw, clientMetadata) {\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n    var username = null;\n    var password = null;\n    var validationData = {};\n    // for backward compatibility\n    if (typeof usernameOrSignInOpts === 'string') {\n      username = usernameOrSignInOpts;\n      password = pw;\n    } else if (isUsernamePasswordOpts(usernameOrSignInOpts)) {\n      if (typeof pw !== 'undefined') {\n        logger.warn('The password should be defined under the first parameter object!');\n      }\n      username = usernameOrSignInOpts.username;\n      password = usernameOrSignInOpts.password;\n      validationData = usernameOrSignInOpts.validationData;\n    } else {\n      return this.rejectAuthError(AuthErrorTypes.InvalidUsername);\n    }\n    if (!username) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n    }\n    var authDetails = new AuthenticationDetails({\n      Username: username,\n      Password: password,\n      ValidationData: validationData,\n      ClientMetadata: clientMetadata\n    });\n    if (password) {\n      return this.signInWithPassword(authDetails);\n    } else {\n      return this.signInWithoutPassword(authDetails);\n    }\n  };\n  /**\n   * Return an object with the authentication callbacks\n   * @param {CognitoUser} user - the cognito user object\n   * @param {} resolve - function called when resolving the current step\n   * @param {} reject - function called when rejecting the current step\n   * @return - an object with the callback methods for user authentication\n   */\n  AuthClass.prototype.authCallbacks = function (user, resolve, reject) {\n    var _this = this;\n    var that = this;\n    return {\n      onSuccess: function (session) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var cred, e_1, currentUser, e_2;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                logger.debug(session);\n                delete user['challengeName'];\n                delete user['challengeParam'];\n                _a.label = 1;\n              case 1:\n                _a.trys.push([1, 4, 5, 9]);\n                return [4 /*yield*/, this.Credentials.clear()];\n              case 2:\n                _a.sent();\n                return [4 /*yield*/, this.Credentials.set(session, 'session')];\n              case 3:\n                cred = _a.sent();\n                logger.debug('succeed to get cognito credentials', cred);\n                return [3 /*break*/, 9];\n              case 4:\n                e_1 = _a.sent();\n                logger.debug('cannot get cognito credentials', e_1);\n                return [3 /*break*/, 9];\n              case 5:\n                _a.trys.push([5, 7,, 8]);\n                return [4 /*yield*/, this.currentUserPoolUser()];\n              case 6:\n                currentUser = _a.sent();\n                that.user = currentUser;\n                dispatchAuthEvent('signIn', currentUser, \"A user \" + user.getUsername() + \" has been signed in\");\n                resolve(currentUser);\n                return [3 /*break*/, 8];\n              case 7:\n                e_2 = _a.sent();\n                logger.error('Failed to get the signed in user', e_2);\n                reject(e_2);\n                return [3 /*break*/, 8];\n              case 8:\n                return [7 /*endfinally*/];\n              case 9:\n                return [2 /*return*/];\n            }\n          });\n        });\n      },\n\n      onFailure: function (err) {\n        logger.debug('signIn failure', err);\n        dispatchAuthEvent('signIn_failure', err, user.getUsername() + \" failed to signin\");\n        reject(err);\n      },\n      customChallenge: function (challengeParam) {\n        logger.debug('signIn custom challenge answer required');\n        user['challengeName'] = 'CUSTOM_CHALLENGE';\n        user['challengeParam'] = challengeParam;\n        resolve(user);\n      },\n      mfaRequired: function (challengeName, challengeParam) {\n        logger.debug('signIn MFA required');\n        user['challengeName'] = challengeName;\n        user['challengeParam'] = challengeParam;\n        resolve(user);\n      },\n      mfaSetup: function (challengeName, challengeParam) {\n        logger.debug('signIn mfa setup', challengeName);\n        user['challengeName'] = challengeName;\n        user['challengeParam'] = challengeParam;\n        resolve(user);\n      },\n      newPasswordRequired: function (userAttributes, requiredAttributes) {\n        logger.debug('signIn new password');\n        user['challengeName'] = 'NEW_PASSWORD_REQUIRED';\n        user['challengeParam'] = {\n          userAttributes: userAttributes,\n          requiredAttributes: requiredAttributes\n        };\n        resolve(user);\n      },\n      totpRequired: function (challengeName, challengeParam) {\n        logger.debug('signIn totpRequired');\n        user['challengeName'] = challengeName;\n        user['challengeParam'] = challengeParam;\n        resolve(user);\n      },\n      selectMFAType: function (challengeName, challengeParam) {\n        logger.debug('signIn selectMFAType', challengeName);\n        user['challengeName'] = challengeName;\n        user['challengeParam'] = challengeParam;\n        resolve(user);\n      }\n    };\n  };\n  /**\n   * Sign in with a password\n   * @private\n   * @param {AuthenticationDetails} authDetails - the user sign in data\n   * @return - A promise resolves the CognitoUser object if success or mfa required\n   */\n  AuthClass.prototype.signInWithPassword = function (authDetails) {\n    var _this = this;\n    if (this.pendingSignIn) {\n      throw new Error('Pending sign-in attempt already in progress');\n    }\n    var user = this.createCognitoUser(authDetails.getUsername());\n    this.pendingSignIn = new Promise(function (resolve, reject) {\n      user.authenticateUser(authDetails, _this.authCallbacks(user, function (value) {\n        _this.pendingSignIn = null;\n        resolve(value);\n      }, function (error) {\n        _this.pendingSignIn = null;\n        reject(error);\n      }));\n    });\n    return this.pendingSignIn;\n  };\n  /**\n   * Sign in without a password\n   * @private\n   * @param {AuthenticationDetails} authDetails - the user sign in data\n   * @return - A promise resolves the CognitoUser object if success or mfa required\n   */\n  AuthClass.prototype.signInWithoutPassword = function (authDetails) {\n    var _this = this;\n    var user = this.createCognitoUser(authDetails.getUsername());\n    user.setAuthenticationFlowType('CUSTOM_AUTH');\n    return new Promise(function (resolve, reject) {\n      user.initiateAuth(authDetails, _this.authCallbacks(user, resolve, reject));\n    });\n  };\n  /**\n   * This was previously used by an authenticated user to get MFAOptions,\n   * but no longer returns a meaningful response. Refer to the documentation for\n   * how to setup and use MFA: https://docs.amplify.aws/lib/auth/mfa/q/platform/js\n   * @deprecated\n   * @param {CognitoUser} user - the current user\n   * @return - A promise resolves the current preferred mfa option if success\n   */\n  AuthClass.prototype.getMFAOptions = function (user) {\n    return new Promise(function (res, rej) {\n      user.getMFAOptions(function (err, mfaOptions) {\n        if (err) {\n          logger.debug('get MFA Options failed', err);\n          rej(err);\n          return;\n        }\n        logger.debug('get MFA options success', mfaOptions);\n        res(mfaOptions);\n        return;\n      });\n    });\n  };\n  /**\n   * get preferred mfa method\n   * @param {CognitoUser} user - the current cognito user\n   * @param {GetPreferredMFAOpts} params - options for getting the current user preferred MFA\n   */\n  AuthClass.prototype.getPreferredMFA = function (user, params) {\n    var _this = this;\n    var that = this;\n    return new Promise(function (res, rej) {\n      var clientMetadata = _this._config.clientMetadata; // TODO: verify behavior if this is override during signIn\n      var bypassCache = params ? params.bypassCache : false;\n      user.getUserData(function (err, data) {\n        if (err) {\n          logger.debug('getting preferred mfa failed', err);\n          rej(err);\n          return;\n        }\n        var mfaType = that._getMfaTypeFromUserData(data);\n        if (!mfaType) {\n          rej('invalid MFA Type');\n          return;\n        } else {\n          res(mfaType);\n          return;\n        }\n      }, {\n        bypassCache: bypassCache,\n        clientMetadata: clientMetadata\n      });\n    });\n  };\n  AuthClass.prototype._getMfaTypeFromUserData = function (data) {\n    var ret = null;\n    var preferredMFA = data.PreferredMfaSetting;\n    // if the user has used Auth.setPreferredMFA() to setup the mfa type\n    // then the \"PreferredMfaSetting\" would exist in the response\n    if (preferredMFA) {\n      ret = preferredMFA;\n    } else {\n      // if mfaList exists but empty, then its noMFA\n      var mfaList = data.UserMFASettingList;\n      if (!mfaList) {\n        // if SMS was enabled by using Auth.enableSMS(),\n        // the response would contain MFAOptions\n        // as for now Cognito only supports for SMS, so we will say it is 'SMS_MFA'\n        // if it does not exist, then it should be NOMFA\n        var MFAOptions = data.MFAOptions;\n        if (MFAOptions) {\n          ret = 'SMS_MFA';\n        } else {\n          ret = 'NOMFA';\n        }\n      } else if (mfaList.length === 0) {\n        ret = 'NOMFA';\n      } else {\n        logger.debug('invalid case for getPreferredMFA', data);\n      }\n    }\n    return ret;\n  };\n  AuthClass.prototype._getUserData = function (user, params) {\n    return new Promise(function (res, rej) {\n      user.getUserData(function (err, data) {\n        if (err) {\n          logger.debug('getting user data failed', err);\n          rej(err);\n          return;\n        } else {\n          res(data);\n          return;\n        }\n      }, params);\n    });\n  };\n  /**\n   * set preferred MFA method\n   * @param {CognitoUser} user - the current Cognito user\n   * @param {string} mfaMethod - preferred mfa method\n   * @return - A promise resolve if success\n   */\n  AuthClass.prototype.setPreferredMFA = function (user, mfaMethod) {\n    return __awaiter(this, void 0, void 0, function () {\n      var clientMetadata, userData, smsMfaSettings, totpMfaSettings, _a, mfaList, currentMFAType, that;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            clientMetadata = this._config.clientMetadata;\n            return [4 /*yield*/, this._getUserData(user, {\n              bypassCache: true,\n              clientMetadata: clientMetadata\n            })];\n          case 1:\n            userData = _b.sent();\n            smsMfaSettings = null;\n            totpMfaSettings = null;\n            _a = mfaMethod;\n            switch (_a) {\n              case 'TOTP' || 'SOFTWARE_TOKEN_MFA':\n                return [3 /*break*/, 2];\n              case 'SMS' || 'SMS_MFA':\n                return [3 /*break*/, 3];\n              case 'NOMFA':\n                return [3 /*break*/, 4];\n            }\n            return [3 /*break*/, 6];\n          case 2:\n            totpMfaSettings = {\n              PreferredMfa: true,\n              Enabled: true\n            };\n            return [3 /*break*/, 7];\n          case 3:\n            smsMfaSettings = {\n              PreferredMfa: true,\n              Enabled: true\n            };\n            return [3 /*break*/, 7];\n          case 4:\n            mfaList = userData['UserMFASettingList'];\n            return [4 /*yield*/, this._getMfaTypeFromUserData(userData)];\n          case 5:\n            currentMFAType = _b.sent();\n            if (currentMFAType === 'NOMFA') {\n              return [2 /*return*/, Promise.resolve('No change for mfa type')];\n            } else if (currentMFAType === 'SMS_MFA') {\n              smsMfaSettings = {\n                PreferredMfa: false,\n                Enabled: false\n              };\n            } else if (currentMFAType === 'SOFTWARE_TOKEN_MFA') {\n              totpMfaSettings = {\n                PreferredMfa: false,\n                Enabled: false\n              };\n            } else {\n              return [2 /*return*/, this.rejectAuthError(AuthErrorTypes.InvalidMFA)];\n            }\n            // if there is a UserMFASettingList in the response\n            // we need to disable every mfa type in that list\n            if (mfaList && mfaList.length !== 0) {\n              // to disable SMS or TOTP if exists in that list\n              mfaList.forEach(function (mfaType) {\n                if (mfaType === 'SMS_MFA') {\n                  smsMfaSettings = {\n                    PreferredMfa: false,\n                    Enabled: false\n                  };\n                } else if (mfaType === 'SOFTWARE_TOKEN_MFA') {\n                  totpMfaSettings = {\n                    PreferredMfa: false,\n                    Enabled: false\n                  };\n                }\n              });\n            }\n            return [3 /*break*/, 7];\n          case 6:\n            logger.debug('no validmfa method provided');\n            return [2 /*return*/, this.rejectAuthError(AuthErrorTypes.NoMFA)];\n          case 7:\n            that = this;\n            return [2 /*return*/, new Promise(function (res, rej) {\n              user.setUserMfaPreference(smsMfaSettings, totpMfaSettings, function (err, result) {\n                if (err) {\n                  logger.debug('Set user mfa preference error', err);\n                  return rej(err);\n                }\n                logger.debug('Set user mfa success', result);\n                logger.debug('Caching the latest user data into local');\n                // cache the latest result into user data\n                user.getUserData(function (err, data) {\n                  if (err) {\n                    logger.debug('getting user data failed', err);\n                    return rej(err);\n                  } else {\n                    return res(result);\n                  }\n                }, {\n                  bypassCache: true,\n                  clientMetadata: clientMetadata\n                });\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * diable SMS\n   * @deprecated\n   * @param {CognitoUser} user - the current user\n   * @return - A promise resolves is success\n   */\n  AuthClass.prototype.disableSMS = function (user) {\n    return new Promise(function (res, rej) {\n      user.disableMFA(function (err, data) {\n        if (err) {\n          logger.debug('disable mfa failed', err);\n          rej(err);\n          return;\n        }\n        logger.debug('disable mfa succeed', data);\n        res(data);\n        return;\n      });\n    });\n  };\n  /**\n   * enable SMS\n   * @deprecated\n   * @param {CognitoUser} user - the current user\n   * @return - A promise resolves is success\n   */\n  AuthClass.prototype.enableSMS = function (user) {\n    return new Promise(function (res, rej) {\n      user.enableMFA(function (err, data) {\n        if (err) {\n          logger.debug('enable mfa failed', err);\n          rej(err);\n          return;\n        }\n        logger.debug('enable mfa succeed', data);\n        res(data);\n        return;\n      });\n    });\n  };\n  /**\n   * Setup TOTP\n   * @param {CognitoUser} user - the current user\n   * @return - A promise resolves with the secret code if success\n   */\n  AuthClass.prototype.setupTOTP = function (user) {\n    return new Promise(function (res, rej) {\n      user.associateSoftwareToken({\n        onFailure: function (err) {\n          logger.debug('associateSoftwareToken failed', err);\n          rej(err);\n          return;\n        },\n        associateSecretCode: function (secretCode) {\n          logger.debug('associateSoftwareToken sucess', secretCode);\n          res(secretCode);\n          return;\n        }\n      });\n    });\n  };\n  /**\n   * verify TOTP setup\n   * @param {CognitoUser} user - the current user\n   * @param {string} challengeAnswer - challenge answer\n   * @return - A promise resolves is success\n   */\n  AuthClass.prototype.verifyTotpToken = function (user, challengeAnswer) {\n    logger.debug('verification totp token', user, challengeAnswer);\n    return new Promise(function (res, rej) {\n      user.verifySoftwareToken(challengeAnswer, 'My TOTP device', {\n        onFailure: function (err) {\n          logger.debug('verifyTotpToken failed', err);\n          rej(err);\n          return;\n        },\n        onSuccess: function (data) {\n          dispatchAuthEvent('signIn', user, \"A user \" + user.getUsername() + \" has been signed in\");\n          logger.debug('verifyTotpToken success', data);\n          res(data);\n          return;\n        }\n      });\n    });\n  };\n  /**\n   * Send MFA code to confirm sign in\n   * @param {Object} user - The CognitoUser object\n   * @param {String} code - The confirmation code\n   */\n  AuthClass.prototype.confirmSignIn = function (user, code, mfaType, clientMetadata) {\n    var _this = this;\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    if (!code) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyCode);\n    }\n    var that = this;\n    return new Promise(function (resolve, reject) {\n      user.sendMFACode(code, {\n        onSuccess: function (session) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var cred, e_3;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  logger.debug(session);\n                  _a.label = 1;\n                case 1:\n                  _a.trys.push([1, 4, 5, 6]);\n                  return [4 /*yield*/, this.Credentials.clear()];\n                case 2:\n                  _a.sent();\n                  return [4 /*yield*/, this.Credentials.set(session, 'session')];\n                case 3:\n                  cred = _a.sent();\n                  logger.debug('succeed to get cognito credentials', cred);\n                  return [3 /*break*/, 6];\n                case 4:\n                  e_3 = _a.sent();\n                  logger.debug('cannot get cognito credentials', e_3);\n                  return [3 /*break*/, 6];\n                case 5:\n                  that.user = user;\n                  dispatchAuthEvent('signIn', user, \"A user \" + user.getUsername() + \" has been signed in\");\n                  resolve(user);\n                  return [7 /*endfinally*/];\n                case 6:\n                  return [2 /*return*/];\n              }\n            });\n          });\n        },\n\n        onFailure: function (err) {\n          logger.debug('confirm signIn failure', err);\n          reject(err);\n        }\n      }, mfaType, clientMetadata);\n    });\n  };\n  AuthClass.prototype.completeNewPassword = function (user, password, requiredAttributes, clientMetadata) {\n    var _this = this;\n    if (requiredAttributes === void 0) {\n      requiredAttributes = {};\n    }\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    if (!password) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyPassword);\n    }\n    var that = this;\n    return new Promise(function (resolve, reject) {\n      user.completeNewPasswordChallenge(password, requiredAttributes, {\n        onSuccess: function (session) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var cred, e_4;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  logger.debug(session);\n                  _a.label = 1;\n                case 1:\n                  _a.trys.push([1, 4, 5, 6]);\n                  return [4 /*yield*/, this.Credentials.clear()];\n                case 2:\n                  _a.sent();\n                  return [4 /*yield*/, this.Credentials.set(session, 'session')];\n                case 3:\n                  cred = _a.sent();\n                  logger.debug('succeed to get cognito credentials', cred);\n                  return [3 /*break*/, 6];\n                case 4:\n                  e_4 = _a.sent();\n                  logger.debug('cannot get cognito credentials', e_4);\n                  return [3 /*break*/, 6];\n                case 5:\n                  that.user = user;\n                  dispatchAuthEvent('signIn', user, \"A user \" + user.getUsername() + \" has been signed in\");\n                  resolve(user);\n                  return [7 /*endfinally*/];\n                case 6:\n                  return [2 /*return*/];\n              }\n            });\n          });\n        },\n\n        onFailure: function (err) {\n          logger.debug('completeNewPassword failure', err);\n          dispatchAuthEvent('completeNewPassword_failure', err, _this.user + \" failed to complete the new password flow\");\n          reject(err);\n        },\n        mfaRequired: function (challengeName, challengeParam) {\n          logger.debug('signIn MFA required');\n          user['challengeName'] = challengeName;\n          user['challengeParam'] = challengeParam;\n          resolve(user);\n        },\n        mfaSetup: function (challengeName, challengeParam) {\n          logger.debug('signIn mfa setup', challengeName);\n          user['challengeName'] = challengeName;\n          user['challengeParam'] = challengeParam;\n          resolve(user);\n        },\n        totpRequired: function (challengeName, challengeParam) {\n          logger.debug('signIn mfa setup', challengeName);\n          user['challengeName'] = challengeName;\n          user['challengeParam'] = challengeParam;\n          resolve(user);\n        }\n      }, clientMetadata);\n    });\n  };\n  /**\n   * Send the answer to a custom challenge\n   * @param {CognitoUser} user - The CognitoUser object\n   * @param {String} challengeResponses - The confirmation code\n   */\n  AuthClass.prototype.sendCustomChallengeAnswer = function (user, challengeResponses, clientMetadata) {\n    var _this = this;\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n    if (!challengeResponses) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyChallengeResponse);\n    }\n    var that = this;\n    return new Promise(function (resolve, reject) {\n      user.sendCustomChallengeAnswer(challengeResponses, _this.authCallbacks(user, resolve, reject), clientMetadata);\n    });\n  };\n  /**\n   * Update an authenticated users' attributes\n   * @param {CognitoUser} - The currently logged in user object\n   * @return {Promise}\n   **/\n  AuthClass.prototype.updateUserAttributes = function (user, attributes, clientMetadata) {\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    var attributeList = [];\n    var that = this;\n    return new Promise(function (resolve, reject) {\n      that.userSession(user).then(function (session) {\n        for (var key in attributes) {\n          if (key !== 'sub' && key.indexOf('_verified') < 0) {\n            var attr = {\n              Name: key,\n              Value: attributes[key]\n            };\n            attributeList.push(attr);\n          }\n        }\n        user.updateAttributes(attributeList, function (err, result) {\n          if (err) {\n            return reject(err);\n          } else {\n            return resolve(result);\n          }\n        }, clientMetadata);\n      });\n    });\n  };\n  /**\n   * Return user attributes\n   * @param {Object} user - The CognitoUser object\n   * @return - A promise resolves to user attributes if success\n   */\n  AuthClass.prototype.userAttributes = function (user) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      _this.userSession(user).then(function (session) {\n        user.getUserAttributes(function (err, attributes) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(attributes);\n          }\n        });\n      });\n    });\n  };\n  AuthClass.prototype.verifiedContact = function (user) {\n    var that = this;\n    return this.userAttributes(user).then(function (attributes) {\n      var attrs = that.attributesToObject(attributes);\n      var unverified = {};\n      var verified = {};\n      if (attrs['email']) {\n        if (attrs['email_verified']) {\n          verified['email'] = attrs['email'];\n        } else {\n          unverified['email'] = attrs['email'];\n        }\n      }\n      if (attrs['phone_number']) {\n        if (attrs['phone_number_verified']) {\n          verified['phone_number'] = attrs['phone_number'];\n        } else {\n          unverified['phone_number'] = attrs['phone_number'];\n        }\n      }\n      return {\n        verified: verified,\n        unverified: unverified\n      };\n    });\n  };\n  /**\n   * Get current authenticated user\n   * @return - A promise resolves to current authenticated CognitoUser if success\n   */\n  AuthClass.prototype.currentUserPoolUser = function (params) {\n    var _this = this;\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n    return new Promise(function (res, rej) {\n      _this._storageSync.then(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var user, clientMetadata;\n          var _this = this;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                if (!this.isOAuthInProgress()) return [3 /*break*/, 2];\n                logger.debug('OAuth signIn in progress, waiting for resolution...');\n                return [4 /*yield*/, new Promise(function (res) {\n                  var timeoutId = setTimeout(function () {\n                    logger.debug('OAuth signIn in progress timeout');\n                    Hub.remove('auth', hostedUISignCallback);\n                    res();\n                  }, OAUTH_FLOW_MS_TIMEOUT);\n                  Hub.listen('auth', hostedUISignCallback);\n                  function hostedUISignCallback(_a) {\n                    var payload = _a.payload;\n                    var event = payload.event;\n                    if (event === 'cognitoHostedUI' || event === 'cognitoHostedUI_failure') {\n                      logger.debug(\"OAuth signIn resolved: \" + event);\n                      clearTimeout(timeoutId);\n                      Hub.remove('auth', hostedUISignCallback);\n                      res();\n                    }\n                  }\n                })];\n              case 1:\n                _a.sent();\n                _a.label = 2;\n              case 2:\n                user = this.userPool.getCurrentUser();\n                if (!user) {\n                  logger.debug('Failed to get user from user pool');\n                  rej('No current user');\n                  return [2 /*return*/];\n                }\n\n                clientMetadata = this._config.clientMetadata;\n                // refresh the session if the session expired.\n                user.getSession(function (err, session) {\n                  return __awaiter(_this, void 0, void 0, function () {\n                    var bypassCache, clientMetadata, _a, scope;\n                    var _this = this;\n                    return __generator(this, function (_b) {\n                      switch (_b.label) {\n                        case 0:\n                          if (err) {\n                            logger.debug('Failed to get the user session', err);\n                            rej(err);\n                            return [2 /*return*/];\n                          }\n\n                          bypassCache = params ? params.bypassCache : false;\n                          if (!bypassCache) return [3 /*break*/, 2];\n                          return [4 /*yield*/, this.Credentials.clear()];\n                        case 1:\n                          _b.sent();\n                          _b.label = 2;\n                        case 2:\n                          clientMetadata = this._config.clientMetadata;\n                          _a = session.getAccessToken().decodePayload().scope, scope = _a === void 0 ? '' : _a;\n                          if (scope.split(' ').includes(USER_ADMIN_SCOPE)) {\n                            user.getUserData(function (err, data) {\n                              if (err) {\n                                logger.debug('getting user data failed', err);\n                                // Make sure the user is still valid\n                                if (err.message === 'User is disabled.' || err.message === 'User does not exist.' || err.message === 'Access Token has been revoked' // Session revoked by another app\n                                ) {\n                                  rej(err);\n                                } else {\n                                  // the error may also be thrown when lack of permissions to get user info etc\n                                  // in that case we just bypass the error\n                                  res(user);\n                                }\n                                return;\n                              }\n                              var preferredMFA = data.PreferredMfaSetting || 'NOMFA';\n                              var attributeList = [];\n                              for (var i = 0; i < data.UserAttributes.length; i++) {\n                                var attribute = {\n                                  Name: data.UserAttributes[i].Name,\n                                  Value: data.UserAttributes[i].Value\n                                };\n                                var userAttribute = new CognitoUserAttribute(attribute);\n                                attributeList.push(userAttribute);\n                              }\n                              var attributes = _this.attributesToObject(attributeList);\n                              Object.assign(user, {\n                                attributes: attributes,\n                                preferredMFA: preferredMFA\n                              });\n                              return res(user);\n                            }, {\n                              bypassCache: bypassCache,\n                              clientMetadata: clientMetadata\n                            });\n                          } else {\n                            logger.debug(\"Unable to get the user data because the \" + USER_ADMIN_SCOPE + \" \" + \"is not in the scopes of the access token\");\n                            return [2 /*return*/, res(user)];\n                          }\n                          return [2 /*return*/];\n                      }\n                    });\n                  });\n                }, {\n                  clientMetadata: clientMetadata\n                });\n                return [2 /*return*/];\n            }\n          });\n        });\n      }).catch(function (e) {\n        logger.debug('Failed to sync cache info into memory', e);\n        return rej(e);\n      });\n    });\n  };\n  AuthClass.prototype.isOAuthInProgress = function () {\n    return this.oAuthFlowInProgress;\n  };\n  /**\n   * Get current authenticated user\n   * @param {CurrentUserOpts} - options for getting the current user\n   * @return - A promise resolves to current authenticated CognitoUser if success\n   */\n  AuthClass.prototype.currentAuthenticatedUser = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var federatedUser, e_5, federatedInfo, user, e_6;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('getting current authenticated user');\n            federatedUser = null;\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this._storageSync];\n          case 2:\n            _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            e_5 = _a.sent();\n            logger.debug('Failed to sync cache info into memory', e_5);\n            throw e_5;\n          case 4:\n            try {\n              federatedInfo = JSON.parse(this._storage.getItem('aws-amplify-federatedInfo'));\n              if (federatedInfo) {\n                federatedUser = __assign(__assign({}, federatedInfo.user), {\n                  token: federatedInfo.token\n                });\n              }\n            } catch (e) {\n              logger.debug('cannot load federated user from auth storage');\n            }\n            if (!federatedUser) return [3 /*break*/, 5];\n            this.user = federatedUser;\n            logger.debug('get current authenticated federated user', this.user);\n            return [2 /*return*/, this.user];\n          case 5:\n            logger.debug('get current authenticated userpool user');\n            user = null;\n            _a.label = 6;\n          case 6:\n            _a.trys.push([6, 8,, 9]);\n            return [4 /*yield*/, this.currentUserPoolUser(params)];\n          case 7:\n            user = _a.sent();\n            return [3 /*break*/, 9];\n          case 8:\n            e_6 = _a.sent();\n            if (e_6 === 'No userPool') {\n              logger.error('Cannot get the current user because the user pool is missing. ' + 'Please make sure the Auth module is configured with a valid Cognito User Pool ID');\n            }\n            logger.debug('The user is not authenticated by the error', e_6);\n            return [2 /*return*/, Promise.reject('The user is not authenticated')];\n          case 9:\n            this.user = user;\n            return [2 /*return*/, this.user];\n        }\n      });\n    });\n  };\n  /**\n   * Get current user's session\n   * @return - A promise resolves to session object if success\n   */\n  AuthClass.prototype.currentSession = function () {\n    var that = this;\n    logger.debug('Getting current session');\n    // Purposely not calling the reject method here because we don't need a console error\n    if (!this.userPool) {\n      return Promise.reject();\n    }\n    return new Promise(function (res, rej) {\n      that.currentUserPoolUser().then(function (user) {\n        that.userSession(user).then(function (session) {\n          res(session);\n          return;\n        }).catch(function (e) {\n          logger.debug('Failed to get the current session', e);\n          rej(e);\n          return;\n        });\n      }).catch(function (e) {\n        logger.debug('Failed to get the current user', e);\n        rej(e);\n        return;\n      });\n    });\n  };\n  /**\n   * Get the corresponding user session\n   * @param {Object} user - The CognitoUser object\n   * @return - A promise resolves to the session\n   */\n  AuthClass.prototype.userSession = function (user) {\n    if (!user) {\n      logger.debug('the user is null');\n      return this.rejectAuthError(AuthErrorTypes.NoUserSession);\n    }\n    var clientMetadata = this._config.clientMetadata; // TODO: verify behavior if this is override during signIn\n    return new Promise(function (resolve, reject) {\n      logger.debug('Getting the session from this user:', user);\n      user.getSession(function (err, session) {\n        if (err) {\n          logger.debug('Failed to get the session from user', user);\n          reject(err);\n          return;\n        } else {\n          logger.debug('Succeed to get the user session', session);\n          resolve(session);\n          return;\n        }\n      }, {\n        clientMetadata: clientMetadata\n      });\n    });\n  };\n  /**\n   * Get authenticated credentials of current user.\n   * @return - A promise resolves to be current user's credentials\n   */\n  AuthClass.prototype.currentUserCredentials = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_7, federatedInfo;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('Getting current user credentials');\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this._storageSync];\n          case 2:\n            _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            e_7 = _a.sent();\n            logger.debug('Failed to sync cache info into memory', e_7);\n            throw e_7;\n          case 4:\n            federatedInfo = null;\n            try {\n              federatedInfo = JSON.parse(this._storage.getItem('aws-amplify-federatedInfo'));\n            } catch (e) {\n              logger.debug('failed to get or parse item aws-amplify-federatedInfo', e);\n            }\n            if (federatedInfo) {\n              // refresh the jwt token here if necessary\n              return [2 /*return*/, this.Credentials.refreshFederatedToken(federatedInfo)];\n            } else {\n              return [2 /*return*/, this.currentSession().then(function (session) {\n                logger.debug('getting session success', session);\n                return _this.Credentials.set(session, 'session');\n              }).catch(function (error) {\n                logger.debug('getting session failed', error);\n                return _this.Credentials.set(null, 'guest');\n              })];\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AuthClass.prototype.currentCredentials = function () {\n    logger.debug('getting current credentials');\n    return this.Credentials.get();\n  };\n  /**\n   * Initiate an attribute confirmation request\n   * @param {Object} user - The CognitoUser\n   * @param {Object} attr - The attributes to be verified\n   * @return - A promise resolves to callback data if success\n   */\n  AuthClass.prototype.verifyUserAttribute = function (user, attr, clientMetadata) {\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    return new Promise(function (resolve, reject) {\n      user.getAttributeVerificationCode(attr, {\n        onSuccess: function () {\n          return resolve();\n        },\n        onFailure: function (err) {\n          return reject(err);\n        }\n      }, clientMetadata);\n    });\n  };\n  /**\n   * Confirm an attribute using a confirmation code\n   * @param {Object} user - The CognitoUser\n   * @param {Object} attr - The attribute to be verified\n   * @param {String} code - The confirmation code\n   * @return - A promise resolves to callback data if success\n   */\n  AuthClass.prototype.verifyUserAttributeSubmit = function (user, attr, code) {\n    if (!code) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyCode);\n    }\n    return new Promise(function (resolve, reject) {\n      user.verifyAttribute(attr, code, {\n        onSuccess: function (data) {\n          resolve(data);\n          return;\n        },\n        onFailure: function (err) {\n          reject(err);\n          return;\n        }\n      });\n    });\n  };\n  AuthClass.prototype.verifyCurrentUserAttribute = function (attr) {\n    var that = this;\n    return that.currentUserPoolUser().then(function (user) {\n      return that.verifyUserAttribute(user, attr);\n    });\n  };\n  /**\n   * Confirm current user's attribute using a confirmation code\n   * @param {Object} attr - The attribute to be verified\n   * @param {String} code - The confirmation code\n   * @return - A promise resolves to callback data if success\n   */\n  AuthClass.prototype.verifyCurrentUserAttributeSubmit = function (attr, code) {\n    var that = this;\n    return that.currentUserPoolUser().then(function (user) {\n      return that.verifyUserAttributeSubmit(user, attr, code);\n    });\n  };\n  AuthClass.prototype.cognitoIdentitySignOut = function (opts, user) {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_8, isSignedInHostedUI;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, this._storageSync];\n          case 1:\n            _a.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            e_8 = _a.sent();\n            logger.debug('Failed to sync cache info into memory', e_8);\n            throw e_8;\n          case 3:\n            isSignedInHostedUI = this._oAuthHandler && this._storage.getItem('amplify-signin-with-hostedUI') === 'true';\n            return [2 /*return*/, new Promise(function (res, rej) {\n              if (opts && opts.global) {\n                logger.debug('user global sign out', user);\n                // in order to use global signout\n                // we must validate the user as an authenticated user by using getSession\n                var clientMetadata = _this._config.clientMetadata; // TODO: verify behavior if this is override during signIn\n                user.getSession(function (err, result) {\n                  if (err) {\n                    logger.debug('failed to get the user session', err);\n                    return rej(err);\n                  }\n                  user.globalSignOut({\n                    onSuccess: function (data) {\n                      logger.debug('global sign out success');\n                      if (isSignedInHostedUI) {\n                        _this.oAuthSignOutRedirect(res, rej);\n                      } else {\n                        return res();\n                      }\n                    },\n                    onFailure: function (err) {\n                      logger.debug('global sign out failed', err);\n                      return rej(err);\n                    }\n                  });\n                }, {\n                  clientMetadata: clientMetadata\n                });\n              } else {\n                logger.debug('user sign out', user);\n                user.signOut();\n                if (isSignedInHostedUI) {\n                  _this.oAuthSignOutRedirect(res, rej);\n                } else {\n                  return res();\n                }\n              }\n            })];\n        }\n      });\n    });\n  };\n  AuthClass.prototype.oAuthSignOutRedirect = function (resolve, reject) {\n    var isBrowser = JS.browserOrNode().isBrowser;\n    if (isBrowser) {\n      this.oAuthSignOutRedirectOrReject(reject);\n    } else {\n      this.oAuthSignOutAndResolve(resolve);\n    }\n  };\n  AuthClass.prototype.oAuthSignOutAndResolve = function (resolve) {\n    this._oAuthHandler.signOut();\n    resolve();\n  };\n  AuthClass.prototype.oAuthSignOutRedirectOrReject = function (reject) {\n    this._oAuthHandler.signOut(); // this method redirects url\n    // App should be redirected to another url otherwise it will reject\n    setTimeout(function () {\n      return reject('Signout timeout fail');\n    }, 3000);\n  };\n  /**\n   * Sign out method\n   * @\n   * @return - A promise resolved if success\n   */\n  AuthClass.prototype.signOut = function (opts) {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_9, user;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, this.cleanCachedItems()];\n          case 1:\n            _a.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            e_9 = _a.sent();\n            logger.debug('failed to clear cached items');\n            return [3 /*break*/, 3];\n          case 3:\n            if (!this.userPool) return [3 /*break*/, 7];\n            user = this.userPool.getCurrentUser();\n            if (!user) return [3 /*break*/, 5];\n            return [4 /*yield*/, this.cognitoIdentitySignOut(opts, user)];\n          case 4:\n            _a.sent();\n            return [3 /*break*/, 6];\n          case 5:\n            logger.debug('no current Cognito user');\n            _a.label = 6;\n          case 6:\n            return [3 /*break*/, 8];\n          case 7:\n            logger.debug('no Congito User pool');\n            _a.label = 8;\n          case 8:\n            /**\n             * Note for future refactor - no reliable way to get username with\n             * Cognito User Pools vs Identity when federating with Social Providers\n             * This is why we need a well structured session object that can be inspected\n             * and information passed back in the message below for Hub dispatch\n             */\n            dispatchAuthEvent('signOut', this.user, \"A user has been signed out\");\n            this.user = null;\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AuthClass.prototype.cleanCachedItems = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // clear cognito cached item\n            return [4 /*yield*/, this.Credentials.clear()];\n          case 1:\n            // clear cognito cached item\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Change a password for an authenticated user\n   * @param {Object} user - The CognitoUser object\n   * @param {String} oldPassword - the current password\n   * @param {String} newPassword - the requested new password\n   * @return - A promise resolves if success\n   */\n  AuthClass.prototype.changePassword = function (user, oldPassword, newPassword, clientMetadata) {\n    var _this = this;\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    return new Promise(function (resolve, reject) {\n      _this.userSession(user).then(function (session) {\n        user.changePassword(oldPassword, newPassword, function (err, data) {\n          if (err) {\n            logger.debug('change password failure', err);\n            return reject(err);\n          } else {\n            return resolve(data);\n          }\n        }, clientMetadata);\n      });\n    });\n  };\n  /**\n   * Initiate a forgot password request\n   * @param {String} username - the username to change password\n   * @return - A promise resolves if success\n   */\n  AuthClass.prototype.forgotPassword = function (username, clientMetadata) {\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n    if (!username) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n    }\n    var user = this.createCognitoUser(username);\n    return new Promise(function (resolve, reject) {\n      user.forgotPassword({\n        onSuccess: function () {\n          resolve();\n          return;\n        },\n        onFailure: function (err) {\n          logger.debug('forgot password failure', err);\n          dispatchAuthEvent('forgotPassword_failure', err, username + \" forgotPassword failed\");\n          reject(err);\n          return;\n        },\n        inputVerificationCode: function (data) {\n          dispatchAuthEvent('forgotPassword', user, username + \" has initiated forgot password flow\");\n          resolve(data);\n          return;\n        }\n      }, clientMetadata);\n    });\n  };\n  /**\n   * Confirm a new password using a confirmation Code\n   * @param {String} username - The username\n   * @param {String} code - The confirmation code\n   * @param {String} password - The new password\n   * @return - A promise that resolves if success\n   */\n  AuthClass.prototype.forgotPasswordSubmit = function (username, code, password, clientMetadata) {\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n    if (!username) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n    }\n    if (!code) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyCode);\n    }\n    if (!password) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyPassword);\n    }\n    var user = this.createCognitoUser(username);\n    return new Promise(function (resolve, reject) {\n      user.confirmPassword(code, password, {\n        onSuccess: function () {\n          dispatchAuthEvent('forgotPasswordSubmit', user, username + \" forgotPasswordSubmit successful\");\n          resolve();\n          return;\n        },\n        onFailure: function (err) {\n          dispatchAuthEvent('forgotPasswordSubmit_failure', err, username + \" forgotPasswordSubmit failed\");\n          reject(err);\n          return;\n        }\n      }, clientMetadata);\n    });\n  };\n  /**\n   * Get user information\n   * @async\n   * @return {Object }- current User's information\n   */\n  AuthClass.prototype.currentUserInfo = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var source, user, attributes, userAttrs, credentials, e_10, info, err_1, user;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            source = this.Credentials.getCredSource();\n            if (!(!source || source === 'aws' || source === 'userPool')) return [3 /*break*/, 9];\n            return [4 /*yield*/, this.currentUserPoolUser().catch(function (err) {\n              return logger.debug(err);\n            })];\n          case 1:\n            user = _a.sent();\n            if (!user) {\n              return [2 /*return*/, null];\n            }\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 8,, 9]);\n            return [4 /*yield*/, this.userAttributes(user)];\n          case 3:\n            attributes = _a.sent();\n            userAttrs = this.attributesToObject(attributes);\n            credentials = null;\n            _a.label = 4;\n          case 4:\n            _a.trys.push([4, 6,, 7]);\n            return [4 /*yield*/, this.currentCredentials()];\n          case 5:\n            credentials = _a.sent();\n            return [3 /*break*/, 7];\n          case 6:\n            e_10 = _a.sent();\n            logger.debug('Failed to retrieve credentials while getting current user info', e_10);\n            return [3 /*break*/, 7];\n          case 7:\n            info = {\n              id: credentials ? credentials.identityId : undefined,\n              username: user.getUsername(),\n              attributes: userAttrs\n            };\n            return [2 /*return*/, info];\n          case 8:\n            err_1 = _a.sent();\n            logger.debug('currentUserInfo error', err_1);\n            return [2 /*return*/, {}];\n          case 9:\n            if (source === 'federated') {\n              user = this.user;\n              return [2 /*return*/, user ? user : {}];\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AuthClass.prototype.federatedSignIn = function (providerOrOptions, response, user) {\n    return __awaiter(this, void 0, void 0, function () {\n      var options, provider, customState, client_id, redirect_uri, provider, loggedInUser, token, identity_id, expires_at, credentials, currentUser;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this._config.identityPoolId && !this._config.userPoolId) {\n              throw new Error(\"Federation requires either a User Pool or Identity Pool in config\");\n            }\n            // Ensure backwards compatability\n            if (typeof providerOrOptions === 'undefined') {\n              if (this._config.identityPoolId && !this._config.userPoolId) {\n                throw new Error(\"Federation with Identity Pools requires tokens passed as arguments\");\n              }\n            }\n            if (!(isFederatedSignInOptions(providerOrOptions) || isFederatedSignInOptionsCustom(providerOrOptions) || hasCustomState(providerOrOptions) || typeof providerOrOptions === 'undefined')) return [3 /*break*/, 1];\n            options = providerOrOptions || {\n              provider: CognitoHostedUIIdentityProvider.Cognito\n            };\n            provider = isFederatedSignInOptions(options) ? options.provider : options.customProvider;\n            customState = isFederatedSignInOptions(options) ? options.customState : options.customState;\n            if (this._config.userPoolId) {\n              client_id = isCognitoHostedOpts(this._config.oauth) ? this._config.userPoolWebClientId : this._config.oauth.clientID;\n              redirect_uri = isCognitoHostedOpts(this._config.oauth) ? this._config.oauth.redirectSignIn : this._config.oauth.redirectUri;\n              this._oAuthHandler.oauthSignIn(this._config.oauth.responseType, this._config.oauth.domain, redirect_uri, client_id, provider, customState);\n            }\n            return [3 /*break*/, 4];\n          case 1:\n            provider = providerOrOptions;\n            // To check if the user is already logged in\n            try {\n              loggedInUser = JSON.stringify(JSON.parse(this._storage.getItem('aws-amplify-federatedInfo')).user);\n              if (loggedInUser) {\n                logger.warn(\"There is already a signed in user: \" + loggedInUser + \" in your app.\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tYou should not call Auth.federatedSignIn method again as it may cause unexpected behavior.\");\n              }\n            } catch (e) {}\n            token = response.token, identity_id = response.identity_id, expires_at = response.expires_at;\n            return [4 /*yield*/, this.Credentials.set({\n              provider: provider,\n              token: token,\n              identity_id: identity_id,\n              user: user,\n              expires_at: expires_at\n            }, 'federation')];\n          case 2:\n            credentials = _a.sent();\n            return [4 /*yield*/, this.currentAuthenticatedUser()];\n          case 3:\n            currentUser = _a.sent();\n            dispatchAuthEvent('signIn', currentUser, \"A user \" + currentUser.username + \" has been signed in\");\n            logger.debug('federated sign in credentials', credentials);\n            return [2 /*return*/, credentials];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Used to complete the OAuth flow with or without the Cognito Hosted UI\n   * @param {String} URL - optional parameter for customers to pass in the response URL\n   */\n  AuthClass.prototype._handleAuthResponse = function (URL) {\n    return __awaiter(this, void 0, void 0, function () {\n      var currentUrl, hasCodeOrError, hasTokenOrError, _a, accessToken, idToken, refreshToken, state, session, credentials, isCustomStateIncluded, currentUser, customState, err_2;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (this.oAuthFlowInProgress) {\n              logger.debug(\"Skipping URL \" + URL + \" current flow in progress\");\n              return [2 /*return*/];\n            }\n\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1,, 8, 9]);\n            this.oAuthFlowInProgress = true;\n            if (!this._config.userPoolId) {\n              throw new Error(\"OAuth responses require a User Pool defined in config\");\n            }\n            dispatchAuthEvent('parsingCallbackUrl', {\n              url: URL\n            }, \"The callback url is being parsed\");\n            currentUrl = URL || (JS.browserOrNode().isBrowser ? window.location.href : '');\n            hasCodeOrError = !!(parse(currentUrl).query || '').split('&').map(function (entry) {\n              return entry.split('=');\n            }).find(function (_a) {\n              var _b = __read(_a, 1),\n                k = _b[0];\n              return k === 'code' || k === 'error';\n            });\n            hasTokenOrError = !!(parse(currentUrl).hash || '#').substr(1).split('&').map(function (entry) {\n              return entry.split('=');\n            }).find(function (_a) {\n              var _b = __read(_a, 1),\n                k = _b[0];\n              return k === 'access_token' || k === 'error';\n            });\n            if (!(hasCodeOrError || hasTokenOrError)) return [3 /*break*/, 7];\n            this._storage.setItem('amplify-redirected-from-hosted-ui', 'true');\n            _b.label = 2;\n          case 2:\n            _b.trys.push([2, 6,, 7]);\n            return [4 /*yield*/, this._oAuthHandler.handleAuthResponse(currentUrl)];\n          case 3:\n            _a = _b.sent(), accessToken = _a.accessToken, idToken = _a.idToken, refreshToken = _a.refreshToken, state = _a.state;\n            session = new CognitoUserSession({\n              IdToken: new CognitoIdToken({\n                IdToken: idToken\n              }),\n              RefreshToken: new CognitoRefreshToken({\n                RefreshToken: refreshToken\n              }),\n              AccessToken: new CognitoAccessToken({\n                AccessToken: accessToken\n              })\n            });\n            credentials = void 0;\n            if (!this._config.identityPoolId) return [3 /*break*/, 5];\n            return [4 /*yield*/, this.Credentials.set(session, 'session')];\n          case 4:\n            credentials = _b.sent();\n            logger.debug('AWS credentials', credentials);\n            _b.label = 5;\n          case 5:\n            isCustomStateIncluded = /-/.test(state);\n            currentUser = this.createCognitoUser(session.getIdToken().decodePayload()['cognito:username']);\n            // This calls cacheTokens() in Cognito SDK\n            currentUser.setSignInUserSession(session);\n            if (window && typeof window.history !== 'undefined') {\n              window.history.replaceState({}, null, this._config.oauth.redirectSignIn);\n            }\n            dispatchAuthEvent('signIn', currentUser, \"A user \" + currentUser.getUsername() + \" has been signed in\");\n            dispatchAuthEvent('cognitoHostedUI', currentUser, \"A user \" + currentUser.getUsername() + \" has been signed in via Cognito Hosted UI\");\n            if (isCustomStateIncluded) {\n              customState = state.split('-').splice(1).join('-');\n              dispatchAuthEvent('customOAuthState', urlSafeDecode(customState), \"State for user \" + currentUser.getUsername());\n            }\n            //#endregion\n            return [2 /*return*/, credentials];\n          case 6:\n            err_2 = _b.sent();\n            logger.debug('Error in cognito hosted auth response', err_2);\n            dispatchAuthEvent('signIn_failure', err_2, \"The OAuth response flow failed\");\n            dispatchAuthEvent('cognitoHostedUI_failure', err_2, \"A failure occurred when returning to the Cognito Hosted UI\");\n            dispatchAuthEvent('customState_failure', err_2, \"A failure occurred when returning state\");\n            return [3 /*break*/, 7];\n          case 7:\n            return [3 /*break*/, 9];\n          case 8:\n            this.oAuthFlowInProgress = false;\n            return [7 /*endfinally*/];\n          case 9:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Compact version of credentials\n   * @param {Object} credentials\n   * @return {Object} - Credentials\n   */\n  AuthClass.prototype.essentialCredentials = function (credentials) {\n    return {\n      accessKeyId: credentials.accessKeyId,\n      sessionToken: credentials.sessionToken,\n      secretAccessKey: credentials.secretAccessKey,\n      identityId: credentials.identityId,\n      authenticated: credentials.authenticated\n    };\n  };\n  AuthClass.prototype.attributesToObject = function (attributes) {\n    var _this = this;\n    var obj = {};\n    if (attributes) {\n      attributes.map(function (attribute) {\n        if (attribute.Name === 'email_verified' || attribute.Name === 'phone_number_verified') {\n          obj[attribute.Name] = _this.isTruthyString(attribute.Value) || attribute.Value === true;\n        } else {\n          obj[attribute.Name] = attribute.Value;\n        }\n      });\n    }\n    return obj;\n  };\n  AuthClass.prototype.isTruthyString = function (value) {\n    return typeof value.toLowerCase === 'function' && value.toLowerCase() === 'true';\n  };\n  AuthClass.prototype.createCognitoUser = function (username) {\n    var userData = {\n      Username: username,\n      Pool: this.userPool\n    };\n    userData.Storage = this._storage;\n    var authenticationFlowType = this._config.authenticationFlowType;\n    var user = new CognitoUser(userData);\n    if (authenticationFlowType) {\n      user.setAuthenticationFlowType(authenticationFlowType);\n    }\n    return user;\n  };\n  AuthClass.prototype._isValidAuthStorage = function (obj) {\n    // We need to check if the obj has the functions of Storage\n    return !!obj && typeof obj.getItem === 'function' && typeof obj.setItem === 'function' && typeof obj.removeItem === 'function' && typeof obj.clear === 'function';\n  };\n  AuthClass.prototype.noUserPoolErrorHandler = function (config) {\n    if (config) {\n      if (!config.userPoolId || !config.identityPoolId) {\n        return AuthErrorTypes.MissingAuthConfig;\n      }\n    }\n    return AuthErrorTypes.NoConfig;\n  };\n  AuthClass.prototype.rejectAuthError = function (type) {\n    return Promise.reject(new AuthError(type));\n  };\n  AuthClass.prototype.rejectNoUserPool = function () {\n    var type = this.noUserPoolErrorHandler(this._config);\n    return Promise.reject(new NoUserPoolError(type));\n  };\n  return AuthClass;\n}();\nexport { AuthClass };\nexport var Auth = new AuthClass(null);\nAmplify.register(Auth);","map":{"version":3,"names":["isUsernamePasswordOpts","isCognitoHostedOpts","isFederatedSignInOptions","isFederatedSignInOptionsCustom","hasCustomState","Amplify","ConsoleLogger","Logger","Credentials","Hub","StorageHelper","Parser","JS","UniversalStorage","urlSafeDecode","CookieStorage","CognitoUserPool","AuthenticationDetails","CognitoUser","CognitoUserSession","CognitoUserAttribute","CognitoIdToken","CognitoRefreshToken","CognitoAccessToken","parse","OAuth","default","urlListener","AuthError","NoUserPoolError","AuthErrorTypes","CognitoHostedUIIdentityProvider","logger","USER_ADMIN_SCOPE","OAUTH_FLOW_MS_TIMEOUT","AMPLIFY_SYMBOL","Symbol","for","dispatchAuthEvent","event","data","message","dispatch","AuthClass","config","_this","userPool","user","oAuthFlowInProgress","wrapRefreshSessionCallback","callback","wrapped","error","undefined","configure","currentCredentials","bind","currentUserCredentials","listen","_a","payload","_storage","setItem","removeItem","prototype","getModuleName","_config","debug","conf","Object","assign","parseMobilehubConfig","Auth","userPoolId","userPoolWebClientId","cookieStorage","oauth","region","identityPoolId","mandatorySignIn","refreshHandlers","identityPoolRegion","clientMetadata","endpoint","storage","ssr","getStorage","_isValidAuthStorage","Error","_storageSync","Promise","resolve","userPoolData","UserPoolId","ClientId","Storage","cognitoHostedUIConfig","awsCognito","cognitoAuthParams","cognitoClientId","domain","scopes","redirectSignIn","redirectSignOut","responseType","urlOpener","_oAuthHandler","usedResponseUrls_1","url","_handleAuthResponse","signUp","params","restOfAttrs","_i","arguments","length","rejectNoUserPool","username","password","attributes","validationData","email","phone_number","push","Name","Value","attrs_1","keys","map","key","validationDataObject_1","rejectAuthError","SignUpError","EmptyUsername","EmptyPassword","reject","err","confirmSignUp","code","options","EmptyCode","createCognitoUser","forceAliasCreation","confirmRegistration","resendSignUp","resendConfirmationCode","signIn","usernameOrSignInOpts","pw","warn","InvalidUsername","authDetails","Username","Password","ValidationData","ClientMetadata","signInWithPassword","signInWithoutPassword","authCallbacks","that","onSuccess","session","__awaiter","clear","sent","set","cred","e_1","currentUserPoolUser","currentUser","getUsername","e_2","onFailure","customChallenge","challengeParam","mfaRequired","challengeName","mfaSetup","newPasswordRequired","userAttributes","requiredAttributes","totpRequired","selectMFAType","pendingSignIn","authenticateUser","value","setAuthenticationFlowType","initiateAuth","getMFAOptions","res","rej","mfaOptions","getPreferredMFA","bypassCache","getUserData","mfaType","_getMfaTypeFromUserData","ret","preferredMFA","PreferredMfaSetting","mfaList","UserMFASettingList","MFAOptions","_getUserData","setPreferredMFA","mfaMethod","userData","_b","smsMfaSettings","totpMfaSettings","PreferredMfa","Enabled","currentMFAType","InvalidMFA","forEach","NoMFA","setUserMfaPreference","result","disableSMS","disableMFA","enableSMS","enableMFA","setupTOTP","associateSoftwareToken","associateSecretCode","secretCode","verifyTotpToken","challengeAnswer","verifySoftwareToken","confirmSignIn","sendMFACode","e_3","completeNewPassword","completeNewPasswordChallenge","e_4","sendCustomChallengeAnswer","challengeResponses","EmptyChallengeResponse","updateUserAttributes","attributeList","userSession","then","indexOf","attr","updateAttributes","getUserAttributes","verifiedContact","attrs","attributesToObject","unverified","verified","isOAuthInProgress","timeoutId","setTimeout","remove","hostedUISignCallback","clearTimeout","getCurrentUser","getSession","getAccessToken","decodePayload","scope","split","includes","i","UserAttributes","attribute","userAttribute","catch","e","currentAuthenticatedUser","federatedUser","e_5","federatedInfo","JSON","getItem","__assign","token","e_6","currentSession","NoUserSession","e_7","refreshFederatedToken","get","verifyUserAttribute","getAttributeVerificationCode","verifyUserAttributeSubmit","verifyAttribute","verifyCurrentUserAttribute","verifyCurrentUserAttributeSubmit","cognitoIdentitySignOut","opts","e_8","isSignedInHostedUI","global","globalSignOut","oAuthSignOutRedirect","signOut","isBrowser","browserOrNode","oAuthSignOutRedirectOrReject","oAuthSignOutAndResolve","cleanCachedItems","changePassword","oldPassword","newPassword","forgotPassword","inputVerificationCode","forgotPasswordSubmit","confirmPassword","currentUserInfo","source","getCredSource","userAttrs","credentials","e_10","info","id","identityId","err_1","federatedSignIn","providerOrOptions","response","provider","Cognito","customProvider","customState","client_id","clientID","redirect_uri","redirectUri","oauthSignIn","loggedInUser","stringify","identity_id","expires_at","URL","currentUrl","window","location","href","hasCodeOrError","query","entry","find","__read","k","hasTokenOrError","hash","substr","handleAuthResponse","accessToken","idToken","refreshToken","state","IdToken","RefreshToken","AccessToken","isCustomStateIncluded","test","getIdToken","setSignInUserSession","history","replaceState","splice","join","err_2","essentialCredentials","accessKeyId","sessionToken","secretAccessKey","authenticated","obj","isTruthyString","toLowerCase","Pool","authenticationFlowType","noUserPoolErrorHandler","MissingAuthConfig","NoConfig","type","register"],"sources":["/Users/ericli/node_modules/@aws-amplify/auth/src/Auth.ts"],"sourcesContent":["/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *\t http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport {\n\tAuthOptions,\n\tFederatedResponse,\n\tSignUpParams,\n\tFederatedUser,\n\tConfirmSignUpOptions,\n\tSignOutOpts,\n\tCurrentUserOpts,\n\tGetPreferredMFAOpts,\n\tSignInOpts,\n\tisUsernamePasswordOpts,\n\tisCognitoHostedOpts,\n\tisFederatedSignInOptions,\n\tisFederatedSignInOptionsCustom,\n\thasCustomState,\n\tFederatedSignInOptionsCustom,\n\tLegacyProvider,\n\tFederatedSignInOptions,\n\tAwsCognitoOAuthOpts,\n\tClientMetaData,\n} from './types';\n\nimport {\n\tAmplify,\n\tConsoleLogger as Logger,\n\tCredentials,\n\tHub,\n\tStorageHelper,\n\tICredentials,\n\tParser,\n\tJS,\n\tUniversalStorage,\n\turlSafeDecode,\n} from '@aws-amplify/core';\nimport {\n\tCookieStorage,\n\tCognitoUserPool,\n\tAuthenticationDetails,\n\tICognitoUserPoolData,\n\tICognitoUserData,\n\tISignUpResult,\n\tCognitoUser,\n\tMFAOption,\n\tCognitoUserSession,\n\tIAuthenticationCallback,\n\tICognitoUserAttributeData,\n\tCognitoUserAttribute,\n\tCognitoIdToken,\n\tCognitoRefreshToken,\n\tCognitoAccessToken,\n\tNodeCallback,\n} from 'amazon-cognito-identity-js';\n\nimport { parse } from 'url';\nimport OAuth from './OAuth/OAuth';\nimport { default as urlListener } from './urlListener';\nimport { AuthError, NoUserPoolError } from './Errors';\nimport { AuthErrorTypes, CognitoHostedUIIdentityProvider } from './types/Auth';\n\nconst logger = new Logger('AuthClass');\nconst USER_ADMIN_SCOPE = 'aws.cognito.signin.user.admin';\n\n// 10 sec, following this guide https://www.nngroup.com/articles/response-times-3-important-limits/\nconst OAUTH_FLOW_MS_TIMEOUT = 10 * 1000;\n\nconst AMPLIFY_SYMBOL = (typeof Symbol !== 'undefined' &&\ntypeof Symbol.for === 'function'\n\t? Symbol.for('amplify_default')\n\t: '@@amplify_default') as Symbol;\n\nconst dispatchAuthEvent = (event: string, data: any, message: string) => {\n\tHub.dispatch('auth', { event, data, message }, 'Auth', AMPLIFY_SYMBOL);\n};\n\n/**\n * Provide authentication steps\n */\nexport class AuthClass {\n\tprivate _config: AuthOptions;\n\tprivate userPool: CognitoUserPool = null;\n\tprivate user: any = null;\n\tprivate _oAuthHandler: OAuth;\n\tprivate _storage;\n\tprivate _storageSync;\n\tprivate oAuthFlowInProgress: boolean = false;\n\tprivate pendingSignIn: ReturnType<AuthClass['signInWithPassword']> | null;\n\n\tCredentials = Credentials;\n\n\t/**\n\t * Initialize Auth with AWS configurations\n\t * @param {Object} config - Configuration of the Auth\n\t */\n\tconstructor(config: AuthOptions) {\n\t\tthis.configure(config);\n\t\tthis.currentCredentials = this.currentCredentials.bind(this);\n\t\tthis.currentUserCredentials = this.currentUserCredentials.bind(this);\n\n\t\tHub.listen('auth', ({ payload }) => {\n\t\t\tconst { event } = payload;\n\t\t\tswitch (event) {\n\t\t\t\tcase 'signIn':\n\t\t\t\t\tthis._storage.setItem('amplify-signin-with-hostedUI', 'false');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'signOut':\n\t\t\t\t\tthis._storage.removeItem('amplify-signin-with-hostedUI');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'cognitoHostedUI':\n\t\t\t\t\tthis._storage.setItem('amplify-signin-with-hostedUI', 'true');\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic getModuleName() {\n\t\treturn 'Auth';\n\t}\n\n\tconfigure(config?) {\n\t\tif (!config) return this._config || {};\n\t\tlogger.debug('configure Auth');\n\t\tconst conf = Object.assign(\n\t\t\t{},\n\t\t\tthis._config,\n\t\t\tParser.parseMobilehubConfig(config).Auth,\n\t\t\tconfig\n\t\t);\n\t\tthis._config = conf;\n\t\tconst {\n\t\t\tuserPoolId,\n\t\t\tuserPoolWebClientId,\n\t\t\tcookieStorage,\n\t\t\toauth,\n\t\t\tregion,\n\t\t\tidentityPoolId,\n\t\t\tmandatorySignIn,\n\t\t\trefreshHandlers,\n\t\t\tidentityPoolRegion,\n\t\t\tclientMetadata,\n\t\t\tendpoint,\n\t\t} = this._config;\n\n\t\tif (!this._config.storage) {\n\t\t\t// backward compatability\n\t\t\tif (cookieStorage) this._storage = new CookieStorage(cookieStorage);\n\t\t\telse {\n\t\t\t\tthis._storage = config.ssr\n\t\t\t\t\t? new UniversalStorage()\n\t\t\t\t\t: new StorageHelper().getStorage();\n\t\t\t}\n\t\t} else {\n\t\t\tif (!this._isValidAuthStorage(this._config.storage)) {\n\t\t\t\tlogger.error('The storage in the Auth config is not valid!');\n\t\t\t\tthrow new Error('Empty storage object');\n\t\t\t}\n\t\t\tthis._storage = this._config.storage;\n\t\t}\n\n\t\tthis._storageSync = Promise.resolve();\n\t\tif (typeof this._storage['sync'] === 'function') {\n\t\t\tthis._storageSync = this._storage['sync']();\n\t\t}\n\n\t\tif (userPoolId) {\n\t\t\tconst userPoolData: ICognitoUserPoolData = {\n\t\t\t\tUserPoolId: userPoolId,\n\t\t\t\tClientId: userPoolWebClientId,\n\t\t\t\tendpoint,\n\t\t\t};\n\t\t\tuserPoolData.Storage = this._storage;\n\n\t\t\tthis.userPool = new CognitoUserPool(\n\t\t\t\tuserPoolData,\n\t\t\t\tthis.wrapRefreshSessionCallback\n\t\t\t);\n\t\t}\n\n\t\tthis.Credentials.configure({\n\t\t\tmandatorySignIn,\n\t\t\tregion: identityPoolRegion || region,\n\t\t\tuserPoolId,\n\t\t\tidentityPoolId,\n\t\t\trefreshHandlers,\n\t\t\tstorage: this._storage,\n\t\t});\n\n\t\t// initialize cognitoauth client if hosted ui options provided\n\t\t// to keep backward compatibility:\n\t\tconst cognitoHostedUIConfig = oauth\n\t\t\t? isCognitoHostedOpts(this._config.oauth)\n\t\t\t\t? oauth\n\t\t\t\t: (<any>oauth).awsCognito\n\t\t\t: undefined;\n\n\t\tif (cognitoHostedUIConfig) {\n\t\t\tconst cognitoAuthParams = Object.assign(\n\t\t\t\t{\n\t\t\t\t\tcognitoClientId: userPoolWebClientId,\n\t\t\t\t\tUserPoolId: userPoolId,\n\t\t\t\t\tdomain: cognitoHostedUIConfig['domain'],\n\t\t\t\t\tscopes: cognitoHostedUIConfig['scope'],\n\t\t\t\t\tredirectSignIn: cognitoHostedUIConfig['redirectSignIn'],\n\t\t\t\t\tredirectSignOut: cognitoHostedUIConfig['redirectSignOut'],\n\t\t\t\t\tresponseType: cognitoHostedUIConfig['responseType'],\n\t\t\t\t\tStorage: this._storage,\n\t\t\t\t\turlOpener: cognitoHostedUIConfig['urlOpener'],\n\t\t\t\t\tclientMetadata,\n\t\t\t\t},\n\t\t\t\tcognitoHostedUIConfig['options']\n\t\t\t);\n\n\t\t\tthis._oAuthHandler = new OAuth({\n\t\t\t\tscopes: cognitoAuthParams.scopes,\n\t\t\t\tconfig: cognitoAuthParams,\n\t\t\t\tcognitoClientId: cognitoAuthParams.cognitoClientId,\n\t\t\t});\n\n\t\t\t// **NOTE** - Remove this in a future major release as it is a breaking change\n\t\t\t// Prevents _handleAuthResponse from being called multiple times in Expo\n\t\t\t// See https://github.com/aws-amplify/amplify-js/issues/4388\n\t\t\tconst usedResponseUrls = {};\n\t\t\turlListener(({ url }) => {\n\t\t\t\tif (usedResponseUrls[url]) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tusedResponseUrls[url] = true;\n\t\t\t\tthis._handleAuthResponse(url);\n\t\t\t});\n\t\t}\n\n\t\tdispatchAuthEvent(\n\t\t\t'configured',\n\t\t\tnull,\n\t\t\t`The Auth category has been configured successfully`\n\t\t);\n\t\treturn this._config;\n\t}\n\n\twrapRefreshSessionCallback = (callback: NodeCallback.Any) => {\n\t\tconst wrapped: NodeCallback.Any = (error, data) => {\n\t\t\tif (data) {\n\t\t\t\tdispatchAuthEvent('tokenRefresh', undefined, `New token retrieved`);\n\t\t\t} else {\n\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t'tokenRefresh_failure',\n\t\t\t\t\terror,\n\t\t\t\t\t`Failed to retrieve new token`\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn callback(error, data);\n\t\t};\n\t\treturn wrapped;\n\t} // prettier-ignore\n\n\t/**\n\t * Sign up with username, password and other attributes like phone, email\n\t * @param {String | object} params - The user attributes used for signin\n\t * @param {String[]} restOfAttrs - for the backward compatability\n\t * @return - A promise resolves callback data if success\n\t */\n\tpublic signUp(\n\t\tparams: string | SignUpParams,\n\t\t...restOfAttrs: string[]\n\t): Promise<ISignUpResult> {\n\t\tif (!this.userPool) {\n\t\t\treturn this.rejectNoUserPool();\n\t\t}\n\n\t\tlet username: string = null;\n\t\tlet password: string = null;\n\t\tconst attributes: CognitoUserAttribute[] = [];\n\t\tlet validationData: CognitoUserAttribute[] = null;\n\t\tlet clientMetadata;\n\n\t\tif (params && typeof params === 'string') {\n\t\t\tusername = params;\n\t\t\tpassword = restOfAttrs ? restOfAttrs[0] : null;\n\t\t\tconst email: string = restOfAttrs ? restOfAttrs[1] : null;\n\t\t\tconst phone_number: string = restOfAttrs ? restOfAttrs[2] : null;\n\n\t\t\tif (email)\n\t\t\t\tattributes.push(\n\t\t\t\t\tnew CognitoUserAttribute({ Name: 'email', Value: email })\n\t\t\t\t);\n\n\t\t\tif (phone_number)\n\t\t\t\tattributes.push(\n\t\t\t\t\tnew CognitoUserAttribute({\n\t\t\t\t\t\tName: 'phone_number',\n\t\t\t\t\t\tValue: phone_number,\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t} else if (params && typeof params === 'object') {\n\t\t\tusername = params['username'];\n\t\t\tpassword = params['password'];\n\n\t\t\tif (params && params.clientMetadata) {\n\t\t\t\tclientMetadata = params.clientMetadata;\n\t\t\t} else if (this._config.clientMetadata) {\n\t\t\t\tclientMetadata = this._config.clientMetadata;\n\t\t\t}\n\n\t\t\tconst attrs = params['attributes'];\n\t\t\tif (attrs) {\n\t\t\t\tObject.keys(attrs).map(key => {\n\t\t\t\t\tattributes.push(\n\t\t\t\t\t\tnew CognitoUserAttribute({ Name: key, Value: attrs[key] })\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst validationDataObject = params['validationData'];\n\t\t\tif (validationDataObject) {\n\t\t\t\tvalidationData = [];\n\t\t\t\tObject.keys(validationDataObject).map(key => {\n\t\t\t\t\tvalidationData.push(\n\t\t\t\t\t\tnew CognitoUserAttribute({\n\t\t\t\t\t\t\tName: key,\n\t\t\t\t\t\t\tValue: validationDataObject[key],\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.SignUpError);\n\t\t}\n\n\t\tif (!username) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n\t\t}\n\t\tif (!password) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyPassword);\n\t\t}\n\n\t\tlogger.debug('signUp attrs:', attributes);\n\t\tlogger.debug('signUp validation data:', validationData);\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.userPool.signUp(\n\t\t\t\tusername,\n\t\t\t\tpassword,\n\t\t\t\tattributes,\n\t\t\t\tvalidationData,\n\t\t\t\t(err, data) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'signUp_failure',\n\t\t\t\t\t\t\terr,\n\t\t\t\t\t\t\t`${username} failed to signup`\n\t\t\t\t\t\t);\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'signUp',\n\t\t\t\t\t\t\tdata,\n\t\t\t\t\t\t\t`${username} has signed up successfully`\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresolve(data);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tclientMetadata\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Send the verification code to confirm sign up\n\t * @param {String} username - The username to be confirmed\n\t * @param {String} code - The verification code\n\t * @param {ConfirmSignUpOptions} options - other options for confirm signup\n\t * @return - A promise resolves callback data if success\n\t */\n\tpublic confirmSignUp(\n\t\tusername: string,\n\t\tcode: string,\n\t\toptions?: ConfirmSignUpOptions\n\t): Promise<any> {\n\t\tif (!this.userPool) {\n\t\t\treturn this.rejectNoUserPool();\n\t\t}\n\t\tif (!username) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n\t\t}\n\t\tif (!code) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyCode);\n\t\t}\n\n\t\tconst user = this.createCognitoUser(username);\n\t\tconst forceAliasCreation =\n\t\t\toptions && typeof options.forceAliasCreation === 'boolean'\n\t\t\t\t? options.forceAliasCreation\n\t\t\t\t: true;\n\n\t\tlet clientMetadata;\n\t\tif (options && options.clientMetadata) {\n\t\t\tclientMetadata = options.clientMetadata;\n\t\t} else if (this._config.clientMetadata) {\n\t\t\tclientMetadata = this._config.clientMetadata;\n\t\t}\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.confirmRegistration(\n\t\t\t\tcode,\n\t\t\t\tforceAliasCreation,\n\t\t\t\t(err, data) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(data);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tclientMetadata\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Resend the verification code\n\t * @param {String} username - The username to be confirmed\n\t * @param {ClientMetadata} clientMetadata - Metadata to be passed to Cognito Lambda triggers\n\t * @return - A promise resolves code delivery details if successful\n\t */\n\tpublic resendSignUp(\n\t\tusername: string,\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<any> {\n\t\tif (!this.userPool) {\n\t\t\treturn this.rejectNoUserPool();\n\t\t}\n\t\tif (!username) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n\t\t}\n\n\t\tconst user = this.createCognitoUser(username);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.resendConfirmationCode((err, data) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(data);\n\t\t\t\t}\n\t\t\t}, clientMetadata);\n\t\t});\n\t}\n\n\t/**\n\t * Sign in\n\t * @param {String | SignInOpts} usernameOrSignInOpts - The username to be signed in or the sign in options\n\t * @param {String} password - The password of the username\n\t * @return - A promise resolves the CognitoUser\n\t */\n\tpublic signIn(\n\t\tusernameOrSignInOpts: string | SignInOpts,\n\t\tpw?: string,\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<CognitoUser | any> {\n\t\tif (!this.userPool) {\n\t\t\treturn this.rejectNoUserPool();\n\t\t}\n\n\t\tlet username = null;\n\t\tlet password = null;\n\t\tlet validationData = {};\n\n\t\t// for backward compatibility\n\t\tif (typeof usernameOrSignInOpts === 'string') {\n\t\t\tusername = usernameOrSignInOpts;\n\t\t\tpassword = pw;\n\t\t} else if (isUsernamePasswordOpts(usernameOrSignInOpts)) {\n\t\t\tif (typeof pw !== 'undefined') {\n\t\t\t\tlogger.warn(\n\t\t\t\t\t'The password should be defined under the first parameter object!'\n\t\t\t\t);\n\t\t\t}\n\t\t\tusername = usernameOrSignInOpts.username;\n\t\t\tpassword = usernameOrSignInOpts.password;\n\t\t\tvalidationData = usernameOrSignInOpts.validationData;\n\t\t} else {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.InvalidUsername);\n\t\t}\n\t\tif (!username) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n\t\t}\n\t\tconst authDetails = new AuthenticationDetails({\n\t\t\tUsername: username,\n\t\t\tPassword: password,\n\t\t\tValidationData: validationData,\n\t\t\tClientMetadata: clientMetadata,\n\t\t});\n\t\tif (password) {\n\t\t\treturn this.signInWithPassword(authDetails);\n\t\t} else {\n\t\t\treturn this.signInWithoutPassword(authDetails);\n\t\t}\n\t}\n\n\t/**\n\t * Return an object with the authentication callbacks\n\t * @param {CognitoUser} user - the cognito user object\n\t * @param {} resolve - function called when resolving the current step\n\t * @param {} reject - function called when rejecting the current step\n\t * @return - an object with the callback methods for user authentication\n\t */\n\tprivate authCallbacks(\n\t\tuser: CognitoUser,\n\t\tresolve: (value?: CognitoUser | any) => void,\n\t\treject: (value?: any) => void\n\t): IAuthenticationCallback {\n\t\tconst that = this;\n\t\treturn {\n\t\t\tonSuccess: async session => {\n\t\t\t\tlogger.debug(session);\n\t\t\t\tdelete user['challengeName'];\n\t\t\t\tdelete user['challengeParam'];\n\t\t\t\ttry {\n\t\t\t\t\tawait this.Credentials.clear();\n\t\t\t\t\tconst cred = await this.Credentials.set(session, 'session');\n\t\t\t\t\tlogger.debug('succeed to get cognito credentials', cred);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tlogger.debug('cannot get cognito credentials', e);\n\t\t\t\t} finally {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// In order to get user attributes and MFA methods\n\t\t\t\t\t\t// We need to trigger currentUserPoolUser again\n\t\t\t\t\t\tconst currentUser = await this.currentUserPoolUser();\n\t\t\t\t\t\tthat.user = currentUser;\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'signIn',\n\t\t\t\t\t\t\tcurrentUser,\n\t\t\t\t\t\t\t`A user ${user.getUsername()} has been signed in`\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresolve(currentUser);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tlogger.error('Failed to get the signed in user', e);\n\t\t\t\t\t\treject(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tonFailure: err => {\n\t\t\t\tlogger.debug('signIn failure', err);\n\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t'signIn_failure',\n\t\t\t\t\terr,\n\t\t\t\t\t`${user.getUsername()} failed to signin`\n\t\t\t\t);\n\t\t\t\treject(err);\n\t\t\t},\n\t\t\tcustomChallenge: challengeParam => {\n\t\t\t\tlogger.debug('signIn custom challenge answer required');\n\t\t\t\tuser['challengeName'] = 'CUSTOM_CHALLENGE';\n\t\t\t\tuser['challengeParam'] = challengeParam;\n\t\t\t\tresolve(user);\n\t\t\t},\n\t\t\tmfaRequired: (challengeName, challengeParam) => {\n\t\t\t\tlogger.debug('signIn MFA required');\n\t\t\t\tuser['challengeName'] = challengeName;\n\t\t\t\tuser['challengeParam'] = challengeParam;\n\t\t\t\tresolve(user);\n\t\t\t},\n\t\t\tmfaSetup: (challengeName, challengeParam) => {\n\t\t\t\tlogger.debug('signIn mfa setup', challengeName);\n\t\t\t\tuser['challengeName'] = challengeName;\n\t\t\t\tuser['challengeParam'] = challengeParam;\n\t\t\t\tresolve(user);\n\t\t\t},\n\t\t\tnewPasswordRequired: (userAttributes, requiredAttributes) => {\n\t\t\t\tlogger.debug('signIn new password');\n\t\t\t\tuser['challengeName'] = 'NEW_PASSWORD_REQUIRED';\n\t\t\t\tuser['challengeParam'] = {\n\t\t\t\t\tuserAttributes,\n\t\t\t\t\trequiredAttributes,\n\t\t\t\t};\n\t\t\t\tresolve(user);\n\t\t\t},\n\t\t\ttotpRequired: (challengeName, challengeParam) => {\n\t\t\t\tlogger.debug('signIn totpRequired');\n\t\t\t\tuser['challengeName'] = challengeName;\n\t\t\t\tuser['challengeParam'] = challengeParam;\n\t\t\t\tresolve(user);\n\t\t\t},\n\t\t\tselectMFAType: (challengeName, challengeParam) => {\n\t\t\t\tlogger.debug('signIn selectMFAType', challengeName);\n\t\t\t\tuser['challengeName'] = challengeName;\n\t\t\t\tuser['challengeParam'] = challengeParam;\n\t\t\t\tresolve(user);\n\t\t\t},\n\t\t};\n\t}\n\n\t/**\n\t * Sign in with a password\n\t * @private\n\t * @param {AuthenticationDetails} authDetails - the user sign in data\n\t * @return - A promise resolves the CognitoUser object if success or mfa required\n\t */\n\tprivate signInWithPassword(\n\t\tauthDetails: AuthenticationDetails\n\t): Promise<CognitoUser | any> {\n\t\tif (this.pendingSignIn) {\n\t\t\tthrow new Error('Pending sign-in attempt already in progress');\n\t\t}\n\n\t\tconst user = this.createCognitoUser(authDetails.getUsername());\n\n\t\tthis.pendingSignIn = new Promise((resolve, reject) => {\n\t\t\tuser.authenticateUser(\n\t\t\t\tauthDetails,\n\t\t\t\tthis.authCallbacks(\n\t\t\t\t\tuser,\n\t\t\t\t\tvalue => {\n\t\t\t\t\t\tthis.pendingSignIn = null;\n\t\t\t\t\t\tresolve(value);\n\t\t\t\t\t},\n\t\t\t\t\terror => {\n\t\t\t\t\t\tthis.pendingSignIn = null;\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t);\n\t\t});\n\n\t\treturn this.pendingSignIn;\n\t}\n\n\t/**\n\t * Sign in without a password\n\t * @private\n\t * @param {AuthenticationDetails} authDetails - the user sign in data\n\t * @return - A promise resolves the CognitoUser object if success or mfa required\n\t */\n\tprivate signInWithoutPassword(\n\t\tauthDetails: AuthenticationDetails\n\t): Promise<CognitoUser | any> {\n\t\tconst user = this.createCognitoUser(authDetails.getUsername());\n\t\tuser.setAuthenticationFlowType('CUSTOM_AUTH');\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.initiateAuth(authDetails, this.authCallbacks(user, resolve, reject));\n\t\t});\n\t}\n\n\t/**\n\t * This was previously used by an authenticated user to get MFAOptions,\n\t * but no longer returns a meaningful response. Refer to the documentation for\n\t * how to setup and use MFA: https://docs.amplify.aws/lib/auth/mfa/q/platform/js\n\t * @deprecated\n\t * @param {CognitoUser} user - the current user\n\t * @return - A promise resolves the current preferred mfa option if success\n\t */\n\tpublic getMFAOptions(user: CognitoUser | any): Promise<MFAOption[]> {\n\t\treturn new Promise((res, rej) => {\n\t\t\tuser.getMFAOptions((err, mfaOptions) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tlogger.debug('get MFA Options failed', err);\n\t\t\t\t\trej(err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tlogger.debug('get MFA options success', mfaOptions);\n\t\t\t\tres(mfaOptions);\n\t\t\t\treturn;\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * get preferred mfa method\n\t * @param {CognitoUser} user - the current cognito user\n\t * @param {GetPreferredMFAOpts} params - options for getting the current user preferred MFA\n\t */\n\tpublic getPreferredMFA(\n\t\tuser: CognitoUser | any,\n\t\tparams?: GetPreferredMFAOpts\n\t): Promise<string> {\n\t\tconst that = this;\n\t\treturn new Promise((res, rej) => {\n\t\t\tconst clientMetadata = this._config.clientMetadata; // TODO: verify behavior if this is override during signIn\n\n\t\t\tconst bypassCache = params ? params.bypassCache : false;\n\t\t\tuser.getUserData(\n\t\t\t\t(err, data) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tlogger.debug('getting preferred mfa failed', err);\n\t\t\t\t\t\trej(err);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst mfaType = that._getMfaTypeFromUserData(data);\n\t\t\t\t\tif (!mfaType) {\n\t\t\t\t\t\trej('invalid MFA Type');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tres(mfaType);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{ bypassCache, clientMetadata }\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate _getMfaTypeFromUserData(data) {\n\t\tlet ret = null;\n\t\tconst preferredMFA = data.PreferredMfaSetting;\n\t\t// if the user has used Auth.setPreferredMFA() to setup the mfa type\n\t\t// then the \"PreferredMfaSetting\" would exist in the response\n\t\tif (preferredMFA) {\n\t\t\tret = preferredMFA;\n\t\t} else {\n\t\t\t// if mfaList exists but empty, then its noMFA\n\t\t\tconst mfaList = data.UserMFASettingList;\n\t\t\tif (!mfaList) {\n\t\t\t\t// if SMS was enabled by using Auth.enableSMS(),\n\t\t\t\t// the response would contain MFAOptions\n\t\t\t\t// as for now Cognito only supports for SMS, so we will say it is 'SMS_MFA'\n\t\t\t\t// if it does not exist, then it should be NOMFA\n\t\t\t\tconst MFAOptions = data.MFAOptions;\n\t\t\t\tif (MFAOptions) {\n\t\t\t\t\tret = 'SMS_MFA';\n\t\t\t\t} else {\n\t\t\t\t\tret = 'NOMFA';\n\t\t\t\t}\n\t\t\t} else if (mfaList.length === 0) {\n\t\t\t\tret = 'NOMFA';\n\t\t\t} else {\n\t\t\t\tlogger.debug('invalid case for getPreferredMFA', data);\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\n\tprivate _getUserData(user, params) {\n\t\treturn new Promise((res, rej) => {\n\t\t\tuser.getUserData((err, data) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tlogger.debug('getting user data failed', err);\n\t\t\t\t\trej(err);\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tres(data);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}, params);\n\t\t});\n\t}\n\n\t/**\n\t * set preferred MFA method\n\t * @param {CognitoUser} user - the current Cognito user\n\t * @param {string} mfaMethod - preferred mfa method\n\t * @return - A promise resolve if success\n\t */\n\tpublic async setPreferredMFA(\n\t\tuser: CognitoUser | any,\n\t\tmfaMethod: 'TOTP' | 'SMS' | 'NOMFA'\n\t): Promise<string> {\n\t\tconst clientMetadata = this._config.clientMetadata; // TODO: verify behavior if this is override during signIn\n\n\t\tconst userData = await this._getUserData(user, {\n\t\t\tbypassCache: true,\n\t\t\tclientMetadata,\n\t\t});\n\t\tlet smsMfaSettings = null;\n\t\tlet totpMfaSettings = null;\n\n\t\tswitch (mfaMethod) {\n\t\t\tcase 'TOTP' || 'SOFTWARE_TOKEN_MFA':\n\t\t\t\ttotpMfaSettings = {\n\t\t\t\t\tPreferredMfa: true,\n\t\t\t\t\tEnabled: true,\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase 'SMS' || 'SMS_MFA':\n\t\t\t\tsmsMfaSettings = {\n\t\t\t\t\tPreferredMfa: true,\n\t\t\t\t\tEnabled: true,\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase 'NOMFA':\n\t\t\t\tconst mfaList = userData['UserMFASettingList'];\n\t\t\t\tconst currentMFAType = await this._getMfaTypeFromUserData(userData);\n\t\t\t\tif (currentMFAType === 'NOMFA') {\n\t\t\t\t\treturn Promise.resolve('No change for mfa type');\n\t\t\t\t} else if (currentMFAType === 'SMS_MFA') {\n\t\t\t\t\tsmsMfaSettings = {\n\t\t\t\t\t\tPreferredMfa: false,\n\t\t\t\t\t\tEnabled: false,\n\t\t\t\t\t};\n\t\t\t\t} else if (currentMFAType === 'SOFTWARE_TOKEN_MFA') {\n\t\t\t\t\ttotpMfaSettings = {\n\t\t\t\t\t\tPreferredMfa: false,\n\t\t\t\t\t\tEnabled: false,\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\treturn this.rejectAuthError(AuthErrorTypes.InvalidMFA);\n\t\t\t\t}\n\t\t\t\t// if there is a UserMFASettingList in the response\n\t\t\t\t// we need to disable every mfa type in that list\n\t\t\t\tif (mfaList && mfaList.length !== 0) {\n\t\t\t\t\t// to disable SMS or TOTP if exists in that list\n\t\t\t\t\tmfaList.forEach(mfaType => {\n\t\t\t\t\t\tif (mfaType === 'SMS_MFA') {\n\t\t\t\t\t\t\tsmsMfaSettings = {\n\t\t\t\t\t\t\t\tPreferredMfa: false,\n\t\t\t\t\t\t\t\tEnabled: false,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else if (mfaType === 'SOFTWARE_TOKEN_MFA') {\n\t\t\t\t\t\t\ttotpMfaSettings = {\n\t\t\t\t\t\t\t\tPreferredMfa: false,\n\t\t\t\t\t\t\t\tEnabled: false,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tlogger.debug('no validmfa method provided');\n\t\t\t\treturn this.rejectAuthError(AuthErrorTypes.NoMFA);\n\t\t}\n\n\t\tconst that = this;\n\t\treturn new Promise<string>((res, rej) => {\n\t\t\tuser.setUserMfaPreference(\n\t\t\t\tsmsMfaSettings,\n\t\t\t\ttotpMfaSettings,\n\t\t\t\t(err, result) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tlogger.debug('Set user mfa preference error', err);\n\t\t\t\t\t\treturn rej(err);\n\t\t\t\t\t}\n\t\t\t\t\tlogger.debug('Set user mfa success', result);\n\t\t\t\t\tlogger.debug('Caching the latest user data into local');\n\t\t\t\t\t// cache the latest result into user data\n\t\t\t\t\tuser.getUserData(\n\t\t\t\t\t\t(err, data) => {\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\tlogger.debug('getting user data failed', err);\n\t\t\t\t\t\t\t\treturn rej(err);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn res(result);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbypassCache: true,\n\t\t\t\t\t\t\tclientMetadata,\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * diable SMS\n\t * @deprecated\n\t * @param {CognitoUser} user - the current user\n\t * @return - A promise resolves is success\n\t */\n\tpublic disableSMS(user: CognitoUser): Promise<string> {\n\t\treturn new Promise((res, rej) => {\n\t\t\tuser.disableMFA((err, data) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tlogger.debug('disable mfa failed', err);\n\t\t\t\t\trej(err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tlogger.debug('disable mfa succeed', data);\n\t\t\t\tres(data);\n\t\t\t\treturn;\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * enable SMS\n\t * @deprecated\n\t * @param {CognitoUser} user - the current user\n\t * @return - A promise resolves is success\n\t */\n\tpublic enableSMS(user: CognitoUser): Promise<string> {\n\t\treturn new Promise((res, rej) => {\n\t\t\tuser.enableMFA((err, data) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tlogger.debug('enable mfa failed', err);\n\t\t\t\t\trej(err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tlogger.debug('enable mfa succeed', data);\n\t\t\t\tres(data);\n\t\t\t\treturn;\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Setup TOTP\n\t * @param {CognitoUser} user - the current user\n\t * @return - A promise resolves with the secret code if success\n\t */\n\tpublic setupTOTP(user: CognitoUser | any): Promise<string> {\n\t\treturn new Promise((res, rej) => {\n\t\t\tuser.associateSoftwareToken({\n\t\t\t\tonFailure: err => {\n\t\t\t\t\tlogger.debug('associateSoftwareToken failed', err);\n\t\t\t\t\trej(err);\n\t\t\t\t\treturn;\n\t\t\t\t},\n\t\t\t\tassociateSecretCode: secretCode => {\n\t\t\t\t\tlogger.debug('associateSoftwareToken sucess', secretCode);\n\t\t\t\t\tres(secretCode);\n\t\t\t\t\treturn;\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * verify TOTP setup\n\t * @param {CognitoUser} user - the current user\n\t * @param {string} challengeAnswer - challenge answer\n\t * @return - A promise resolves is success\n\t */\n\tpublic verifyTotpToken(\n\t\tuser: CognitoUser | any,\n\t\tchallengeAnswer: string\n\t): Promise<CognitoUserSession> {\n\t\tlogger.debug('verification totp token', user, challengeAnswer);\n\t\treturn new Promise((res, rej) => {\n\t\t\tuser.verifySoftwareToken(challengeAnswer, 'My TOTP device', {\n\t\t\t\tonFailure: err => {\n\t\t\t\t\tlogger.debug('verifyTotpToken failed', err);\n\t\t\t\t\trej(err);\n\t\t\t\t\treturn;\n\t\t\t\t},\n\t\t\t\tonSuccess: data => {\n\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t'signIn',\n\t\t\t\t\t\tuser,\n\t\t\t\t\t\t`A user ${user.getUsername()} has been signed in`\n\t\t\t\t\t);\n\t\t\t\t\tlogger.debug('verifyTotpToken success', data);\n\t\t\t\t\tres(data);\n\t\t\t\t\treturn;\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Send MFA code to confirm sign in\n\t * @param {Object} user - The CognitoUser object\n\t * @param {String} code - The confirmation code\n\t */\n\tpublic confirmSignIn(\n\t\tuser: CognitoUser | any,\n\t\tcode: string,\n\t\tmfaType?: 'SMS_MFA' | 'SOFTWARE_TOKEN_MFA' | null,\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<CognitoUser | any> {\n\t\tif (!code) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyCode);\n\t\t}\n\n\t\tconst that = this;\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.sendMFACode(\n\t\t\t\tcode,\n\t\t\t\t{\n\t\t\t\t\tonSuccess: async session => {\n\t\t\t\t\t\tlogger.debug(session);\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait this.Credentials.clear();\n\t\t\t\t\t\t\tconst cred = await this.Credentials.set(session, 'session');\n\t\t\t\t\t\t\tlogger.debug('succeed to get cognito credentials', cred);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tlogger.debug('cannot get cognito credentials', e);\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tthat.user = user;\n\n\t\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t\t'signIn',\n\t\t\t\t\t\t\t\tuser,\n\t\t\t\t\t\t\t\t`A user ${user.getUsername()} has been signed in`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tresolve(user);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonFailure: err => {\n\t\t\t\t\t\tlogger.debug('confirm signIn failure', err);\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tmfaType,\n\t\t\t\tclientMetadata\n\t\t\t);\n\t\t});\n\t}\n\n\tpublic completeNewPassword(\n\t\tuser: CognitoUser | any,\n\t\tpassword: string,\n\t\trequiredAttributes: any = {},\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<CognitoUser | any> {\n\t\tif (!password) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyPassword);\n\t\t}\n\n\t\tconst that = this;\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.completeNewPasswordChallenge(\n\t\t\t\tpassword,\n\t\t\t\trequiredAttributes,\n\t\t\t\t{\n\t\t\t\t\tonSuccess: async session => {\n\t\t\t\t\t\tlogger.debug(session);\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait this.Credentials.clear();\n\t\t\t\t\t\t\tconst cred = await this.Credentials.set(session, 'session');\n\t\t\t\t\t\t\tlogger.debug('succeed to get cognito credentials', cred);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tlogger.debug('cannot get cognito credentials', e);\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tthat.user = user;\n\t\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t\t'signIn',\n\t\t\t\t\t\t\t\tuser,\n\t\t\t\t\t\t\t\t`A user ${user.getUsername()} has been signed in`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tresolve(user);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonFailure: err => {\n\t\t\t\t\t\tlogger.debug('completeNewPassword failure', err);\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'completeNewPassword_failure',\n\t\t\t\t\t\t\terr,\n\t\t\t\t\t\t\t`${this.user} failed to complete the new password flow`\n\t\t\t\t\t\t);\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t},\n\t\t\t\t\tmfaRequired: (challengeName, challengeParam) => {\n\t\t\t\t\t\tlogger.debug('signIn MFA required');\n\t\t\t\t\t\tuser['challengeName'] = challengeName;\n\t\t\t\t\t\tuser['challengeParam'] = challengeParam;\n\t\t\t\t\t\tresolve(user);\n\t\t\t\t\t},\n\t\t\t\t\tmfaSetup: (challengeName, challengeParam) => {\n\t\t\t\t\t\tlogger.debug('signIn mfa setup', challengeName);\n\t\t\t\t\t\tuser['challengeName'] = challengeName;\n\t\t\t\t\t\tuser['challengeParam'] = challengeParam;\n\t\t\t\t\t\tresolve(user);\n\t\t\t\t\t},\n\t\t\t\t\ttotpRequired: (challengeName, challengeParam) => {\n\t\t\t\t\t\tlogger.debug('signIn mfa setup', challengeName);\n\t\t\t\t\t\tuser['challengeName'] = challengeName;\n\t\t\t\t\t\tuser['challengeParam'] = challengeParam;\n\t\t\t\t\t\tresolve(user);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tclientMetadata\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Send the answer to a custom challenge\n\t * @param {CognitoUser} user - The CognitoUser object\n\t * @param {String} challengeResponses - The confirmation code\n\t */\n\tpublic sendCustomChallengeAnswer(\n\t\tuser: CognitoUser | any,\n\t\tchallengeResponses: string,\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<CognitoUser | any> {\n\t\tif (!this.userPool) {\n\t\t\treturn this.rejectNoUserPool();\n\t\t}\n\t\tif (!challengeResponses) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyChallengeResponse);\n\t\t}\n\n\t\tconst that = this;\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.sendCustomChallengeAnswer(\n\t\t\t\tchallengeResponses,\n\t\t\t\tthis.authCallbacks(user, resolve, reject),\n\t\t\t\tclientMetadata\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Update an authenticated users' attributes\n\t * @param {CognitoUser} - The currently logged in user object\n\t * @return {Promise}\n\t **/\n\tpublic updateUserAttributes(\n\t\tuser: CognitoUser | any,\n\t\tattributes: object,\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<string> {\n\t\tconst attributeList: ICognitoUserAttributeData[] = [];\n\t\tconst that = this;\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthat.userSession(user).then(session => {\n\t\t\t\tfor (const key in attributes) {\n\t\t\t\t\tif (key !== 'sub' && key.indexOf('_verified') < 0) {\n\t\t\t\t\t\tconst attr: ICognitoUserAttributeData = {\n\t\t\t\t\t\t\tName: key,\n\t\t\t\t\t\t\tValue: attributes[key],\n\t\t\t\t\t\t};\n\t\t\t\t\t\tattributeList.push(attr);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tuser.updateAttributes(\n\t\t\t\t\tattributeList,\n\t\t\t\t\t(err, result) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn resolve(result);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tclientMetadata\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\t}\n\t/**\n\t * Return user attributes\n\t * @param {Object} user - The CognitoUser object\n\t * @return - A promise resolves to user attributes if success\n\t */\n\tpublic userAttributes(\n\t\tuser: CognitoUser | any\n\t): Promise<CognitoUserAttribute[]> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.userSession(user).then(session => {\n\t\t\t\tuser.getUserAttributes((err, attributes) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(attributes);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic verifiedContact(user: CognitoUser | any) {\n\t\tconst that = this;\n\t\treturn this.userAttributes(user).then(attributes => {\n\t\t\tconst attrs = that.attributesToObject(attributes);\n\t\t\tconst unverified = {};\n\t\t\tconst verified = {};\n\t\t\tif (attrs['email']) {\n\t\t\t\tif (attrs['email_verified']) {\n\t\t\t\t\tverified['email'] = attrs['email'];\n\t\t\t\t} else {\n\t\t\t\t\tunverified['email'] = attrs['email'];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (attrs['phone_number']) {\n\t\t\t\tif (attrs['phone_number_verified']) {\n\t\t\t\t\tverified['phone_number'] = attrs['phone_number'];\n\t\t\t\t} else {\n\t\t\t\t\tunverified['phone_number'] = attrs['phone_number'];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tverified,\n\t\t\t\tunverified,\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * Get current authenticated user\n\t * @return - A promise resolves to current authenticated CognitoUser if success\n\t */\n\tpublic currentUserPoolUser(\n\t\tparams?: CurrentUserOpts\n\t): Promise<CognitoUser | any> {\n\t\tif (!this.userPool) {\n\t\t\treturn this.rejectNoUserPool();\n\t\t}\n\n\t\treturn new Promise((res, rej) => {\n\t\t\tthis._storageSync\n\t\t\t\t.then(async () => {\n\t\t\t\t\tif (this.isOAuthInProgress()) {\n\t\t\t\t\t\tlogger.debug('OAuth signIn in progress, waiting for resolution...');\n\n\t\t\t\t\t\tawait new Promise(res => {\n\t\t\t\t\t\t\tconst timeoutId = setTimeout(() => {\n\t\t\t\t\t\t\t\tlogger.debug('OAuth signIn in progress timeout');\n\n\t\t\t\t\t\t\t\tHub.remove('auth', hostedUISignCallback);\n\n\t\t\t\t\t\t\t\tres();\n\t\t\t\t\t\t\t}, OAUTH_FLOW_MS_TIMEOUT);\n\n\t\t\t\t\t\t\tHub.listen('auth', hostedUISignCallback);\n\n\t\t\t\t\t\t\tfunction hostedUISignCallback({ payload }) {\n\t\t\t\t\t\t\t\tconst { event } = payload;\n\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tevent === 'cognitoHostedUI' ||\n\t\t\t\t\t\t\t\t\tevent === 'cognitoHostedUI_failure'\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tlogger.debug(`OAuth signIn resolved: ${event}`);\n\t\t\t\t\t\t\t\t\tclearTimeout(timeoutId);\n\n\t\t\t\t\t\t\t\t\tHub.remove('auth', hostedUISignCallback);\n\n\t\t\t\t\t\t\t\t\tres();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tconst user = this.userPool.getCurrentUser();\n\n\t\t\t\t\tif (!user) {\n\t\t\t\t\t\tlogger.debug('Failed to get user from user pool');\n\t\t\t\t\t\trej('No current user');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst clientMetadata = this._config.clientMetadata; // TODO: verify behavior if this is override during signIn\n\n\t\t\t\t\t// refresh the session if the session expired.\n\t\t\t\t\tuser.getSession(\n\t\t\t\t\t\tasync (err, session) => {\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\tlogger.debug('Failed to get the user session', err);\n\t\t\t\t\t\t\t\trej(err);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// get user data from Cognito\n\t\t\t\t\t\t\tconst bypassCache = params ? params.bypassCache : false;\n\n\t\t\t\t\t\t\tif (bypassCache) {\n\t\t\t\t\t\t\t\tawait this.Credentials.clear();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst clientMetadata = this._config.clientMetadata; // TODO: verify behavior if this is override during signIn\n\n\t\t\t\t\t\t\t// validate the token's scope first before calling this function\n\t\t\t\t\t\t\tconst { scope = '' } = session.getAccessToken().decodePayload();\n\t\t\t\t\t\t\tif (scope.split(' ').includes(USER_ADMIN_SCOPE)) {\n\t\t\t\t\t\t\t\tuser.getUserData(\n\t\t\t\t\t\t\t\t\t(err, data) => {\n\t\t\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\t\t\tlogger.debug('getting user data failed', err);\n\t\t\t\t\t\t\t\t\t\t\t// Make sure the user is still valid\n\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\terr.message === 'User is disabled.' ||\n\t\t\t\t\t\t\t\t\t\t\t\terr.message === 'User does not exist.' ||\n\t\t\t\t\t\t\t\t\t\t\t\terr.message === 'Access Token has been revoked' // Session revoked by another app\n\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\trej(err);\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t// the error may also be thrown when lack of permissions to get user info etc\n\t\t\t\t\t\t\t\t\t\t\t\t// in that case we just bypass the error\n\t\t\t\t\t\t\t\t\t\t\t\tres(user);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tconst preferredMFA = data.PreferredMfaSetting || 'NOMFA';\n\t\t\t\t\t\t\t\t\t\tconst attributeList = [];\n\n\t\t\t\t\t\t\t\t\t\tfor (let i = 0; i < data.UserAttributes.length; i++) {\n\t\t\t\t\t\t\t\t\t\t\tconst attribute = {\n\t\t\t\t\t\t\t\t\t\t\t\tName: data.UserAttributes[i].Name,\n\t\t\t\t\t\t\t\t\t\t\t\tValue: data.UserAttributes[i].Value,\n\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t\tconst userAttribute = new CognitoUserAttribute(attribute);\n\t\t\t\t\t\t\t\t\t\t\tattributeList.push(userAttribute);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tconst attributes = this.attributesToObject(attributeList);\n\t\t\t\t\t\t\t\t\t\tObject.assign(user, { attributes, preferredMFA });\n\t\t\t\t\t\t\t\t\t\treturn res(user);\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{ bypassCache, clientMetadata }\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t\t\t`Unable to get the user data because the ${USER_ADMIN_SCOPE} ` +\n\t\t\t\t\t\t\t\t\t\t`is not in the scopes of the access token`\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\treturn res(user);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{ clientMetadata }\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t\t.catch(e => {\n\t\t\t\t\tlogger.debug('Failed to sync cache info into memory', e);\n\t\t\t\t\treturn rej(e);\n\t\t\t\t});\n\t\t});\n\t}\n\n\tprivate isOAuthInProgress(): boolean {\n\t\treturn this.oAuthFlowInProgress;\n\t}\n\n\t/**\n\t * Get current authenticated user\n\t * @param {CurrentUserOpts} - options for getting the current user\n\t * @return - A promise resolves to current authenticated CognitoUser if success\n\t */\n\tpublic async currentAuthenticatedUser(\n\t\tparams?: CurrentUserOpts\n\t): Promise<CognitoUser | any> {\n\t\tlogger.debug('getting current authenticated user');\n\t\tlet federatedUser = null;\n\t\ttry {\n\t\t\tawait this._storageSync;\n\t\t} catch (e) {\n\t\t\tlogger.debug('Failed to sync cache info into memory', e);\n\t\t\tthrow e;\n\t\t}\n\n\t\ttry {\n\t\t\tconst federatedInfo = JSON.parse(\n\t\t\t\tthis._storage.getItem('aws-amplify-federatedInfo')\n\t\t\t);\n\t\t\tif (federatedInfo) {\n\t\t\t\tfederatedUser = {\n\t\t\t\t\t...federatedInfo.user,\n\t\t\t\t\ttoken: federatedInfo.token,\n\t\t\t\t};\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.debug('cannot load federated user from auth storage');\n\t\t}\n\n\t\tif (federatedUser) {\n\t\t\tthis.user = federatedUser;\n\t\t\tlogger.debug('get current authenticated federated user', this.user);\n\t\t\treturn this.user;\n\t\t} else {\n\t\t\tlogger.debug('get current authenticated userpool user');\n\t\t\tlet user = null;\n\t\t\ttry {\n\t\t\t\tuser = await this.currentUserPoolUser(params);\n\t\t\t} catch (e) {\n\t\t\t\tif (e === 'No userPool') {\n\t\t\t\t\tlogger.error(\n\t\t\t\t\t\t'Cannot get the current user because the user pool is missing. ' +\n\t\t\t\t\t\t\t'Please make sure the Auth module is configured with a valid Cognito User Pool ID'\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tlogger.debug('The user is not authenticated by the error', e);\n\t\t\t\treturn Promise.reject('The user is not authenticated');\n\t\t\t}\n\t\t\tthis.user = user;\n\t\t\treturn this.user;\n\t\t}\n\t}\n\n\t/**\n\t * Get current user's session\n\t * @return - A promise resolves to session object if success\n\t */\n\tpublic currentSession(): Promise<CognitoUserSession> {\n\t\tconst that = this;\n\t\tlogger.debug('Getting current session');\n\t\t// Purposely not calling the reject method here because we don't need a console error\n\t\tif (!this.userPool) {\n\t\t\treturn Promise.reject();\n\t\t}\n\n\t\treturn new Promise((res, rej) => {\n\t\t\tthat\n\t\t\t\t.currentUserPoolUser()\n\t\t\t\t.then(user => {\n\t\t\t\t\tthat\n\t\t\t\t\t\t.userSession(user)\n\t\t\t\t\t\t.then(session => {\n\t\t\t\t\t\t\tres(session);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(e => {\n\t\t\t\t\t\t\tlogger.debug('Failed to get the current session', e);\n\t\t\t\t\t\t\trej(e);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch(e => {\n\t\t\t\t\tlogger.debug('Failed to get the current user', e);\n\t\t\t\t\trej(e);\n\t\t\t\t\treturn;\n\t\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Get the corresponding user session\n\t * @param {Object} user - The CognitoUser object\n\t * @return - A promise resolves to the session\n\t */\n\tpublic userSession(user): Promise<CognitoUserSession> {\n\t\tif (!user) {\n\t\t\tlogger.debug('the user is null');\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.NoUserSession);\n\t\t}\n\t\tconst clientMetadata = this._config.clientMetadata; // TODO: verify behavior if this is override during signIn\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlogger.debug('Getting the session from this user:', user);\n\t\t\tuser.getSession(\n\t\t\t\t(err, session) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tlogger.debug('Failed to get the session from user', user);\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlogger.debug('Succeed to get the user session', session);\n\t\t\t\t\t\tresolve(session);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{ clientMetadata }\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Get authenticated credentials of current user.\n\t * @return - A promise resolves to be current user's credentials\n\t */\n\tpublic async currentUserCredentials(): Promise<ICredentials> {\n\t\tlogger.debug('Getting current user credentials');\n\n\t\ttry {\n\t\t\tawait this._storageSync;\n\t\t} catch (e) {\n\t\t\tlogger.debug('Failed to sync cache info into memory', e);\n\t\t\tthrow e;\n\t\t}\n\n\t\t// first to check whether there is federation info in the auth storage\n\t\tlet federatedInfo = null;\n\t\ttry {\n\t\t\tfederatedInfo = JSON.parse(\n\t\t\t\tthis._storage.getItem('aws-amplify-federatedInfo')\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tlogger.debug('failed to get or parse item aws-amplify-federatedInfo', e);\n\t\t}\n\n\t\tif (federatedInfo) {\n\t\t\t// refresh the jwt token here if necessary\n\t\t\treturn this.Credentials.refreshFederatedToken(federatedInfo);\n\t\t} else {\n\t\t\treturn this.currentSession()\n\t\t\t\t.then(session => {\n\t\t\t\t\tlogger.debug('getting session success', session);\n\t\t\t\t\treturn this.Credentials.set(session, 'session');\n\t\t\t\t})\n\t\t\t\t.catch(error => {\n\t\t\t\t\tlogger.debug('getting session failed', error);\n\t\t\t\t\treturn this.Credentials.set(null, 'guest');\n\t\t\t\t});\n\t\t}\n\t}\n\n\tpublic currentCredentials(): Promise<ICredentials> {\n\t\tlogger.debug('getting current credentials');\n\t\treturn this.Credentials.get();\n\t}\n\n\t/**\n\t * Initiate an attribute confirmation request\n\t * @param {Object} user - The CognitoUser\n\t * @param {Object} attr - The attributes to be verified\n\t * @return - A promise resolves to callback data if success\n\t */\n\tpublic verifyUserAttribute(\n\t\tuser: CognitoUser | any,\n\t\tattr: string,\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<void> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.getAttributeVerificationCode(\n\t\t\t\tattr,\n\t\t\t\t{\n\t\t\t\t\tonSuccess() {\n\t\t\t\t\t\treturn resolve();\n\t\t\t\t\t},\n\t\t\t\t\tonFailure(err) {\n\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tclientMetadata\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Confirm an attribute using a confirmation code\n\t * @param {Object} user - The CognitoUser\n\t * @param {Object} attr - The attribute to be verified\n\t * @param {String} code - The confirmation code\n\t * @return - A promise resolves to callback data if success\n\t */\n\tpublic verifyUserAttributeSubmit(\n\t\tuser: CognitoUser | any,\n\t\tattr: string,\n\t\tcode: string\n\t): Promise<string> {\n\t\tif (!code) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyCode);\n\t\t}\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.verifyAttribute(attr, code, {\n\t\t\t\tonSuccess(data) {\n\t\t\t\t\tresolve(data);\n\t\t\t\t\treturn;\n\t\t\t\t},\n\t\t\t\tonFailure(err) {\n\t\t\t\t\treject(err);\n\t\t\t\t\treturn;\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic verifyCurrentUserAttribute(attr: string): Promise<void> {\n\t\tconst that = this;\n\t\treturn that\n\t\t\t.currentUserPoolUser()\n\t\t\t.then(user => that.verifyUserAttribute(user, attr));\n\t}\n\n\t/**\n\t * Confirm current user's attribute using a confirmation code\n\t * @param {Object} attr - The attribute to be verified\n\t * @param {String} code - The confirmation code\n\t * @return - A promise resolves to callback data if success\n\t */\n\tverifyCurrentUserAttributeSubmit(\n\t\tattr: string,\n\t\tcode: string\n\t): Promise<string> {\n\t\tconst that = this;\n\t\treturn that\n\t\t\t.currentUserPoolUser()\n\t\t\t.then(user => that.verifyUserAttributeSubmit(user, attr, code));\n\t}\n\n\tprivate async cognitoIdentitySignOut(\n\t\topts: SignOutOpts,\n\t\tuser: CognitoUser | any\n\t) {\n\t\ttry {\n\t\t\tawait this._storageSync;\n\t\t} catch (e) {\n\t\t\tlogger.debug('Failed to sync cache info into memory', e);\n\t\t\tthrow e;\n\t\t}\n\n\t\tconst isSignedInHostedUI =\n\t\t\tthis._oAuthHandler &&\n\t\t\tthis._storage.getItem('amplify-signin-with-hostedUI') === 'true';\n\n\t\treturn new Promise((res, rej) => {\n\t\t\tif (opts && opts.global) {\n\t\t\t\tlogger.debug('user global sign out', user);\n\t\t\t\t// in order to use global signout\n\t\t\t\t// we must validate the user as an authenticated user by using getSession\n\t\t\t\tconst clientMetadata = this._config.clientMetadata; // TODO: verify behavior if this is override during signIn\n\n\t\t\t\tuser.getSession(\n\t\t\t\t\t(err, result) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tlogger.debug('failed to get the user session', err);\n\t\t\t\t\t\t\treturn rej(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tuser.globalSignOut({\n\t\t\t\t\t\t\tonSuccess: data => {\n\t\t\t\t\t\t\t\tlogger.debug('global sign out success');\n\t\t\t\t\t\t\t\tif (isSignedInHostedUI) {\n\t\t\t\t\t\t\t\t\tthis.oAuthSignOutRedirect(res, rej);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn res();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tonFailure: err => {\n\t\t\t\t\t\t\t\tlogger.debug('global sign out failed', err);\n\t\t\t\t\t\t\t\treturn rej(err);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\t{ clientMetadata }\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tlogger.debug('user sign out', user);\n\t\t\t\tuser.signOut();\n\t\t\t\tif (isSignedInHostedUI) {\n\t\t\t\t\tthis.oAuthSignOutRedirect(res, rej);\n\t\t\t\t} else {\n\t\t\t\t\treturn res();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate oAuthSignOutRedirect(\n\t\tresolve: () => void,\n\t\treject: (reason?: any) => void\n\t) {\n\t\tconst { isBrowser } = JS.browserOrNode();\n\n\t\tif (isBrowser) {\n\t\t\tthis.oAuthSignOutRedirectOrReject(reject);\n\t\t} else {\n\t\t\tthis.oAuthSignOutAndResolve(resolve);\n\t\t}\n\t}\n\n\tprivate oAuthSignOutAndResolve(resolve: () => void) {\n\t\tthis._oAuthHandler.signOut();\n\t\tresolve();\n\t}\n\n\tprivate oAuthSignOutRedirectOrReject(reject: (reason?: any) => void) {\n\t\tthis._oAuthHandler.signOut(); // this method redirects url\n\n\t\t// App should be redirected to another url otherwise it will reject\n\t\tsetTimeout(() => reject('Signout timeout fail'), 3000);\n\t}\n\n\t/**\n\t * Sign out method\n\t * @\n\t * @return - A promise resolved if success\n\t */\n\tpublic async signOut(opts?: SignOutOpts): Promise<any> {\n\t\ttry {\n\t\t\tawait this.cleanCachedItems();\n\t\t} catch (e) {\n\t\t\tlogger.debug('failed to clear cached items');\n\t\t}\n\n\t\tif (this.userPool) {\n\t\t\tconst user = this.userPool.getCurrentUser();\n\t\t\tif (user) {\n\t\t\t\tawait this.cognitoIdentitySignOut(opts, user);\n\t\t\t} else {\n\t\t\t\tlogger.debug('no current Cognito user');\n\t\t\t}\n\t\t} else {\n\t\t\tlogger.debug('no Congito User pool');\n\t\t}\n\n\t\t/**\n\t\t * Note for future refactor - no reliable way to get username with\n\t\t * Cognito User Pools vs Identity when federating with Social Providers\n\t\t * This is why we need a well structured session object that can be inspected\n\t\t * and information passed back in the message below for Hub dispatch\n\t\t */\n\t\tdispatchAuthEvent('signOut', this.user, `A user has been signed out`);\n\t\tthis.user = null;\n\t}\n\n\tprivate async cleanCachedItems() {\n\t\t// clear cognito cached item\n\t\tawait this.Credentials.clear();\n\t}\n\n\t/**\n\t * Change a password for an authenticated user\n\t * @param {Object} user - The CognitoUser object\n\t * @param {String} oldPassword - the current password\n\t * @param {String} newPassword - the requested new password\n\t * @return - A promise resolves if success\n\t */\n\tpublic changePassword(\n\t\tuser: CognitoUser | any,\n\t\toldPassword: string,\n\t\tnewPassword: string,\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<'SUCCESS'> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.userSession(user).then(session => {\n\t\t\t\tuser.changePassword(\n\t\t\t\t\toldPassword,\n\t\t\t\t\tnewPassword,\n\t\t\t\t\t(err, data) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tlogger.debug('change password failure', err);\n\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn resolve(data);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tclientMetadata\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Initiate a forgot password request\n\t * @param {String} username - the username to change password\n\t * @return - A promise resolves if success\n\t */\n\tpublic forgotPassword(\n\t\tusername: string,\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<any> {\n\t\tif (!this.userPool) {\n\t\t\treturn this.rejectNoUserPool();\n\t\t}\n\t\tif (!username) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n\t\t}\n\n\t\tconst user = this.createCognitoUser(username);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.forgotPassword(\n\t\t\t\t{\n\t\t\t\t\tonSuccess: () => {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t},\n\t\t\t\t\tonFailure: err => {\n\t\t\t\t\t\tlogger.debug('forgot password failure', err);\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'forgotPassword_failure',\n\t\t\t\t\t\t\terr,\n\t\t\t\t\t\t\t`${username} forgotPassword failed`\n\t\t\t\t\t\t);\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t},\n\t\t\t\t\tinputVerificationCode: data => {\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'forgotPassword',\n\t\t\t\t\t\t\tuser,\n\t\t\t\t\t\t\t`${username} has initiated forgot password flow`\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresolve(data);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tclientMetadata\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Confirm a new password using a confirmation Code\n\t * @param {String} username - The username\n\t * @param {String} code - The confirmation code\n\t * @param {String} password - The new password\n\t * @return - A promise that resolves if success\n\t */\n\tpublic forgotPasswordSubmit(\n\t\tusername: string,\n\t\tcode: string,\n\t\tpassword: string,\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<void> {\n\t\tif (!this.userPool) {\n\t\t\treturn this.rejectNoUserPool();\n\t\t}\n\t\tif (!username) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n\t\t}\n\t\tif (!code) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyCode);\n\t\t}\n\t\tif (!password) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyPassword);\n\t\t}\n\n\t\tconst user = this.createCognitoUser(username);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.confirmPassword(\n\t\t\t\tcode,\n\t\t\t\tpassword,\n\t\t\t\t{\n\t\t\t\t\tonSuccess: () => {\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'forgotPasswordSubmit',\n\t\t\t\t\t\t\tuser,\n\t\t\t\t\t\t\t`${username} forgotPasswordSubmit successful`\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t},\n\t\t\t\t\tonFailure: err => {\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'forgotPasswordSubmit_failure',\n\t\t\t\t\t\t\terr,\n\t\t\t\t\t\t\t`${username} forgotPasswordSubmit failed`\n\t\t\t\t\t\t);\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tclientMetadata\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Get user information\n\t * @async\n\t * @return {Object }- current User's information\n\t */\n\tpublic async currentUserInfo() {\n\t\tconst source = this.Credentials.getCredSource();\n\n\t\tif (!source || source === 'aws' || source === 'userPool') {\n\t\t\tconst user = await this.currentUserPoolUser().catch(err =>\n\t\t\t\tlogger.debug(err)\n\t\t\t);\n\t\t\tif (!user) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst attributes = await this.userAttributes(user);\n\t\t\t\tconst userAttrs: object = this.attributesToObject(attributes);\n\t\t\t\tlet credentials = null;\n\t\t\t\ttry {\n\t\t\t\t\tcredentials = await this.currentCredentials();\n\t\t\t\t} catch (e) {\n\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t'Failed to retrieve credentials while getting current user info',\n\t\t\t\t\t\te\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst info = {\n\t\t\t\t\tid: credentials ? credentials.identityId : undefined,\n\t\t\t\t\tusername: user.getUsername(),\n\t\t\t\t\tattributes: userAttrs,\n\t\t\t\t};\n\t\t\t\treturn info;\n\t\t\t} catch (err) {\n\t\t\t\tlogger.debug('currentUserInfo error', err);\n\t\t\t\treturn {};\n\t\t\t}\n\t\t}\n\n\t\tif (source === 'federated') {\n\t\t\tconst user = this.user;\n\t\t\treturn user ? user : {};\n\t\t}\n\t}\n\n\tpublic async federatedSignIn(\n\t\toptions?: FederatedSignInOptions\n\t): Promise<ICredentials>;\n\tpublic async federatedSignIn(\n\t\tprovider: LegacyProvider,\n\t\tresponse: FederatedResponse,\n\t\tuser: FederatedUser\n\t): Promise<ICredentials>;\n\tpublic async federatedSignIn(\n\t\toptions?: FederatedSignInOptionsCustom\n\t): Promise<ICredentials>;\n\tpublic async federatedSignIn(\n\t\tproviderOrOptions:\n\t\t\t| LegacyProvider\n\t\t\t| FederatedSignInOptions\n\t\t\t| FederatedSignInOptionsCustom,\n\t\tresponse?: FederatedResponse,\n\t\tuser?: FederatedUser\n\t): Promise<ICredentials> {\n\t\tif (!this._config.identityPoolId && !this._config.userPoolId) {\n\t\t\tthrow new Error(\n\t\t\t\t`Federation requires either a User Pool or Identity Pool in config`\n\t\t\t);\n\t\t}\n\n\t\t// Ensure backwards compatability\n\t\tif (typeof providerOrOptions === 'undefined') {\n\t\t\tif (this._config.identityPoolId && !this._config.userPoolId) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Federation with Identity Pools requires tokens passed as arguments`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\tisFederatedSignInOptions(providerOrOptions) ||\n\t\t\tisFederatedSignInOptionsCustom(providerOrOptions) ||\n\t\t\thasCustomState(providerOrOptions) ||\n\t\t\ttypeof providerOrOptions === 'undefined'\n\t\t) {\n\t\t\tconst options = providerOrOptions || {\n\t\t\t\tprovider: CognitoHostedUIIdentityProvider.Cognito,\n\t\t\t};\n\t\t\tconst provider = isFederatedSignInOptions(options)\n\t\t\t\t? options.provider\n\t\t\t\t: (options as FederatedSignInOptionsCustom).customProvider;\n\n\t\t\tconst customState = isFederatedSignInOptions(options)\n\t\t\t\t? options.customState\n\t\t\t\t: (options as FederatedSignInOptionsCustom).customState;\n\n\t\t\tif (this._config.userPoolId) {\n\t\t\t\tconst client_id = isCognitoHostedOpts(this._config.oauth)\n\t\t\t\t\t? this._config.userPoolWebClientId\n\t\t\t\t\t: this._config.oauth.clientID;\n\t\t\t\t/*Note: Invenstigate automatically adding trailing slash */\n\t\t\t\tconst redirect_uri = isCognitoHostedOpts(this._config.oauth)\n\t\t\t\t\t? this._config.oauth.redirectSignIn\n\t\t\t\t\t: this._config.oauth.redirectUri;\n\n\t\t\t\tthis._oAuthHandler.oauthSignIn(\n\t\t\t\t\tthis._config.oauth.responseType,\n\t\t\t\t\tthis._config.oauth.domain,\n\t\t\t\t\tredirect_uri,\n\t\t\t\t\tclient_id,\n\t\t\t\t\tprovider,\n\t\t\t\t\tcustomState\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tconst provider = providerOrOptions;\n\t\t\t// To check if the user is already logged in\n\t\t\ttry {\n\t\t\t\tconst loggedInUser = JSON.stringify(\n\t\t\t\t\tJSON.parse(this._storage.getItem('aws-amplify-federatedInfo')).user\n\t\t\t\t);\n\t\t\t\tif (loggedInUser) {\n\t\t\t\t\tlogger.warn(`There is already a signed in user: ${loggedInUser} in your app.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tYou should not call Auth.federatedSignIn method again as it may cause unexpected behavior.`);\n\t\t\t\t}\n\t\t\t} catch (e) {}\n\n\t\t\tconst { token, identity_id, expires_at } = response;\n\t\t\t// Because this.Credentials.set would update the user info with identity id\n\t\t\t// So we need to retrieve the user again.\n\t\t\tconst credentials = await this.Credentials.set(\n\t\t\t\t{ provider, token, identity_id, user, expires_at },\n\t\t\t\t'federation'\n\t\t\t);\n\t\t\tconst currentUser = await this.currentAuthenticatedUser();\n\t\t\tdispatchAuthEvent(\n\t\t\t\t'signIn',\n\t\t\t\tcurrentUser,\n\t\t\t\t`A user ${currentUser.username} has been signed in`\n\t\t\t);\n\t\t\tlogger.debug('federated sign in credentials', credentials);\n\t\t\treturn credentials;\n\t\t}\n\t}\n\n\t/**\n\t * Used to complete the OAuth flow with or without the Cognito Hosted UI\n\t * @param {String} URL - optional parameter for customers to pass in the response URL\n\t */\n\tprivate async _handleAuthResponse(URL?: string) {\n\t\tif (this.oAuthFlowInProgress) {\n\t\t\tlogger.debug(`Skipping URL ${URL} current flow in progress`);\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tthis.oAuthFlowInProgress = true;\n\t\t\tif (!this._config.userPoolId) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`OAuth responses require a User Pool defined in config`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tdispatchAuthEvent(\n\t\t\t\t'parsingCallbackUrl',\n\t\t\t\t{ url: URL },\n\t\t\t\t`The callback url is being parsed`\n\t\t\t);\n\n\t\t\tconst currentUrl =\n\t\t\t\tURL || (JS.browserOrNode().isBrowser ? window.location.href : '');\n\n\t\t\tconst hasCodeOrError = !!(parse(currentUrl).query || '')\n\t\t\t\t.split('&')\n\t\t\t\t.map(entry => entry.split('='))\n\t\t\t\t.find(([k]) => k === 'code' || k === 'error');\n\n\t\t\tconst hasTokenOrError = !!(parse(currentUrl).hash || '#')\n\t\t\t\t.substr(1)\n\t\t\t\t.split('&')\n\t\t\t\t.map(entry => entry.split('='))\n\t\t\t\t.find(([k]) => k === 'access_token' || k === 'error');\n\n\t\t\tif (hasCodeOrError || hasTokenOrError) {\n\t\t\t\tthis._storage.setItem('amplify-redirected-from-hosted-ui', 'true');\n\t\t\t\ttry {\n\t\t\t\t\tconst {\n\t\t\t\t\t\taccessToken,\n\t\t\t\t\t\tidToken,\n\t\t\t\t\t\trefreshToken,\n\t\t\t\t\t\tstate,\n\t\t\t\t\t} = await this._oAuthHandler.handleAuthResponse(currentUrl);\n\t\t\t\t\tconst session = new CognitoUserSession({\n\t\t\t\t\t\tIdToken: new CognitoIdToken({ IdToken: idToken }),\n\t\t\t\t\t\tRefreshToken: new CognitoRefreshToken({\n\t\t\t\t\t\t\tRefreshToken: refreshToken,\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tAccessToken: new CognitoAccessToken({\n\t\t\t\t\t\t\tAccessToken: accessToken,\n\t\t\t\t\t\t}),\n\t\t\t\t\t});\n\n\t\t\t\t\tlet credentials;\n\t\t\t\t\t// Get AWS Credentials & store if Identity Pool is defined\n\t\t\t\t\tif (this._config.identityPoolId) {\n\t\t\t\t\t\tcredentials = await this.Credentials.set(session, 'session');\n\t\t\t\t\t\tlogger.debug('AWS credentials', credentials);\n\t\t\t\t\t}\n\n\t\t\t\t\t/* \n\t\t\t\tPrior to the request we do sign the custom state along with the state we set. This check will verify\n\t\t\t\tif there is a dash indicated when setting custom state from the request. If a dash is contained\n\t\t\t\tthen there is custom state present on the state string.\n\t\t\t\t*/\n\t\t\t\t\tconst isCustomStateIncluded = /-/.test(state);\n\n\t\t\t\t\t/*\n\t\t\t\tThe following is to create a user for the Cognito Identity SDK to store the tokens\n\t\t\t\tWhen we remove this SDK later that logic will have to be centralized in our new version\n\t\t\t\t*/\n\t\t\t\t\t//#region\n\t\t\t\t\tconst currentUser = this.createCognitoUser(\n\t\t\t\t\t\tsession.getIdToken().decodePayload()['cognito:username']\n\t\t\t\t\t);\n\n\t\t\t\t\t// This calls cacheTokens() in Cognito SDK\n\t\t\t\t\tcurrentUser.setSignInUserSession(session);\n\n\t\t\t\t\tif (window && typeof window.history !== 'undefined') {\n\t\t\t\t\t\twindow.history.replaceState(\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t(this._config.oauth as AwsCognitoOAuthOpts).redirectSignIn\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t'signIn',\n\t\t\t\t\t\tcurrentUser,\n\t\t\t\t\t\t`A user ${currentUser.getUsername()} has been signed in`\n\t\t\t\t\t);\n\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t'cognitoHostedUI',\n\t\t\t\t\t\tcurrentUser,\n\t\t\t\t\t\t`A user ${currentUser.getUsername()} has been signed in via Cognito Hosted UI`\n\t\t\t\t\t);\n\n\t\t\t\t\tif (isCustomStateIncluded) {\n\t\t\t\t\t\tconst customState = state\n\t\t\t\t\t\t\t.split('-')\n\t\t\t\t\t\t\t.splice(1)\n\t\t\t\t\t\t\t.join('-');\n\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'customOAuthState',\n\t\t\t\t\t\t\turlSafeDecode(customState),\n\t\t\t\t\t\t\t`State for user ${currentUser.getUsername()}`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t//#endregion\n\n\t\t\t\t\treturn credentials;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tlogger.debug('Error in cognito hosted auth response', err);\n\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t'signIn_failure',\n\t\t\t\t\t\terr,\n\t\t\t\t\t\t`The OAuth response flow failed`\n\t\t\t\t\t);\n\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t'cognitoHostedUI_failure',\n\t\t\t\t\t\terr,\n\t\t\t\t\t\t`A failure occurred when returning to the Cognito Hosted UI`\n\t\t\t\t\t);\n\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t'customState_failure',\n\t\t\t\t\t\terr,\n\t\t\t\t\t\t`A failure occurred when returning state`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tthis.oAuthFlowInProgress = false;\n\t\t}\n\t}\n\n\t/**\n\t * Compact version of credentials\n\t * @param {Object} credentials\n\t * @return {Object} - Credentials\n\t */\n\tpublic essentialCredentials(credentials): ICredentials {\n\t\treturn {\n\t\t\taccessKeyId: credentials.accessKeyId,\n\t\t\tsessionToken: credentials.sessionToken,\n\t\t\tsecretAccessKey: credentials.secretAccessKey,\n\t\t\tidentityId: credentials.identityId,\n\t\t\tauthenticated: credentials.authenticated,\n\t\t};\n\t}\n\n\tprivate attributesToObject(attributes) {\n\t\tconst obj = {};\n\t\tif (attributes) {\n\t\t\tattributes.map(attribute => {\n\t\t\t\tif (\n\t\t\t\t\tattribute.Name === 'email_verified' ||\n\t\t\t\t\tattribute.Name === 'phone_number_verified'\n\t\t\t\t) {\n\t\t\t\t\tobj[attribute.Name] = this.isTruthyString(attribute.Value) || attribute.Value === true;\n\t\t\t\t} else {\n\t\t\t\t\tobj[attribute.Name] = attribute.Value;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn obj;\n\t}\n\n\tprivate isTruthyString(value: any): boolean {\n\t\treturn typeof value.toLowerCase === 'function' && value.toLowerCase() === 'true';\n\t}\n\n\tprivate createCognitoUser(username: string): CognitoUser {\n\t\tconst userData: ICognitoUserData = {\n\t\t\tUsername: username,\n\t\t\tPool: this.userPool,\n\t\t};\n\t\tuserData.Storage = this._storage;\n\n\t\tconst { authenticationFlowType } = this._config;\n\n\t\tconst user = new CognitoUser(userData);\n\t\tif (authenticationFlowType) {\n\t\t\tuser.setAuthenticationFlowType(authenticationFlowType);\n\t\t}\n\t\treturn user;\n\t}\n\n\tprivate _isValidAuthStorage(obj) {\n\t\t// We need to check if the obj has the functions of Storage\n\t\treturn (\n\t\t\t!!obj &&\n\t\t\ttypeof obj.getItem === 'function' &&\n\t\t\ttypeof obj.setItem === 'function' &&\n\t\t\ttypeof obj.removeItem === 'function' &&\n\t\t\ttypeof obj.clear === 'function'\n\t\t);\n\t}\n\n\tprivate noUserPoolErrorHandler(config: AuthOptions): AuthErrorTypes {\n\t\tif (config) {\n\t\t\tif (!config.userPoolId || !config.identityPoolId) {\n\t\t\t\treturn AuthErrorTypes.MissingAuthConfig;\n\t\t\t}\n\t\t}\n\t\treturn AuthErrorTypes.NoConfig;\n\t}\n\n\tprivate rejectAuthError(type: AuthErrorTypes): Promise<never> {\n\t\treturn Promise.reject(new AuthError(type));\n\t}\n\n\tprivate rejectNoUserPool(): Promise<never> {\n\t\tconst type = this.noUserPoolErrorHandler(this._config);\n\t\treturn Promise.reject(new NoUserPoolError(type));\n\t}\n}\n\nexport const Auth = new AuthClass(null);\n\nAmplify.register(Auth);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}