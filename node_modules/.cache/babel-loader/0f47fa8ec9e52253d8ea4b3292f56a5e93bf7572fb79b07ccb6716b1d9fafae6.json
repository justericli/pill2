{"ast":null,"code":"/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Buffer } from 'buffer';\nimport CryptoJS from 'crypto-js/core';\nimport TypedArrays from 'crypto-js/lib-typedarrays'; // necessary for crypto js\n\nimport Base64 from 'crypto-js/enc-base64';\nimport HmacSHA256 from 'crypto-js/hmac-sha256';\nimport BigInteger from './BigInteger';\nimport AuthenticationHelper from './AuthenticationHelper';\nimport CognitoAccessToken from './CognitoAccessToken';\nimport CognitoIdToken from './CognitoIdToken';\nimport CognitoRefreshToken from './CognitoRefreshToken';\nimport CognitoUserSession from './CognitoUserSession';\nimport DateHelper from './DateHelper';\nimport CognitoUserAttribute from './CognitoUserAttribute';\nimport StorageHelper from './StorageHelper';\n/**\n * @callback nodeCallback\n * @template T result\n * @param {*} err The operation failure reason, or null.\n * @param {T} result The operation result.\n */\n\n/**\n * @callback onFailure\n * @param {*} err Failure reason.\n */\n\n/**\n * @callback onSuccess\n * @template T result\n * @param {T} result The operation result.\n */\n\n/**\n * @callback mfaRequired\n * @param {*} details MFA challenge details.\n */\n\n/**\n * @callback customChallenge\n * @param {*} details Custom challenge details.\n */\n\n/**\n * @callback inputVerificationCode\n * @param {*} data Server response.\n */\n\n/**\n * @callback authSuccess\n * @param {CognitoUserSession} session The new session.\n * @param {bool=} userConfirmationNecessary User must be confirmed.\n */\n\nvar isBrowser = typeof navigator !== 'undefined';\nvar userAgent = isBrowser ? navigator.userAgent : 'nodejs';\n/** @class */\n\nvar CognitoUser = /*#__PURE__*/function () {\n  /**\n   * Constructs a new CognitoUser object\n   * @param {object} data Creation options\n   * @param {string} data.Username The user's username.\n   * @param {CognitoUserPool} data.Pool Pool containing the user.\n   * @param {object} data.Storage Optional storage object.\n   */\n  function CognitoUser(data) {\n    if (data == null || data.Username == null || data.Pool == null) {\n      throw new Error('Username and Pool information are required.');\n    }\n    this.username = data.Username || '';\n    this.pool = data.Pool;\n    this.Session = null;\n    this.client = data.Pool.client;\n    this.signInUserSession = null;\n    this.authenticationFlowType = 'USER_SRP_AUTH';\n    this.storage = data.Storage || new StorageHelper().getStorage();\n    this.keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId();\n    this.userDataKey = this.keyPrefix + \".\" + this.username + \".userData\";\n  }\n  /**\n   * Sets the session for this user\n   * @param {CognitoUserSession} signInUserSession the session\n   * @returns {void}\n   */\n\n  var _proto = CognitoUser.prototype;\n  _proto.setSignInUserSession = function setSignInUserSession(signInUserSession) {\n    this.clearCachedUserData();\n    this.signInUserSession = signInUserSession;\n    this.cacheTokens();\n  }\n  /**\n   * @returns {CognitoUserSession} the current session for this user\n   */;\n\n  _proto.getSignInUserSession = function getSignInUserSession() {\n    return this.signInUserSession;\n  }\n  /**\n   * @returns {string} the user's username\n   */;\n\n  _proto.getUsername = function getUsername() {\n    return this.username;\n  }\n  /**\n   * @returns {String} the authentication flow type\n   */;\n\n  _proto.getAuthenticationFlowType = function getAuthenticationFlowType() {\n    return this.authenticationFlowType;\n  }\n  /**\n   * sets authentication flow type\n   * @param {string} authenticationFlowType New value.\n   * @returns {void}\n   */;\n\n  _proto.setAuthenticationFlowType = function setAuthenticationFlowType(authenticationFlowType) {\n    this.authenticationFlowType = authenticationFlowType;\n  }\n  /**\n   * This is used for authenticating the user through the custom authentication flow.\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */;\n\n  _proto.initiateAuth = function initiateAuth(authDetails, callback) {\n    var _this = this;\n    var authParameters = authDetails.getAuthParameters();\n    authParameters.USERNAME = this.username;\n    var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n    var jsonReq = {\n      AuthFlow: 'CUSTOM_AUTH',\n      ClientId: this.pool.getClientId(),\n      AuthParameters: authParameters,\n      ClientMetadata: clientMetaData\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('InitiateAuth', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      var challengeName = data.ChallengeName;\n      var challengeParameters = data.ChallengeParameters;\n      if (challengeName === 'CUSTOM_CHALLENGE') {\n        _this.Session = data.Session;\n        return callback.customChallenge(challengeParameters);\n      }\n      _this.signInUserSession = _this.getCognitoUserSession(data.AuthenticationResult);\n      _this.cacheTokens();\n      return callback.onSuccess(_this.signInUserSession);\n    });\n  }\n  /**\n   * This is used for authenticating the user.\n   * stuff\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {newPasswordRequired} callback.newPasswordRequired new\n   *        password and any required attributes are required to continue\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */;\n\n  _proto.authenticateUser = function authenticateUser(authDetails, callback) {\n    if (this.authenticationFlowType === 'USER_PASSWORD_AUTH') {\n      return this.authenticateUserPlainUsernamePassword(authDetails, callback);\n    } else if (this.authenticationFlowType === 'USER_SRP_AUTH' || this.authenticationFlowType === 'CUSTOM_AUTH') {\n      return this.authenticateUserDefaultAuth(authDetails, callback);\n    }\n    return callback.onFailure(new Error('Authentication flow type is invalid.'));\n  }\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   * It calls the AuthenticationHelper for SRP related\n   * stuff\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {newPasswordRequired} callback.newPasswordRequired new\n   *        password and any required attributes are required to continue\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */;\n\n  _proto.authenticateUserDefaultAuth = function authenticateUserDefaultAuth(authDetails, callback) {\n    var _this2 = this;\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    var dateHelper = new DateHelper();\n    var serverBValue;\n    var salt;\n    var authParameters = {};\n    if (this.deviceKey != null) {\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n    authParameters.USERNAME = this.username;\n    authenticationHelper.getLargeAValue(function (errOnAValue, aValue) {\n      // getLargeAValue callback start\n      if (errOnAValue) {\n        callback.onFailure(errOnAValue);\n      }\n      authParameters.SRP_A = aValue.toString(16);\n      if (_this2.authenticationFlowType === 'CUSTOM_AUTH') {\n        authParameters.CHALLENGE_NAME = 'SRP_A';\n      }\n      var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n      var jsonReq = {\n        AuthFlow: _this2.authenticationFlowType,\n        ClientId: _this2.pool.getClientId(),\n        AuthParameters: authParameters,\n        ClientMetadata: clientMetaData\n      };\n      if (_this2.getUserContextData(_this2.username)) {\n        jsonReq.UserContextData = _this2.getUserContextData(_this2.username);\n      }\n      _this2.client.request('InitiateAuth', jsonReq, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n        var challengeParameters = data.ChallengeParameters;\n        _this2.username = challengeParameters.USER_ID_FOR_SRP;\n        _this2.userDataKey = _this2.keyPrefix + \".\" + _this2.username + \".userData\";\n        serverBValue = new BigInteger(challengeParameters.SRP_B, 16);\n        salt = new BigInteger(challengeParameters.SALT, 16);\n        _this2.getCachedDeviceKeyAndPassword();\n        authenticationHelper.getPasswordAuthenticationKey(_this2.username, authDetails.getPassword(), serverBValue, salt, function (errOnHkdf, hkdf) {\n          // getPasswordAuthenticationKey callback start\n          if (errOnHkdf) {\n            callback.onFailure(errOnHkdf);\n          }\n          var dateNow = dateHelper.getNowString();\n          var message = CryptoJS.lib.WordArray.create(Buffer.concat([Buffer.from(_this2.pool.getUserPoolId().split('_')[1], 'utf8'), Buffer.from(_this2.username, 'utf8'), Buffer.from(challengeParameters.SECRET_BLOCK, 'base64'), Buffer.from(dateNow, 'utf8')]));\n          var key = CryptoJS.lib.WordArray.create(hkdf);\n          var signatureString = Base64.stringify(HmacSHA256(message, key));\n          var challengeResponses = {};\n          challengeResponses.USERNAME = _this2.username;\n          challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n          challengeResponses.TIMESTAMP = dateNow;\n          challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n          if (_this2.deviceKey != null) {\n            challengeResponses.DEVICE_KEY = _this2.deviceKey;\n          }\n          var respondToAuthChallenge = function respondToAuthChallenge(challenge, challengeCallback) {\n            return _this2.client.request('RespondToAuthChallenge', challenge, function (errChallenge, dataChallenge) {\n              if (errChallenge && errChallenge.code === 'ResourceNotFoundException' && errChallenge.message.toLowerCase().indexOf('device') !== -1) {\n                challengeResponses.DEVICE_KEY = null;\n                _this2.deviceKey = null;\n                _this2.randomPassword = null;\n                _this2.deviceGroupKey = null;\n                _this2.clearCachedDeviceKeyAndPassword();\n                return respondToAuthChallenge(challenge, challengeCallback);\n              }\n              return challengeCallback(errChallenge, dataChallenge);\n            });\n          };\n          var jsonReqResp = {\n            ChallengeName: 'PASSWORD_VERIFIER',\n            ClientId: _this2.pool.getClientId(),\n            ChallengeResponses: challengeResponses,\n            Session: data.Session,\n            ClientMetadata: clientMetaData\n          };\n          if (_this2.getUserContextData()) {\n            jsonReqResp.UserContextData = _this2.getUserContextData();\n          }\n          respondToAuthChallenge(jsonReqResp, function (errAuthenticate, dataAuthenticate) {\n            if (errAuthenticate) {\n              return callback.onFailure(errAuthenticate);\n            }\n            return _this2.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n          });\n          return undefined; // getPasswordAuthenticationKey callback end\n        });\n\n        return undefined;\n      }); // getLargeAValue callback end\n    });\n  }\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   * @param {AuthenticationDetails} authDetails Contains the authentication data.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */;\n\n  _proto.authenticateUserPlainUsernamePassword = function authenticateUserPlainUsernamePassword(authDetails, callback) {\n    var _this3 = this;\n    var authParameters = {};\n    authParameters.USERNAME = this.username;\n    authParameters.PASSWORD = authDetails.getPassword();\n    if (!authParameters.PASSWORD) {\n      callback.onFailure(new Error('PASSWORD parameter is required'));\n      return;\n    }\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    this.getCachedDeviceKeyAndPassword();\n    if (this.deviceKey != null) {\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n    var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n    var jsonReq = {\n      AuthFlow: 'USER_PASSWORD_AUTH',\n      ClientId: this.pool.getClientId(),\n      AuthParameters: authParameters,\n      ClientMetadata: clientMetaData\n    };\n    if (this.getUserContextData(this.username)) {\n      jsonReq.UserContextData = this.getUserContextData(this.username);\n    } // USER_PASSWORD_AUTH happens in a single round-trip: client sends userName and password,\n    // Cognito UserPools verifies password and returns tokens.\n\n    this.client.request('InitiateAuth', jsonReq, function (err, authResult) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return _this3.authenticateUserInternal(authResult, authenticationHelper, callback);\n    });\n  }\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   * @param {object} dataAuthenticate authentication data\n   * @param {object} authenticationHelper helper created\n   * @param {callback} callback passed on from caller\n   * @returns {void}\n   */;\n\n  _proto.authenticateUserInternal = function authenticateUserInternal(dataAuthenticate, authenticationHelper, callback) {\n    var _this4 = this;\n    var challengeName = dataAuthenticate.ChallengeName;\n    var challengeParameters = dataAuthenticate.ChallengeParameters;\n    if (challengeName === 'SMS_MFA') {\n      this.Session = dataAuthenticate.Session;\n      return callback.mfaRequired(challengeName, challengeParameters);\n    }\n    if (challengeName === 'SELECT_MFA_TYPE') {\n      this.Session = dataAuthenticate.Session;\n      return callback.selectMFAType(challengeName, challengeParameters);\n    }\n    if (challengeName === 'MFA_SETUP') {\n      this.Session = dataAuthenticate.Session;\n      return callback.mfaSetup(challengeName, challengeParameters);\n    }\n    if (challengeName === 'SOFTWARE_TOKEN_MFA') {\n      this.Session = dataAuthenticate.Session;\n      return callback.totpRequired(challengeName, challengeParameters);\n    }\n    if (challengeName === 'CUSTOM_CHALLENGE') {\n      this.Session = dataAuthenticate.Session;\n      return callback.customChallenge(challengeParameters);\n    }\n    if (challengeName === 'NEW_PASSWORD_REQUIRED') {\n      this.Session = dataAuthenticate.Session;\n      var userAttributes = null;\n      var rawRequiredAttributes = null;\n      var requiredAttributes = [];\n      var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();\n      if (challengeParameters) {\n        userAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.userAttributes);\n        rawRequiredAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.requiredAttributes);\n      }\n      if (rawRequiredAttributes) {\n        for (var i = 0; i < rawRequiredAttributes.length; i++) {\n          requiredAttributes[i] = rawRequiredAttributes[i].substr(userAttributesPrefix.length);\n        }\n      }\n      return callback.newPasswordRequired(userAttributes, requiredAttributes);\n    }\n    if (challengeName === 'DEVICE_SRP_AUTH') {\n      this.getDeviceResponse(callback);\n      return undefined;\n    }\n    this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n    this.challengeName = challengeName;\n    this.cacheTokens();\n    var newDeviceMetadata = dataAuthenticate.AuthenticationResult.NewDeviceMetadata;\n    if (newDeviceMetadata == null) {\n      return callback.onSuccess(this.signInUserSession);\n    }\n    authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function (errGenHash) {\n      if (errGenHash) {\n        return callback.onFailure(errGenHash);\n      }\n      var deviceSecretVerifierConfig = {\n        Salt: Buffer.from(authenticationHelper.getSaltDevices(), 'hex').toString('base64'),\n        PasswordVerifier: Buffer.from(authenticationHelper.getVerifierDevices(), 'hex').toString('base64')\n      };\n      _this4.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;\n      _this4.deviceGroupKey = newDeviceMetadata.DeviceGroupKey;\n      _this4.randomPassword = authenticationHelper.getRandomPassword();\n      _this4.client.request('ConfirmDevice', {\n        DeviceKey: newDeviceMetadata.DeviceKey,\n        AccessToken: _this4.signInUserSession.getAccessToken().getJwtToken(),\n        DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n        DeviceName: userAgent\n      }, function (errConfirm, dataConfirm) {\n        if (errConfirm) {\n          return callback.onFailure(errConfirm);\n        }\n        _this4.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n        _this4.cacheDeviceKeyAndPassword();\n        if (dataConfirm.UserConfirmationNecessary === true) {\n          return callback.onSuccess(_this4.signInUserSession, dataConfirm.UserConfirmationNecessary);\n        }\n        return callback.onSuccess(_this4.signInUserSession);\n      });\n      return undefined;\n    });\n    return undefined;\n  }\n  /**\n   * This method is user to complete the NEW_PASSWORD_REQUIRED challenge.\n   * Pass the new password with any new user attributes to be updated.\n   * User attribute keys must be of format userAttributes.<attribute_name>.\n   * @param {string} newPassword new password for this user\n   * @param {object} requiredAttributeData map with values for all required attributes\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {mfaRequired} callback.mfaRequired MFA code required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *         response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */;\n\n  _proto.completeNewPasswordChallenge = function completeNewPasswordChallenge(newPassword, requiredAttributeData, callback, clientMetadata) {\n    var _this5 = this;\n    if (!newPassword) {\n      return callback.onFailure(new Error('New password is required.'));\n    }\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();\n    var finalUserAttributes = {};\n    if (requiredAttributeData) {\n      Object.keys(requiredAttributeData).forEach(function (key) {\n        finalUserAttributes[userAttributesPrefix + key] = requiredAttributeData[key];\n      });\n    }\n    finalUserAttributes.NEW_PASSWORD = newPassword;\n    finalUserAttributes.USERNAME = this.username;\n    var jsonReq = {\n      ChallengeName: 'NEW_PASSWORD_REQUIRED',\n      ClientId: this.pool.getClientId(),\n      ChallengeResponses: finalUserAttributes,\n      Session: this.Session,\n      ClientMetadata: clientMetadata\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('RespondToAuthChallenge', jsonReq, function (errAuthenticate, dataAuthenticate) {\n      if (errAuthenticate) {\n        return callback.onFailure(errAuthenticate);\n      }\n      return _this5.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n    });\n    return undefined;\n  }\n  /**\n   * This is used to get a session using device authentication. It is called at the end of user\n   * authentication\n   *\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   * @private\n   */;\n\n  _proto.getDeviceResponse = function getDeviceResponse(callback, clientMetadata) {\n    var _this6 = this;\n    var authenticationHelper = new AuthenticationHelper(this.deviceGroupKey);\n    var dateHelper = new DateHelper();\n    var authParameters = {};\n    authParameters.USERNAME = this.username;\n    authParameters.DEVICE_KEY = this.deviceKey;\n    authenticationHelper.getLargeAValue(function (errAValue, aValue) {\n      // getLargeAValue callback start\n      if (errAValue) {\n        callback.onFailure(errAValue);\n      }\n      authParameters.SRP_A = aValue.toString(16);\n      var jsonReq = {\n        ChallengeName: 'DEVICE_SRP_AUTH',\n        ClientId: _this6.pool.getClientId(),\n        ChallengeResponses: authParameters,\n        ClientMetadata: clientMetadata\n      };\n      if (_this6.getUserContextData()) {\n        jsonReq.UserContextData = _this6.getUserContextData();\n      }\n      _this6.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n        var challengeParameters = data.ChallengeParameters;\n        var serverBValue = new BigInteger(challengeParameters.SRP_B, 16);\n        var salt = new BigInteger(challengeParameters.SALT, 16);\n        authenticationHelper.getPasswordAuthenticationKey(_this6.deviceKey, _this6.randomPassword, serverBValue, salt, function (errHkdf, hkdf) {\n          // getPasswordAuthenticationKey callback start\n          if (errHkdf) {\n            return callback.onFailure(errHkdf);\n          }\n          var dateNow = dateHelper.getNowString();\n          var message = CryptoJS.lib.WordArray.create(Buffer.concat([Buffer.from(_this6.deviceGroupKey, 'utf8'), Buffer.from(_this6.deviceKey, 'utf8'), Buffer.from(challengeParameters.SECRET_BLOCK, 'base64'), Buffer.from(dateNow, 'utf8')]));\n          var key = CryptoJS.lib.WordArray.create(hkdf);\n          var signatureString = Base64.stringify(HmacSHA256(message, key));\n          var challengeResponses = {};\n          challengeResponses.USERNAME = _this6.username;\n          challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n          challengeResponses.TIMESTAMP = dateNow;\n          challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n          challengeResponses.DEVICE_KEY = _this6.deviceKey;\n          var jsonReqResp = {\n            ChallengeName: 'DEVICE_PASSWORD_VERIFIER',\n            ClientId: _this6.pool.getClientId(),\n            ChallengeResponses: challengeResponses,\n            Session: data.Session\n          };\n          if (_this6.getUserContextData()) {\n            jsonReqResp.UserContextData = _this6.getUserContextData();\n          }\n          _this6.client.request('RespondToAuthChallenge', jsonReqResp, function (errAuthenticate, dataAuthenticate) {\n            if (errAuthenticate) {\n              return callback.onFailure(errAuthenticate);\n            }\n            _this6.signInUserSession = _this6.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n            _this6.cacheTokens();\n            return callback.onSuccess(_this6.signInUserSession);\n          });\n          return undefined; // getPasswordAuthenticationKey callback end\n        });\n\n        return undefined;\n      }); // getLargeAValue callback end\n    });\n  }\n  /**\n   * This is used for a certain user to confirm the registration by using a confirmation code\n   * @param {string} confirmationCode Code entered by user.\n   * @param {bool} forceAliasCreation Allow migrating from an existing email / phone number.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */;\n\n  _proto.confirmRegistration = function confirmRegistration(confirmationCode, forceAliasCreation, callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      ConfirmationCode: confirmationCode,\n      Username: this.username,\n      ForceAliasCreation: forceAliasCreation,\n      ClientMetadata: clientMetadata\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('ConfirmSignUp', jsonReq, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n  }\n  /**\n   * This is used by the user once he has the responses to a custom challenge\n   * @param {string} answerChallenge The custom challenge answer.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {customChallenge} callback.customChallenge\n   *    Custom challenge response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */;\n\n  _proto.sendCustomChallengeAnswer = function sendCustomChallengeAnswer(answerChallenge, callback, clientMetadata) {\n    var _this7 = this;\n    var challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.ANSWER = answerChallenge;\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    this.getCachedDeviceKeyAndPassword();\n    if (this.deviceKey != null) {\n      challengeResponses.DEVICE_KEY = this.deviceKey;\n    }\n    var jsonReq = {\n      ChallengeName: 'CUSTOM_CHALLENGE',\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session,\n      ClientMetadata: clientMetadata\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return _this7.authenticateUserInternal(data, authenticationHelper, callback);\n    });\n  }\n  /**\n   * This is used by the user once he has an MFA code\n   * @param {string} confirmationCode The MFA code entered by the user.\n   * @param {object} callback Result callback map.\n   * @param {string} mfaType The mfa we are replying to.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */;\n\n  _proto.sendMFACode = function sendMFACode(confirmationCode, callback, mfaType, clientMetadata) {\n    var _this8 = this;\n    var challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.SMS_MFA_CODE = confirmationCode;\n    var mfaTypeSelection = mfaType || 'SMS_MFA';\n    if (mfaTypeSelection === 'SOFTWARE_TOKEN_MFA') {\n      challengeResponses.SOFTWARE_TOKEN_MFA_CODE = confirmationCode;\n    }\n    if (this.deviceKey != null) {\n      challengeResponses.DEVICE_KEY = this.deviceKey;\n    }\n    var jsonReq = {\n      ChallengeName: mfaTypeSelection,\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session,\n      ClientMetadata: clientMetadata\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('RespondToAuthChallenge', jsonReq, function (err, dataAuthenticate) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      var challengeName = dataAuthenticate.ChallengeName;\n      if (challengeName === 'DEVICE_SRP_AUTH') {\n        _this8.getDeviceResponse(callback);\n        return undefined;\n      }\n      _this8.signInUserSession = _this8.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n      _this8.cacheTokens();\n      if (dataAuthenticate.AuthenticationResult.NewDeviceMetadata == null) {\n        return callback.onSuccess(_this8.signInUserSession);\n      }\n      var authenticationHelper = new AuthenticationHelper(_this8.pool.getUserPoolId().split('_')[1]);\n      authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function (errGenHash) {\n        if (errGenHash) {\n          return callback.onFailure(errGenHash);\n        }\n        var deviceSecretVerifierConfig = {\n          Salt: Buffer.from(authenticationHelper.getSaltDevices(), 'hex').toString('base64'),\n          PasswordVerifier: Buffer.from(authenticationHelper.getVerifierDevices(), 'hex').toString('base64')\n        };\n        _this8.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;\n        _this8.deviceGroupKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey;\n        _this8.randomPassword = authenticationHelper.getRandomPassword();\n        _this8.client.request('ConfirmDevice', {\n          DeviceKey: dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey,\n          AccessToken: _this8.signInUserSession.getAccessToken().getJwtToken(),\n          DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n          DeviceName: userAgent\n        }, function (errConfirm, dataConfirm) {\n          if (errConfirm) {\n            return callback.onFailure(errConfirm);\n          }\n          _this8.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n          _this8.cacheDeviceKeyAndPassword();\n          if (dataConfirm.UserConfirmationNecessary === true) {\n            return callback.onSuccess(_this8.signInUserSession, dataConfirm.UserConfirmationNecessary);\n          }\n          return callback.onSuccess(_this8.signInUserSession);\n        });\n        return undefined;\n      });\n      return undefined;\n    });\n  }\n  /**\n   * This is used by an authenticated user to change the current password\n   * @param {string} oldUserPassword The current password.\n   * @param {string} newUserPassword The requested new password.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */;\n\n  _proto.changePassword = function changePassword(oldUserPassword, newUserPassword, callback, clientMetadata) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n    this.client.request('ChangePassword', {\n      PreviousPassword: oldUserPassword,\n      ProposedPassword: newUserPassword,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      ClientMetadata: clientMetadata\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used by an authenticated user to enable MFA for itself\n   * @deprecated\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */;\n\n  _proto.enableMFA = function enableMFA(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n    var mfaOptions = [];\n    var mfaEnabled = {\n      DeliveryMedium: 'SMS',\n      AttributeName: 'phone_number'\n    };\n    mfaOptions.push(mfaEnabled);\n    this.client.request('SetUserSettings', {\n      MFAOptions: mfaOptions,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used by an authenticated user to enable MFA for itself\n   * @param {IMfaSettings} smsMfaSettings the sms mfa settings\n   * @param {IMFASettings} softwareTokenMfaSettings the software token mfa settings\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */;\n\n  _proto.setUserMfaPreference = function setUserMfaPreference(smsMfaSettings, softwareTokenMfaSettings, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n    this.client.request('SetUserMFAPreference', {\n      SMSMfaSettings: smsMfaSettings,\n      SoftwareTokenMfaSettings: softwareTokenMfaSettings,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used by an authenticated user to disable MFA for itself\n   * @deprecated\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */;\n\n  _proto.disableMFA = function disableMFA(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n    var mfaOptions = [];\n    this.client.request('SetUserSettings', {\n      MFAOptions: mfaOptions,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used by an authenticated user to delete itself\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */;\n\n  _proto.deleteUser = function deleteUser(callback, clientMetadata) {\n    var _this9 = this;\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n    this.client.request('DeleteUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      ClientMetadata: clientMetadata\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n      _this9.clearCachedUser();\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * @typedef {CognitoUserAttribute | { Name:string, Value:string }} AttributeArg\n   */\n\n  /**\n   * This is used by an authenticated user to change a list of attributes\n   * @param {AttributeArg[]} attributes A list of the new user attributes.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */;\n\n  _proto.updateAttributes = function updateAttributes(attributes, callback, clientMetadata) {\n    var _this10 = this;\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n    this.client.request('UpdateUserAttributes', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      UserAttributes: attributes,\n      ClientMetadata: clientMetadata\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      } // update cached user\n\n      return _this10.getUserData(function () {\n        return callback(null, 'SUCCESS');\n      }, {\n        bypassCache: true\n      });\n    });\n    return undefined;\n  }\n  /**\n   * This is used by an authenticated user to get a list of attributes\n   * @param {nodeCallback<CognitoUserAttribute[]>} callback Called on success or error.\n   * @returns {void}\n   */;\n\n  _proto.getUserAttributes = function getUserAttributes(callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n    this.client.request('GetUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err, userData) {\n      if (err) {\n        return callback(err, null);\n      }\n      var attributeList = [];\n      for (var i = 0; i < userData.UserAttributes.length; i++) {\n        var attribute = {\n          Name: userData.UserAttributes[i].Name,\n          Value: userData.UserAttributes[i].Value\n        };\n        var userAttribute = new CognitoUserAttribute(attribute);\n        attributeList.push(userAttribute);\n      }\n      return callback(null, attributeList);\n    });\n    return undefined;\n  }\n  /**\n   * This was previously used by an authenticated user to get MFAOptions,\n   * but no longer returns a meaningful response. Refer to the documentation for\n   * how to setup and use MFA: https://docs.amplify.aws/lib/auth/mfa/q/platform/js\n   * @deprecated\n   * @param {nodeCallback<MFAOptions>} callback Called on success or error.\n   * @returns {void}\n   */;\n\n  _proto.getMFAOptions = function getMFAOptions(callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n    this.client.request('GetUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err, userData) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, userData.MFAOptions);\n    });\n    return undefined;\n  }\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   */;\n\n  _proto.createGetUserRequest = function createGetUserRequest() {\n    return this.client.promisifyRequest('GetUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    });\n  }\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   */;\n\n  _proto.refreshSessionIfPossible = function refreshSessionIfPossible(options) {\n    var _this11 = this;\n    if (options === void 0) {\n      options = {};\n    }\n\n    // best effort, if not possible\n    return new Promise(function (resolve) {\n      var refresh = _this11.signInUserSession.getRefreshToken();\n      if (refresh && refresh.getToken()) {\n        _this11.refreshSession(refresh, resolve, options.clientMetadata);\n      } else {\n        resolve();\n      }\n    });\n  }\n  /**\n   * @typedef {Object} GetUserDataOptions\n   * @property {boolean} bypassCache - force getting data from Cognito service\n   * @property {Record<string, string>} clientMetadata - clientMetadata for getSession\n   */\n\n  /**\n   * This is used by an authenticated users to get the userData\n   * @param {nodeCallback<UserData>} callback Called on success or error.\n   * @param {GetUserDataOptions} params\n   * @returns {void}\n   */;\n\n  _proto.getUserData = function getUserData(callback, params) {\n    var _this12 = this;\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      this.clearCachedUserData();\n      return callback(new Error('User is not authenticated'), null);\n    }\n    var userData = this.getUserDataFromCache();\n    if (!userData) {\n      this.fetchUserData().then(function (data) {\n        callback(null, data);\n      })[\"catch\"](callback);\n      return;\n    }\n    if (this.isFetchUserDataAndTokenRequired(params)) {\n      this.fetchUserData().then(function (data) {\n        return _this12.refreshSessionIfPossible(params).then(function () {\n          return data;\n        });\n      }).then(function (data) {\n        return callback(null, data);\n      })[\"catch\"](callback);\n      return;\n    }\n    try {\n      callback(null, JSON.parse(userData));\n      return;\n    } catch (err) {\n      this.clearCachedUserData();\n      callback(err, null);\n      return;\n    }\n  }\n  /**\n   *\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   */;\n\n  _proto.getUserDataFromCache = function getUserDataFromCache() {\n    var userData = this.storage.getItem(this.userDataKey);\n    return userData;\n  }\n  /**\n   *\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   */;\n\n  _proto.isFetchUserDataAndTokenRequired = function isFetchUserDataAndTokenRequired(params) {\n    var _ref = params || {},\n      _ref$bypassCache = _ref.bypassCache,\n      bypassCache = _ref$bypassCache === void 0 ? false : _ref$bypassCache;\n    return bypassCache;\n  }\n  /**\n   *\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   */;\n\n  _proto.fetchUserData = function fetchUserData() {\n    var _this13 = this;\n    return this.createGetUserRequest().then(function (data) {\n      _this13.cacheUserData(data);\n      return data;\n    });\n  }\n  /**\n   * This is used by an authenticated user to delete a list of attributes\n   * @param {string[]} attributeList Names of the attributes to delete.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */;\n\n  _proto.deleteAttributes = function deleteAttributes(attributeList, callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n    this.client.request('DeleteUserAttributes', {\n      UserAttributeNames: attributeList,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used by a user to resend a confirmation code\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */;\n\n  _proto.resendConfirmationCode = function resendConfirmationCode(callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n      ClientMetadata: clientMetadata\n    };\n    this.client.request('ResendConfirmationCode', jsonReq, function (err, result) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, result);\n    });\n  }\n  /**\n   * @typedef {Object} GetSessionOptions\n   * @property {Record<string, string>} clientMetadata - clientMetadata for getSession\n   */\n\n  /**\n   * This is used to get a session, either from the session object\n   * or from  the local storage, or by using a refresh token\n   *\n   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n   * @param {GetSessionOptions} options\n   * @returns {void}\n   */;\n\n  _proto.getSession = function getSession(callback, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    if (this.username == null) {\n      return callback(new Error('Username is null. Cannot retrieve a new session'), null);\n    }\n    if (this.signInUserSession != null && this.signInUserSession.isValid()) {\n      return callback(null, this.signInUserSession);\n    }\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId() + \".\" + this.username;\n    var idTokenKey = keyPrefix + \".idToken\";\n    var accessTokenKey = keyPrefix + \".accessToken\";\n    var refreshTokenKey = keyPrefix + \".refreshToken\";\n    var clockDriftKey = keyPrefix + \".clockDrift\";\n    if (this.storage.getItem(idTokenKey)) {\n      var idToken = new CognitoIdToken({\n        IdToken: this.storage.getItem(idTokenKey)\n      });\n      var accessToken = new CognitoAccessToken({\n        AccessToken: this.storage.getItem(accessTokenKey)\n      });\n      var refreshToken = new CognitoRefreshToken({\n        RefreshToken: this.storage.getItem(refreshTokenKey)\n      });\n      var clockDrift = parseInt(this.storage.getItem(clockDriftKey), 0) || 0;\n      var sessionData = {\n        IdToken: idToken,\n        AccessToken: accessToken,\n        RefreshToken: refreshToken,\n        ClockDrift: clockDrift\n      };\n      var cachedSession = new CognitoUserSession(sessionData);\n      if (cachedSession.isValid()) {\n        this.signInUserSession = cachedSession;\n        return callback(null, this.signInUserSession);\n      }\n      if (!refreshToken.getToken()) {\n        return callback(new Error('Cannot retrieve a new session. Please authenticate.'), null);\n      }\n      this.refreshSession(refreshToken, callback, options.clientMetadata);\n    } else {\n      callback(new Error('Local storage is missing an ID Token, Please authenticate'), null);\n    }\n    return undefined;\n  }\n  /**\n   * This uses the refreshToken to retrieve a new session\n   * @param {CognitoRefreshToken} refreshToken A previous session's refresh token.\n   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */;\n\n  _proto.refreshSession = function refreshSession(refreshToken, callback, clientMetadata) {\n    var _this14 = this;\n    var wrappedCallback = this.pool.wrapRefreshSessionCallback ? this.pool.wrapRefreshSessionCallback(callback) : callback;\n    var authParameters = {};\n    authParameters.REFRESH_TOKEN = refreshToken.getToken();\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId();\n    var lastUserKey = keyPrefix + \".LastAuthUser\";\n    if (this.storage.getItem(lastUserKey)) {\n      this.username = this.storage.getItem(lastUserKey);\n      var deviceKeyKey = keyPrefix + \".\" + this.username + \".deviceKey\";\n      this.deviceKey = this.storage.getItem(deviceKeyKey);\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      AuthFlow: 'REFRESH_TOKEN_AUTH',\n      AuthParameters: authParameters,\n      ClientMetadata: clientMetadata\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('InitiateAuth', jsonReq, function (err, authResult) {\n      if (err) {\n        if (err.code === 'NotAuthorizedException') {\n          _this14.clearCachedUser();\n        }\n        return wrappedCallback(err, null);\n      }\n      if (authResult) {\n        var authenticationResult = authResult.AuthenticationResult;\n        if (!Object.prototype.hasOwnProperty.call(authenticationResult, 'RefreshToken')) {\n          authenticationResult.RefreshToken = refreshToken.getToken();\n        }\n        _this14.signInUserSession = _this14.getCognitoUserSession(authenticationResult);\n        _this14.cacheTokens();\n        return wrappedCallback(null, _this14.signInUserSession);\n      }\n      return undefined;\n    });\n  }\n  /**\n   * This is used to save the session tokens to local storage\n   * @returns {void}\n   */;\n\n  _proto.cacheTokens = function cacheTokens() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId();\n    var idTokenKey = keyPrefix + \".\" + this.username + \".idToken\";\n    var accessTokenKey = keyPrefix + \".\" + this.username + \".accessToken\";\n    var refreshTokenKey = keyPrefix + \".\" + this.username + \".refreshToken\";\n    var clockDriftKey = keyPrefix + \".\" + this.username + \".clockDrift\";\n    var lastUserKey = keyPrefix + \".LastAuthUser\";\n    this.storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());\n    this.storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());\n    this.storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());\n    this.storage.setItem(clockDriftKey, \"\" + this.signInUserSession.getClockDrift());\n    this.storage.setItem(lastUserKey, this.username);\n  }\n  /**\n   * This is to cache user data\n   */;\n\n  _proto.cacheUserData = function cacheUserData(userData) {\n    this.storage.setItem(this.userDataKey, JSON.stringify(userData));\n  }\n  /**\n   * This is to remove cached user data\n   */;\n\n  _proto.clearCachedUserData = function clearCachedUserData() {\n    this.storage.removeItem(this.userDataKey);\n  };\n  _proto.clearCachedUser = function clearCachedUser() {\n    this.clearCachedTokens();\n    this.clearCachedUserData();\n  }\n  /**\n   * This is used to cache the device key and device group and device password\n   * @returns {void}\n   */;\n\n  _proto.cacheDeviceKeyAndPassword = function cacheDeviceKeyAndPassword() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId() + \".\" + this.username;\n    var deviceKeyKey = keyPrefix + \".deviceKey\";\n    var randomPasswordKey = keyPrefix + \".randomPasswordKey\";\n    var deviceGroupKeyKey = keyPrefix + \".deviceGroupKey\";\n    this.storage.setItem(deviceKeyKey, this.deviceKey);\n    this.storage.setItem(randomPasswordKey, this.randomPassword);\n    this.storage.setItem(deviceGroupKeyKey, this.deviceGroupKey);\n  }\n  /**\n   * This is used to get current device key and device group and device password\n   * @returns {void}\n   */;\n\n  _proto.getCachedDeviceKeyAndPassword = function getCachedDeviceKeyAndPassword() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId() + \".\" + this.username;\n    var deviceKeyKey = keyPrefix + \".deviceKey\";\n    var randomPasswordKey = keyPrefix + \".randomPasswordKey\";\n    var deviceGroupKeyKey = keyPrefix + \".deviceGroupKey\";\n    if (this.storage.getItem(deviceKeyKey)) {\n      this.deviceKey = this.storage.getItem(deviceKeyKey);\n      this.randomPassword = this.storage.getItem(randomPasswordKey);\n      this.deviceGroupKey = this.storage.getItem(deviceGroupKeyKey);\n    }\n  }\n  /**\n   * This is used to clear the device key info from local storage\n   * @returns {void}\n   */;\n\n  _proto.clearCachedDeviceKeyAndPassword = function clearCachedDeviceKeyAndPassword() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId() + \".\" + this.username;\n    var deviceKeyKey = keyPrefix + \".deviceKey\";\n    var randomPasswordKey = keyPrefix + \".randomPasswordKey\";\n    var deviceGroupKeyKey = keyPrefix + \".deviceGroupKey\";\n    this.storage.removeItem(deviceKeyKey);\n    this.storage.removeItem(randomPasswordKey);\n    this.storage.removeItem(deviceGroupKeyKey);\n  }\n  /**\n   * This is used to clear the session tokens from local storage\n   * @returns {void}\n   */;\n\n  _proto.clearCachedTokens = function clearCachedTokens() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId();\n    var idTokenKey = keyPrefix + \".\" + this.username + \".idToken\";\n    var accessTokenKey = keyPrefix + \".\" + this.username + \".accessToken\";\n    var refreshTokenKey = keyPrefix + \".\" + this.username + \".refreshToken\";\n    var lastUserKey = keyPrefix + \".LastAuthUser\";\n    var clockDriftKey = keyPrefix + \".\" + this.username + \".clockDrift\";\n    this.storage.removeItem(idTokenKey);\n    this.storage.removeItem(accessTokenKey);\n    this.storage.removeItem(refreshTokenKey);\n    this.storage.removeItem(lastUserKey);\n    this.storage.removeItem(clockDriftKey);\n  }\n  /**\n   * This is used to build a user session from tokens retrieved in the authentication result\n   * @param {object} authResult Successful auth response from server.\n   * @returns {CognitoUserSession} The new user session.\n   * @private\n   */;\n\n  _proto.getCognitoUserSession = function getCognitoUserSession(authResult) {\n    var idToken = new CognitoIdToken(authResult);\n    var accessToken = new CognitoAccessToken(authResult);\n    var refreshToken = new CognitoRefreshToken(authResult);\n    var sessionData = {\n      IdToken: idToken,\n      AccessToken: accessToken,\n      RefreshToken: refreshToken\n    };\n    return new CognitoUserSession(sessionData);\n  }\n  /**\n   * This is used to initiate a forgot password request\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {inputVerificationCode?} callback.inputVerificationCode\n   *    Optional callback raised instead of onSuccess with response data.\n   * @param {onSuccess} callback.onSuccess Called on success.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */;\n\n  _proto.forgotPassword = function forgotPassword(callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n      ClientMetadata: clientMetadata\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('ForgotPassword', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      if (typeof callback.inputVerificationCode === 'function') {\n        return callback.inputVerificationCode(data);\n      }\n      return callback.onSuccess(data);\n    });\n  }\n  /**\n   * This is used to confirm a new password using a confirmationCode\n   * @param {string} confirmationCode Code entered by user.\n   * @param {string} newPassword Confirm new password.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<void>} callback.onSuccess Called on success.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */;\n\n  _proto.confirmPassword = function confirmPassword(confirmationCode, newPassword, callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n      ConfirmationCode: confirmationCode,\n      Password: newPassword,\n      ClientMetadata: clientMetadata\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('ConfirmForgotPassword', jsonReq, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess();\n    });\n  }\n  /**\n   * This is used to initiate an attribute confirmation request\n   * @param {string} attributeName User attribute that needs confirmation.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {inputVerificationCode} callback.inputVerificationCode Called on success.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */;\n\n  _proto.getAttributeVerificationCode = function getAttributeVerificationCode(attributeName, callback, clientMetadata) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n    this.client.request('GetUserAttributeVerificationCode', {\n      AttributeName: attributeName,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      ClientMetadata: clientMetadata\n    }, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      if (typeof callback.inputVerificationCode === 'function') {\n        return callback.inputVerificationCode(data);\n      }\n      return callback.onSuccess();\n    });\n    return undefined;\n  }\n  /**\n   * This is used to confirm an attribute using a confirmation code\n   * @param {string} attributeName Attribute being confirmed.\n   * @param {string} confirmationCode Code entered by user.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */;\n\n  _proto.verifyAttribute = function verifyAttribute(attributeName, confirmationCode, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n    this.client.request('VerifyUserAttribute', {\n      AttributeName: attributeName,\n      Code: confirmationCode,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used to get the device information using the current device key\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<*>} callback.onSuccess Called on success with device data.\n   * @returns {void}\n   */;\n\n  _proto.getDevice = function getDevice(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n    this.client.request('GetDevice', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey\n    }, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess(data);\n    });\n    return undefined;\n  }\n  /**\n   * This is used to forget a specific device\n   * @param {string} deviceKey Device key.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */;\n\n  _proto.forgetSpecificDevice = function forgetSpecificDevice(deviceKey, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n    this.client.request('ForgetDevice', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: deviceKey\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used to forget the current device\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */;\n\n  _proto.forgetDevice = function forgetDevice(callback) {\n    var _this15 = this;\n    this.forgetSpecificDevice(this.deviceKey, {\n      onFailure: callback.onFailure,\n      onSuccess: function onSuccess(result) {\n        _this15.deviceKey = null;\n        _this15.deviceGroupKey = null;\n        _this15.randomPassword = null;\n        _this15.clearCachedDeviceKeyAndPassword();\n        return callback.onSuccess(result);\n      }\n    });\n  }\n  /**\n   * This is used to set the device status as remembered\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */;\n\n  _proto.setDeviceStatusRemembered = function setDeviceStatusRemembered(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n    this.client.request('UpdateDeviceStatus', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey,\n      DeviceRememberedStatus: 'remembered'\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used to set the device status as not remembered\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */;\n\n  _proto.setDeviceStatusNotRemembered = function setDeviceStatusNotRemembered(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n    this.client.request('UpdateDeviceStatus', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey,\n      DeviceRememberedStatus: 'not_remembered'\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used to list all devices for a user\n   *\n   * @param {int} limit the number of devices returned in a call\n   * @param {string | null} paginationToken the pagination token in case any was returned before\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<*>} callback.onSuccess Called on success with device list.\n   * @returns {void}\n   */;\n\n  _proto.listDevices = function listDevices(limit, paginationToken, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n    var requestParams = {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      Limit: limit\n    };\n    if (paginationToken) {\n      requestParams.PaginationToken = paginationToken;\n    }\n    this.client.request('ListDevices', requestParams, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess(data);\n    });\n    return undefined;\n  }\n  /**\n   * This is used to globally revoke all tokens issued to a user\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */;\n\n  _proto.globalSignOut = function globalSignOut(callback) {\n    var _this16 = this;\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n    this.client.request('GlobalSignOut', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      _this16.clearCachedUser();\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used for the user to signOut of the application and clear the cached tokens.\n   * @returns {void}\n   */;\n\n  _proto.signOut = function signOut() {\n    this.signInUserSession = null;\n    this.clearCachedUser();\n  }\n  /**\n   * This is used by a user trying to select a given MFA\n   * @param {string} answerChallenge the mfa the user wants\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */;\n\n  _proto.sendMFASelectionAnswer = function sendMFASelectionAnswer(answerChallenge, callback) {\n    var _this17 = this;\n    var challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.ANSWER = answerChallenge;\n    var jsonReq = {\n      ChallengeName: 'SELECT_MFA_TYPE',\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      _this17.Session = data.Session;\n      if (answerChallenge === 'SMS_MFA') {\n        return callback.mfaRequired(data.ChallengeName, data.ChallengeParameters);\n      }\n      if (answerChallenge === 'SOFTWARE_TOKEN_MFA') {\n        return callback.totpRequired(data.ChallengeName, data.ChallengeParameters);\n      }\n      return undefined;\n    });\n  }\n  /**\n   * This returns the user context data for advanced security feature.\n   * @returns {string} the user context data from CognitoUserPool\n   */;\n\n  _proto.getUserContextData = function getUserContextData() {\n    var pool = this.pool;\n    return pool.getUserContextData(this.username);\n  }\n  /**\n   * This is used by an authenticated or a user trying to authenticate to associate a TOTP MFA\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */;\n\n  _proto.associateSoftwareToken = function associateSoftwareToken(callback) {\n    var _this18 = this;\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      this.client.request('AssociateSoftwareToken', {\n        Session: this.Session\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n        _this18.Session = data.Session;\n        return callback.associateSecretCode(data.SecretCode);\n      });\n    } else {\n      this.client.request('AssociateSoftwareToken', {\n        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n        return callback.associateSecretCode(data.SecretCode);\n      });\n    }\n  }\n  /**\n   * This is used by an authenticated or a user trying to authenticate to verify a TOTP MFA\n   * @param {string} totpCode The MFA code entered by the user.\n   * @param {string} friendlyDeviceName The device name we are assigning to the device.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */;\n\n  _proto.verifySoftwareToken = function verifySoftwareToken(totpCode, friendlyDeviceName, callback) {\n    var _this19 = this;\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      this.client.request('VerifySoftwareToken', {\n        Session: this.Session,\n        UserCode: totpCode,\n        FriendlyDeviceName: friendlyDeviceName\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n        _this19.Session = data.Session;\n        var challengeResponses = {};\n        challengeResponses.USERNAME = _this19.username;\n        var jsonReq = {\n          ChallengeName: 'MFA_SETUP',\n          ClientId: _this19.pool.getClientId(),\n          ChallengeResponses: challengeResponses,\n          Session: _this19.Session\n        };\n        if (_this19.getUserContextData()) {\n          jsonReq.UserContextData = _this19.getUserContextData();\n        }\n        _this19.client.request('RespondToAuthChallenge', jsonReq, function (errRespond, dataRespond) {\n          if (errRespond) {\n            return callback.onFailure(errRespond);\n          }\n          _this19.signInUserSession = _this19.getCognitoUserSession(dataRespond.AuthenticationResult);\n          _this19.cacheTokens();\n          return callback.onSuccess(_this19.signInUserSession);\n        });\n        return undefined;\n      });\n    } else {\n      this.client.request('VerifySoftwareToken', {\n        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n        UserCode: totpCode,\n        FriendlyDeviceName: friendlyDeviceName\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n        return callback.onSuccess(data);\n      });\n    }\n  };\n  return CognitoUser;\n}();\nexport { CognitoUser as default };","map":{"version":3,"names":["Buffer","CryptoJS","TypedArrays","Base64","HmacSHA256","BigInteger","AuthenticationHelper","CognitoAccessToken","CognitoIdToken","CognitoRefreshToken","CognitoUserSession","DateHelper","CognitoUserAttribute","StorageHelper","isBrowser","navigator","userAgent","CognitoUser","data","Username","Pool","Error","username","pool","Session","client","signInUserSession","authenticationFlowType","storage","Storage","getStorage","keyPrefix","getClientId","userDataKey","_proto","prototype","setSignInUserSession","clearCachedUserData","cacheTokens","getSignInUserSession","getUsername","getAuthenticationFlowType","setAuthenticationFlowType","initiateAuth","authDetails","callback","_this","authParameters","getAuthParameters","USERNAME","clientMetaData","Object","keys","getValidationData","length","getClientMetadata","jsonReq","AuthFlow","ClientId","AuthParameters","ClientMetadata","getUserContextData","UserContextData","request","err","onFailure","challengeName","ChallengeName","challengeParameters","ChallengeParameters","customChallenge","getCognitoUserSession","AuthenticationResult","onSuccess","authenticateUser","authenticateUserPlainUsernamePassword","authenticateUserDefaultAuth","_this2","authenticationHelper","getUserPoolId","split","dateHelper","serverBValue","salt","deviceKey","DEVICE_KEY","getLargeAValue","errOnAValue","aValue","SRP_A","toString","CHALLENGE_NAME","USER_ID_FOR_SRP","SRP_B","SALT","getCachedDeviceKeyAndPassword","getPasswordAuthenticationKey","getPassword","errOnHkdf","hkdf","dateNow","getNowString","message","lib","WordArray","create","concat","from","SECRET_BLOCK","key","signatureString","stringify","challengeResponses","PASSWORD_CLAIM_SECRET_BLOCK","TIMESTAMP","PASSWORD_CLAIM_SIGNATURE","respondToAuthChallenge","challenge","challengeCallback","errChallenge","dataChallenge","code","toLowerCase","indexOf","randomPassword","deviceGroupKey","clearCachedDeviceKeyAndPassword","jsonReqResp","ChallengeResponses","errAuthenticate","dataAuthenticate","authenticateUserInternal","undefined","_this3","PASSWORD","authResult","_this4","mfaRequired","selectMFAType","mfaSetup","totpRequired","userAttributes","rawRequiredAttributes","requiredAttributes","userAttributesPrefix","getNewPasswordRequiredChallengeUserAttributePrefix","JSON","parse","i","substr","newPasswordRequired","getDeviceResponse","newDeviceMetadata","NewDeviceMetadata","generateHashDevice","DeviceGroupKey","DeviceKey","errGenHash","deviceSecretVerifierConfig","Salt","getSaltDevices","PasswordVerifier","getVerifierDevices","verifierDevices","getRandomPassword","AccessToken","getAccessToken","getJwtToken","DeviceSecretVerifierConfig","DeviceName","errConfirm","dataConfirm","cacheDeviceKeyAndPassword","UserConfirmationNecessary","completeNewPasswordChallenge","newPassword","requiredAttributeData","clientMetadata","_this5","finalUserAttributes","forEach","NEW_PASSWORD","_this6","errAValue","errHkdf","confirmRegistration","confirmationCode","forceAliasCreation","ConfirmationCode","ForceAliasCreation","sendCustomChallengeAnswer","answerChallenge","_this7","ANSWER","sendMFACode","mfaType","_this8","SMS_MFA_CODE","mfaTypeSelection","SOFTWARE_TOKEN_MFA_CODE","changePassword","oldUserPassword","newUserPassword","isValid","PreviousPassword","ProposedPassword","enableMFA","mfaOptions","mfaEnabled","DeliveryMedium","AttributeName","push","MFAOptions","setUserMfaPreference","smsMfaSettings","softwareTokenMfaSettings","SMSMfaSettings","SoftwareTokenMfaSettings","disableMFA","deleteUser","_this9","clearCachedUser","updateAttributes","attributes","_this10","UserAttributes","getUserData","bypassCache","getUserAttributes","userData","attributeList","attribute","Name","Value","userAttribute","getMFAOptions","createGetUserRequest","promisifyRequest","refreshSessionIfPossible","options","_this11","Promise","resolve","refresh","getRefreshToken","getToken","refreshSession","params","_this12","getUserDataFromCache","fetchUserData","then","isFetchUserDataAndTokenRequired","getItem","_ref","_ref$bypassCache","_this13","cacheUserData","deleteAttributes","UserAttributeNames","resendConfirmationCode","result","getSession","idTokenKey","accessTokenKey","refreshTokenKey","clockDriftKey","idToken","IdToken","accessToken","refreshToken","RefreshToken","clockDrift","parseInt","sessionData","ClockDrift","cachedSession","_this14","wrappedCallback","wrapRefreshSessionCallback","REFRESH_TOKEN","lastUserKey","deviceKeyKey","authenticationResult","hasOwnProperty","call","setItem","getIdToken","getClockDrift","removeItem","clearCachedTokens","randomPasswordKey","deviceGroupKeyKey","forgotPassword","inputVerificationCode","confirmPassword","Password","getAttributeVerificationCode","attributeName","verifyAttribute","Code","getDevice","forgetSpecificDevice","forgetDevice","_this15","setDeviceStatusRemembered","DeviceRememberedStatus","setDeviceStatusNotRemembered","listDevices","limit","paginationToken","requestParams","Limit","PaginationToken","globalSignOut","_this16","signOut","sendMFASelectionAnswer","_this17","associateSoftwareToken","_this18","associateSecretCode","SecretCode","verifySoftwareToken","totpCode","friendlyDeviceName","_this19","UserCode","FriendlyDeviceName","errRespond","dataRespond","default"],"sources":["/Users/ericli/node_modules/@aws-amplify/auth/node_modules/amazon-cognito-identity-js/es/CognitoUser.js"],"sourcesContent":["/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Buffer } from 'buffer';\nimport CryptoJS from 'crypto-js/core';\nimport TypedArrays from 'crypto-js/lib-typedarrays'; // necessary for crypto js\n\nimport Base64 from 'crypto-js/enc-base64';\nimport HmacSHA256 from 'crypto-js/hmac-sha256';\nimport BigInteger from './BigInteger';\nimport AuthenticationHelper from './AuthenticationHelper';\nimport CognitoAccessToken from './CognitoAccessToken';\nimport CognitoIdToken from './CognitoIdToken';\nimport CognitoRefreshToken from './CognitoRefreshToken';\nimport CognitoUserSession from './CognitoUserSession';\nimport DateHelper from './DateHelper';\nimport CognitoUserAttribute from './CognitoUserAttribute';\nimport StorageHelper from './StorageHelper';\n/**\n * @callback nodeCallback\n * @template T result\n * @param {*} err The operation failure reason, or null.\n * @param {T} result The operation result.\n */\n\n/**\n * @callback onFailure\n * @param {*} err Failure reason.\n */\n\n/**\n * @callback onSuccess\n * @template T result\n * @param {T} result The operation result.\n */\n\n/**\n * @callback mfaRequired\n * @param {*} details MFA challenge details.\n */\n\n/**\n * @callback customChallenge\n * @param {*} details Custom challenge details.\n */\n\n/**\n * @callback inputVerificationCode\n * @param {*} data Server response.\n */\n\n/**\n * @callback authSuccess\n * @param {CognitoUserSession} session The new session.\n * @param {bool=} userConfirmationNecessary User must be confirmed.\n */\n\nvar isBrowser = typeof navigator !== 'undefined';\nvar userAgent = isBrowser ? navigator.userAgent : 'nodejs';\n/** @class */\n\nvar CognitoUser = /*#__PURE__*/function () {\n  /**\n   * Constructs a new CognitoUser object\n   * @param {object} data Creation options\n   * @param {string} data.Username The user's username.\n   * @param {CognitoUserPool} data.Pool Pool containing the user.\n   * @param {object} data.Storage Optional storage object.\n   */\n  function CognitoUser(data) {\n    if (data == null || data.Username == null || data.Pool == null) {\n      throw new Error('Username and Pool information are required.');\n    }\n\n    this.username = data.Username || '';\n    this.pool = data.Pool;\n    this.Session = null;\n    this.client = data.Pool.client;\n    this.signInUserSession = null;\n    this.authenticationFlowType = 'USER_SRP_AUTH';\n    this.storage = data.Storage || new StorageHelper().getStorage();\n    this.keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId();\n    this.userDataKey = this.keyPrefix + \".\" + this.username + \".userData\";\n  }\n  /**\n   * Sets the session for this user\n   * @param {CognitoUserSession} signInUserSession the session\n   * @returns {void}\n   */\n\n\n  var _proto = CognitoUser.prototype;\n\n  _proto.setSignInUserSession = function setSignInUserSession(signInUserSession) {\n    this.clearCachedUserData();\n    this.signInUserSession = signInUserSession;\n    this.cacheTokens();\n  }\n  /**\n   * @returns {CognitoUserSession} the current session for this user\n   */\n  ;\n\n  _proto.getSignInUserSession = function getSignInUserSession() {\n    return this.signInUserSession;\n  }\n  /**\n   * @returns {string} the user's username\n   */\n  ;\n\n  _proto.getUsername = function getUsername() {\n    return this.username;\n  }\n  /**\n   * @returns {String} the authentication flow type\n   */\n  ;\n\n  _proto.getAuthenticationFlowType = function getAuthenticationFlowType() {\n    return this.authenticationFlowType;\n  }\n  /**\n   * sets authentication flow type\n   * @param {string} authenticationFlowType New value.\n   * @returns {void}\n   */\n  ;\n\n  _proto.setAuthenticationFlowType = function setAuthenticationFlowType(authenticationFlowType) {\n    this.authenticationFlowType = authenticationFlowType;\n  }\n  /**\n   * This is used for authenticating the user through the custom authentication flow.\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n  ;\n\n  _proto.initiateAuth = function initiateAuth(authDetails, callback) {\n    var _this = this;\n\n    var authParameters = authDetails.getAuthParameters();\n    authParameters.USERNAME = this.username;\n    var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n    var jsonReq = {\n      AuthFlow: 'CUSTOM_AUTH',\n      ClientId: this.pool.getClientId(),\n      AuthParameters: authParameters,\n      ClientMetadata: clientMetaData\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('InitiateAuth', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      var challengeName = data.ChallengeName;\n      var challengeParameters = data.ChallengeParameters;\n\n      if (challengeName === 'CUSTOM_CHALLENGE') {\n        _this.Session = data.Session;\n        return callback.customChallenge(challengeParameters);\n      }\n\n      _this.signInUserSession = _this.getCognitoUserSession(data.AuthenticationResult);\n\n      _this.cacheTokens();\n\n      return callback.onSuccess(_this.signInUserSession);\n    });\n  }\n  /**\n   * This is used for authenticating the user.\n   * stuff\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {newPasswordRequired} callback.newPasswordRequired new\n   *        password and any required attributes are required to continue\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n  ;\n\n  _proto.authenticateUser = function authenticateUser(authDetails, callback) {\n    if (this.authenticationFlowType === 'USER_PASSWORD_AUTH') {\n      return this.authenticateUserPlainUsernamePassword(authDetails, callback);\n    } else if (this.authenticationFlowType === 'USER_SRP_AUTH' || this.authenticationFlowType === 'CUSTOM_AUTH') {\n      return this.authenticateUserDefaultAuth(authDetails, callback);\n    }\n\n    return callback.onFailure(new Error('Authentication flow type is invalid.'));\n  }\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   * It calls the AuthenticationHelper for SRP related\n   * stuff\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {newPasswordRequired} callback.newPasswordRequired new\n   *        password and any required attributes are required to continue\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n  ;\n\n  _proto.authenticateUserDefaultAuth = function authenticateUserDefaultAuth(authDetails, callback) {\n    var _this2 = this;\n\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    var dateHelper = new DateHelper();\n    var serverBValue;\n    var salt;\n    var authParameters = {};\n\n    if (this.deviceKey != null) {\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n\n    authParameters.USERNAME = this.username;\n    authenticationHelper.getLargeAValue(function (errOnAValue, aValue) {\n      // getLargeAValue callback start\n      if (errOnAValue) {\n        callback.onFailure(errOnAValue);\n      }\n\n      authParameters.SRP_A = aValue.toString(16);\n\n      if (_this2.authenticationFlowType === 'CUSTOM_AUTH') {\n        authParameters.CHALLENGE_NAME = 'SRP_A';\n      }\n\n      var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n      var jsonReq = {\n        AuthFlow: _this2.authenticationFlowType,\n        ClientId: _this2.pool.getClientId(),\n        AuthParameters: authParameters,\n        ClientMetadata: clientMetaData\n      };\n\n      if (_this2.getUserContextData(_this2.username)) {\n        jsonReq.UserContextData = _this2.getUserContextData(_this2.username);\n      }\n\n      _this2.client.request('InitiateAuth', jsonReq, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        var challengeParameters = data.ChallengeParameters;\n        _this2.username = challengeParameters.USER_ID_FOR_SRP;\n        _this2.userDataKey = _this2.keyPrefix + \".\" + _this2.username + \".userData\";\n        serverBValue = new BigInteger(challengeParameters.SRP_B, 16);\n        salt = new BigInteger(challengeParameters.SALT, 16);\n\n        _this2.getCachedDeviceKeyAndPassword();\n\n        authenticationHelper.getPasswordAuthenticationKey(_this2.username, authDetails.getPassword(), serverBValue, salt, function (errOnHkdf, hkdf) {\n          // getPasswordAuthenticationKey callback start\n          if (errOnHkdf) {\n            callback.onFailure(errOnHkdf);\n          }\n\n          var dateNow = dateHelper.getNowString();\n          var message = CryptoJS.lib.WordArray.create(Buffer.concat([Buffer.from(_this2.pool.getUserPoolId().split('_')[1], 'utf8'), Buffer.from(_this2.username, 'utf8'), Buffer.from(challengeParameters.SECRET_BLOCK, 'base64'), Buffer.from(dateNow, 'utf8')]));\n          var key = CryptoJS.lib.WordArray.create(hkdf);\n          var signatureString = Base64.stringify(HmacSHA256(message, key));\n          var challengeResponses = {};\n          challengeResponses.USERNAME = _this2.username;\n          challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n          challengeResponses.TIMESTAMP = dateNow;\n          challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n\n          if (_this2.deviceKey != null) {\n            challengeResponses.DEVICE_KEY = _this2.deviceKey;\n          }\n\n          var respondToAuthChallenge = function respondToAuthChallenge(challenge, challengeCallback) {\n            return _this2.client.request('RespondToAuthChallenge', challenge, function (errChallenge, dataChallenge) {\n              if (errChallenge && errChallenge.code === 'ResourceNotFoundException' && errChallenge.message.toLowerCase().indexOf('device') !== -1) {\n                challengeResponses.DEVICE_KEY = null;\n                _this2.deviceKey = null;\n                _this2.randomPassword = null;\n                _this2.deviceGroupKey = null;\n\n                _this2.clearCachedDeviceKeyAndPassword();\n\n                return respondToAuthChallenge(challenge, challengeCallback);\n              }\n\n              return challengeCallback(errChallenge, dataChallenge);\n            });\n          };\n\n          var jsonReqResp = {\n            ChallengeName: 'PASSWORD_VERIFIER',\n            ClientId: _this2.pool.getClientId(),\n            ChallengeResponses: challengeResponses,\n            Session: data.Session,\n            ClientMetadata: clientMetaData\n          };\n\n          if (_this2.getUserContextData()) {\n            jsonReqResp.UserContextData = _this2.getUserContextData();\n          }\n\n          respondToAuthChallenge(jsonReqResp, function (errAuthenticate, dataAuthenticate) {\n            if (errAuthenticate) {\n              return callback.onFailure(errAuthenticate);\n            }\n\n            return _this2.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n          });\n          return undefined; // getPasswordAuthenticationKey callback end\n        });\n        return undefined;\n      }); // getLargeAValue callback end\n\n    });\n  }\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   * @param {AuthenticationDetails} authDetails Contains the authentication data.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n  ;\n\n  _proto.authenticateUserPlainUsernamePassword = function authenticateUserPlainUsernamePassword(authDetails, callback) {\n    var _this3 = this;\n\n    var authParameters = {};\n    authParameters.USERNAME = this.username;\n    authParameters.PASSWORD = authDetails.getPassword();\n\n    if (!authParameters.PASSWORD) {\n      callback.onFailure(new Error('PASSWORD parameter is required'));\n      return;\n    }\n\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    this.getCachedDeviceKeyAndPassword();\n\n    if (this.deviceKey != null) {\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n\n    var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n    var jsonReq = {\n      AuthFlow: 'USER_PASSWORD_AUTH',\n      ClientId: this.pool.getClientId(),\n      AuthParameters: authParameters,\n      ClientMetadata: clientMetaData\n    };\n\n    if (this.getUserContextData(this.username)) {\n      jsonReq.UserContextData = this.getUserContextData(this.username);\n    } // USER_PASSWORD_AUTH happens in a single round-trip: client sends userName and password,\n    // Cognito UserPools verifies password and returns tokens.\n\n\n    this.client.request('InitiateAuth', jsonReq, function (err, authResult) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return _this3.authenticateUserInternal(authResult, authenticationHelper, callback);\n    });\n  }\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   * @param {object} dataAuthenticate authentication data\n   * @param {object} authenticationHelper helper created\n   * @param {callback} callback passed on from caller\n   * @returns {void}\n   */\n  ;\n\n  _proto.authenticateUserInternal = function authenticateUserInternal(dataAuthenticate, authenticationHelper, callback) {\n    var _this4 = this;\n\n    var challengeName = dataAuthenticate.ChallengeName;\n    var challengeParameters = dataAuthenticate.ChallengeParameters;\n\n    if (challengeName === 'SMS_MFA') {\n      this.Session = dataAuthenticate.Session;\n      return callback.mfaRequired(challengeName, challengeParameters);\n    }\n\n    if (challengeName === 'SELECT_MFA_TYPE') {\n      this.Session = dataAuthenticate.Session;\n      return callback.selectMFAType(challengeName, challengeParameters);\n    }\n\n    if (challengeName === 'MFA_SETUP') {\n      this.Session = dataAuthenticate.Session;\n      return callback.mfaSetup(challengeName, challengeParameters);\n    }\n\n    if (challengeName === 'SOFTWARE_TOKEN_MFA') {\n      this.Session = dataAuthenticate.Session;\n      return callback.totpRequired(challengeName, challengeParameters);\n    }\n\n    if (challengeName === 'CUSTOM_CHALLENGE') {\n      this.Session = dataAuthenticate.Session;\n      return callback.customChallenge(challengeParameters);\n    }\n\n    if (challengeName === 'NEW_PASSWORD_REQUIRED') {\n      this.Session = dataAuthenticate.Session;\n      var userAttributes = null;\n      var rawRequiredAttributes = null;\n      var requiredAttributes = [];\n      var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();\n\n      if (challengeParameters) {\n        userAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.userAttributes);\n        rawRequiredAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.requiredAttributes);\n      }\n\n      if (rawRequiredAttributes) {\n        for (var i = 0; i < rawRequiredAttributes.length; i++) {\n          requiredAttributes[i] = rawRequiredAttributes[i].substr(userAttributesPrefix.length);\n        }\n      }\n\n      return callback.newPasswordRequired(userAttributes, requiredAttributes);\n    }\n\n    if (challengeName === 'DEVICE_SRP_AUTH') {\n      this.getDeviceResponse(callback);\n      return undefined;\n    }\n\n    this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n    this.challengeName = challengeName;\n    this.cacheTokens();\n    var newDeviceMetadata = dataAuthenticate.AuthenticationResult.NewDeviceMetadata;\n\n    if (newDeviceMetadata == null) {\n      return callback.onSuccess(this.signInUserSession);\n    }\n\n    authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function (errGenHash) {\n      if (errGenHash) {\n        return callback.onFailure(errGenHash);\n      }\n\n      var deviceSecretVerifierConfig = {\n        Salt: Buffer.from(authenticationHelper.getSaltDevices(), 'hex').toString('base64'),\n        PasswordVerifier: Buffer.from(authenticationHelper.getVerifierDevices(), 'hex').toString('base64')\n      };\n      _this4.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;\n      _this4.deviceGroupKey = newDeviceMetadata.DeviceGroupKey;\n      _this4.randomPassword = authenticationHelper.getRandomPassword();\n\n      _this4.client.request('ConfirmDevice', {\n        DeviceKey: newDeviceMetadata.DeviceKey,\n        AccessToken: _this4.signInUserSession.getAccessToken().getJwtToken(),\n        DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n        DeviceName: userAgent\n      }, function (errConfirm, dataConfirm) {\n        if (errConfirm) {\n          return callback.onFailure(errConfirm);\n        }\n\n        _this4.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n\n        _this4.cacheDeviceKeyAndPassword();\n\n        if (dataConfirm.UserConfirmationNecessary === true) {\n          return callback.onSuccess(_this4.signInUserSession, dataConfirm.UserConfirmationNecessary);\n        }\n\n        return callback.onSuccess(_this4.signInUserSession);\n      });\n\n      return undefined;\n    });\n    return undefined;\n  }\n  /**\n   * This method is user to complete the NEW_PASSWORD_REQUIRED challenge.\n   * Pass the new password with any new user attributes to be updated.\n   * User attribute keys must be of format userAttributes.<attribute_name>.\n   * @param {string} newPassword new password for this user\n   * @param {object} requiredAttributeData map with values for all required attributes\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {mfaRequired} callback.mfaRequired MFA code required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *         response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.completeNewPasswordChallenge = function completeNewPasswordChallenge(newPassword, requiredAttributeData, callback, clientMetadata) {\n    var _this5 = this;\n\n    if (!newPassword) {\n      return callback.onFailure(new Error('New password is required.'));\n    }\n\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();\n    var finalUserAttributes = {};\n\n    if (requiredAttributeData) {\n      Object.keys(requiredAttributeData).forEach(function (key) {\n        finalUserAttributes[userAttributesPrefix + key] = requiredAttributeData[key];\n      });\n    }\n\n    finalUserAttributes.NEW_PASSWORD = newPassword;\n    finalUserAttributes.USERNAME = this.username;\n    var jsonReq = {\n      ChallengeName: 'NEW_PASSWORD_REQUIRED',\n      ClientId: this.pool.getClientId(),\n      ChallengeResponses: finalUserAttributes,\n      Session: this.Session,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('RespondToAuthChallenge', jsonReq, function (errAuthenticate, dataAuthenticate) {\n      if (errAuthenticate) {\n        return callback.onFailure(errAuthenticate);\n      }\n\n      return _this5.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n    });\n    return undefined;\n  }\n  /**\n   * This is used to get a session using device authentication. It is called at the end of user\n   * authentication\n   *\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   * @private\n   */\n  ;\n\n  _proto.getDeviceResponse = function getDeviceResponse(callback, clientMetadata) {\n    var _this6 = this;\n\n    var authenticationHelper = new AuthenticationHelper(this.deviceGroupKey);\n    var dateHelper = new DateHelper();\n    var authParameters = {};\n    authParameters.USERNAME = this.username;\n    authParameters.DEVICE_KEY = this.deviceKey;\n    authenticationHelper.getLargeAValue(function (errAValue, aValue) {\n      // getLargeAValue callback start\n      if (errAValue) {\n        callback.onFailure(errAValue);\n      }\n\n      authParameters.SRP_A = aValue.toString(16);\n      var jsonReq = {\n        ChallengeName: 'DEVICE_SRP_AUTH',\n        ClientId: _this6.pool.getClientId(),\n        ChallengeResponses: authParameters,\n        ClientMetadata: clientMetadata\n      };\n\n      if (_this6.getUserContextData()) {\n        jsonReq.UserContextData = _this6.getUserContextData();\n      }\n\n      _this6.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        var challengeParameters = data.ChallengeParameters;\n        var serverBValue = new BigInteger(challengeParameters.SRP_B, 16);\n        var salt = new BigInteger(challengeParameters.SALT, 16);\n        authenticationHelper.getPasswordAuthenticationKey(_this6.deviceKey, _this6.randomPassword, serverBValue, salt, function (errHkdf, hkdf) {\n          // getPasswordAuthenticationKey callback start\n          if (errHkdf) {\n            return callback.onFailure(errHkdf);\n          }\n\n          var dateNow = dateHelper.getNowString();\n          var message = CryptoJS.lib.WordArray.create(Buffer.concat([Buffer.from(_this6.deviceGroupKey, 'utf8'), Buffer.from(_this6.deviceKey, 'utf8'), Buffer.from(challengeParameters.SECRET_BLOCK, 'base64'), Buffer.from(dateNow, 'utf8')]));\n          var key = CryptoJS.lib.WordArray.create(hkdf);\n          var signatureString = Base64.stringify(HmacSHA256(message, key));\n          var challengeResponses = {};\n          challengeResponses.USERNAME = _this6.username;\n          challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n          challengeResponses.TIMESTAMP = dateNow;\n          challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n          challengeResponses.DEVICE_KEY = _this6.deviceKey;\n          var jsonReqResp = {\n            ChallengeName: 'DEVICE_PASSWORD_VERIFIER',\n            ClientId: _this6.pool.getClientId(),\n            ChallengeResponses: challengeResponses,\n            Session: data.Session\n          };\n\n          if (_this6.getUserContextData()) {\n            jsonReqResp.UserContextData = _this6.getUserContextData();\n          }\n\n          _this6.client.request('RespondToAuthChallenge', jsonReqResp, function (errAuthenticate, dataAuthenticate) {\n            if (errAuthenticate) {\n              return callback.onFailure(errAuthenticate);\n            }\n\n            _this6.signInUserSession = _this6.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n\n            _this6.cacheTokens();\n\n            return callback.onSuccess(_this6.signInUserSession);\n          });\n\n          return undefined; // getPasswordAuthenticationKey callback end\n        });\n        return undefined;\n      }); // getLargeAValue callback end\n\n    });\n  }\n  /**\n   * This is used for a certain user to confirm the registration by using a confirmation code\n   * @param {string} confirmationCode Code entered by user.\n   * @param {bool} forceAliasCreation Allow migrating from an existing email / phone number.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.confirmRegistration = function confirmRegistration(confirmationCode, forceAliasCreation, callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      ConfirmationCode: confirmationCode,\n      Username: this.username,\n      ForceAliasCreation: forceAliasCreation,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('ConfirmSignUp', jsonReq, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n  }\n  /**\n   * This is used by the user once he has the responses to a custom challenge\n   * @param {string} answerChallenge The custom challenge answer.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {customChallenge} callback.customChallenge\n   *    Custom challenge response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.sendCustomChallengeAnswer = function sendCustomChallengeAnswer(answerChallenge, callback, clientMetadata) {\n    var _this7 = this;\n\n    var challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.ANSWER = answerChallenge;\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    this.getCachedDeviceKeyAndPassword();\n\n    if (this.deviceKey != null) {\n      challengeResponses.DEVICE_KEY = this.deviceKey;\n    }\n\n    var jsonReq = {\n      ChallengeName: 'CUSTOM_CHALLENGE',\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return _this7.authenticateUserInternal(data, authenticationHelper, callback);\n    });\n  }\n  /**\n   * This is used by the user once he has an MFA code\n   * @param {string} confirmationCode The MFA code entered by the user.\n   * @param {object} callback Result callback map.\n   * @param {string} mfaType The mfa we are replying to.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.sendMFACode = function sendMFACode(confirmationCode, callback, mfaType, clientMetadata) {\n    var _this8 = this;\n\n    var challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.SMS_MFA_CODE = confirmationCode;\n    var mfaTypeSelection = mfaType || 'SMS_MFA';\n\n    if (mfaTypeSelection === 'SOFTWARE_TOKEN_MFA') {\n      challengeResponses.SOFTWARE_TOKEN_MFA_CODE = confirmationCode;\n    }\n\n    if (this.deviceKey != null) {\n      challengeResponses.DEVICE_KEY = this.deviceKey;\n    }\n\n    var jsonReq = {\n      ChallengeName: mfaTypeSelection,\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('RespondToAuthChallenge', jsonReq, function (err, dataAuthenticate) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      var challengeName = dataAuthenticate.ChallengeName;\n\n      if (challengeName === 'DEVICE_SRP_AUTH') {\n        _this8.getDeviceResponse(callback);\n\n        return undefined;\n      }\n\n      _this8.signInUserSession = _this8.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n\n      _this8.cacheTokens();\n\n      if (dataAuthenticate.AuthenticationResult.NewDeviceMetadata == null) {\n        return callback.onSuccess(_this8.signInUserSession);\n      }\n\n      var authenticationHelper = new AuthenticationHelper(_this8.pool.getUserPoolId().split('_')[1]);\n      authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function (errGenHash) {\n        if (errGenHash) {\n          return callback.onFailure(errGenHash);\n        }\n\n        var deviceSecretVerifierConfig = {\n          Salt: Buffer.from(authenticationHelper.getSaltDevices(), 'hex').toString('base64'),\n          PasswordVerifier: Buffer.from(authenticationHelper.getVerifierDevices(), 'hex').toString('base64')\n        };\n        _this8.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;\n        _this8.deviceGroupKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey;\n        _this8.randomPassword = authenticationHelper.getRandomPassword();\n\n        _this8.client.request('ConfirmDevice', {\n          DeviceKey: dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey,\n          AccessToken: _this8.signInUserSession.getAccessToken().getJwtToken(),\n          DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n          DeviceName: userAgent\n        }, function (errConfirm, dataConfirm) {\n          if (errConfirm) {\n            return callback.onFailure(errConfirm);\n          }\n\n          _this8.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n\n          _this8.cacheDeviceKeyAndPassword();\n\n          if (dataConfirm.UserConfirmationNecessary === true) {\n            return callback.onSuccess(_this8.signInUserSession, dataConfirm.UserConfirmationNecessary);\n          }\n\n          return callback.onSuccess(_this8.signInUserSession);\n        });\n\n        return undefined;\n      });\n      return undefined;\n    });\n  }\n  /**\n   * This is used by an authenticated user to change the current password\n   * @param {string} oldUserPassword The current password.\n   * @param {string} newUserPassword The requested new password.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.changePassword = function changePassword(oldUserPassword, newUserPassword, callback, clientMetadata) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('ChangePassword', {\n      PreviousPassword: oldUserPassword,\n      ProposedPassword: newUserPassword,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      ClientMetadata: clientMetadata\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used by an authenticated user to enable MFA for itself\n   * @deprecated\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.enableMFA = function enableMFA(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    var mfaOptions = [];\n    var mfaEnabled = {\n      DeliveryMedium: 'SMS',\n      AttributeName: 'phone_number'\n    };\n    mfaOptions.push(mfaEnabled);\n    this.client.request('SetUserSettings', {\n      MFAOptions: mfaOptions,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used by an authenticated user to enable MFA for itself\n   * @param {IMfaSettings} smsMfaSettings the sms mfa settings\n   * @param {IMFASettings} softwareTokenMfaSettings the software token mfa settings\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.setUserMfaPreference = function setUserMfaPreference(smsMfaSettings, softwareTokenMfaSettings, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('SetUserMFAPreference', {\n      SMSMfaSettings: smsMfaSettings,\n      SoftwareTokenMfaSettings: softwareTokenMfaSettings,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used by an authenticated user to disable MFA for itself\n   * @deprecated\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.disableMFA = function disableMFA(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    var mfaOptions = [];\n    this.client.request('SetUserSettings', {\n      MFAOptions: mfaOptions,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used by an authenticated user to delete itself\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.deleteUser = function deleteUser(callback, clientMetadata) {\n    var _this9 = this;\n\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('DeleteUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      ClientMetadata: clientMetadata\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      _this9.clearCachedUser();\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * @typedef {CognitoUserAttribute | { Name:string, Value:string }} AttributeArg\n   */\n\n  /**\n   * This is used by an authenticated user to change a list of attributes\n   * @param {AttributeArg[]} attributes A list of the new user attributes.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.updateAttributes = function updateAttributes(attributes, callback, clientMetadata) {\n    var _this10 = this;\n\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('UpdateUserAttributes', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      UserAttributes: attributes,\n      ClientMetadata: clientMetadata\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      } // update cached user\n\n\n      return _this10.getUserData(function () {\n        return callback(null, 'SUCCESS');\n      }, {\n        bypassCache: true\n      });\n    });\n    return undefined;\n  }\n  /**\n   * This is used by an authenticated user to get a list of attributes\n   * @param {nodeCallback<CognitoUserAttribute[]>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.getUserAttributes = function getUserAttributes(callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('GetUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err, userData) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      var attributeList = [];\n\n      for (var i = 0; i < userData.UserAttributes.length; i++) {\n        var attribute = {\n          Name: userData.UserAttributes[i].Name,\n          Value: userData.UserAttributes[i].Value\n        };\n        var userAttribute = new CognitoUserAttribute(attribute);\n        attributeList.push(userAttribute);\n      }\n\n      return callback(null, attributeList);\n    });\n    return undefined;\n  }\n  /**\n   * This was previously used by an authenticated user to get MFAOptions,\n   * but no longer returns a meaningful response. Refer to the documentation for\n   * how to setup and use MFA: https://docs.amplify.aws/lib/auth/mfa/q/platform/js\n   * @deprecated\n   * @param {nodeCallback<MFAOptions>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.getMFAOptions = function getMFAOptions(callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('GetUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err, userData) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, userData.MFAOptions);\n    });\n    return undefined;\n  }\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   */\n  ;\n\n  _proto.createGetUserRequest = function createGetUserRequest() {\n    return this.client.promisifyRequest('GetUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    });\n  }\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   */\n  ;\n\n  _proto.refreshSessionIfPossible = function refreshSessionIfPossible(options) {\n    var _this11 = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    // best effort, if not possible\n    return new Promise(function (resolve) {\n      var refresh = _this11.signInUserSession.getRefreshToken();\n\n      if (refresh && refresh.getToken()) {\n        _this11.refreshSession(refresh, resolve, options.clientMetadata);\n      } else {\n        resolve();\n      }\n    });\n  }\n  /**\n   * @typedef {Object} GetUserDataOptions\n   * @property {boolean} bypassCache - force getting data from Cognito service\n   * @property {Record<string, string>} clientMetadata - clientMetadata for getSession\n   */\n\n  /**\n   * This is used by an authenticated users to get the userData\n   * @param {nodeCallback<UserData>} callback Called on success or error.\n   * @param {GetUserDataOptions} params\n   * @returns {void}\n   */\n  ;\n\n  _proto.getUserData = function getUserData(callback, params) {\n    var _this12 = this;\n\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      this.clearCachedUserData();\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    var userData = this.getUserDataFromCache();\n\n    if (!userData) {\n      this.fetchUserData().then(function (data) {\n        callback(null, data);\n      })[\"catch\"](callback);\n      return;\n    }\n\n    if (this.isFetchUserDataAndTokenRequired(params)) {\n      this.fetchUserData().then(function (data) {\n        return _this12.refreshSessionIfPossible(params).then(function () {\n          return data;\n        });\n      }).then(function (data) {\n        return callback(null, data);\n      })[\"catch\"](callback);\n      return;\n    }\n\n    try {\n      callback(null, JSON.parse(userData));\n      return;\n    } catch (err) {\n      this.clearCachedUserData();\n      callback(err, null);\n      return;\n    }\n  }\n  /**\n   *\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   */\n  ;\n\n  _proto.getUserDataFromCache = function getUserDataFromCache() {\n    var userData = this.storage.getItem(this.userDataKey);\n    return userData;\n  }\n  /**\n   *\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   */\n  ;\n\n  _proto.isFetchUserDataAndTokenRequired = function isFetchUserDataAndTokenRequired(params) {\n    var _ref = params || {},\n        _ref$bypassCache = _ref.bypassCache,\n        bypassCache = _ref$bypassCache === void 0 ? false : _ref$bypassCache;\n\n    return bypassCache;\n  }\n  /**\n   *\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   */\n  ;\n\n  _proto.fetchUserData = function fetchUserData() {\n    var _this13 = this;\n\n    return this.createGetUserRequest().then(function (data) {\n      _this13.cacheUserData(data);\n\n      return data;\n    });\n  }\n  /**\n   * This is used by an authenticated user to delete a list of attributes\n   * @param {string[]} attributeList Names of the attributes to delete.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.deleteAttributes = function deleteAttributes(attributeList, callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('DeleteUserAttributes', {\n      UserAttributeNames: attributeList,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used by a user to resend a confirmation code\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.resendConfirmationCode = function resendConfirmationCode(callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n      ClientMetadata: clientMetadata\n    };\n    this.client.request('ResendConfirmationCode', jsonReq, function (err, result) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, result);\n    });\n  }\n  /**\n   * @typedef {Object} GetSessionOptions\n   * @property {Record<string, string>} clientMetadata - clientMetadata for getSession\n   */\n\n  /**\n   * This is used to get a session, either from the session object\n   * or from  the local storage, or by using a refresh token\n   *\n   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n   * @param {GetSessionOptions} options\n   * @returns {void}\n   */\n  ;\n\n  _proto.getSession = function getSession(callback, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (this.username == null) {\n      return callback(new Error('Username is null. Cannot retrieve a new session'), null);\n    }\n\n    if (this.signInUserSession != null && this.signInUserSession.isValid()) {\n      return callback(null, this.signInUserSession);\n    }\n\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId() + \".\" + this.username;\n    var idTokenKey = keyPrefix + \".idToken\";\n    var accessTokenKey = keyPrefix + \".accessToken\";\n    var refreshTokenKey = keyPrefix + \".refreshToken\";\n    var clockDriftKey = keyPrefix + \".clockDrift\";\n\n    if (this.storage.getItem(idTokenKey)) {\n      var idToken = new CognitoIdToken({\n        IdToken: this.storage.getItem(idTokenKey)\n      });\n      var accessToken = new CognitoAccessToken({\n        AccessToken: this.storage.getItem(accessTokenKey)\n      });\n      var refreshToken = new CognitoRefreshToken({\n        RefreshToken: this.storage.getItem(refreshTokenKey)\n      });\n      var clockDrift = parseInt(this.storage.getItem(clockDriftKey), 0) || 0;\n      var sessionData = {\n        IdToken: idToken,\n        AccessToken: accessToken,\n        RefreshToken: refreshToken,\n        ClockDrift: clockDrift\n      };\n      var cachedSession = new CognitoUserSession(sessionData);\n\n      if (cachedSession.isValid()) {\n        this.signInUserSession = cachedSession;\n        return callback(null, this.signInUserSession);\n      }\n\n      if (!refreshToken.getToken()) {\n        return callback(new Error('Cannot retrieve a new session. Please authenticate.'), null);\n      }\n\n      this.refreshSession(refreshToken, callback, options.clientMetadata);\n    } else {\n      callback(new Error('Local storage is missing an ID Token, Please authenticate'), null);\n    }\n\n    return undefined;\n  }\n  /**\n   * This uses the refreshToken to retrieve a new session\n   * @param {CognitoRefreshToken} refreshToken A previous session's refresh token.\n   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.refreshSession = function refreshSession(refreshToken, callback, clientMetadata) {\n    var _this14 = this;\n\n    var wrappedCallback = this.pool.wrapRefreshSessionCallback ? this.pool.wrapRefreshSessionCallback(callback) : callback;\n    var authParameters = {};\n    authParameters.REFRESH_TOKEN = refreshToken.getToken();\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId();\n    var lastUserKey = keyPrefix + \".LastAuthUser\";\n\n    if (this.storage.getItem(lastUserKey)) {\n      this.username = this.storage.getItem(lastUserKey);\n      var deviceKeyKey = keyPrefix + \".\" + this.username + \".deviceKey\";\n      this.deviceKey = this.storage.getItem(deviceKeyKey);\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      AuthFlow: 'REFRESH_TOKEN_AUTH',\n      AuthParameters: authParameters,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('InitiateAuth', jsonReq, function (err, authResult) {\n      if (err) {\n        if (err.code === 'NotAuthorizedException') {\n          _this14.clearCachedUser();\n        }\n\n        return wrappedCallback(err, null);\n      }\n\n      if (authResult) {\n        var authenticationResult = authResult.AuthenticationResult;\n\n        if (!Object.prototype.hasOwnProperty.call(authenticationResult, 'RefreshToken')) {\n          authenticationResult.RefreshToken = refreshToken.getToken();\n        }\n\n        _this14.signInUserSession = _this14.getCognitoUserSession(authenticationResult);\n\n        _this14.cacheTokens();\n\n        return wrappedCallback(null, _this14.signInUserSession);\n      }\n\n      return undefined;\n    });\n  }\n  /**\n   * This is used to save the session tokens to local storage\n   * @returns {void}\n   */\n  ;\n\n  _proto.cacheTokens = function cacheTokens() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId();\n    var idTokenKey = keyPrefix + \".\" + this.username + \".idToken\";\n    var accessTokenKey = keyPrefix + \".\" + this.username + \".accessToken\";\n    var refreshTokenKey = keyPrefix + \".\" + this.username + \".refreshToken\";\n    var clockDriftKey = keyPrefix + \".\" + this.username + \".clockDrift\";\n    var lastUserKey = keyPrefix + \".LastAuthUser\";\n    this.storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());\n    this.storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());\n    this.storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());\n    this.storage.setItem(clockDriftKey, \"\" + this.signInUserSession.getClockDrift());\n    this.storage.setItem(lastUserKey, this.username);\n  }\n  /**\n   * This is to cache user data\n   */\n  ;\n\n  _proto.cacheUserData = function cacheUserData(userData) {\n    this.storage.setItem(this.userDataKey, JSON.stringify(userData));\n  }\n  /**\n   * This is to remove cached user data\n   */\n  ;\n\n  _proto.clearCachedUserData = function clearCachedUserData() {\n    this.storage.removeItem(this.userDataKey);\n  };\n\n  _proto.clearCachedUser = function clearCachedUser() {\n    this.clearCachedTokens();\n    this.clearCachedUserData();\n  }\n  /**\n   * This is used to cache the device key and device group and device password\n   * @returns {void}\n   */\n  ;\n\n  _proto.cacheDeviceKeyAndPassword = function cacheDeviceKeyAndPassword() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId() + \".\" + this.username;\n    var deviceKeyKey = keyPrefix + \".deviceKey\";\n    var randomPasswordKey = keyPrefix + \".randomPasswordKey\";\n    var deviceGroupKeyKey = keyPrefix + \".deviceGroupKey\";\n    this.storage.setItem(deviceKeyKey, this.deviceKey);\n    this.storage.setItem(randomPasswordKey, this.randomPassword);\n    this.storage.setItem(deviceGroupKeyKey, this.deviceGroupKey);\n  }\n  /**\n   * This is used to get current device key and device group and device password\n   * @returns {void}\n   */\n  ;\n\n  _proto.getCachedDeviceKeyAndPassword = function getCachedDeviceKeyAndPassword() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId() + \".\" + this.username;\n    var deviceKeyKey = keyPrefix + \".deviceKey\";\n    var randomPasswordKey = keyPrefix + \".randomPasswordKey\";\n    var deviceGroupKeyKey = keyPrefix + \".deviceGroupKey\";\n\n    if (this.storage.getItem(deviceKeyKey)) {\n      this.deviceKey = this.storage.getItem(deviceKeyKey);\n      this.randomPassword = this.storage.getItem(randomPasswordKey);\n      this.deviceGroupKey = this.storage.getItem(deviceGroupKeyKey);\n    }\n  }\n  /**\n   * This is used to clear the device key info from local storage\n   * @returns {void}\n   */\n  ;\n\n  _proto.clearCachedDeviceKeyAndPassword = function clearCachedDeviceKeyAndPassword() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId() + \".\" + this.username;\n    var deviceKeyKey = keyPrefix + \".deviceKey\";\n    var randomPasswordKey = keyPrefix + \".randomPasswordKey\";\n    var deviceGroupKeyKey = keyPrefix + \".deviceGroupKey\";\n    this.storage.removeItem(deviceKeyKey);\n    this.storage.removeItem(randomPasswordKey);\n    this.storage.removeItem(deviceGroupKeyKey);\n  }\n  /**\n   * This is used to clear the session tokens from local storage\n   * @returns {void}\n   */\n  ;\n\n  _proto.clearCachedTokens = function clearCachedTokens() {\n    var keyPrefix = \"CognitoIdentityServiceProvider.\" + this.pool.getClientId();\n    var idTokenKey = keyPrefix + \".\" + this.username + \".idToken\";\n    var accessTokenKey = keyPrefix + \".\" + this.username + \".accessToken\";\n    var refreshTokenKey = keyPrefix + \".\" + this.username + \".refreshToken\";\n    var lastUserKey = keyPrefix + \".LastAuthUser\";\n    var clockDriftKey = keyPrefix + \".\" + this.username + \".clockDrift\";\n    this.storage.removeItem(idTokenKey);\n    this.storage.removeItem(accessTokenKey);\n    this.storage.removeItem(refreshTokenKey);\n    this.storage.removeItem(lastUserKey);\n    this.storage.removeItem(clockDriftKey);\n  }\n  /**\n   * This is used to build a user session from tokens retrieved in the authentication result\n   * @param {object} authResult Successful auth response from server.\n   * @returns {CognitoUserSession} The new user session.\n   * @private\n   */\n  ;\n\n  _proto.getCognitoUserSession = function getCognitoUserSession(authResult) {\n    var idToken = new CognitoIdToken(authResult);\n    var accessToken = new CognitoAccessToken(authResult);\n    var refreshToken = new CognitoRefreshToken(authResult);\n    var sessionData = {\n      IdToken: idToken,\n      AccessToken: accessToken,\n      RefreshToken: refreshToken\n    };\n    return new CognitoUserSession(sessionData);\n  }\n  /**\n   * This is used to initiate a forgot password request\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {inputVerificationCode?} callback.inputVerificationCode\n   *    Optional callback raised instead of onSuccess with response data.\n   * @param {onSuccess} callback.onSuccess Called on success.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.forgotPassword = function forgotPassword(callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('ForgotPassword', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      if (typeof callback.inputVerificationCode === 'function') {\n        return callback.inputVerificationCode(data);\n      }\n\n      return callback.onSuccess(data);\n    });\n  }\n  /**\n   * This is used to confirm a new password using a confirmationCode\n   * @param {string} confirmationCode Code entered by user.\n   * @param {string} newPassword Confirm new password.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<void>} callback.onSuccess Called on success.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.confirmPassword = function confirmPassword(confirmationCode, newPassword, callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n      ConfirmationCode: confirmationCode,\n      Password: newPassword,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('ConfirmForgotPassword', jsonReq, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess();\n    });\n  }\n  /**\n   * This is used to initiate an attribute confirmation request\n   * @param {string} attributeName User attribute that needs confirmation.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {inputVerificationCode} callback.inputVerificationCode Called on success.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n  ;\n\n  _proto.getAttributeVerificationCode = function getAttributeVerificationCode(attributeName, callback, clientMetadata) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('GetUserAttributeVerificationCode', {\n      AttributeName: attributeName,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      ClientMetadata: clientMetadata\n    }, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      if (typeof callback.inputVerificationCode === 'function') {\n        return callback.inputVerificationCode(data);\n      }\n\n      return callback.onSuccess();\n    });\n    return undefined;\n  }\n  /**\n   * This is used to confirm an attribute using a confirmation code\n   * @param {string} attributeName Attribute being confirmed.\n   * @param {string} confirmationCode Code entered by user.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  ;\n\n  _proto.verifyAttribute = function verifyAttribute(attributeName, confirmationCode, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('VerifyUserAttribute', {\n      AttributeName: attributeName,\n      Code: confirmationCode,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used to get the device information using the current device key\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<*>} callback.onSuccess Called on success with device data.\n   * @returns {void}\n   */\n  ;\n\n  _proto.getDevice = function getDevice(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('GetDevice', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey\n    }, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess(data);\n    });\n    return undefined;\n  }\n  /**\n   * This is used to forget a specific device\n   * @param {string} deviceKey Device key.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  ;\n\n  _proto.forgetSpecificDevice = function forgetSpecificDevice(deviceKey, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('ForgetDevice', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: deviceKey\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used to forget the current device\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  ;\n\n  _proto.forgetDevice = function forgetDevice(callback) {\n    var _this15 = this;\n\n    this.forgetSpecificDevice(this.deviceKey, {\n      onFailure: callback.onFailure,\n      onSuccess: function onSuccess(result) {\n        _this15.deviceKey = null;\n        _this15.deviceGroupKey = null;\n        _this15.randomPassword = null;\n\n        _this15.clearCachedDeviceKeyAndPassword();\n\n        return callback.onSuccess(result);\n      }\n    });\n  }\n  /**\n   * This is used to set the device status as remembered\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  ;\n\n  _proto.setDeviceStatusRemembered = function setDeviceStatusRemembered(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('UpdateDeviceStatus', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey,\n      DeviceRememberedStatus: 'remembered'\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used to set the device status as not remembered\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  ;\n\n  _proto.setDeviceStatusNotRemembered = function setDeviceStatusNotRemembered(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('UpdateDeviceStatus', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey,\n      DeviceRememberedStatus: 'not_remembered'\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used to list all devices for a user\n   *\n   * @param {int} limit the number of devices returned in a call\n   * @param {string | null} paginationToken the pagination token in case any was returned before\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<*>} callback.onSuccess Called on success with device list.\n   * @returns {void}\n   */\n  ;\n\n  _proto.listDevices = function listDevices(limit, paginationToken, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    var requestParams = {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      Limit: limit\n    };\n\n    if (paginationToken) {\n      requestParams.PaginationToken = paginationToken;\n    }\n\n    this.client.request('ListDevices', requestParams, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess(data);\n    });\n    return undefined;\n  }\n  /**\n   * This is used to globally revoke all tokens issued to a user\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n  ;\n\n  _proto.globalSignOut = function globalSignOut(callback) {\n    var _this16 = this;\n\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('GlobalSignOut', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      _this16.clearCachedUser();\n\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  }\n  /**\n   * This is used for the user to signOut of the application and clear the cached tokens.\n   * @returns {void}\n   */\n  ;\n\n  _proto.signOut = function signOut() {\n    this.signInUserSession = null;\n    this.clearCachedUser();\n  }\n  /**\n   * This is used by a user trying to select a given MFA\n   * @param {string} answerChallenge the mfa the user wants\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.sendMFASelectionAnswer = function sendMFASelectionAnswer(answerChallenge, callback) {\n    var _this17 = this;\n\n    var challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.ANSWER = answerChallenge;\n    var jsonReq = {\n      ChallengeName: 'SELECT_MFA_TYPE',\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      _this17.Session = data.Session;\n\n      if (answerChallenge === 'SMS_MFA') {\n        return callback.mfaRequired(data.ChallengeName, data.ChallengeParameters);\n      }\n\n      if (answerChallenge === 'SOFTWARE_TOKEN_MFA') {\n        return callback.totpRequired(data.ChallengeName, data.ChallengeParameters);\n      }\n\n      return undefined;\n    });\n  }\n  /**\n   * This returns the user context data for advanced security feature.\n   * @returns {string} the user context data from CognitoUserPool\n   */\n  ;\n\n  _proto.getUserContextData = function getUserContextData() {\n    var pool = this.pool;\n    return pool.getUserContextData(this.username);\n  }\n  /**\n   * This is used by an authenticated or a user trying to authenticate to associate a TOTP MFA\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.associateSoftwareToken = function associateSoftwareToken(callback) {\n    var _this18 = this;\n\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      this.client.request('AssociateSoftwareToken', {\n        Session: this.Session\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        _this18.Session = data.Session;\n        return callback.associateSecretCode(data.SecretCode);\n      });\n    } else {\n      this.client.request('AssociateSoftwareToken', {\n        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        return callback.associateSecretCode(data.SecretCode);\n      });\n    }\n  }\n  /**\n   * This is used by an authenticated or a user trying to authenticate to verify a TOTP MFA\n   * @param {string} totpCode The MFA code entered by the user.\n   * @param {string} friendlyDeviceName The device name we are assigning to the device.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n  ;\n\n  _proto.verifySoftwareToken = function verifySoftwareToken(totpCode, friendlyDeviceName, callback) {\n    var _this19 = this;\n\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      this.client.request('VerifySoftwareToken', {\n        Session: this.Session,\n        UserCode: totpCode,\n        FriendlyDeviceName: friendlyDeviceName\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        _this19.Session = data.Session;\n        var challengeResponses = {};\n        challengeResponses.USERNAME = _this19.username;\n        var jsonReq = {\n          ChallengeName: 'MFA_SETUP',\n          ClientId: _this19.pool.getClientId(),\n          ChallengeResponses: challengeResponses,\n          Session: _this19.Session\n        };\n\n        if (_this19.getUserContextData()) {\n          jsonReq.UserContextData = _this19.getUserContextData();\n        }\n\n        _this19.client.request('RespondToAuthChallenge', jsonReq, function (errRespond, dataRespond) {\n          if (errRespond) {\n            return callback.onFailure(errRespond);\n          }\n\n          _this19.signInUserSession = _this19.getCognitoUserSession(dataRespond.AuthenticationResult);\n\n          _this19.cacheTokens();\n\n          return callback.onSuccess(_this19.signInUserSession);\n        });\n\n        return undefined;\n      });\n    } else {\n      this.client.request('VerifySoftwareToken', {\n        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n        UserCode: totpCode,\n        FriendlyDeviceName: friendlyDeviceName\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        return callback.onSuccess(data);\n      });\n    }\n  };\n\n  return CognitoUser;\n}();\n\nexport { CognitoUser as default };"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}