{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ericli/Desktop/pill2/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/ericli/Desktop/pill2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/ericli/Desktop/pill2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/ericli/Desktop/pill2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { DEFAULT_MAX_ATTEMPTS, RETRY_MODES } from \"./config\";\nimport { DEFAULT_RETRY_DELAY_BASE, INITIAL_RETRY_TOKENS } from \"./constants\";\nimport { getDefaultRetryToken } from \"./defaultRetryToken\";\nexport var StandardRetryStrategy = /*#__PURE__*/function () {\n  function StandardRetryStrategy(maxAttempts) {\n    _classCallCheck(this, StandardRetryStrategy);\n    this.maxAttempts = maxAttempts;\n    this.mode = RETRY_MODES.STANDARD;\n    this.retryToken = getDefaultRetryToken(INITIAL_RETRY_TOKENS, DEFAULT_RETRY_DELAY_BASE);\n    this.maxAttemptsProvider = typeof maxAttempts === \"function\" ? maxAttempts : /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", maxAttempts);\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n  }\n  _createClass(StandardRetryStrategy, [{\n    key: \"acquireInitialRetryToken\",\n    value: function () {\n      var _acquireInitialRetryToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(retryTokenScope) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", this.retryToken);\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function acquireInitialRetryToken(_x) {\n        return _acquireInitialRetryToken.apply(this, arguments);\n      }\n      return acquireInitialRetryToken;\n    }()\n  }, {\n    key: \"refreshRetryTokenForRetry\",\n    value: function () {\n      var _refreshRetryTokenForRetry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(tokenToRenew, errorInfo) {\n        var maxAttempts;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this.getMaxAttempts();\n            case 2:\n              maxAttempts = _context3.sent;\n              if (!this.shouldRetry(tokenToRenew, errorInfo, maxAttempts)) {\n                _context3.next = 6;\n                break;\n              }\n              tokenToRenew.getRetryTokenCount(errorInfo);\n              return _context3.abrupt(\"return\", tokenToRenew);\n            case 6:\n              throw new Error(\"No retry token available\");\n            case 7:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function refreshRetryTokenForRetry(_x2, _x3) {\n        return _refreshRetryTokenForRetry.apply(this, arguments);\n      }\n      return refreshRetryTokenForRetry;\n    }()\n  }, {\n    key: \"recordSuccess\",\n    value: function recordSuccess(token) {\n      this.retryToken.releaseRetryTokens(token.getLastRetryCost());\n    }\n  }, {\n    key: \"getMaxAttempts\",\n    value: function () {\n      var _getMaxAttempts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var maxAttempts;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return this.maxAttemptsProvider();\n            case 3:\n              return _context4.abrupt(\"return\", _context4.sent);\n            case 6:\n              _context4.prev = 6;\n              _context4.t0 = _context4[\"catch\"](0);\n              console.warn(\"Max attempts provider could not resolve. Using default of \".concat(DEFAULT_MAX_ATTEMPTS));\n              return _context4.abrupt(\"return\", DEFAULT_MAX_ATTEMPTS);\n            case 10:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this, [[0, 6]]);\n      }));\n      function getMaxAttempts() {\n        return _getMaxAttempts.apply(this, arguments);\n      }\n      return getMaxAttempts;\n    }()\n  }, {\n    key: \"shouldRetry\",\n    value: function shouldRetry(tokenToRenew, errorInfo, maxAttempts) {\n      var attempts = tokenToRenew.getRetryCount();\n      return attempts < maxAttempts && tokenToRenew.hasRetryTokens(errorInfo.errorType) && this.isRetryableError(errorInfo.errorType);\n    }\n  }, {\n    key: \"isRetryableError\",\n    value: function isRetryableError(errorType) {\n      return errorType === \"THROTTLING\" || errorType === \"TRANSIENT\";\n    }\n  }]);\n  return StandardRetryStrategy;\n}();","map":{"version":3,"names":["DEFAULT_MAX_ATTEMPTS","RETRY_MODES","DEFAULT_RETRY_DELAY_BASE","INITIAL_RETRY_TOKENS","getDefaultRetryToken","StandardRetryStrategy","maxAttempts","_classCallCheck","mode","STANDARD","retryToken","maxAttemptsProvider","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","abrupt","stop","_createClass","key","value","_acquireInitialRetryToken","_callee2","retryTokenScope","_callee2$","_context2","acquireInitialRetryToken","_x","apply","arguments","_refreshRetryTokenForRetry","_callee3","tokenToRenew","errorInfo","_callee3$","_context3","getMaxAttempts","sent","shouldRetry","getRetryTokenCount","Error","refreshRetryTokenForRetry","_x2","_x3","recordSuccess","token","releaseRetryTokens","getLastRetryCost","_getMaxAttempts","_callee4","_callee4$","_context4","t0","console","warn","concat","attempts","getRetryCount","hasRetryTokens","errorType","isRetryableError"],"sources":["/Users/ericli/Desktop/pill2/node_modules/@aws-sdk/util-retry/dist-es/StandardRetryStrategy.js"],"sourcesContent":["import { DEFAULT_MAX_ATTEMPTS, RETRY_MODES } from \"./config\";\nimport { DEFAULT_RETRY_DELAY_BASE, INITIAL_RETRY_TOKENS } from \"./constants\";\nimport { getDefaultRetryToken } from \"./defaultRetryToken\";\nexport class StandardRetryStrategy {\n    constructor(maxAttempts) {\n        this.maxAttempts = maxAttempts;\n        this.mode = RETRY_MODES.STANDARD;\n        this.retryToken = getDefaultRetryToken(INITIAL_RETRY_TOKENS, DEFAULT_RETRY_DELAY_BASE);\n        this.maxAttemptsProvider = typeof maxAttempts === \"function\" ? maxAttempts : async () => maxAttempts;\n    }\n    async acquireInitialRetryToken(retryTokenScope) {\n        return this.retryToken;\n    }\n    async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {\n        const maxAttempts = await this.getMaxAttempts();\n        if (this.shouldRetry(tokenToRenew, errorInfo, maxAttempts)) {\n            tokenToRenew.getRetryTokenCount(errorInfo);\n            return tokenToRenew;\n        }\n        throw new Error(\"No retry token available\");\n    }\n    recordSuccess(token) {\n        this.retryToken.releaseRetryTokens(token.getLastRetryCost());\n    }\n    async getMaxAttempts() {\n        let maxAttempts;\n        try {\n            return await this.maxAttemptsProvider();\n        }\n        catch (error) {\n            console.warn(`Max attempts provider could not resolve. Using default of ${DEFAULT_MAX_ATTEMPTS}`);\n            return DEFAULT_MAX_ATTEMPTS;\n        }\n    }\n    shouldRetry(tokenToRenew, errorInfo, maxAttempts) {\n        const attempts = tokenToRenew.getRetryCount();\n        return (attempts < maxAttempts &&\n            tokenToRenew.hasRetryTokens(errorInfo.errorType) &&\n            this.isRetryableError(errorInfo.errorType));\n    }\n    isRetryableError(errorType) {\n        return errorType === \"THROTTLING\" || errorType === \"TRANSIENT\";\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}