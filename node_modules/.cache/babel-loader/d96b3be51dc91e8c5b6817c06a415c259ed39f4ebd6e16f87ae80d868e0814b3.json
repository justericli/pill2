{"ast":null,"code":"import _toConsumableArray from \"/Users/ericli/Desktop/pill2/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _regeneratorRuntime from \"/Users/ericli/Desktop/pill2/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/ericli/Desktop/pill2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpRequest, HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { isServerError, isThrottlingError, isTransientError } from \"@aws-sdk/service-error-classification\";\nimport { INVOCATION_ID_HEADER, REQUEST_HEADER } from \"@aws-sdk/util-retry\";\nimport { v4 } from \"uuid\";\nimport { asSdkError } from \"./util\";\nexport var retryMiddleware = function retryMiddleware(options) {\n  return function (next, context) {\n    return /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(args) {\n        var retryStrategy, maxAttempts, retryToken, lastError, attempts, totalRetryDelay, request, _loop, _ret, _retryStrategy;\n        return _regeneratorRuntime().wrap(function _callee$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return options.retryStrategy();\n            case 2:\n              retryStrategy = _context2.sent;\n              _context2.next = 5;\n              return options.maxAttempts();\n            case 5:\n              maxAttempts = _context2.sent;\n              if (!isRetryStrategyV2(retryStrategy)) {\n                _context2.next = 26;\n                break;\n              }\n              retryStrategy = retryStrategy;\n              _context2.next = 10;\n              return retryStrategy.acquireInitialRetryToken(context[\"partition_id\"]);\n            case 10:\n              retryToken = _context2.sent;\n              lastError = new Error();\n              attempts = 0;\n              totalRetryDelay = 0;\n              request = args.request;\n              if (HttpRequest.isInstance(request)) {\n                request.headers[INVOCATION_ID_HEADER] = v4();\n              }\n              _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n                var _yield$next, response, output, retryErrorInfo, delay;\n                return _regeneratorRuntime().wrap(function _loop$(_context) {\n                  while (1) switch (_context.prev = _context.next) {\n                    case 0:\n                      _context.prev = 0;\n                      if (HttpRequest.isInstance(request)) {\n                        request.headers[REQUEST_HEADER] = \"attempt=\".concat(attempts + 1, \"; max=\").concat(maxAttempts);\n                      }\n                      _context.next = 4;\n                      return next(args);\n                    case 4:\n                      _yield$next = _context.sent;\n                      response = _yield$next.response;\n                      output = _yield$next.output;\n                      retryStrategy.recordSuccess(retryToken);\n                      output.$metadata.attempts = attempts + 1;\n                      output.$metadata.totalRetryDelay = totalRetryDelay;\n                      return _context.abrupt(\"return\", {\n                        v: {\n                          response: response,\n                          output: output\n                        }\n                      });\n                    case 13:\n                      _context.prev = 13;\n                      _context.t0 = _context[\"catch\"](0);\n                      retryErrorInfo = getRetryErrorInfo(_context.t0);\n                      lastError = asSdkError(_context.t0);\n                      _context.prev = 17;\n                      _context.next = 20;\n                      return retryStrategy.refreshRetryTokenForRetry(retryToken, retryErrorInfo);\n                    case 20:\n                      retryToken = _context.sent;\n                      _context.next = 29;\n                      break;\n                    case 23:\n                      _context.prev = 23;\n                      _context.t1 = _context[\"catch\"](17);\n                      if (!lastError.$metadata) {\n                        lastError.$metadata = {};\n                      }\n                      lastError.$metadata.attempts = attempts + 1;\n                      lastError.$metadata.totalRetryDelay = totalRetryDelay;\n                      throw lastError;\n                    case 29:\n                      attempts = retryToken.getRetryCount();\n                      delay = retryToken.getRetryDelay();\n                      totalRetryDelay += delay;\n                      _context.next = 34;\n                      return new Promise(function (resolve) {\n                        return setTimeout(resolve, delay);\n                      });\n                    case 34:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }, _loop, null, [[0, 13], [17, 23]]);\n              });\n            case 17:\n              if (!true) {\n                _context2.next = 24;\n                break;\n              }\n              return _context2.delegateYield(_loop(), \"t0\", 19);\n            case 19:\n              _ret = _context2.t0;\n              if (!(typeof _ret === \"object\")) {\n                _context2.next = 22;\n                break;\n              }\n              return _context2.abrupt(\"return\", _ret.v);\n            case 22:\n              _context2.next = 17;\n              break;\n            case 24:\n              _context2.next = 29;\n              break;\n            case 26:\n              retryStrategy = retryStrategy;\n              if ((_retryStrategy = retryStrategy) !== null && _retryStrategy !== void 0 && _retryStrategy.mode) context.userAgent = [].concat(_toConsumableArray(context.userAgent || []), [[\"cfg/retry-mode\", retryStrategy.mode]]);\n              return _context2.abrupt(\"return\", retryStrategy.retry(next, args));\n            case 29:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee);\n      }));\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  };\n};\nvar isRetryStrategyV2 = function isRetryStrategyV2(retryStrategy) {\n  return typeof retryStrategy.acquireInitialRetryToken !== \"undefined\" && typeof retryStrategy.refreshRetryTokenForRetry !== \"undefined\" && typeof retryStrategy.recordSuccess !== \"undefined\";\n};\nvar getRetryErrorInfo = function getRetryErrorInfo(error) {\n  var errorInfo = {\n    errorType: getRetryErrorType(error)\n  };\n  var retryAfterHint = getRetryAfterHint(error.$response);\n  if (retryAfterHint) {\n    errorInfo.retryAfterHint = retryAfterHint;\n  }\n  return errorInfo;\n};\nvar getRetryErrorType = function getRetryErrorType(error) {\n  if (isThrottlingError(error)) return \"THROTTLING\";\n  if (isTransientError(error)) return \"TRANSIENT\";\n  if (isServerError(error)) return \"SERVER_ERROR\";\n  return \"CLIENT_ERROR\";\n};\nexport var retryMiddlewareOptions = {\n  name: \"retryMiddleware\",\n  tags: [\"RETRY\"],\n  step: \"finalizeRequest\",\n  priority: \"high\",\n  override: true\n};\nexport var getRetryPlugin = function getRetryPlugin(options) {\n  return {\n    applyToStack: function applyToStack(clientStack) {\n      clientStack.add(retryMiddleware(options), retryMiddlewareOptions);\n    }\n  };\n};\nexport var getRetryAfterHint = function getRetryAfterHint(response) {\n  if (!HttpResponse.isInstance(response)) return;\n  var retryAfterHeaderName = Object.keys(response.headers).find(function (key) {\n    return key.toLowerCase() === \"retry-after\";\n  });\n  if (!retryAfterHeaderName) return;\n  var retryAfter = response.headers[retryAfterHeaderName];\n  var retryAfterSeconds = Number(retryAfter);\n  if (!Number.isNaN(retryAfterSeconds)) return new Date(retryAfterSeconds * 1000);\n  var retryAfterDate = new Date(retryAfter);\n  return retryAfterDate;\n};","map":{"version":3,"names":["HttpRequest","HttpResponse","isServerError","isThrottlingError","isTransientError","INVOCATION_ID_HEADER","REQUEST_HEADER","v4","asSdkError","retryMiddleware","options","next","context","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","args","retryStrategy","maxAttempts","retryToken","lastError","attempts","totalRetryDelay","request","_loop","_ret","_retryStrategy","wrap","_callee$","_context2","prev","sent","isRetryStrategyV2","acquireInitialRetryToken","Error","isInstance","headers","_yield$next","response","output","retryErrorInfo","delay","_loop$","_context","concat","recordSuccess","$metadata","abrupt","v","t0","getRetryErrorInfo","refreshRetryTokenForRetry","t1","getRetryCount","getRetryDelay","Promise","resolve","setTimeout","stop","delegateYield","mode","userAgent","_toConsumableArray","retry","_x","apply","arguments","error","errorInfo","errorType","getRetryErrorType","retryAfterHint","getRetryAfterHint","$response","retryMiddlewareOptions","name","tags","step","priority","override","getRetryPlugin","applyToStack","clientStack","add","retryAfterHeaderName","Object","keys","find","key","toLowerCase","retryAfter","retryAfterSeconds","Number","isNaN","Date","retryAfterDate"],"sources":["/Users/ericli/Desktop/pill2/node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/middleware-retry/dist-es/retryMiddleware.js"],"sourcesContent":["import { HttpRequest, HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { isServerError, isThrottlingError, isTransientError } from \"@aws-sdk/service-error-classification\";\nimport { INVOCATION_ID_HEADER, REQUEST_HEADER } from \"@aws-sdk/util-retry\";\nimport { v4 } from \"uuid\";\nimport { asSdkError } from \"./util\";\nexport const retryMiddleware = (options) => (next, context) => async (args) => {\n    let retryStrategy = await options.retryStrategy();\n    const maxAttempts = await options.maxAttempts();\n    if (isRetryStrategyV2(retryStrategy)) {\n        retryStrategy = retryStrategy;\n        let retryToken = await retryStrategy.acquireInitialRetryToken(context[\"partition_id\"]);\n        let lastError = new Error();\n        let attempts = 0;\n        let totalRetryDelay = 0;\n        const { request } = args;\n        if (HttpRequest.isInstance(request)) {\n            request.headers[INVOCATION_ID_HEADER] = v4();\n        }\n        while (true) {\n            try {\n                if (HttpRequest.isInstance(request)) {\n                    request.headers[REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;\n                }\n                const { response, output } = await next(args);\n                retryStrategy.recordSuccess(retryToken);\n                output.$metadata.attempts = attempts + 1;\n                output.$metadata.totalRetryDelay = totalRetryDelay;\n                return { response, output };\n            }\n            catch (e) {\n                const retryErrorInfo = getRetryErrorInfo(e);\n                lastError = asSdkError(e);\n                try {\n                    retryToken = await retryStrategy.refreshRetryTokenForRetry(retryToken, retryErrorInfo);\n                }\n                catch (refreshError) {\n                    if (!lastError.$metadata) {\n                        lastError.$metadata = {};\n                    }\n                    lastError.$metadata.attempts = attempts + 1;\n                    lastError.$metadata.totalRetryDelay = totalRetryDelay;\n                    throw lastError;\n                }\n                attempts = retryToken.getRetryCount();\n                const delay = retryToken.getRetryDelay();\n                totalRetryDelay += delay;\n                await new Promise((resolve) => setTimeout(resolve, delay));\n            }\n        }\n    }\n    else {\n        retryStrategy = retryStrategy;\n        if (retryStrategy?.mode)\n            context.userAgent = [...(context.userAgent || []), [\"cfg/retry-mode\", retryStrategy.mode]];\n        return retryStrategy.retry(next, args);\n    }\n};\nconst isRetryStrategyV2 = (retryStrategy) => typeof retryStrategy.acquireInitialRetryToken !== \"undefined\" &&\n    typeof retryStrategy.refreshRetryTokenForRetry !== \"undefined\" &&\n    typeof retryStrategy.recordSuccess !== \"undefined\";\nconst getRetryErrorInfo = (error) => {\n    const errorInfo = {\n        errorType: getRetryErrorType(error),\n    };\n    const retryAfterHint = getRetryAfterHint(error.$response);\n    if (retryAfterHint) {\n        errorInfo.retryAfterHint = retryAfterHint;\n    }\n    return errorInfo;\n};\nconst getRetryErrorType = (error) => {\n    if (isThrottlingError(error))\n        return \"THROTTLING\";\n    if (isTransientError(error))\n        return \"TRANSIENT\";\n    if (isServerError(error))\n        return \"SERVER_ERROR\";\n    return \"CLIENT_ERROR\";\n};\nexport const retryMiddlewareOptions = {\n    name: \"retryMiddleware\",\n    tags: [\"RETRY\"],\n    step: \"finalizeRequest\",\n    priority: \"high\",\n    override: true,\n};\nexport const getRetryPlugin = (options) => ({\n    applyToStack: (clientStack) => {\n        clientStack.add(retryMiddleware(options), retryMiddlewareOptions);\n    },\n});\nexport const getRetryAfterHint = (response) => {\n    if (!HttpResponse.isInstance(response))\n        return;\n    const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === \"retry-after\");\n    if (!retryAfterHeaderName)\n        return;\n    const retryAfter = response.headers[retryAfterHeaderName];\n    const retryAfterSeconds = Number(retryAfter);\n    if (!Number.isNaN(retryAfterSeconds))\n        return new Date(retryAfterSeconds * 1000);\n    const retryAfterDate = new Date(retryAfter);\n    return retryAfterDate;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}