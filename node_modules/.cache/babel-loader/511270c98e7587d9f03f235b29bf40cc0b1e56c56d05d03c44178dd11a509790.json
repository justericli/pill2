{"ast":null,"code":"export function getUnmarshalledStream(source, options) {\n  return {\n    [Symbol.asyncIterator]: async function* () {\n      for await (const chunk of source) {\n        const message = options.eventStreamCodec.decode(chunk);\n        const {\n          value: messageType\n        } = message.headers[\":message-type\"];\n        if (messageType === \"error\") {\n          const unmodeledError = new Error(message.headers[\":error-message\"].value || \"UnknownError\");\n          unmodeledError.name = message.headers[\":error-code\"].value;\n          throw unmodeledError;\n        } else if (messageType === \"exception\") {\n          const code = message.headers[\":exception-type\"].value;\n          const exception = {\n            [code]: message\n          };\n          const deserializedException = await options.deserializer(exception);\n          if (deserializedException.$unknown) {\n            const error = new Error(options.toUtf8(message.body));\n            error.name = code;\n            throw error;\n          }\n          throw deserializedException[code];\n        } else if (messageType === \"event\") {\n          const event = {\n            [message.headers[\":event-type\"].value]: message\n          };\n          const deserialized = await options.deserializer(event);\n          if (deserialized.$unknown) continue;\n          yield deserialized;\n        } else {\n          throw Error(`Unrecognizable event type: ${message.headers[\":event-type\"].value}`);\n        }\n      }\n    }\n  };\n}","map":{"version":3,"names":["getUnmarshalledStream","source","options","Symbol","asyncIterator","chunk","message","eventStreamCodec","decode","value","messageType","headers","unmodeledError","Error","name","code","exception","deserializedException","deserializer","$unknown","error","toUtf8","body","event","deserialized"],"sources":["/Users/ericli/Desktop/pill2/node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/eventstream-serde-universal/dist-es/getUnmarshalledStream.js"],"sourcesContent":["export function getUnmarshalledStream(source, options) {\n    return {\n        [Symbol.asyncIterator]: async function* () {\n            for await (const chunk of source) {\n                const message = options.eventStreamCodec.decode(chunk);\n                const { value: messageType } = message.headers[\":message-type\"];\n                if (messageType === \"error\") {\n                    const unmodeledError = new Error(message.headers[\":error-message\"].value || \"UnknownError\");\n                    unmodeledError.name = message.headers[\":error-code\"].value;\n                    throw unmodeledError;\n                }\n                else if (messageType === \"exception\") {\n                    const code = message.headers[\":exception-type\"].value;\n                    const exception = { [code]: message };\n                    const deserializedException = await options.deserializer(exception);\n                    if (deserializedException.$unknown) {\n                        const error = new Error(options.toUtf8(message.body));\n                        error.name = code;\n                        throw error;\n                    }\n                    throw deserializedException[code];\n                }\n                else if (messageType === \"event\") {\n                    const event = {\n                        [message.headers[\":event-type\"].value]: message,\n                    };\n                    const deserialized = await options.deserializer(event);\n                    if (deserialized.$unknown)\n                        continue;\n                    yield deserialized;\n                }\n                else {\n                    throw Error(`Unrecognizable event type: ${message.headers[\":event-type\"].value}`);\n                }\n            }\n        },\n    };\n}\n"],"mappings":"AAAA,OAAO,SAASA,qBAAqBA,CAACC,MAAM,EAAEC,OAAO,EAAE;EACnD,OAAO;IACH,CAACC,MAAM,CAACC,aAAa,GAAG,mBAAmB;MACvC,WAAW,MAAMC,KAAK,IAAIJ,MAAM,EAAE;QAC9B,MAAMK,OAAO,GAAGJ,OAAO,CAACK,gBAAgB,CAACC,MAAM,CAACH,KAAK,CAAC;QACtD,MAAM;UAAEI,KAAK,EAAEC;QAAY,CAAC,GAAGJ,OAAO,CAACK,OAAO,CAAC,eAAe,CAAC;QAC/D,IAAID,WAAW,KAAK,OAAO,EAAE;UACzB,MAAME,cAAc,GAAG,IAAIC,KAAK,CAACP,OAAO,CAACK,OAAO,CAAC,gBAAgB,CAAC,CAACF,KAAK,IAAI,cAAc,CAAC;UAC3FG,cAAc,CAACE,IAAI,GAAGR,OAAO,CAACK,OAAO,CAAC,aAAa,CAAC,CAACF,KAAK;UAC1D,MAAMG,cAAc;QACxB,CAAC,MACI,IAAIF,WAAW,KAAK,WAAW,EAAE;UAClC,MAAMK,IAAI,GAAGT,OAAO,CAACK,OAAO,CAAC,iBAAiB,CAAC,CAACF,KAAK;UACrD,MAAMO,SAAS,GAAG;YAAE,CAACD,IAAI,GAAGT;UAAQ,CAAC;UACrC,MAAMW,qBAAqB,GAAG,MAAMf,OAAO,CAACgB,YAAY,CAACF,SAAS,CAAC;UACnE,IAAIC,qBAAqB,CAACE,QAAQ,EAAE;YAChC,MAAMC,KAAK,GAAG,IAAIP,KAAK,CAACX,OAAO,CAACmB,MAAM,CAACf,OAAO,CAACgB,IAAI,CAAC,CAAC;YACrDF,KAAK,CAACN,IAAI,GAAGC,IAAI;YACjB,MAAMK,KAAK;UACf;UACA,MAAMH,qBAAqB,CAACF,IAAI,CAAC;QACrC,CAAC,MACI,IAAIL,WAAW,KAAK,OAAO,EAAE;UAC9B,MAAMa,KAAK,GAAG;YACV,CAACjB,OAAO,CAACK,OAAO,CAAC,aAAa,CAAC,CAACF,KAAK,GAAGH;UAC5C,CAAC;UACD,MAAMkB,YAAY,GAAG,MAAMtB,OAAO,CAACgB,YAAY,CAACK,KAAK,CAAC;UACtD,IAAIC,YAAY,CAACL,QAAQ,EACrB;UACJ,MAAMK,YAAY;QACtB,CAAC,MACI;UACD,MAAMX,KAAK,CAAE,8BAA6BP,OAAO,CAACK,OAAO,CAAC,aAAa,CAAC,CAACF,KAAM,EAAC,CAAC;QACrF;MACJ;IACJ;EACJ,CAAC;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}