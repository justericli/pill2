{"ast":null,"code":"import _slicedToArray from \"/Users/ericli/Desktop/pill2/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/Users/ericli/Desktop/pill2/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _createForOfIteratorHelper from \"/Users/ericli/Desktop/pill2/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport partitionsInfo from \"./partitions.json\";\nvar selectedPartitionsInfo = partitionsInfo;\nvar selectedUserAgentPrefix = \"\";\nexport var partition = function partition(value) {\n  var _selectedPartitionsIn = selectedPartitionsInfo,\n    partitions = _selectedPartitionsIn.partitions;\n  var _iterator = _createForOfIteratorHelper(partitions),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _partition = _step.value;\n      var regions = _partition.regions,\n        outputs = _partition.outputs;\n      for (var _i = 0, _Object$entries = Object.entries(regions); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          region = _Object$entries$_i[0],\n          regionData = _Object$entries$_i[1];\n        if (region === value) {\n          return _objectSpread(_objectSpread({}, outputs), regionData);\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var _iterator2 = _createForOfIteratorHelper(partitions),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _partition2 = _step2.value;\n      var regionRegex = _partition2.regionRegex,\n        _outputs = _partition2.outputs;\n      if (new RegExp(regionRegex).test(value)) {\n        return _objectSpread({}, _outputs);\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  var DEFAULT_PARTITION = partitions.find(function (partition) {\n    return partition.id === \"aws\";\n  });\n  if (!DEFAULT_PARTITION) {\n    throw new Error(\"Provided region was not found in the partition array or regex,\" + \" and default partition with id 'aws' doesn't exist.\");\n  }\n  return _objectSpread({}, DEFAULT_PARTITION.outputs);\n};\nexport var setPartitionInfo = function setPartitionInfo(partitionsInfo) {\n  var userAgentPrefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  selectedPartitionsInfo = partitionsInfo;\n  selectedUserAgentPrefix = userAgentPrefix;\n};\nexport var useDefaultPartitionInfo = function useDefaultPartitionInfo() {\n  setPartitionInfo(partitionsInfo, \"\");\n};\nexport var getUserAgentPrefix = function getUserAgentPrefix() {\n  return selectedUserAgentPrefix;\n};","map":{"version":3,"names":["partitionsInfo","selectedPartitionsInfo","selectedUserAgentPrefix","partition","value","_selectedPartitionsIn","partitions","_iterator","_createForOfIteratorHelper","_step","s","n","done","regions","outputs","_i","_Object$entries","Object","entries","length","_Object$entries$_i","_slicedToArray","region","regionData","_objectSpread","err","e","f","_iterator2","_step2","regionRegex","RegExp","test","DEFAULT_PARTITION","find","id","Error","setPartitionInfo","userAgentPrefix","arguments","undefined","useDefaultPartitionInfo","getUserAgentPrefix"],"sources":["/Users/ericli/Desktop/pill2/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partition.js"],"sourcesContent":["import partitionsInfo from \"./partitions.json\";\nlet selectedPartitionsInfo = partitionsInfo;\nlet selectedUserAgentPrefix = \"\";\nexport const partition = (value) => {\n    const { partitions } = selectedPartitionsInfo;\n    for (const partition of partitions) {\n        const { regions, outputs } = partition;\n        for (const [region, regionData] of Object.entries(regions)) {\n            if (region === value) {\n                return {\n                    ...outputs,\n                    ...regionData,\n                };\n            }\n        }\n    }\n    for (const partition of partitions) {\n        const { regionRegex, outputs } = partition;\n        if (new RegExp(regionRegex).test(value)) {\n            return {\n                ...outputs,\n            };\n        }\n    }\n    const DEFAULT_PARTITION = partitions.find((partition) => partition.id === \"aws\");\n    if (!DEFAULT_PARTITION) {\n        throw new Error(\"Provided region was not found in the partition array or regex,\" +\n            \" and default partition with id 'aws' doesn't exist.\");\n    }\n    return {\n        ...DEFAULT_PARTITION.outputs,\n    };\n};\nexport const setPartitionInfo = (partitionsInfo, userAgentPrefix = \"\") => {\n    selectedPartitionsInfo = partitionsInfo;\n    selectedUserAgentPrefix = userAgentPrefix;\n};\nexport const useDefaultPartitionInfo = () => {\n    setPartitionInfo(partitionsInfo, \"\");\n};\nexport const getUserAgentPrefix = () => selectedUserAgentPrefix;\n"],"mappings":";;;AAAA,OAAOA,cAAc,MAAM,mBAAmB;AAC9C,IAAIC,sBAAsB,GAAGD,cAAc;AAC3C,IAAIE,uBAAuB,GAAG,EAAE;AAChC,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAASA,CAAIC,KAAK,EAAK;EAChC,IAAAC,qBAAA,GAAuBJ,sBAAsB;IAArCK,UAAU,GAAAD,qBAAA,CAAVC,UAAU;EAA4B,IAAAC,SAAA,GAAAC,0BAAA,CACtBF,UAAU;IAAAG,KAAA;EAAA;IAAlC,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAAoC;MAAA,IAAzBT,UAAS,GAAAM,KAAA,CAAAL,KAAA;MAChB,IAAQS,OAAO,GAAcV,UAAS,CAA9BU,OAAO;QAAEC,OAAO,GAAKX,UAAS,CAArBW,OAAO;MACxB,SAAAC,EAAA,MAAAC,eAAA,GAAmCC,MAAM,CAACC,OAAO,CAACL,OAAO,CAAC,EAAAE,EAAA,GAAAC,eAAA,CAAAG,MAAA,EAAAJ,EAAA,IAAE;QAAvD,IAAAK,kBAAA,GAAAC,cAAA,CAAAL,eAAA,CAAAD,EAAA;UAAOO,MAAM,GAAAF,kBAAA;UAAEG,UAAU,GAAAH,kBAAA;QAC1B,IAAIE,MAAM,KAAKlB,KAAK,EAAE;UAClB,OAAAoB,aAAA,CAAAA,aAAA,KACOV,OAAO,GACPS,UAAU;QAErB;MACJ;IACJ;EAAC,SAAAE,GAAA;IAAAlB,SAAA,CAAAmB,CAAA,CAAAD,GAAA;EAAA;IAAAlB,SAAA,CAAAoB,CAAA;EAAA;EAAA,IAAAC,UAAA,GAAApB,0BAAA,CACuBF,UAAU;IAAAuB,MAAA;EAAA;IAAlC,KAAAD,UAAA,CAAAlB,CAAA,MAAAmB,MAAA,GAAAD,UAAA,CAAAjB,CAAA,IAAAC,IAAA,GAAoC;MAAA,IAAzBT,WAAS,GAAA0B,MAAA,CAAAzB,KAAA;MAChB,IAAQ0B,WAAW,GAAc3B,WAAS,CAAlC2B,WAAW;QAAEhB,QAAO,GAAKX,WAAS,CAArBW,OAAO;MAC5B,IAAI,IAAIiB,MAAM,CAACD,WAAW,CAAC,CAACE,IAAI,CAAC5B,KAAK,CAAC,EAAE;QACrC,OAAAoB,aAAA,KACOV,QAAO;MAElB;IACJ;EAAC,SAAAW,GAAA;IAAAG,UAAA,CAAAF,CAAA,CAAAD,GAAA;EAAA;IAAAG,UAAA,CAAAD,CAAA;EAAA;EACD,IAAMM,iBAAiB,GAAG3B,UAAU,CAAC4B,IAAI,CAAC,UAAC/B,SAAS;IAAA,OAAKA,SAAS,CAACgC,EAAE,KAAK,KAAK;EAAA,EAAC;EAChF,IAAI,CAACF,iBAAiB,EAAE;IACpB,MAAM,IAAIG,KAAK,CAAC,gEAAgE,GAC5E,qDAAqD,CAAC;EAC9D;EACA,OAAAZ,aAAA,KACOS,iBAAiB,CAACnB,OAAO;AAEpC,CAAC;AACD,OAAO,IAAMuB,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAIrC,cAAc,EAA2B;EAAA,IAAzBsC,eAAe,GAAAC,SAAA,CAAApB,MAAA,QAAAoB,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,EAAE;EACjEtC,sBAAsB,GAAGD,cAAc;EACvCE,uBAAuB,GAAGoC,eAAe;AAC7C,CAAC;AACD,OAAO,IAAMG,uBAAuB,GAAG,SAA1BA,uBAAuBA,CAAA,EAAS;EACzCJ,gBAAgB,CAACrC,cAAc,EAAE,EAAE,CAAC;AACxC,CAAC;AACD,OAAO,IAAM0C,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAA;EAAA,OAASxC,uBAAuB;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}