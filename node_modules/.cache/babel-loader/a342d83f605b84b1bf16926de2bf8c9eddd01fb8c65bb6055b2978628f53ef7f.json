{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PostContentRequest, PostContentResponse } from \"../models/models_0\";\nimport { deserializeAws_restJson1PostContentCommand, serializeAws_restJson1PostContentCommand } from \"../protocols/Aws_restJson1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\n/**\n * <p> Sends user input (text or speech) to Amazon Lex. Clients use this API to send text and audio\n *       requests to Amazon Lex at runtime. Amazon Lex interprets the user input using the machine learning model\n *       that it built for the bot. </p>\n *          <p>The <code>PostContent</code> operation supports audio input at 8kHz and 16kHz. You can use\n *       8kHz audio to achieve higher speech recognition accuracy in telephone audio applications. </p>\n *          <p> In response, Amazon Lex returns the next message to convey to the user. Consider the following\n *       example messages: </p>\n *          <ul>\n *             <li>\n *                <p> For a user input \"I would like a pizza,\" Amazon Lex might return a response with a message\n *           eliciting slot data (for example, <code>PizzaSize</code>): \"What size pizza would you\n *           like?\". </p>\n *             </li>\n *             <li>\n *                <p> After the user provides all of the pizza order information, Amazon Lex might return a\n *           response with a message to get user confirmation: \"Order the pizza?\". </p>\n *             </li>\n *             <li>\n *                <p> After the user replies \"Yes\" to the confirmation prompt, Amazon Lex might return a\n *           conclusion statement: \"Thank you, your cheese pizza has been ordered.\". </p>\n *             </li>\n *          </ul>\n *          <p> Not all Amazon Lex messages require a response from the user. For example, conclusion\n *       statements do not require a response. Some messages require only a yes or no response. In\n *       addition to the <code>message</code>, Amazon Lex provides additional context about the message in\n *       the response that you can use to enhance client behavior, such as displaying the appropriate\n *       client user interface. Consider the following examples: </p>\n *          <ul>\n *             <li>\n *                <p> If the message is to elicit slot data, Amazon Lex returns the following context\n *           information: </p>\n *                <ul>\n *                   <li>\n *                      <p>\n *                         <code>x-amz-lex-dialog-state</code> header set to <code>ElicitSlot</code>\n *                      </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <code>x-amz-lex-intent-name</code> header set to the intent name in the current\n *               context </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <code>x-amz-lex-slot-to-elicit</code> header set to the slot name for which the\n *                 <code>message</code> is eliciting information </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <code>x-amz-lex-slots</code> header set to a map of slots configured for the intent\n *               with their current values </p>\n *                   </li>\n *                </ul>\n *             </li>\n *             <li>\n *                <p> If the message is a confirmation prompt, the <code>x-amz-lex-dialog-state</code>\n *           header is set to <code>Confirmation</code> and the <code>x-amz-lex-slot-to-elicit</code>\n *           header is omitted. </p>\n *             </li>\n *             <li>\n *                <p> If the message is a clarification prompt configured for the intent, indicating that\n *           the user intent is not understood, the <code>x-amz-dialog-state</code> header is set to\n *             <code>ElicitIntent</code> and the <code>x-amz-slot-to-elicit</code> header is omitted.\n *         </p>\n *             </li>\n *          </ul>\n *          <p> In addition, Amazon Lex also returns your application-specific <code>sessionAttributes</code>.\n *       For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html\">Managing Conversation Context</a>. </p>\n */\nvar PostContentCommand = /** @class */function (_super) {\n  __extends(PostContentCommand, _super);\n  // Start section: command_properties\n  // End section: command_properties\n  function PostContentCommand(input) {\n    var _this =\n    // Start section: command_constructor\n    _super.call(this) || this;\n    _this.input = input;\n    return _this;\n    // End section: command_constructor\n  }\n  /**\n   * @internal\n   */\n  PostContentCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"LexRuntimeServiceClient\";\n    var commandName = \"PostContentCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: PostContentRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: PostContentResponse.filterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n  PostContentCommand.prototype.serialize = function (input, context) {\n    return serializeAws_restJson1PostContentCommand(input, context);\n  };\n  PostContentCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_restJson1PostContentCommand(output, context);\n  };\n  return PostContentCommand;\n}($Command);\nexport { PostContentCommand };","map":{"version":3,"names":["PostContentRequest","PostContentResponse","deserializeAws_restJson1PostContentCommand","serializeAws_restJson1PostContentCommand","getSerdePlugin","Command","$Command","PostContentCommand","_super","__extends","input","_this","call","prototype","resolveMiddleware","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","logger","clientName","commandName","handlerExecutionContext","inputFilterSensitiveLog","filterSensitiveLog","outputFilterSensitiveLog","requestHandler","resolve","request","handle","context","output"],"sources":["/Users/ericli/node_modules/@aws-sdk/client-lex-runtime-service/commands/PostContentCommand.ts"],"sourcesContent":["import {\n  LexRuntimeServiceClientResolvedConfig,\n  ServiceInputTypes,\n  ServiceOutputTypes,\n} from \"../LexRuntimeServiceClient\";\nimport { PostContentRequest, PostContentResponse } from \"../models/models_0\";\nimport {\n  deserializeAws_restJson1PostContentCommand,\n  serializeAws_restJson1PostContentCommand,\n} from \"../protocols/Aws_restJson1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { HttpRequest as __HttpRequest, HttpResponse as __HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport {\n  FinalizeHandlerArguments,\n  Handler,\n  HandlerExecutionContext,\n  MiddlewareStack,\n  HttpHandlerOptions as __HttpHandlerOptions,\n  MetadataBearer as __MetadataBearer,\n  SerdeContext as __SerdeContext,\n} from \"@aws-sdk/types\";\n\nexport type PostContentCommandInput = Omit<PostContentRequest, \"inputStream\"> & {\n  inputStream: PostContentRequest[\"inputStream\"] | string | Uint8Array | Buffer;\n};\nexport type PostContentCommandOutput = PostContentResponse & __MetadataBearer;\n\n/**\n * <p> Sends user input (text or speech) to Amazon Lex. Clients use this API to send text and audio\n *       requests to Amazon Lex at runtime. Amazon Lex interprets the user input using the machine learning model\n *       that it built for the bot. </p>\n *          <p>The <code>PostContent</code> operation supports audio input at 8kHz and 16kHz. You can use\n *       8kHz audio to achieve higher speech recognition accuracy in telephone audio applications. </p>\n *          <p> In response, Amazon Lex returns the next message to convey to the user. Consider the following\n *       example messages: </p>\n *          <ul>\n *             <li>\n *                <p> For a user input \"I would like a pizza,\" Amazon Lex might return a response with a message\n *           eliciting slot data (for example, <code>PizzaSize</code>): \"What size pizza would you\n *           like?\". </p>\n *             </li>\n *             <li>\n *                <p> After the user provides all of the pizza order information, Amazon Lex might return a\n *           response with a message to get user confirmation: \"Order the pizza?\". </p>\n *             </li>\n *             <li>\n *                <p> After the user replies \"Yes\" to the confirmation prompt, Amazon Lex might return a\n *           conclusion statement: \"Thank you, your cheese pizza has been ordered.\". </p>\n *             </li>\n *          </ul>\n *          <p> Not all Amazon Lex messages require a response from the user. For example, conclusion\n *       statements do not require a response. Some messages require only a yes or no response. In\n *       addition to the <code>message</code>, Amazon Lex provides additional context about the message in\n *       the response that you can use to enhance client behavior, such as displaying the appropriate\n *       client user interface. Consider the following examples: </p>\n *          <ul>\n *             <li>\n *                <p> If the message is to elicit slot data, Amazon Lex returns the following context\n *           information: </p>\n *                <ul>\n *                   <li>\n *                      <p>\n *                         <code>x-amz-lex-dialog-state</code> header set to <code>ElicitSlot</code>\n *                      </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <code>x-amz-lex-intent-name</code> header set to the intent name in the current\n *               context </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <code>x-amz-lex-slot-to-elicit</code> header set to the slot name for which the\n *                 <code>message</code> is eliciting information </p>\n *                   </li>\n *                   <li>\n *                      <p>\n *                         <code>x-amz-lex-slots</code> header set to a map of slots configured for the intent\n *               with their current values </p>\n *                   </li>\n *                </ul>\n *             </li>\n *             <li>\n *                <p> If the message is a confirmation prompt, the <code>x-amz-lex-dialog-state</code>\n *           header is set to <code>Confirmation</code> and the <code>x-amz-lex-slot-to-elicit</code>\n *           header is omitted. </p>\n *             </li>\n *             <li>\n *                <p> If the message is a clarification prompt configured for the intent, indicating that\n *           the user intent is not understood, the <code>x-amz-dialog-state</code> header is set to\n *             <code>ElicitIntent</code> and the <code>x-amz-slot-to-elicit</code> header is omitted.\n *         </p>\n *             </li>\n *          </ul>\n *          <p> In addition, Amazon Lex also returns your application-specific <code>sessionAttributes</code>.\n *       For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html\">Managing Conversation Context</a>. </p>\n */\nexport class PostContentCommand extends $Command<\n  PostContentCommandInput,\n  PostContentCommandOutput,\n  LexRuntimeServiceClientResolvedConfig\n> {\n  // Start section: command_properties\n  // End section: command_properties\n\n  constructor(readonly input: PostContentCommandInput) {\n    // Start section: command_constructor\n    super();\n    // End section: command_constructor\n  }\n\n  /**\n   * @internal\n   */\n  resolveMiddleware(\n    clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>,\n    configuration: LexRuntimeServiceClientResolvedConfig,\n    options?: __HttpHandlerOptions\n  ): Handler<PostContentCommandInput, PostContentCommandOutput> {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n\n    const stack = clientStack.concat(this.middlewareStack);\n\n    const { logger } = configuration;\n    const clientName = \"LexRuntimeServiceClient\";\n    const commandName = \"PostContentCommand\";\n    const handlerExecutionContext: HandlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: PostContentRequest.filterSensitiveLog,\n      outputFilterSensitiveLog: PostContentResponse.filterSensitiveLog,\n    };\n    const { requestHandler } = configuration;\n    return stack.resolve(\n      (request: FinalizeHandlerArguments<any>) =>\n        requestHandler.handle(request.request as __HttpRequest, options || {}),\n      handlerExecutionContext\n    );\n  }\n\n  private serialize(input: PostContentCommandInput, context: __SerdeContext): Promise<__HttpRequest> {\n    return serializeAws_restJson1PostContentCommand(input, context);\n  }\n\n  private deserialize(output: __HttpResponse, context: __SerdeContext): Promise<PostContentCommandOutput> {\n    return deserializeAws_restJson1PostContentCommand(output, context);\n  }\n\n  // Start section: command_body_extra\n  // End section: command_body_extra\n}\n"],"mappings":";AAKA,SAASA,kBAAkB,EAAEC,mBAAmB,QAAQ,oBAAoB;AAC5E,SACEC,0CAA0C,EAC1CC,wCAAwC,QACnC,4BAA4B;AACnC,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAASC,OAAO,IAAIC,QAAQ,QAAQ,wBAAwB;AAgB5D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsEA,IAAAC,kBAAA,0BAAAC,MAAA;EAAwCC,SAAA,CAAAF,kBAAA,EAAAC,MAAA;EAKtC;EACA;EAEA,SAAAD,mBAAqBG,KAA8B;IAAnD,IAAAC,KAAA;IACE;IACAH,MAAA,CAAAI,IAAA,MAAO;IAFYD,KAAA,CAAAD,KAAK,GAALA,KAAK;;IAGxB;EACF;EAEA;;;EAGAH,kBAAA,CAAAM,SAAA,CAAAC,iBAAiB,GAAjB,UACEC,WAAmE,EACnEC,aAAoD,EACpDC,OAA8B;IAE9B,IAAI,CAACC,eAAe,CAACC,GAAG,CAACf,cAAc,CAACY,aAAa,EAAE,IAAI,CAACI,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;IAEzF,IAAMC,KAAK,GAAGP,WAAW,CAACQ,MAAM,CAAC,IAAI,CAACL,eAAe,CAAC;IAE9C,IAAAM,MAAM,GAAKR,aAAa,CAAAQ,MAAlB;IACd,IAAMC,UAAU,GAAG,yBAAyB;IAC5C,IAAMC,WAAW,GAAG,oBAAoB;IACxC,IAAMC,uBAAuB,GAA4B;MACvDH,MAAM,EAAAA,MAAA;MACNC,UAAU,EAAAA,UAAA;MACVC,WAAW,EAAAA,WAAA;MACXE,uBAAuB,EAAE5B,kBAAkB,CAAC6B,kBAAkB;MAC9DC,wBAAwB,EAAE7B,mBAAmB,CAAC4B;KAC/C;IACO,IAAAE,cAAc,GAAKf,aAAa,CAAAe,cAAlB;IACtB,OAAOT,KAAK,CAACU,OAAO,CAClB,UAACC,OAAsC;MACrC,OAAAF,cAAc,CAACG,MAAM,CAACD,OAAO,CAACA,OAAwB,EAAEhB,OAAO,IAAI,EAAE,CAAC;IAAtE,CAAsE,EACxEU,uBAAuB,CACxB;EACH,CAAC;EAEOpB,kBAAA,CAAAM,SAAA,CAAAO,SAAS,GAAjB,UAAkBV,KAA8B,EAAEyB,OAAuB;IACvE,OAAOhC,wCAAwC,CAACO,KAAK,EAAEyB,OAAO,CAAC;EACjE,CAAC;EAEO5B,kBAAA,CAAAM,SAAA,CAAAQ,WAAW,GAAnB,UAAoBe,MAAsB,EAAED,OAAuB;IACjE,OAAOjC,0CAA0C,CAACkC,MAAM,EAAED,OAAO,CAAC;EACpE,CAAC;EAIH,OAAA5B,kBAAC;AAAD,CAAC,CAtDuCD,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}