{"ast":null,"code":"/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n  return ar;\n};\nvar lists = [];\nvar MethodEmbed = /** @class */function () {\n  function MethodEmbed(context, methodName) {\n    this.context = context;\n    this.methodName = methodName;\n    this._originalMethod = context[methodName].bind(context);\n  }\n  MethodEmbed.add = function (context, methodName, methodOverride) {\n    getInstance(context, methodName).set(methodOverride);\n  };\n  MethodEmbed.remove = function (context, methodName) {\n    getInstance(context, methodName).remove();\n  };\n  MethodEmbed.prototype.set = function (methodOverride) {\n    var _this = this;\n    this.context[this.methodName] = function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      return methodOverride(_this._originalMethod.apply(_this, __spread(args)));\n    };\n  };\n  MethodEmbed.prototype.remove = function () {\n    this.context[this.methodName] = this._originalMethod;\n  };\n  return MethodEmbed;\n}();\nexport { MethodEmbed };\nfunction getInstance(context, methodName) {\n  var instance = lists.filter(function (h) {\n    return h.context === context && h.methodName === methodName;\n  })[0];\n  if (!instance) {\n    instance = new MethodEmbed(context, methodName);\n    lists.push(instance);\n  }\n  return instance;\n}\n/**\n * @deprecated use named import\n */\nexport default MethodEmbed;","map":{"version":3,"names":["lists","MethodEmbed","context","methodName","_originalMethod","bind","add","methodOverride","getInstance","set","remove","prototype","_this","args","_i","arguments","length","apply","__spread","instance","filter","h","push"],"sources":["/Users/ericli/node_modules/@aws-amplify/analytics/src/utils/MethodEmbed.ts"],"sourcesContent":["/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nconst lists: MethodEmbed[] = [];\n\nexport class MethodEmbed {\n\tpublic context;\n\tpublic methodName;\n\tprivate _originalMethod;\n\tprivate _bindedMethod;\n\n\tstatic add(context, methodName, methodOverride) {\n\t\tgetInstance(context, methodName).set(methodOverride);\n\t}\n\n\tstatic remove(context, methodName) {\n\t\tgetInstance(context, methodName).remove();\n\t}\n\n\tconstructor(context, methodName) {\n\t\tthis.context = context;\n\t\tthis.methodName = methodName;\n\n\t\tthis._originalMethod = context[methodName].bind(context);\n\t}\n\n\tpublic set(methodOverride) {\n\t\tthis.context[this.methodName] = (...args) => {\n\t\t\treturn methodOverride(this._originalMethod(...args));\n\t\t};\n\t}\n\n\tpublic remove() {\n\t\tthis.context[this.methodName] = this._originalMethod;\n\t}\n}\n\nfunction getInstance(context, methodName): MethodEmbed {\n\tlet instance = lists.filter(\n\t\th => h.context === context && h.methodName === methodName\n\t)[0];\n\n\tif (!instance) {\n\t\tinstance = new MethodEmbed(context, methodName);\n\t\tlists.push(instance);\n\t}\n\n\treturn instance;\n}\n\n/**\n * @deprecated use named import\n */\nexport default MethodEmbed;\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,IAAMA,KAAK,GAAkB,EAAE;AAE/B,IAAAC,WAAA;EAcC,SAAAA,YAAYC,OAAO,EAAEC,UAAU;IAC9B,IAAI,CAACD,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,UAAU,GAAGA,UAAU;IAE5B,IAAI,CAACC,eAAe,GAAGF,OAAO,CAACC,UAAU,CAAC,CAACE,IAAI,CAACH,OAAO,CAAC;EACzD;EAbOD,WAAA,CAAAK,GAAG,GAAV,UAAWJ,OAAO,EAAEC,UAAU,EAAEI,cAAc;IAC7CC,WAAW,CAACN,OAAO,EAAEC,UAAU,CAAC,CAACM,GAAG,CAACF,cAAc,CAAC;EACrD,CAAC;EAEMN,WAAA,CAAAS,MAAM,GAAb,UAAcR,OAAO,EAAEC,UAAU;IAChCK,WAAW,CAACN,OAAO,EAAEC,UAAU,CAAC,CAACO,MAAM,EAAE;EAC1C,CAAC;EASMT,WAAA,CAAAU,SAAA,CAAAF,GAAG,GAAV,UAAWF,cAAc;IAAzB,IAAAK,KAAA;IACC,IAAI,CAACV,OAAO,CAAC,IAAI,CAACC,UAAU,CAAC,GAAG;MAAC,IAAAU,IAAA;WAAA,IAAAC,EAAA,IAAO,EAAPA,EAAA,GAAAC,SAAA,CAAAC,MAAO,EAAPF,EAAA,EAAO;QAAPD,IAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;MAChC,OAAOP,cAAc,CAACK,KAAI,CAACR,eAAe,CAAAa,KAAA,CAApBL,KAAI,EAAAM,QAAA,CAAoBL,IAAI,GAAE;IACrD,CAAC;EACF,CAAC;EAEMZ,WAAA,CAAAU,SAAA,CAAAD,MAAM,GAAb;IACC,IAAI,CAACR,OAAO,CAAC,IAAI,CAACC,UAAU,CAAC,GAAG,IAAI,CAACC,eAAe;EACrD,CAAC;EACF,OAAAH,WAAC;AAAD,CAAC,EA9BD;;AAgCA,SAASO,WAAWA,CAACN,OAAO,EAAEC,UAAU;EACvC,IAAIgB,QAAQ,GAAGnB,KAAK,CAACoB,MAAM,CAC1B,UAAAC,CAAC;IAAI,OAAAA,CAAC,CAACnB,OAAO,KAAKA,OAAO,IAAImB,CAAC,CAAClB,UAAU,KAAKA,UAAU;EAApD,CAAoD,CACzD,CAAC,CAAC,CAAC;EAEJ,IAAI,CAACgB,QAAQ,EAAE;IACdA,QAAQ,GAAG,IAAIlB,WAAW,CAACC,OAAO,EAAEC,UAAU,CAAC;IAC/CH,KAAK,CAACsB,IAAI,CAACH,QAAQ,CAAC;;EAGrB,OAAOA,QAAQ;AAChB;AAEA;;;AAGA,eAAelB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}