{"ast":null,"code":"// Partition default templates\nvar AWS_TEMPLATE = \"pinpoint.{region}.amazonaws.com\";\nvar AWS_CN_TEMPLATE = \"pinpoint.{region}.amazonaws.com.cn\";\nvar AWS_ISO_TEMPLATE = \"pinpoint.{region}.c2s.ic.gov\";\nvar AWS_ISO_B_TEMPLATE = \"pinpoint.{region}.sc2s.sgov.gov\";\nvar AWS_US_GOV_TEMPLATE = \"pinpoint.{region}.amazonaws.com\";\n// Partition regions\nvar AWS_REGIONS = new Set([\"ap-east-1\", \"ap-northeast-1\", \"ap-northeast-2\", \"ap-south-1\", \"ap-southeast-1\", \"ap-southeast-2\", \"ca-central-1\", \"eu-central-1\", \"eu-north-1\", \"eu-west-1\", \"eu-west-2\", \"eu-west-3\", \"me-south-1\", \"sa-east-1\", \"us-east-1\", \"us-east-2\", \"us-west-1\", \"us-west-2\"]);\nvar AWS_CN_REGIONS = new Set([\"cn-north-1\", \"cn-northwest-1\"]);\nvar AWS_ISO_REGIONS = new Set([\"us-iso-east-1\"]);\nvar AWS_ISO_B_REGIONS = new Set([\"us-isob-east-1\"]);\nvar AWS_US_GOV_REGIONS = new Set([\"us-gov-east-1\", \"us-gov-west-1\"]);\nexport var defaultRegionInfoProvider = function (region, options) {\n  var regionInfo = undefined;\n  switch (region) {\n    // First, try to match exact region names.\n    case \"ap-south-1\":\n      regionInfo = {\n        hostname: \"pinpoint.ap-south-1.amazonaws.com\",\n        partition: \"aws\",\n        signingService: \"mobiletargeting\"\n      };\n      break;\n    case \"ap-southeast-2\":\n      regionInfo = {\n        hostname: \"pinpoint.ap-southeast-2.amazonaws.com\",\n        partition: \"aws\",\n        signingService: \"mobiletargeting\"\n      };\n      break;\n    case \"eu-central-1\":\n      regionInfo = {\n        hostname: \"pinpoint.eu-central-1.amazonaws.com\",\n        partition: \"aws\",\n        signingService: \"mobiletargeting\"\n      };\n      break;\n    case \"eu-west-1\":\n      regionInfo = {\n        hostname: \"pinpoint.eu-west-1.amazonaws.com\",\n        partition: \"aws\",\n        signingService: \"mobiletargeting\"\n      };\n      break;\n    case \"us-east-1\":\n      regionInfo = {\n        hostname: \"pinpoint.us-east-1.amazonaws.com\",\n        partition: \"aws\",\n        signingService: \"mobiletargeting\"\n      };\n      break;\n    case \"us-west-2\":\n      regionInfo = {\n        hostname: \"pinpoint.us-west-2.amazonaws.com\",\n        partition: \"aws\",\n        signingService: \"mobiletargeting\"\n      };\n      break;\n    // Next, try to match partition endpoints.\n    default:\n      if (AWS_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws\",\n          signingService: \"mobiletargeting\"\n        };\n      }\n      if (AWS_CN_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_CN_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-cn\"\n        };\n      }\n      if (AWS_ISO_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_ISO_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-iso\"\n        };\n      }\n      if (AWS_ISO_B_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_ISO_B_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-iso-b\"\n        };\n      }\n      if (AWS_US_GOV_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_US_GOV_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-us-gov\"\n        };\n      }\n      // Finally, assume it's an AWS partition endpoint.\n      if (regionInfo === undefined) {\n        regionInfo = {\n          hostname: AWS_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws\",\n          signingService: \"mobiletargeting\"\n        };\n      }\n  }\n  return Promise.resolve(regionInfo);\n};","map":{"version":3,"names":["AWS_TEMPLATE","AWS_CN_TEMPLATE","AWS_ISO_TEMPLATE","AWS_ISO_B_TEMPLATE","AWS_US_GOV_TEMPLATE","AWS_REGIONS","Set","AWS_CN_REGIONS","AWS_ISO_REGIONS","AWS_ISO_B_REGIONS","AWS_US_GOV_REGIONS","defaultRegionInfoProvider","region","options","regionInfo","undefined","hostname","partition","signingService","has","replace","Promise","resolve"],"sources":["/Users/ericli/node_modules/@aws-sdk/client-pinpoint/endpoints.ts"],"sourcesContent":["import { RegionInfo, RegionInfoProvider } from \"@aws-sdk/types\";\n\n// Partition default templates\nconst AWS_TEMPLATE = \"pinpoint.{region}.amazonaws.com\";\nconst AWS_CN_TEMPLATE = \"pinpoint.{region}.amazonaws.com.cn\";\nconst AWS_ISO_TEMPLATE = \"pinpoint.{region}.c2s.ic.gov\";\nconst AWS_ISO_B_TEMPLATE = \"pinpoint.{region}.sc2s.sgov.gov\";\nconst AWS_US_GOV_TEMPLATE = \"pinpoint.{region}.amazonaws.com\";\n\n// Partition regions\nconst AWS_REGIONS = new Set([\n  \"ap-east-1\",\n  \"ap-northeast-1\",\n  \"ap-northeast-2\",\n  \"ap-south-1\",\n  \"ap-southeast-1\",\n  \"ap-southeast-2\",\n  \"ca-central-1\",\n  \"eu-central-1\",\n  \"eu-north-1\",\n  \"eu-west-1\",\n  \"eu-west-2\",\n  \"eu-west-3\",\n  \"me-south-1\",\n  \"sa-east-1\",\n  \"us-east-1\",\n  \"us-east-2\",\n  \"us-west-1\",\n  \"us-west-2\",\n]);\nconst AWS_CN_REGIONS = new Set([\"cn-north-1\", \"cn-northwest-1\"]);\nconst AWS_ISO_REGIONS = new Set([\"us-iso-east-1\"]);\nconst AWS_ISO_B_REGIONS = new Set([\"us-isob-east-1\"]);\nconst AWS_US_GOV_REGIONS = new Set([\"us-gov-east-1\", \"us-gov-west-1\"]);\n\nexport const defaultRegionInfoProvider: RegionInfoProvider = (region: string, options?: any) => {\n  let regionInfo: RegionInfo | undefined = undefined;\n  switch (region) {\n    // First, try to match exact region names.\n    case \"ap-south-1\":\n      regionInfo = {\n        hostname: \"pinpoint.ap-south-1.amazonaws.com\",\n        partition: \"aws\",\n        signingService: \"mobiletargeting\",\n      };\n      break;\n    case \"ap-southeast-2\":\n      regionInfo = {\n        hostname: \"pinpoint.ap-southeast-2.amazonaws.com\",\n        partition: \"aws\",\n        signingService: \"mobiletargeting\",\n      };\n      break;\n    case \"eu-central-1\":\n      regionInfo = {\n        hostname: \"pinpoint.eu-central-1.amazonaws.com\",\n        partition: \"aws\",\n        signingService: \"mobiletargeting\",\n      };\n      break;\n    case \"eu-west-1\":\n      regionInfo = {\n        hostname: \"pinpoint.eu-west-1.amazonaws.com\",\n        partition: \"aws\",\n        signingService: \"mobiletargeting\",\n      };\n      break;\n    case \"us-east-1\":\n      regionInfo = {\n        hostname: \"pinpoint.us-east-1.amazonaws.com\",\n        partition: \"aws\",\n        signingService: \"mobiletargeting\",\n      };\n      break;\n    case \"us-west-2\":\n      regionInfo = {\n        hostname: \"pinpoint.us-west-2.amazonaws.com\",\n        partition: \"aws\",\n        signingService: \"mobiletargeting\",\n      };\n      break;\n    // Next, try to match partition endpoints.\n    default:\n      if (AWS_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws\",\n          signingService: \"mobiletargeting\",\n        };\n      }\n      if (AWS_CN_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_CN_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-cn\",\n        };\n      }\n      if (AWS_ISO_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_ISO_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-iso\",\n        };\n      }\n      if (AWS_ISO_B_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_ISO_B_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-iso-b\",\n        };\n      }\n      if (AWS_US_GOV_REGIONS.has(region)) {\n        regionInfo = {\n          hostname: AWS_US_GOV_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws-us-gov\",\n        };\n      }\n      // Finally, assume it's an AWS partition endpoint.\n      if (regionInfo === undefined) {\n        regionInfo = {\n          hostname: AWS_TEMPLATE.replace(\"{region}\", region),\n          partition: \"aws\",\n          signingService: \"mobiletargeting\",\n        };\n      }\n  }\n  return Promise.resolve(regionInfo);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}