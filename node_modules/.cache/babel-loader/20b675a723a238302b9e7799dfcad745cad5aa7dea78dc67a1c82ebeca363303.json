{"ast":null,"code":"import _objectSpread from \"/Users/ericli/Desktop/pill2/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { getHostnameFromVariants } from \"./getHostnameFromVariants\";\nimport { getResolvedHostname } from \"./getResolvedHostname\";\nimport { getResolvedPartition } from \"./getResolvedPartition\";\nimport { getResolvedSigningRegion } from \"./getResolvedSigningRegion\";\nexport var getRegionInfo = function getRegionInfo(region, _ref) {\n  var _partitionHash$partit, _partitionHash$partit2, _regionHash$resolvedR, _partitionHash$partit3, _regionHash$resolvedR2, _regionHash$resolvedR3;\n  var _ref$useFipsEndpoint = _ref.useFipsEndpoint,\n    useFipsEndpoint = _ref$useFipsEndpoint === void 0 ? false : _ref$useFipsEndpoint,\n    _ref$useDualstackEndp = _ref.useDualstackEndpoint,\n    useDualstackEndpoint = _ref$useDualstackEndp === void 0 ? false : _ref$useDualstackEndp,\n    signingService = _ref.signingService,\n    regionHash = _ref.regionHash,\n    partitionHash = _ref.partitionHash;\n  var partition = getResolvedPartition(region, {\n    partitionHash: partitionHash\n  });\n  var resolvedRegion = region in regionHash ? region : (_partitionHash$partit = (_partitionHash$partit2 = partitionHash[partition]) === null || _partitionHash$partit2 === void 0 ? void 0 : _partitionHash$partit2.endpoint) !== null && _partitionHash$partit !== void 0 ? _partitionHash$partit : region;\n  var hostnameOptions = {\n    useFipsEndpoint: useFipsEndpoint,\n    useDualstackEndpoint: useDualstackEndpoint\n  };\n  var regionHostname = getHostnameFromVariants((_regionHash$resolvedR = regionHash[resolvedRegion]) === null || _regionHash$resolvedR === void 0 ? void 0 : _regionHash$resolvedR.variants, hostnameOptions);\n  var partitionHostname = getHostnameFromVariants((_partitionHash$partit3 = partitionHash[partition]) === null || _partitionHash$partit3 === void 0 ? void 0 : _partitionHash$partit3.variants, hostnameOptions);\n  var hostname = getResolvedHostname(resolvedRegion, {\n    regionHostname: regionHostname,\n    partitionHostname: partitionHostname\n  });\n  if (hostname === undefined) {\n    throw new Error(\"Endpoint resolution failed for: \".concat({\n      resolvedRegion: resolvedRegion,\n      useFipsEndpoint: useFipsEndpoint,\n      useDualstackEndpoint: useDualstackEndpoint\n    }));\n  }\n  var signingRegion = getResolvedSigningRegion(hostname, {\n    signingRegion: (_regionHash$resolvedR2 = regionHash[resolvedRegion]) === null || _regionHash$resolvedR2 === void 0 ? void 0 : _regionHash$resolvedR2.signingRegion,\n    regionRegex: partitionHash[partition].regionRegex,\n    useFipsEndpoint: useFipsEndpoint\n  });\n  return _objectSpread(_objectSpread({\n    partition: partition,\n    signingService: signingService,\n    hostname: hostname\n  }, signingRegion && {\n    signingRegion: signingRegion\n  }), ((_regionHash$resolvedR3 = regionHash[resolvedRegion]) === null || _regionHash$resolvedR3 === void 0 ? void 0 : _regionHash$resolvedR3.signingService) && {\n    signingService: regionHash[resolvedRegion].signingService\n  });\n};","map":{"version":3,"names":["getHostnameFromVariants","getResolvedHostname","getResolvedPartition","getResolvedSigningRegion","getRegionInfo","region","_ref","_partitionHash$partit","_partitionHash$partit2","_regionHash$resolvedR","_partitionHash$partit3","_regionHash$resolvedR2","_regionHash$resolvedR3","_ref$useFipsEndpoint","useFipsEndpoint","_ref$useDualstackEndp","useDualstackEndpoint","signingService","regionHash","partitionHash","partition","resolvedRegion","endpoint","hostnameOptions","regionHostname","variants","partitionHostname","hostname","undefined","Error","concat","signingRegion","regionRegex","_objectSpread"],"sources":["/Users/ericli/Desktop/pill2/node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getRegionInfo.js"],"sourcesContent":["import { getHostnameFromVariants } from \"./getHostnameFromVariants\";\nimport { getResolvedHostname } from \"./getResolvedHostname\";\nimport { getResolvedPartition } from \"./getResolvedPartition\";\nimport { getResolvedSigningRegion } from \"./getResolvedSigningRegion\";\nexport const getRegionInfo = (region, { useFipsEndpoint = false, useDualstackEndpoint = false, signingService, regionHash, partitionHash, }) => {\n    const partition = getResolvedPartition(region, { partitionHash });\n    const resolvedRegion = region in regionHash ? region : partitionHash[partition]?.endpoint ?? region;\n    const hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };\n    const regionHostname = getHostnameFromVariants(regionHash[resolvedRegion]?.variants, hostnameOptions);\n    const partitionHostname = getHostnameFromVariants(partitionHash[partition]?.variants, hostnameOptions);\n    const hostname = getResolvedHostname(resolvedRegion, { regionHostname, partitionHostname });\n    if (hostname === undefined) {\n        throw new Error(`Endpoint resolution failed for: ${{ resolvedRegion, useFipsEndpoint, useDualstackEndpoint }}`);\n    }\n    const signingRegion = getResolvedSigningRegion(hostname, {\n        signingRegion: regionHash[resolvedRegion]?.signingRegion,\n        regionRegex: partitionHash[partition].regionRegex,\n        useFipsEndpoint,\n    });\n    return {\n        partition,\n        signingService,\n        hostname,\n        ...(signingRegion && { signingRegion }),\n        ...(regionHash[resolvedRegion]?.signingService && {\n            signingService: regionHash[resolvedRegion].signingService,\n        }),\n    };\n};\n"],"mappings":";AAAA,SAASA,uBAAuB,QAAQ,2BAA2B;AACnE,SAASC,mBAAmB,QAAQ,uBAAuB;AAC3D,SAASC,oBAAoB,QAAQ,wBAAwB;AAC7D,SAASC,wBAAwB,QAAQ,4BAA4B;AACrE,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAaA,CAAIC,MAAM,EAAAC,IAAA,EAA4G;EAAA,IAAAC,qBAAA,EAAAC,sBAAA,EAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA;EAAA,IAAAC,oBAAA,GAAAP,IAAA,CAAxGQ,eAAe;IAAfA,eAAe,GAAAD,oBAAA,cAAG,KAAK,GAAAA,oBAAA;IAAAE,qBAAA,GAAAT,IAAA,CAAEU,oBAAoB;IAApBA,oBAAoB,GAAAD,qBAAA,cAAG,KAAK,GAAAA,qBAAA;IAAEE,cAAc,GAAAX,IAAA,CAAdW,cAAc;IAAEC,UAAU,GAAAZ,IAAA,CAAVY,UAAU;IAAEC,aAAa,GAAAb,IAAA,CAAba,aAAa;EACpI,IAAMC,SAAS,GAAGlB,oBAAoB,CAACG,MAAM,EAAE;IAAEc,aAAa,EAAbA;EAAc,CAAC,CAAC;EACjE,IAAME,cAAc,GAAGhB,MAAM,IAAIa,UAAU,GAAGb,MAAM,IAAAE,qBAAA,IAAAC,sBAAA,GAAGW,aAAa,CAACC,SAAS,CAAC,cAAAZ,sBAAA,uBAAxBA,sBAAA,CAA0Bc,QAAQ,cAAAf,qBAAA,cAAAA,qBAAA,GAAIF,MAAM;EACnG,IAAMkB,eAAe,GAAG;IAAET,eAAe,EAAfA,eAAe;IAAEE,oBAAoB,EAApBA;EAAqB,CAAC;EACjE,IAAMQ,cAAc,GAAGxB,uBAAuB,EAAAS,qBAAA,GAACS,UAAU,CAACG,cAAc,CAAC,cAAAZ,qBAAA,uBAA1BA,qBAAA,CAA4BgB,QAAQ,EAAEF,eAAe,CAAC;EACrG,IAAMG,iBAAiB,GAAG1B,uBAAuB,EAAAU,sBAAA,GAACS,aAAa,CAACC,SAAS,CAAC,cAAAV,sBAAA,uBAAxBA,sBAAA,CAA0Be,QAAQ,EAAEF,eAAe,CAAC;EACtG,IAAMI,QAAQ,GAAG1B,mBAAmB,CAACoB,cAAc,EAAE;IAAEG,cAAc,EAAdA,cAAc;IAAEE,iBAAiB,EAAjBA;EAAkB,CAAC,CAAC;EAC3F,IAAIC,QAAQ,KAAKC,SAAS,EAAE;IACxB,MAAM,IAAIC,KAAK,oCAAAC,MAAA,CAAoC;MAAET,cAAc,EAAdA,cAAc;MAAEP,eAAe,EAAfA,eAAe;MAAEE,oBAAoB,EAApBA;IAAqB,CAAC,EAAG;EACnH;EACA,IAAMe,aAAa,GAAG5B,wBAAwB,CAACwB,QAAQ,EAAE;IACrDI,aAAa,GAAApB,sBAAA,GAAEO,UAAU,CAACG,cAAc,CAAC,cAAAV,sBAAA,uBAA1BA,sBAAA,CAA4BoB,aAAa;IACxDC,WAAW,EAAEb,aAAa,CAACC,SAAS,CAAC,CAACY,WAAW;IACjDlB,eAAe,EAAfA;EACJ,CAAC,CAAC;EACF,OAAAmB,aAAA,CAAAA,aAAA;IACIb,SAAS,EAATA,SAAS;IACTH,cAAc,EAAdA,cAAc;IACdU,QAAQ,EAARA;EAAQ,GACJI,aAAa,IAAI;IAAEA,aAAa,EAAbA;EAAc,CAAC,GAClC,EAAAnB,sBAAA,GAAAM,UAAU,CAACG,cAAc,CAAC,cAAAT,sBAAA,uBAA1BA,sBAAA,CAA4BK,cAAc,KAAI;IAC9CA,cAAc,EAAEC,UAAU,CAACG,cAAc,CAAC,CAACJ;EAC/C,CAAC;AAET,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}