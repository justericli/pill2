{"ast":null,"code":"/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport { LexRuntimeServiceClient, PostTextCommand, PostContentCommand } from '@aws-sdk/client-lex-runtime-service';\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { convert } from './AWSLexProviderHelper/convert';\nvar logger = new Logger('AWSLexProvider');\nvar AWSLexProvider = /** @class */function (_super) {\n  __extends(AWSLexProvider, _super);\n  function AWSLexProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _this = _super.call(this, options) || this;\n    _this._botsCompleteCallback = {};\n    return _this;\n  }\n  AWSLexProvider.prototype.getProviderName = function () {\n    return 'AWSLexProvider';\n  };\n  AWSLexProvider.prototype.reportBotStatus = function (data, botname) {\n    var _this = this;\n    // Check if state is fulfilled to resolve onFullfilment promise\n    logger.debug('postContent state', data.dialogState);\n    if (data.dialogState === 'ReadyForFulfillment' || data.dialogState === 'Fulfilled') {\n      if (typeof this._botsCompleteCallback[botname] === 'function') {\n        setTimeout(function () {\n          return _this._botsCompleteCallback[botname](null, {\n            slots: data.slots\n          });\n        }, 0);\n      }\n      if (this._config && typeof this._config[botname].onComplete === 'function') {\n        setTimeout(function () {\n          return _this._config[botname].onComplete(null, {\n            slots: data.slots\n          });\n        }, 0);\n      }\n    }\n    if (data.dialogState === 'Failed') {\n      if (typeof this._botsCompleteCallback[botname] === 'function') {\n        setTimeout(function () {\n          return _this._botsCompleteCallback[botname]('Bot conversation failed');\n        }, 0);\n      }\n      if (this._config && typeof this._config[botname].onComplete === 'function') {\n        setTimeout(function () {\n          return _this._config[botname].onComplete('Bot conversation failed');\n        }, 0);\n      }\n    }\n  };\n  AWSLexProvider.prototype.sendMessage = function (botname, message) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, params, postTextCommand, data, err_1, content, messageType, postContentCommand, data, audioArray, err_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this._config[botname]) {\n              return [2 /*return*/, Promise.reject('Bot ' + botname + ' does not exist')];\n            }\n            return [4 /*yield*/, Credentials.get()];\n          case 1:\n            credentials = _a.sent();\n            if (!credentials) {\n              return [2 /*return*/, Promise.reject('No credentials')];\n            }\n            this.lexRuntimeServiceClient = new LexRuntimeServiceClient({\n              region: this._config[botname].region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            if (!(typeof message === 'string')) return [3 /*break*/, 6];\n            params = {\n              botAlias: this._config[botname].alias,\n              botName: botname,\n              inputText: message,\n              userId: credentials.identityId\n            };\n            logger.debug('postText to lex', message);\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n            postTextCommand = new PostTextCommand(params);\n            return [4 /*yield*/, this.lexRuntimeServiceClient.send(postTextCommand)];\n          case 3:\n            data = _a.sent();\n            this.reportBotStatus(data, botname);\n            return [2 /*return*/, data];\n          case 4:\n            err_1 = _a.sent();\n            return [2 /*return*/, Promise.reject(err_1)];\n          case 5:\n            return [3 /*break*/, 11];\n          case 6:\n            content = message.content, messageType = message.options.messageType;\n            if (messageType === 'voice') {\n              params = {\n                botAlias: this._config[botname].alias,\n                botName: botname,\n                contentType: 'audio/x-l16; sample-rate=16000',\n                inputStream: content,\n                userId: credentials.identityId,\n                accept: 'audio/mpeg'\n              };\n            } else {\n              params = {\n                botAlias: this._config[botname].alias,\n                botName: botname,\n                contentType: 'text/plain; charset=utf-8',\n                inputStream: content,\n                userId: credentials.identityId,\n                accept: 'audio/mpeg'\n              };\n            }\n            logger.debug('postContent to lex', message);\n            _a.label = 7;\n          case 7:\n            _a.trys.push([7, 10,, 11]);\n            postContentCommand = new PostContentCommand(params);\n            return [4 /*yield*/, this.lexRuntimeServiceClient.send(postContentCommand)];\n          case 8:\n            data = _a.sent();\n            return [4 /*yield*/, convert(data.audioStream)];\n          case 9:\n            audioArray = _a.sent();\n            this.reportBotStatus(data, botname);\n            return [2 /*return*/, __assign(__assign({}, data), {\n              audioStream: audioArray\n            })];\n          case 10:\n            err_2 = _a.sent();\n            return [2 /*return*/, Promise.reject(err_2)];\n          case 11:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSLexProvider.prototype.onComplete = function (botname, callback) {\n    if (!this._config[botname]) {\n      throw new ErrorEvent('Bot ' + botname + ' does not exist');\n    }\n    this._botsCompleteCallback[botname] = callback;\n  };\n  return AWSLexProvider;\n}(AbstractInteractionsProvider);\nexport { AWSLexProvider };","map":{"version":3,"names":["AbstractInteractionsProvider","LexRuntimeServiceClient","PostTextCommand","PostContentCommand","ConsoleLogger","Logger","Credentials","getAmplifyUserAgent","convert","logger","AWSLexProvider","_super","__extends","options","_this","call","_botsCompleteCallback","prototype","getProviderName","reportBotStatus","data","botname","debug","dialogState","setTimeout","slots","_config","onComplete","sendMessage","message","Promise","reject","get","credentials","_a","sent","lexRuntimeServiceClient","region","customUserAgent","params","botAlias","alias","botName","inputText","userId","identityId","postTextCommand","send","err_1","content","messageType","contentType","inputStream","accept","postContentCommand","audioStream","audioArray","__assign","err_2","callback","ErrorEvent"],"sources":["/Users/ericli/node_modules/@aws-amplify/interactions/src/Providers/AWSLexProvider.ts"],"sourcesContent":["/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport {\n\tInteractionsOptions,\n\tInteractionsResponse,\n\tInteractionsMessage,\n} from '../types';\nimport {\n\tLexRuntimeServiceClient,\n\tPostTextCommand,\n\tPostContentCommand,\n} from '@aws-sdk/client-lex-runtime-service';\nimport {\n\tConsoleLogger as Logger,\n\tCredentials,\n\tgetAmplifyUserAgent,\n} from '@aws-amplify/core';\nimport { convert } from './AWSLexProviderHelper/convert';\n\nconst logger = new Logger('AWSLexProvider');\n\nexport class AWSLexProvider extends AbstractInteractionsProvider {\n\tprivate lexRuntimeServiceClient: LexRuntimeServiceClient;\n\tprivate _botsCompleteCallback: object;\n\n\tconstructor(options: InteractionsOptions = {}) {\n\t\tsuper(options);\n\t\tthis._botsCompleteCallback = {};\n\t}\n\n\tgetProviderName() {\n\t\treturn 'AWSLexProvider';\n\t}\n\n\treportBotStatus(data, botname) {\n\t\t// Check if state is fulfilled to resolve onFullfilment promise\n\t\tlogger.debug('postContent state', data.dialogState);\n\t\tif (\n\t\t\tdata.dialogState === 'ReadyForFulfillment' ||\n\t\t\tdata.dialogState === 'Fulfilled'\n\t\t) {\n\t\t\tif (typeof this._botsCompleteCallback[botname] === 'function') {\n\t\t\t\tsetTimeout(\n\t\t\t\t\t() =>\n\t\t\t\t\t\tthis._botsCompleteCallback[botname](null, { slots: data.slots }),\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tthis._config &&\n\t\t\t\ttypeof this._config[botname].onComplete === 'function'\n\t\t\t) {\n\t\t\t\tsetTimeout(\n\t\t\t\t\t() => this._config[botname].onComplete(null, { slots: data.slots }),\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (data.dialogState === 'Failed') {\n\t\t\tif (typeof this._botsCompleteCallback[botname] === 'function') {\n\t\t\t\tsetTimeout(\n\t\t\t\t\t() => this._botsCompleteCallback[botname]('Bot conversation failed'),\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tthis._config &&\n\t\t\t\ttypeof this._config[botname].onComplete === 'function'\n\t\t\t) {\n\t\t\t\tsetTimeout(\n\t\t\t\t\t() => this._config[botname].onComplete('Bot conversation failed'),\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync sendMessage(\n\t\tbotname: string,\n\t\tmessage: string | InteractionsMessage\n\t): Promise<InteractionsResponse> {\n\t\tif (!this._config[botname]) {\n\t\t\treturn Promise.reject('Bot ' + botname + ' does not exist');\n\t\t}\n\t\tconst credentials = await Credentials.get();\n\t\tif (!credentials) {\n\t\t\treturn Promise.reject('No credentials');\n\t\t}\n\n\t\tthis.lexRuntimeServiceClient = new LexRuntimeServiceClient({\n\t\t\tregion: this._config[botname].region,\n\t\t\tcredentials,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\n\t\tlet params;\n\t\tif (typeof message === 'string') {\n\t\t\tparams = {\n\t\t\t\tbotAlias: this._config[botname].alias,\n\t\t\t\tbotName: botname,\n\t\t\t\tinputText: message,\n\t\t\t\tuserId: credentials.identityId,\n\t\t\t};\n\n\t\t\tlogger.debug('postText to lex', message);\n\n\t\t\ttry {\n\t\t\t\tconst postTextCommand = new PostTextCommand(params);\n\t\t\t\tconst data = await this.lexRuntimeServiceClient.send(postTextCommand);\n\t\t\t\tthis.reportBotStatus(data, botname);\n\t\t\t\treturn data;\n\t\t\t} catch (err) {\n\t\t\t\treturn Promise.reject(err);\n\t\t\t}\n\t\t} else {\n\t\t\tconst {\n\t\t\t\tcontent,\n\t\t\t\toptions: { messageType },\n\t\t\t} = message;\n\t\t\tif (messageType === 'voice') {\n\t\t\t\tparams = {\n\t\t\t\t\tbotAlias: this._config[botname].alias,\n\t\t\t\t\tbotName: botname,\n\t\t\t\t\tcontentType: 'audio/x-l16; sample-rate=16000',\n\t\t\t\t\tinputStream: content,\n\t\t\t\t\tuserId: credentials.identityId,\n\t\t\t\t\taccept: 'audio/mpeg',\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tparams = {\n\t\t\t\t\tbotAlias: this._config[botname].alias,\n\t\t\t\t\tbotName: botname,\n\t\t\t\t\tcontentType: 'text/plain; charset=utf-8',\n\t\t\t\t\tinputStream: content,\n\t\t\t\t\tuserId: credentials.identityId,\n\t\t\t\t\taccept: 'audio/mpeg',\n\t\t\t\t};\n\t\t\t}\n\t\t\tlogger.debug('postContent to lex', message);\n\t\t\ttry {\n\t\t\t\tconst postContentCommand = new PostContentCommand(params);\n\t\t\t\tconst data = await this.lexRuntimeServiceClient.send(\n\t\t\t\t\tpostContentCommand\n\t\t\t\t);\n\t\t\t\tconst audioArray = await convert(data.audioStream);\n\t\t\t\tthis.reportBotStatus(data, botname);\n\t\t\t\treturn { ...data, ...{ audioStream: audioArray } };\n\t\t\t} catch (err) {\n\t\t\t\treturn Promise.reject(err);\n\t\t\t}\n\t\t}\n\t}\n\n\tonComplete(botname: string, callback) {\n\t\tif (!this._config[botname]) {\n\t\t\tthrow new ErrorEvent('Bot ' + botname + ' does not exist');\n\t\t}\n\t\tthis._botsCompleteCallback[botname] = callback;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}