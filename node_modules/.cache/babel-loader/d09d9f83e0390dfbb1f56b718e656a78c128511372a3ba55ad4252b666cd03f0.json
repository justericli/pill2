{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('AbstractXRProvider');\nvar AbstractXRProvider = /** @class */function () {\n  function AbstractXRProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    this._config = options;\n  }\n  AbstractXRProvider.prototype.configure = function (config) {\n    if (config === void 0) {\n      config = {};\n    }\n    this._config = __assign(__assign({}, config), this._config);\n    logger.debug(\"configure \" + this.getProviderName(), this._config);\n    return this.options;\n  };\n  AbstractXRProvider.prototype.getCategory = function () {\n    return 'XR';\n  };\n  Object.defineProperty(AbstractXRProvider.prototype, \"options\", {\n    get: function () {\n      return __assign({}, this._config);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return AbstractXRProvider;\n}();\nexport { AbstractXRProvider };","map":{"version":3,"names":["ConsoleLogger","Logger","logger","AbstractXRProvider","options","_config","prototype","configure","config","__assign","debug","getProviderName","getCategory","Object","defineProperty","get"],"sources":["/Users/ericli/node_modules/aws-amplify/node_modules/@aws-amplify/xr/src/Providers/XRProvider.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { XRProvider, ProviderOptions, SceneOptions } from '../types';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\n\nconst logger = new Logger('AbstractXRProvider');\n\nexport abstract class AbstractXRProvider implements XRProvider {\n\tprivate _config: ProviderOptions;\n\n\tconstructor(options: ProviderOptions = {}) {\n\t\tthis._config = options;\n\t}\n\n\tconfigure(config: ProviderOptions = {}): ProviderOptions {\n\t\tthis._config = { ...config, ...this._config };\n\n\t\tlogger.debug(`configure ${this.getProviderName()}`, this._config);\n\n\t\treturn this.options;\n\t}\n\n\tgetCategory() {\n\t\treturn 'XR';\n\t}\n\n\tabstract getProviderName(): string;\n\n\tprotected get options(): ProviderOptions {\n\t\treturn { ...this._config };\n\t}\n\n\tpublic abstract loadScene(\n\t\tsceneName: string,\n\t\tdomElementId: string,\n\t\tsceneOptions: SceneOptions\n\t): void;\n\tpublic abstract isSceneLoaded(sceneName: string);\n\tpublic abstract getSceneController(sceneName: string): any;\n\tpublic abstract isVRCapable(sceneName: string): boolean;\n\tpublic abstract isVRPresentationActive(sceneName: string): boolean;\n\tpublic abstract start(sceneName: string): void;\n\tpublic abstract enterVR(sceneName: string): void;\n\tpublic abstract exitVR(sceneName: string): void;\n\tpublic abstract isMuted(sceneName: string): boolean;\n\tpublic abstract setMuted(sceneName: string, muted: boolean): void;\n\tpublic abstract onSceneEvent(\n\t\tsceneName: string,\n\t\teventName: string,\n\t\teventHandler: Function\n\t): void;\n\tpublic abstract enableAudio(sceneName: string): void;\n}\n"],"mappings":";AAGA,SAASA,aAAa,IAAIC,MAAM,QAAQ,mBAAmB;AAE3D,IAAMC,MAAM,GAAG,IAAID,MAAM,CAAC,oBAAoB,CAAC;AAE/C,IAAAE,kBAAA;EAGC,SAAAA,mBAAYC,OAA6B;IAA7B,IAAAA,OAAA;MAAAA,OAAA,KAA6B;IAAA;IACxC,IAAI,CAACC,OAAO,GAAGD,OAAO;EACvB;EAEAD,kBAAA,CAAAG,SAAA,CAAAC,SAAS,GAAT,UAAUC,MAA4B;IAA5B,IAAAA,MAAA;MAAAA,MAAA,KAA4B;IAAA;IACrC,IAAI,CAACH,OAAO,GAAAI,QAAA,CAAAA,QAAA,KAAQD,MAAM,GAAK,IAAI,CAACH,OAAO,CAAE;IAE7CH,MAAM,CAACQ,KAAK,CAAC,eAAa,IAAI,CAACC,eAAe,EAAI,EAAE,IAAI,CAACN,OAAO,CAAC;IAEjE,OAAO,IAAI,CAACD,OAAO;EACpB,CAAC;EAEDD,kBAAA,CAAAG,SAAA,CAAAM,WAAW,GAAX;IACC,OAAO,IAAI;EACZ,CAAC;EAIDC,MAAA,CAAAC,cAAA,CAAcX,kBAAA,CAAAG,SAAA,WAAO;SAArB,SAAAS,CAAA;MACC,OAAAN,QAAA,KAAY,IAAI,CAACJ,OAAO;IACzB,CAAC;;;;EAsBF,OAAAF,kBAAC;AAAD,CAAC,EA7CD"},"metadata":{},"sourceType":"module","externalDependencies":[]}