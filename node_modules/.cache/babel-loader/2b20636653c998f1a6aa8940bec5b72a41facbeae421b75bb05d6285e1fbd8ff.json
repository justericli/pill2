{"ast":null,"code":"import _slicedToArray from \"/Users/ericli/Desktop/pill2/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _defineProperty from \"/Users/ericli/Desktop/pill2/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _DEFAULT_PORTS;\nimport { EndpointURLScheme } from \"@aws-sdk/types\";\nimport { isIpAddress } from \"./isIpAddress\";\nvar DEFAULT_PORTS = (_DEFAULT_PORTS = {}, _defineProperty(_DEFAULT_PORTS, EndpointURLScheme.HTTP, 80), _defineProperty(_DEFAULT_PORTS, EndpointURLScheme.HTTPS, 443), _DEFAULT_PORTS);\nexport var parseURL = function parseURL(value) {\n  var whatwgURL = function () {\n    try {\n      if (value instanceof URL) {\n        return value;\n      }\n      if (typeof value === \"object\" && \"hostname\" in value) {\n        var _hostname = value.hostname,\n          port = value.port,\n          _value$protocol = value.protocol,\n          _protocol = _value$protocol === void 0 ? \"\" : _value$protocol,\n          _value$path = value.path,\n          path = _value$path === void 0 ? \"\" : _value$path,\n          _value$query = value.query,\n          query = _value$query === void 0 ? {} : _value$query;\n        var url = new URL(\"\".concat(_protocol, \"//\").concat(_hostname).concat(port ? \":\".concat(port) : \"\").concat(path));\n        url.search = Object.entries(query).map(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n            k = _ref2[0],\n            v = _ref2[1];\n          return \"\".concat(k, \"=\").concat(v);\n        }).join(\"&\");\n        return url;\n      }\n      return new URL(value);\n    } catch (error) {\n      return null;\n    }\n  }();\n  if (!whatwgURL) {\n    console.error(\"Unable to parse \".concat(JSON.stringify(value), \" as a whatwg URL.\"));\n    return null;\n  }\n  var urlString = whatwgURL.href;\n  var host = whatwgURL.host,\n    hostname = whatwgURL.hostname,\n    pathname = whatwgURL.pathname,\n    protocol = whatwgURL.protocol,\n    search = whatwgURL.search;\n  if (search) {\n    return null;\n  }\n  var scheme = protocol.slice(0, -1);\n  if (!Object.values(EndpointURLScheme).includes(scheme)) {\n    return null;\n  }\n  var isIp = isIpAddress(hostname);\n  var inputContainsDefaultPort = urlString.includes(\"\".concat(host, \":\").concat(DEFAULT_PORTS[scheme])) || typeof value === \"string\" && value.includes(\"\".concat(host, \":\").concat(DEFAULT_PORTS[scheme]));\n  var authority = \"\".concat(host).concat(inputContainsDefaultPort ? \":\".concat(DEFAULT_PORTS[scheme]) : \"\");\n  return {\n    scheme: scheme,\n    authority: authority,\n    path: pathname,\n    normalizedPath: pathname.endsWith(\"/\") ? pathname : \"\".concat(pathname, \"/\"),\n    isIp: isIp\n  };\n};","map":{"version":3,"names":["EndpointURLScheme","isIpAddress","DEFAULT_PORTS","_DEFAULT_PORTS","_defineProperty","HTTP","HTTPS","parseURL","value","whatwgURL","URL","hostname","port","_value$protocol","protocol","_value$path","path","_value$query","query","url","concat","search","Object","entries","map","_ref","_ref2","_slicedToArray","k","v","join","error","console","JSON","stringify","urlString","href","host","pathname","scheme","slice","values","includes","isIp","inputContainsDefaultPort","authority","normalizedPath","endsWith"],"sources":["/Users/ericli/Desktop/pill2/node_modules/@aws-sdk/util-endpoints/dist-es/lib/parseURL.js"],"sourcesContent":["import { EndpointURLScheme } from \"@aws-sdk/types\";\nimport { isIpAddress } from \"./isIpAddress\";\nconst DEFAULT_PORTS = {\n    [EndpointURLScheme.HTTP]: 80,\n    [EndpointURLScheme.HTTPS]: 443,\n};\nexport const parseURL = (value) => {\n    const whatwgURL = (() => {\n        try {\n            if (value instanceof URL) {\n                return value;\n            }\n            if (typeof value === \"object\" && \"hostname\" in value) {\n                const { hostname, port, protocol = \"\", path = \"\", query = {} } = value;\n                const url = new URL(`${protocol}//${hostname}${port ? `:${port}` : \"\"}${path}`);\n                url.search = Object.entries(query)\n                    .map(([k, v]) => `${k}=${v}`)\n                    .join(\"&\");\n                return url;\n            }\n            return new URL(value);\n        }\n        catch (error) {\n            return null;\n        }\n    })();\n    if (!whatwgURL) {\n        console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);\n        return null;\n    }\n    const urlString = whatwgURL.href;\n    const { host, hostname, pathname, protocol, search } = whatwgURL;\n    if (search) {\n        return null;\n    }\n    const scheme = protocol.slice(0, -1);\n    if (!Object.values(EndpointURLScheme).includes(scheme)) {\n        return null;\n    }\n    const isIp = isIpAddress(hostname);\n    const inputContainsDefaultPort = urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) ||\n        (typeof value === \"string\" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`));\n    const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;\n    return {\n        scheme,\n        authority,\n        path: pathname,\n        normalizedPath: pathname.endsWith(\"/\") ? pathname : `${pathname}/`,\n        isIp,\n    };\n};\n"],"mappings":";;;AAAA,SAASA,iBAAiB,QAAQ,gBAAgB;AAClD,SAASC,WAAW,QAAQ,eAAe;AAC3C,IAAMC,aAAa,IAAAC,cAAA,OAAAC,eAAA,CAAAD,cAAA,EACdH,iBAAiB,CAACK,IAAI,EAAG,EAAE,GAAAD,eAAA,CAAAD,cAAA,EAC3BH,iBAAiB,CAACM,KAAK,EAAG,GAAG,GAAAH,cAAA,CACjC;AACD,OAAO,IAAMI,QAAQ,GAAG,SAAXA,QAAQA,CAAIC,KAAK,EAAK;EAC/B,IAAMC,SAAS,GAAI,YAAM;IACrB,IAAI;MACA,IAAID,KAAK,YAAYE,GAAG,EAAE;QACtB,OAAOF,KAAK;MAChB;MACA,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAI,UAAU,IAAIA,KAAK,EAAE;QAClD,IAAQG,SAAQ,GAAiDH,KAAK,CAA9DG,QAAQ;UAAEC,IAAI,GAA2CJ,KAAK,CAApDI,IAAI;UAAAC,eAAA,GAA2CL,KAAK,CAA9CM,QAAQ;UAARA,SAAQ,GAAAD,eAAA,cAAG,EAAE,GAAAA,eAAA;UAAAE,WAAA,GAA4BP,KAAK,CAA/BQ,IAAI;UAAJA,IAAI,GAAAD,WAAA,cAAG,EAAE,GAAAA,WAAA;UAAAE,YAAA,GAAiBT,KAAK,CAApBU,KAAK;UAALA,KAAK,GAAAD,YAAA,cAAG,CAAC,CAAC,GAAAA,YAAA;QAC5D,IAAME,GAAG,GAAG,IAAIT,GAAG,IAAAU,MAAA,CAAIN,SAAQ,QAAAM,MAAA,CAAKT,SAAQ,EAAAS,MAAA,CAAGR,IAAI,OAAAQ,MAAA,CAAOR,IAAI,IAAK,EAAE,EAAAQ,MAAA,CAAGJ,IAAI,EAAG;QAC/EG,GAAG,CAACE,MAAM,GAAGC,MAAM,CAACC,OAAO,CAACL,KAAK,CAAC,CAC7BM,GAAG,CAAC,UAAAC,IAAA;UAAA,IAAAC,KAAA,GAAAC,cAAA,CAAAF,IAAA;YAAEG,CAAC,GAAAF,KAAA;YAAEG,CAAC,GAAAH,KAAA;UAAA,UAAAN,MAAA,CAASQ,CAAC,OAAAR,MAAA,CAAIS,CAAC;QAAA,CAAE,CAAC,CAC5BC,IAAI,CAAC,GAAG,CAAC;QACd,OAAOX,GAAG;MACd;MACA,OAAO,IAAIT,GAAG,CAACF,KAAK,CAAC;IACzB,CAAC,CACD,OAAOuB,KAAK,EAAE;MACV,OAAO,IAAI;IACf;EACJ,CAAC,EAAG;EACJ,IAAI,CAACtB,SAAS,EAAE;IACZuB,OAAO,CAACD,KAAK,oBAAAX,MAAA,CAAoBa,IAAI,CAACC,SAAS,CAAC1B,KAAK,CAAC,uBAAoB;IAC1E,OAAO,IAAI;EACf;EACA,IAAM2B,SAAS,GAAG1B,SAAS,CAAC2B,IAAI;EAChC,IAAQC,IAAI,GAA2C5B,SAAS,CAAxD4B,IAAI;IAAE1B,QAAQ,GAAiCF,SAAS,CAAlDE,QAAQ;IAAE2B,QAAQ,GAAuB7B,SAAS,CAAxC6B,QAAQ;IAAExB,QAAQ,GAAaL,SAAS,CAA9BK,QAAQ;IAAEO,MAAM,GAAKZ,SAAS,CAApBY,MAAM;EAClD,IAAIA,MAAM,EAAE;IACR,OAAO,IAAI;EACf;EACA,IAAMkB,MAAM,GAAGzB,QAAQ,CAAC0B,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACpC,IAAI,CAAClB,MAAM,CAACmB,MAAM,CAACzC,iBAAiB,CAAC,CAAC0C,QAAQ,CAACH,MAAM,CAAC,EAAE;IACpD,OAAO,IAAI;EACf;EACA,IAAMI,IAAI,GAAG1C,WAAW,CAACU,QAAQ,CAAC;EAClC,IAAMiC,wBAAwB,GAAGT,SAAS,CAACO,QAAQ,IAAAtB,MAAA,CAAIiB,IAAI,OAAAjB,MAAA,CAAIlB,aAAa,CAACqC,MAAM,CAAC,EAAG,IAClF,OAAO/B,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACkC,QAAQ,IAAAtB,MAAA,CAAIiB,IAAI,OAAAjB,MAAA,CAAIlB,aAAa,CAACqC,MAAM,CAAC,EAAI;EACrF,IAAMM,SAAS,MAAAzB,MAAA,CAAMiB,IAAI,EAAAjB,MAAA,CAAGwB,wBAAwB,OAAAxB,MAAA,CAAOlB,aAAa,CAACqC,MAAM,CAAC,MAAO,CAAE;EACzF,OAAO;IACHA,MAAM,EAANA,MAAM;IACNM,SAAS,EAATA,SAAS;IACT7B,IAAI,EAAEsB,QAAQ;IACdQ,cAAc,EAAER,QAAQ,CAACS,QAAQ,CAAC,GAAG,CAAC,GAAGT,QAAQ,MAAAlB,MAAA,CAAMkB,QAAQ,MAAG;IAClEK,IAAI,EAAJA;EACJ,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}