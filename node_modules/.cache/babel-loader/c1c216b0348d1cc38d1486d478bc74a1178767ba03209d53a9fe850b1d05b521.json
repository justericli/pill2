{"ast":null,"code":"/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { ConsoleLogger as Logger, ClientDevice, Credentials, Signer, JS, Hub, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { PinpointClient, PutEventsCommand, UpdateEndpointCommand, GetUserEndpointsCommand } from '@aws-sdk/client-pinpoint';\nimport Cache from '@aws-amplify/cache';\nimport { v1 as uuid } from 'uuid';\nimport EventsBuffer from './EventBuffer';\nvar AMPLIFY_SYMBOL = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function' ? Symbol.for('amplify_default') : '@@amplify_default';\nvar dispatchAnalyticsEvent = function (event, data) {\n  Hub.dispatch('analytics', {\n    event: event,\n    data: data\n  }, 'Analytics', AMPLIFY_SYMBOL);\n};\nvar logger = new Logger('AWSPinpointProvider');\nvar RETRYABLE_CODES = [429, 500];\nvar ACCEPTED_CODES = [202];\nvar FORBIDDEN_CODE = 403;\nvar BAD_REQUEST_CODE = 400;\nvar MOBILE_SERVICE_NAME = 'mobiletargeting';\nvar EXPIRED_TOKEN_CODE = 'ExpiredTokenException';\nvar UPDATE_ENDPOINT = '_update_endpoint';\nvar SESSION_START = '_session.start';\nvar SESSION_STOP = '_session.stop';\nvar BEACON_SUPPORTED = typeof navigator !== 'undefined' && navigator && typeof navigator.sendBeacon === 'function';\n// events buffer\nvar BUFFER_SIZE = 1000;\nvar FLUSH_SIZE = 100;\nvar FLUSH_INTERVAL = 5 * 1000; // 5s\nvar RESEND_LIMIT = 5;\n// params: { event: {name: , .... }, timeStamp, config, resendLimits }\nvar AWSPinpointProvider = /** @class */function () {\n  function AWSPinpointProvider(config) {\n    this._endpointGenerating = true;\n    this._endpointUpdateInProgress = false;\n    this._buffer = null;\n    this._endpointBuffer = [];\n    this._config = config ? config : {};\n    this._config.bufferSize = this._config.bufferSize || BUFFER_SIZE;\n    this._config.flushSize = this._config.flushSize || FLUSH_SIZE;\n    this._config.flushInterval = this._config.flushInterval || FLUSH_INTERVAL;\n    this._config.resendLimit = this._config.resendLimit || RESEND_LIMIT;\n    this._clientInfo = ClientDevice.clientInfo();\n  }\n  /**\n   * get the category of the plugin\n   */\n  AWSPinpointProvider.prototype.getCategory = function () {\n    return AWSPinpointProvider.category;\n  };\n  /**\n   * get provider name of the plugin\n   */\n  AWSPinpointProvider.prototype.getProviderName = function () {\n    return AWSPinpointProvider.providerName;\n  };\n  /**\n   * configure the plugin\n   * @param {Object} config - configuration\n   */\n  AWSPinpointProvider.prototype.configure = function (config) {\n    var _this = this;\n    logger.debug('configure Analytics', config);\n    var conf = config || {};\n    this._config = Object.assign({}, this._config, conf);\n    if (this._config.appId && !this._config.disabled) {\n      if (!this._config.endpointId) {\n        var cacheKey = this.getProviderName() + '_' + this._config.appId;\n        this._getEndpointId(cacheKey).then(function (endpointId) {\n          logger.debug('setting endpoint id from the cache', endpointId);\n          _this._config.endpointId = endpointId;\n          dispatchAnalyticsEvent('pinpointProvider_configured', null);\n        }).catch(function (err) {\n          logger.debug('Failed to generate endpointId', err);\n        });\n      } else {\n        dispatchAnalyticsEvent('pinpointProvider_configured', null);\n      }\n    } else {\n      this._flushBuffer();\n    }\n    return this._config;\n  };\n  /**\n   * record an event\n   * @param {Object} params - the params of an event\n   */\n  AWSPinpointProvider.prototype.record = function (params, handlers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, timestamp;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('_public record', params);\n            return [4 /*yield*/, this._getCredentials()];\n          case 1:\n            credentials = _a.sent();\n            if (!credentials || !this._config.appId || !this._config.region) {\n              logger.debug('cannot send events without credentials, applicationId or region');\n              return [2 /*return*/, handlers.reject(new Error('No credentials, applicationId or region'))];\n            }\n            this._initClients(credentials);\n            timestamp = new Date().getTime();\n            // attach the session and eventId\n            this._generateSession(params);\n            params.event.eventId = uuid();\n            Object.assign(params, {\n              timestamp: timestamp,\n              config: this._config\n            });\n            if (params.event.immediate) {\n              return [2 /*return*/, this._send(params, handlers)];\n            } else {\n              this._putToBuffer(params, handlers);\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._sendEndpointUpdate = function (endpointObject) {\n    return __awaiter(this, void 0, void 0, function () {\n      var next;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this._endpointUpdateInProgress) {\n              this._endpointBuffer.push(endpointObject);\n              return [2 /*return*/];\n            }\n\n            this._endpointUpdateInProgress = true;\n            return [4 /*yield*/, this._updateEndpoint(endpointObject)];\n          case 1:\n            _a.sent();\n            next = this._endpointBuffer.shift();\n            this._endpointUpdateInProgress = false;\n            next && this._sendEndpointUpdate(next);\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * @private\n   * @param params - params for event recording\n   * Put events into buffer\n   */\n  AWSPinpointProvider.prototype._putToBuffer = function (params, handlers) {\n    if (params.event.name === UPDATE_ENDPOINT) {\n      this._sendEndpointUpdate({\n        params: params,\n        handlers: handlers\n      });\n      return;\n    }\n    this._buffer && this._buffer.push({\n      params: params,\n      handlers: handlers\n    });\n  };\n  AWSPinpointProvider.prototype._generateSession = function (params) {\n    this._sessionId = this._sessionId || uuid();\n    var event = params.event;\n    switch (event.name) {\n      case SESSION_START:\n        // refresh the session id and session start time\n        this._sessionStartTimestamp = new Date().getTime();\n        this._sessionId = uuid();\n        event.session = {\n          Id: this._sessionId,\n          StartTimestamp: new Date(this._sessionStartTimestamp).toISOString()\n        };\n        break;\n      case SESSION_STOP:\n        var stopTimestamp = new Date().getTime();\n        this._sessionStartTimestamp = this._sessionStartTimestamp || new Date().getTime();\n        this._sessionId = this._sessionId || uuid();\n        event.session = {\n          Id: this._sessionId,\n          Duration: stopTimestamp - this._sessionStartTimestamp,\n          StartTimestamp: new Date(this._sessionStartTimestamp).toISOString(),\n          StopTimestamp: new Date(stopTimestamp).toISOString()\n        };\n        this._sessionId = undefined;\n        this._sessionStartTimestamp = undefined;\n        break;\n      default:\n        this._sessionStartTimestamp = this._sessionStartTimestamp || new Date().getTime();\n        this._sessionId = this._sessionId || uuid();\n        event.session = {\n          Id: this._sessionId,\n          StartTimestamp: new Date(this._sessionStartTimestamp).toISOString()\n        };\n    }\n  };\n  AWSPinpointProvider.prototype._send = function (params, handlers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var event;\n      return __generator(this, function (_a) {\n        event = params.event;\n        switch (event.name) {\n          case UPDATE_ENDPOINT:\n            return [2 /*return*/, this._updateEndpoint({\n              params: params,\n              handlers: handlers\n            })];\n          case SESSION_STOP:\n            return [2 /*return*/, this._pinpointSendStopSession(params, handlers)];\n          default:\n            return [2 /*return*/, this._pinpointPutEvents(params, handlers)];\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._generateBatchItemContext = function (params) {\n    var _a;\n    var event = params.event,\n      timestamp = params.timestamp,\n      config = params.config;\n    var name = event.name,\n      attributes = event.attributes,\n      metrics = event.metrics,\n      eventId = event.eventId,\n      session = event.session;\n    var appId = config.appId,\n      endpointId = config.endpointId;\n    var endpointContext = {};\n    var eventParams = {\n      ApplicationId: appId,\n      EventsRequest: {\n        BatchItem: {}\n      }\n    };\n    var endpointObj = {};\n    endpointObj.Endpoint = endpointContext;\n    endpointObj.Events = (_a = {}, _a[eventId] = {\n      EventType: name,\n      Timestamp: new Date(timestamp).toISOString(),\n      Attributes: attributes,\n      Metrics: metrics,\n      Session: session\n    }, _a);\n    eventParams.EventsRequest.BatchItem[endpointId] = endpointObj;\n    return eventParams;\n  };\n  AWSPinpointProvider.prototype._pinpointPutEvents = function (params, handlers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var eventId, endpointId, eventParams, command, data, _a, _b, _c, StatusCode, Message, err_1;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            eventId = params.event.eventId, endpointId = params.config.endpointId;\n            eventParams = this._generateBatchItemContext(params);\n            command = new PutEventsCommand(eventParams);\n            _d.label = 1;\n          case 1:\n            _d.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this.pinpointClient.send(command)];\n          case 2:\n            data = _d.sent();\n            _a = endpointId, _b = eventId, _c = data.EventsResponse.Results[_a].EventsItemResponse[_b], StatusCode = _c.StatusCode, Message = _c.Message;\n            if (ACCEPTED_CODES.includes(StatusCode)) {\n              logger.debug('record event success. ', data);\n              return [2 /*return*/, handlers.resolve(data)];\n            } else {\n              if (RETRYABLE_CODES.includes(StatusCode)) {\n                this._retry(params, handlers);\n              } else {\n                logger.error(\"Event \" + eventId + \" is not accepted, the error is \" + Message);\n                return [2 /*return*/, handlers.reject(data)];\n              }\n            }\n            return [3 /*break*/, 4];\n          case 3:\n            err_1 = _d.sent();\n            this._eventError(err_1);\n            return [2 /*return*/, handlers.reject(err_1)];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._pinpointSendStopSession = function (params, handlers) {\n    if (!BEACON_SUPPORTED) {\n      this._pinpointPutEvents(params, handlers);\n      return;\n    }\n    var eventParams = this._generateBatchItemContext(params);\n    var region = this._config.region;\n    var ApplicationId = eventParams.ApplicationId,\n      EventsRequest = eventParams.EventsRequest;\n    var accessInfo = {\n      secret_key: this._config.credentials.secretAccessKey,\n      access_key: this._config.credentials.accessKeyId,\n      session_token: this._config.credentials.sessionToken\n    };\n    var url = \"https://pinpoint.\" + region + \".amazonaws.com/v1/apps/\" + ApplicationId + \"/events/legacy\";\n    var body = JSON.stringify(EventsRequest);\n    var method = 'POST';\n    var request = {\n      url: url,\n      body: body,\n      method: method\n    };\n    var serviceInfo = {\n      region: region,\n      service: MOBILE_SERVICE_NAME\n    };\n    var requestUrl = Signer.signUrl(request, accessInfo, serviceInfo, null);\n    var success = navigator.sendBeacon(requestUrl, body);\n    if (success) {\n      return handlers.resolve('sendBeacon success');\n    }\n    return handlers.reject('sendBeacon failure');\n  };\n  AWSPinpointProvider.prototype._retry = function (params, handlers) {\n    var resendLimit = params.config.resendLimit;\n    // For backward compatibility\n    params.resendLimit = typeof params.resendLimit === 'number' ? params.resendLimit : resendLimit;\n    if (params.resendLimit-- > 0) {\n      logger.debug(\"resending event \" + params.eventName + \" with \" + params.resendLimit + \" retry times left\");\n      this._pinpointPutEvents(params, handlers);\n    } else {\n      logger.debug(\"retry times used up for event \" + params.eventName);\n    }\n  };\n  AWSPinpointProvider.prototype._updateEndpoint = function (endpointObject) {\n    return __awaiter(this, void 0, void 0, function () {\n      var params, handlers, config, event, appId, endpointId, request, update_params, command, data, err_2, failureData;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            params = endpointObject.params, handlers = endpointObject.handlers;\n            config = params.config, event = params.event;\n            appId = config.appId, endpointId = config.endpointId;\n            request = this._endpointRequest(config, JS.transferKeyToLowerCase(event, [], ['attributes', 'userAttributes', 'Attributes', 'UserAttributes']));\n            update_params = {\n              ApplicationId: appId,\n              EndpointId: endpointId,\n              EndpointRequest: request\n            };\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            command = new UpdateEndpointCommand(update_params);\n            return [4 /*yield*/, this.pinpointClient.send(command)];\n          case 2:\n            data = _a.sent();\n            logger.debug('updateEndpoint success', data);\n            this._endpointGenerating = false;\n            this._resumeBuffer();\n            handlers.resolve(data);\n            return [2 /*return*/];\n          case 3:\n            err_2 = _a.sent();\n            failureData = {\n              err: err_2,\n              update_params: update_params,\n              endpointObject: endpointObject\n            };\n            return [2 /*return*/, this._handleEndpointUpdateFailure(failureData)];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._handleEndpointUpdateFailure = function (failureData) {\n    return __awaiter(this, void 0, void 0, function () {\n      var err, endpointObject, statusCode, exponential;\n      return __generator(this, function (_a) {\n        err = failureData.err, endpointObject = failureData.endpointObject;\n        statusCode = err.$metadata && err.$metadata.httpStatusCode;\n        logger.debug('updateEndpoint failed', err);\n        switch (statusCode) {\n          case BAD_REQUEST_CODE:\n            return [2 /*return*/, this._handleEndpointUpdateBadRequest(failureData)];\n          case FORBIDDEN_CODE:\n            return [2 /*return*/, this._handleEndpointUpdateForbidden(failureData)];\n          default:\n            if (RETRYABLE_CODES.includes(statusCode)) {\n              exponential = true;\n              return [2 /*return*/, this._retryEndpointUpdate(endpointObject, exponential)];\n            }\n            endpointObject.handlers.reject(err);\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._handleEndpointUpdateBadRequest = function (failureData) {\n    return __awaiter(this, void 0, void 0, function () {\n      var err, update_params, endpointObject, message, ApplicationId, EndpointRequest, err_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            err = failureData.err, update_params = failureData.update_params, endpointObject = failureData.endpointObject;\n            message = err.message;\n            ApplicationId = update_params.ApplicationId, EndpointRequest = update_params.EndpointRequest;\n            if (!String(message).startsWith('Exceeded maximum endpoint per user count')) {\n              return [2 /*return*/, endpointObject.handlers.reject(err)];\n            }\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this._removeUnusedEndpoints(ApplicationId, EndpointRequest.User.UserId)];\n          case 2:\n            _a.sent();\n            logger.debug('Removed unused endpoints successfully');\n            this._retryEndpointUpdate(endpointObject);\n            return [3 /*break*/, 4];\n          case 3:\n            err_3 = _a.sent();\n            logger.warn(\"Failed to remove unused endpoints with error: \" + err_3);\n            logger.warn(\"Please ensure you have updated your Pinpoint IAM Policy \" + \"with the Action: \\\"mobiletargeting:GetUserEndpoints\\\" \" + \"in order to get endpoints info of the user\");\n            return [2 /*return*/, endpointObject.handlers.reject(err_3)];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._handleEndpointUpdateForbidden = function (failureData) {\n    var err = failureData.err,\n      endpointObject = failureData.endpointObject;\n    var code = err.code,\n      retryable = err.retryable;\n    if (code !== EXPIRED_TOKEN_CODE && !retryable) {\n      return endpointObject.handlers.reject(err);\n    }\n    this._retryEndpointUpdate(endpointObject);\n  };\n  AWSPinpointProvider.prototype._retryEndpointUpdate = function (endpointObject, exponential) {\n    if (exponential === void 0) {\n      exponential = false;\n    }\n    logger.debug('_retryEndpointUpdate', endpointObject);\n    var params = endpointObject.params;\n    // TODO: implement retry with exp back off once exp function is available\n    var resendLimit = params.config.resendLimit;\n    params.resendLimit = typeof params.resendLimit === 'number' ? params.resendLimit : resendLimit;\n    if (params.resendLimit-- > 0) {\n      logger.debug(\"resending endpoint update \" + params.event.eventId + \" with \" + params.resendLimit + \" retry attempts remaining\");\n      // insert at the front of endpointBuffer\n      this._endpointBuffer.length ? this._endpointBuffer.unshift(endpointObject) : this._updateEndpoint(endpointObject);\n      return;\n    }\n    logger.warn(\"resending endpoint update \" + params.event.eventId + \" failed after \" + params.config.resendLimit + \" attempts\");\n    if (this._endpointGenerating) {\n      logger.error('Initial endpoint update failed. ');\n    }\n  };\n  AWSPinpointProvider.prototype._removeUnusedEndpoints = function (appId, userId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var command, data, endpoints, endpointToBeDeleted, i, timeStamp1, timeStamp2, update_params, updateEndPointcommand, updateEndPointData, err_4, err_5;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 6,, 7]);\n            command = new GetUserEndpointsCommand({\n              ApplicationId: appId,\n              UserId: userId\n            });\n            return [4 /*yield*/, this.pinpointClient.send(command)];\n          case 1:\n            data = _a.sent();\n            endpoints = data.EndpointsResponse.Item;\n            logger.debug(\"get endpoints associated with the userId: \" + userId + \" with data\", endpoints);\n            endpointToBeDeleted = endpoints[0];\n            for (i = 1; i < endpoints.length; i++) {\n              timeStamp1 = Date.parse(endpointToBeDeleted['EffectiveDate']);\n              timeStamp2 = Date.parse(endpoints[i]['EffectiveDate']);\n              // delete the one with invalid effective date\n              if (isNaN(timeStamp1)) break;\n              if (isNaN(timeStamp2)) {\n                endpointToBeDeleted = endpoints[i];\n                break;\n              }\n              if (timeStamp2 < timeStamp1) {\n                endpointToBeDeleted = endpoints[i];\n              }\n            }\n            update_params = {\n              ApplicationId: appId,\n              EndpointId: endpointToBeDeleted['Id'],\n              EndpointRequest: {\n                User: {\n                  UserId: ''\n                }\n              }\n            };\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n            updateEndPointcommand = new UpdateEndpointCommand(update_params);\n            return [4 /*yield*/, this.pinpointClient.send(updateEndPointcommand)];\n          case 3:\n            updateEndPointData = _a.sent();\n            logger.debug('The old endpoint is updated with an empty string for user id');\n            return [2 /*return*/, updateEndPointData];\n          case 4:\n            err_4 = _a.sent();\n            logger.debug('Failed to update the endpoint', err_4);\n            throw err_4;\n          case 5:\n            return [3 /*break*/, 7];\n          case 6:\n            err_5 = _a.sent();\n            logger.debug(\"Failed to get endpoints associated with the userId: \" + userId + \" with error\", err_5);\n            throw err_5;\n          case 7:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * @private\n   * @param config\n   * Init the clients\n   */\n  AWSPinpointProvider.prototype._initClients = function (credentials) {\n    return __awaiter(this, void 0, void 0, function () {\n      var identityId, region;\n      return __generator(this, function (_a) {\n        logger.debug('init clients');\n        if (this.pinpointClient && this._config.credentials && this._config.credentials.sessionToken === credentials.sessionToken && this._config.credentials.identityId === credentials.identityId) {\n          logger.debug('no change for aws credentials, directly return from init');\n          return [2 /*return*/];\n        }\n\n        identityId = this._config.credentials ? this._config.credentials.identityId : null;\n        this._config.credentials = credentials;\n        region = this._config.region;\n        logger.debug('init clients with credentials', credentials);\n        this.pinpointClient = new PinpointClient({\n          region: region,\n          credentials: credentials,\n          customUserAgent: getAmplifyUserAgent()\n        });\n        // TODO: remove this middleware once a long term fix is implemented by aws-sdk-js team.\n        this.pinpointClient.middlewareStack.addRelativeTo(function (next) {\n          return function (args) {\n            delete args.request.headers['amz-sdk-invocation-id'];\n            delete args.request.headers['amz-sdk-request'];\n            return next(args);\n          };\n        }, {\n          step: 'finalizeRequest',\n          relation: 'after',\n          toMiddleware: 'retryMiddleware'\n        });\n        if (this._bufferExists() && identityId === credentials.identityId) {\n          // if the identity has remained the same, pass the updated client to the buffer\n          this._updateBufferClient();\n        } else {\n          // otherwise flush the buffer and instantiate a new one\n          // this will cause the old buffer to send any remaining events\n          // with the old credentials and then stop looping and shortly thereafter get picked up by GC\n          this._initBuffer();\n        }\n        this._customizePinpointClientReq();\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._bufferExists = function () {\n    return this._buffer && this._buffer instanceof EventsBuffer;\n  };\n  AWSPinpointProvider.prototype._initBuffer = function () {\n    if (this._bufferExists()) {\n      this._flushBuffer();\n    }\n    this._buffer = new EventsBuffer(this.pinpointClient, this._config);\n    // if the first endpoint update hasn't yet resolved pause the buffer to\n    // prevent race conditions. It will be resumed as soon as that request succeeds\n    if (this._endpointGenerating) {\n      this._buffer.pause();\n    }\n  };\n  AWSPinpointProvider.prototype._updateBufferClient = function () {\n    if (this._bufferExists()) {\n      this._buffer.updateClient(this.pinpointClient);\n    }\n  };\n  AWSPinpointProvider.prototype._flushBuffer = function () {\n    if (this._bufferExists()) {\n      this._buffer.flush();\n      this._buffer = null;\n    }\n  };\n  AWSPinpointProvider.prototype._resumeBuffer = function () {\n    if (this._bufferExists()) {\n      this._buffer.resume();\n    }\n  };\n  AWSPinpointProvider.prototype._customizePinpointClientReq = function () {\n    // TODO FIXME: Find a middleware to do this with AWS V3 SDK\n    // if (Platform.isReactNative) {\n    // \tthis.pinpointClient.customizeRequests(request => {\n    // \t\trequest.on('build', req => {\n    // \t\t\treq.httpRequest.headers['user-agent'] = Platform.userAgent;\n    // \t\t});\n    // \t});\n    // }\n  };\n  AWSPinpointProvider.prototype._getEndpointId = function (cacheKey) {\n    return __awaiter(this, void 0, void 0, function () {\n      var endpointId;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, Cache.getItem(cacheKey)];\n          case 1:\n            endpointId = _a.sent();\n            logger.debug('endpointId from cache', endpointId, 'type', typeof endpointId);\n            if (!endpointId) {\n              endpointId = uuid();\n              Cache.setItem(cacheKey, endpointId);\n            }\n            return [2 /*return*/, endpointId];\n        }\n      });\n    });\n  };\n  /**\n   * EndPoint request\n   * @return {Object} - The request of updating endpoint\n   */\n  AWSPinpointProvider.prototype._endpointRequest = function (config, event) {\n    var credentials = config.credentials;\n    var clientInfo = this._clientInfo || {};\n    var clientContext = config.clientContext || {};\n    // for now we have three different ways for default endpoint configurations\n    // clientInfo\n    // clientContext (deprecated)\n    // config.endpoint\n    var defaultEndpointConfig = config.endpoint || {};\n    var demographicByClientInfo = {\n      appVersion: clientInfo.appVersion,\n      make: clientInfo.make,\n      model: clientInfo.model,\n      modelVersion: clientInfo.version,\n      platform: clientInfo.platform\n    };\n    // for backward compatibility\n    var clientId = clientContext.clientId,\n      appTitle = clientContext.appTitle,\n      appVersionName = clientContext.appVersionName,\n      appVersionCode = clientContext.appVersionCode,\n      appPackageName = clientContext.appPackageName,\n      demographicByClientContext = __rest(clientContext, [\"clientId\", \"appTitle\", \"appVersionName\", \"appVersionCode\", \"appPackageName\"]);\n    var channelType = event.address ? clientInfo.platform === 'android' ? 'GCM' : 'APNS' : undefined;\n    var tmp = __assign(__assign(__assign({\n      channelType: channelType,\n      requestId: uuid(),\n      effectiveDate: new Date().toISOString()\n    }, defaultEndpointConfig), event), {\n      attributes: __assign(__assign({}, defaultEndpointConfig.attributes), event.attributes),\n      demographic: __assign(__assign(__assign(__assign({}, demographicByClientInfo), demographicByClientContext), defaultEndpointConfig.demographic), event.demographic),\n      location: __assign(__assign({}, defaultEndpointConfig.location), event.location),\n      metrics: __assign(__assign({}, defaultEndpointConfig.metrics), event.metrics),\n      user: {\n        userId: event.userId || defaultEndpointConfig.userId || credentials.identityId,\n        userAttributes: __assign(__assign({}, defaultEndpointConfig.userAttributes), event.userAttributes)\n      }\n    });\n    // eliminate unnecessary params\n    var userId = tmp.userId,\n      userAttributes = tmp.userAttributes,\n      name = tmp.name,\n      session = tmp.session,\n      eventId = tmp.eventId,\n      immediate = tmp.immediate,\n      ret = __rest(tmp, [\"userId\", \"userAttributes\", \"name\", \"session\", \"eventId\", \"immediate\"]);\n    return JS.transferKeyToUpperCase(ret, [], ['metrics', 'userAttributes', 'attributes']);\n  };\n  AWSPinpointProvider.prototype._eventError = function (err) {\n    logger.error('record event failed.', err);\n    logger.warn(\"Please ensure you have updated your Pinpoint IAM Policy \" + \"with the Action: \\\"mobiletargeting:PutEvents\\\" \" + \"in order to record events\");\n  };\n  AWSPinpointProvider.prototype._getCredentials = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, err_6;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, Credentials.get()];\n          case 1:\n            credentials = _a.sent();\n            if (!credentials) return [2 /*return*/, null];\n            logger.debug('set credentials for analytics', credentials);\n            return [2 /*return*/, Credentials.shear(credentials)];\n          case 2:\n            err_6 = _a.sent();\n            logger.debug('ensure credentials error', err_6);\n            return [2 /*return*/, null];\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSPinpointProvider.category = 'Analytics';\n  AWSPinpointProvider.providerName = 'AWSPinpoint';\n  return AWSPinpointProvider;\n}();\nexport { AWSPinpointProvider };\n/**\n * @deprecated use named import\n */\nexport default AWSPinpointProvider;","map":{"version":3,"names":["ConsoleLogger","Logger","ClientDevice","Credentials","Signer","JS","Hub","getAmplifyUserAgent","PinpointClient","PutEventsCommand","UpdateEndpointCommand","GetUserEndpointsCommand","Cache","v1","uuid","EventsBuffer","AMPLIFY_SYMBOL","Symbol","for","dispatchAnalyticsEvent","event","data","dispatch","logger","RETRYABLE_CODES","ACCEPTED_CODES","FORBIDDEN_CODE","BAD_REQUEST_CODE","MOBILE_SERVICE_NAME","EXPIRED_TOKEN_CODE","UPDATE_ENDPOINT","SESSION_START","SESSION_STOP","BEACON_SUPPORTED","navigator","sendBeacon","BUFFER_SIZE","FLUSH_SIZE","FLUSH_INTERVAL","RESEND_LIMIT","AWSPinpointProvider","config","_endpointGenerating","_endpointUpdateInProgress","_buffer","_endpointBuffer","_config","bufferSize","flushSize","flushInterval","resendLimit","_clientInfo","clientInfo","prototype","getCategory","category","getProviderName","providerName","configure","_this","debug","conf","Object","assign","appId","disabled","endpointId","cacheKey","_getEndpointId","then","catch","err","_flushBuffer","record","params","handlers","_getCredentials","credentials","_a","sent","region","reject","Error","_initClients","timestamp","Date","getTime","_generateSession","eventId","immediate","_send","_putToBuffer","_sendEndpointUpdate","endpointObject","push","_updateEndpoint","next","shift","name","_sessionId","_sessionStartTimestamp","session","Id","StartTimestamp","toISOString","stopTimestamp","Duration","StopTimestamp","undefined","_pinpointSendStopSession","_pinpointPutEvents","_generateBatchItemContext","attributes","metrics","endpointContext","eventParams","ApplicationId","EventsRequest","BatchItem","endpointObj","Endpoint","Events","EventType","Timestamp","Attributes","Metrics","Session","command","pinpointClient","send","_d","_b","_c","EventsResponse","Results","EventsItemResponse","StatusCode","Message","includes","resolve","_retry","error","_eventError","err_1","accessInfo","secret_key","secretAccessKey","access_key","accessKeyId","session_token","sessionToken","url","body","JSON","stringify","method","request","serviceInfo","service","requestUrl","signUrl","success","eventName","_endpointRequest","transferKeyToLowerCase","update_params","EndpointId","EndpointRequest","_resumeBuffer","failureData","err_2","_handleEndpointUpdateFailure","statusCode","$metadata","httpStatusCode","_handleEndpointUpdateBadRequest","_handleEndpointUpdateForbidden","exponential","_retryEndpointUpdate","message","String","startsWith","_removeUnusedEndpoints","User","UserId","warn","err_3","code","retryable","length","unshift","userId","endpoints","EndpointsResponse","Item","endpointToBeDeleted","i","timeStamp1","parse","timeStamp2","isNaN","updateEndPointcommand","updateEndPointData","err_4","err_5","identityId","customUserAgent","middlewareStack","addRelativeTo","args","headers","step","relation","toMiddleware","_bufferExists","_updateBufferClient","_initBuffer","_customizePinpointClientReq","pause","updateClient","flush","resume","getItem","setItem","clientContext","defaultEndpointConfig","endpoint","demographicByClientInfo","appVersion","make","model","modelVersion","version","platform","clientId","appTitle","appVersionName","appVersionCode","appPackageName","demographicByClientContext","__rest","channelType","address","tmp","__assign","requestId","effectiveDate","demographic","location","user","userAttributes","ret","transferKeyToUpperCase","get","shear","err_6"],"sources":["/Users/ericli/node_modules/@aws-amplify/analytics/src/Providers/AWSPinpointProvider.ts"],"sourcesContent":["/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport {\n\tConsoleLogger as Logger,\n\tClientDevice,\n\tPlatform,\n\tCredentials,\n\tSigner,\n\tJS,\n\tHub,\n\tgetAmplifyUserAgent,\n} from '@aws-amplify/core';\nimport {\n\tPinpointClient,\n\tPutEventsCommand,\n\tPutEventsCommandInput,\n\tUpdateEndpointCommand,\n\tGetUserEndpointsCommand,\n} from '@aws-sdk/client-pinpoint';\nimport { EventsBatch } from '@aws-sdk/client-pinpoint/models';\nimport Cache from '@aws-amplify/cache';\n\nimport {\n\tAnalyticsProvider,\n\tPromiseHandlers,\n\tEndpointBuffer,\n\tEventParams,\n\tEventObject,\n\tEndpointFailureData,\n} from '../types';\nimport { v1 as uuid } from 'uuid';\nimport EventsBuffer from './EventBuffer';\n\nconst AMPLIFY_SYMBOL = (typeof Symbol !== 'undefined' &&\ntypeof Symbol.for === 'function'\n\t? Symbol.for('amplify_default')\n\t: '@@amplify_default') as Symbol;\n\nconst dispatchAnalyticsEvent = (event, data) => {\n\tHub.dispatch('analytics', { event, data }, 'Analytics', AMPLIFY_SYMBOL);\n};\n\nconst logger = new Logger('AWSPinpointProvider');\nconst RETRYABLE_CODES = [429, 500];\nconst ACCEPTED_CODES = [202];\nconst FORBIDDEN_CODE = 403;\nconst BAD_REQUEST_CODE = 400;\nconst MOBILE_SERVICE_NAME = 'mobiletargeting';\nconst EXPIRED_TOKEN_CODE = 'ExpiredTokenException';\nconst UPDATE_ENDPOINT = '_update_endpoint';\nconst SESSION_START = '_session.start';\nconst SESSION_STOP = '_session.stop';\n\nconst BEACON_SUPPORTED =\n\ttypeof navigator !== 'undefined' &&\n\tnavigator &&\n\ttypeof navigator.sendBeacon === 'function';\n\n// events buffer\nconst BUFFER_SIZE = 1000;\nconst FLUSH_SIZE = 100;\nconst FLUSH_INTERVAL = 5 * 1000; // 5s\nconst RESEND_LIMIT = 5;\n\n// params: { event: {name: , .... }, timeStamp, config, resendLimits }\nexport class AWSPinpointProvider implements AnalyticsProvider {\n\tstatic category = 'Analytics';\n\tstatic providerName = 'AWSPinpoint';\n\n\tprivate _config;\n\tprivate pinpointClient;\n\tprivate _sessionId;\n\tprivate _sessionStartTimestamp;\n\tprivate _buffer: EventsBuffer;\n\tprivate _endpointBuffer: EndpointBuffer;\n\tprivate _clientInfo;\n\tprivate _endpointGenerating = true;\n\tprivate _endpointUpdateInProgress = false;\n\n\tconstructor(config?) {\n\t\tthis._buffer = null;\n\t\tthis._endpointBuffer = [];\n\t\tthis._config = config ? config : {};\n\t\tthis._config.bufferSize = this._config.bufferSize || BUFFER_SIZE;\n\t\tthis._config.flushSize = this._config.flushSize || FLUSH_SIZE;\n\t\tthis._config.flushInterval = this._config.flushInterval || FLUSH_INTERVAL;\n\t\tthis._config.resendLimit = this._config.resendLimit || RESEND_LIMIT;\n\t\tthis._clientInfo = ClientDevice.clientInfo();\n\t}\n\n\t/**\n\t * get the category of the plugin\n\t */\n\tgetCategory(): string {\n\t\treturn AWSPinpointProvider.category;\n\t}\n\n\t/**\n\t * get provider name of the plugin\n\t */\n\tgetProviderName(): string {\n\t\treturn AWSPinpointProvider.providerName;\n\t}\n\n\t/**\n\t * configure the plugin\n\t * @param {Object} config - configuration\n\t */\n\tpublic configure(config): object {\n\t\tlogger.debug('configure Analytics', config);\n\t\tconst conf = config || {};\n\t\tthis._config = Object.assign({}, this._config, conf);\n\n\t\tif (this._config.appId && !this._config.disabled) {\n\t\t\tif (!this._config.endpointId) {\n\t\t\t\tconst cacheKey = this.getProviderName() + '_' + this._config.appId;\n\t\t\t\tthis._getEndpointId(cacheKey)\n\t\t\t\t\t.then(endpointId => {\n\t\t\t\t\t\tlogger.debug('setting endpoint id from the cache', endpointId);\n\t\t\t\t\t\tthis._config.endpointId = endpointId;\n\t\t\t\t\t\tdispatchAnalyticsEvent('pinpointProvider_configured', null);\n\t\t\t\t\t})\n\t\t\t\t\t.catch(err => {\n\t\t\t\t\t\tlogger.debug('Failed to generate endpointId', err);\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tdispatchAnalyticsEvent('pinpointProvider_configured', null);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._flushBuffer();\n\t\t}\n\t\treturn this._config;\n\t}\n\n\t/**\n\t * record an event\n\t * @param {Object} params - the params of an event\n\t */\n\tpublic async record(params: EventParams, handlers: PromiseHandlers) {\n\t\tlogger.debug('_public record', params);\n\t\tconst credentials = await this._getCredentials();\n\t\tif (!credentials || !this._config.appId || !this._config.region) {\n\t\t\tlogger.debug(\n\t\t\t\t'cannot send events without credentials, applicationId or region'\n\t\t\t);\n\t\t\treturn handlers.reject(\n\t\t\t\tnew Error('No credentials, applicationId or region')\n\t\t\t);\n\t\t}\n\n\t\tthis._initClients(credentials);\n\n\t\tconst timestamp = new Date().getTime();\n\t\t// attach the session and eventId\n\t\tthis._generateSession(params);\n\t\tparams.event.eventId = uuid();\n\n\t\tObject.assign(params, { timestamp, config: this._config });\n\n\t\tif (params.event.immediate) {\n\t\t\treturn this._send(params, handlers);\n\t\t} else {\n\t\t\tthis._putToBuffer(params, handlers);\n\t\t}\n\t}\n\n\tprivate async _sendEndpointUpdate(endpointObject: EventObject) {\n\t\tif (this._endpointUpdateInProgress) {\n\t\t\tthis._endpointBuffer.push(endpointObject);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._endpointUpdateInProgress = true;\n\t\tawait this._updateEndpoint(endpointObject);\n\n\t\tconst next = this._endpointBuffer.shift();\n\t\tthis._endpointUpdateInProgress = false;\n\n\t\tnext && this._sendEndpointUpdate(next);\n\t}\n\n\t/**\n\t * @private\n\t * @param params - params for event recording\n\t * Put events into buffer\n\t */\n\tprivate _putToBuffer(params, handlers) {\n\t\tif (params.event.name === UPDATE_ENDPOINT) {\n\t\t\tthis._sendEndpointUpdate({ params, handlers });\n\t\t\treturn;\n\t\t}\n\n\t\tthis._buffer && this._buffer.push({ params, handlers });\n\t}\n\n\tprivate _generateSession(params) {\n\t\tthis._sessionId = this._sessionId || uuid();\n\t\tconst { event } = params;\n\n\t\tswitch (event.name) {\n\t\t\tcase SESSION_START:\n\t\t\t\t// refresh the session id and session start time\n\t\t\t\tthis._sessionStartTimestamp = new Date().getTime();\n\t\t\t\tthis._sessionId = uuid();\n\t\t\t\tevent.session = {\n\t\t\t\t\tId: this._sessionId,\n\t\t\t\t\tStartTimestamp: new Date(this._sessionStartTimestamp).toISOString(),\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase SESSION_STOP:\n\t\t\t\tconst stopTimestamp = new Date().getTime();\n\t\t\t\tthis._sessionStartTimestamp =\n\t\t\t\t\tthis._sessionStartTimestamp || new Date().getTime();\n\t\t\t\tthis._sessionId = this._sessionId || uuid();\n\t\t\t\tevent.session = {\n\t\t\t\t\tId: this._sessionId,\n\t\t\t\t\tDuration: stopTimestamp - this._sessionStartTimestamp,\n\t\t\t\t\tStartTimestamp: new Date(this._sessionStartTimestamp).toISOString(),\n\t\t\t\t\tStopTimestamp: new Date(stopTimestamp).toISOString(),\n\t\t\t\t};\n\t\t\t\tthis._sessionId = undefined;\n\t\t\t\tthis._sessionStartTimestamp = undefined;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis._sessionStartTimestamp =\n\t\t\t\t\tthis._sessionStartTimestamp || new Date().getTime();\n\t\t\t\tthis._sessionId = this._sessionId || uuid();\n\t\t\t\tevent.session = {\n\t\t\t\t\tId: this._sessionId,\n\t\t\t\t\tStartTimestamp: new Date(this._sessionStartTimestamp).toISOString(),\n\t\t\t\t};\n\t\t}\n\t}\n\n\tprivate async _send(params, handlers) {\n\t\tconst { event } = params;\n\n\t\tswitch (event.name) {\n\t\t\tcase UPDATE_ENDPOINT:\n\t\t\t\treturn this._updateEndpoint({ params, handlers });\n\t\t\tcase SESSION_STOP:\n\t\t\t\treturn this._pinpointSendStopSession(params, handlers);\n\t\t\tdefault:\n\t\t\t\treturn this._pinpointPutEvents(params, handlers);\n\t\t}\n\t}\n\n\tprivate _generateBatchItemContext(params) {\n\t\tconst { event, timestamp, config } = params;\n\t\tconst { name, attributes, metrics, eventId, session } = event;\n\t\tconst { appId, endpointId } = config;\n\n\t\tconst endpointContext = {};\n\n\t\tconst eventParams: PutEventsCommandInput = {\n\t\t\tApplicationId: appId,\n\t\t\tEventsRequest: {\n\t\t\t\tBatchItem: {},\n\t\t\t},\n\t\t};\n\n\t\tconst endpointObj: EventsBatch = {} as EventsBatch;\n\t\tendpointObj.Endpoint = endpointContext;\n\t\tendpointObj.Events = {\n\t\t\t[eventId]: {\n\t\t\t\tEventType: name,\n\t\t\t\tTimestamp: new Date(timestamp).toISOString(),\n\t\t\t\tAttributes: attributes,\n\t\t\t\tMetrics: metrics,\n\t\t\t\tSession: session,\n\t\t\t},\n\t\t};\n\t\teventParams.EventsRequest.BatchItem[endpointId] = endpointObj;\n\n\t\treturn eventParams;\n\t}\n\n\tprivate async _pinpointPutEvents(params, handlers) {\n\t\tconst {\n\t\t\tevent: { eventId },\n\t\t\tconfig: { endpointId },\n\t\t} = params;\n\t\tconst eventParams = this._generateBatchItemContext(params);\n\t\tconst command: PutEventsCommand = new PutEventsCommand(eventParams);\n\n\t\ttry {\n\t\t\tconst data = await this.pinpointClient.send(command);\n\t\t\tconst {\n\t\t\t\tEventsResponse: {\n\t\t\t\t\tResults: {\n\t\t\t\t\t\t[endpointId]: {\n\t\t\t\t\t\t\tEventsItemResponse: {\n\t\t\t\t\t\t\t\t[eventId]: { StatusCode, Message },\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t} = data;\n\t\t\tif (ACCEPTED_CODES.includes(StatusCode)) {\n\t\t\t\tlogger.debug('record event success. ', data);\n\t\t\t\treturn handlers.resolve(data);\n\t\t\t} else {\n\t\t\t\tif (RETRYABLE_CODES.includes(StatusCode)) {\n\t\t\t\t\tthis._retry(params, handlers);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.error(\n\t\t\t\t\t\t`Event ${eventId} is not accepted, the error is ${Message}`\n\t\t\t\t\t);\n\t\t\t\t\treturn handlers.reject(data);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tthis._eventError(err);\n\t\t\treturn handlers.reject(err);\n\t\t}\n\t}\n\n\tprivate _pinpointSendStopSession(params, handlers): Promise<string> {\n\t\tif (!BEACON_SUPPORTED) {\n\t\t\tthis._pinpointPutEvents(params, handlers);\n\t\t\treturn;\n\t\t}\n\n\t\tconst eventParams = this._generateBatchItemContext(params);\n\n\t\tconst { region } = this._config;\n\t\tconst { ApplicationId, EventsRequest } = eventParams;\n\n\t\tconst accessInfo = {\n\t\t\tsecret_key: this._config.credentials.secretAccessKey,\n\t\t\taccess_key: this._config.credentials.accessKeyId,\n\t\t\tsession_token: this._config.credentials.sessionToken,\n\t\t};\n\n\t\tconst url = `https://pinpoint.${region}.amazonaws.com/v1/apps/${ApplicationId}/events/legacy`;\n\t\tconst body = JSON.stringify(EventsRequest);\n\t\tconst method = 'POST';\n\n\t\tconst request = {\n\t\t\turl,\n\t\t\tbody,\n\t\t\tmethod,\n\t\t};\n\n\t\tconst serviceInfo = { region, service: MOBILE_SERVICE_NAME };\n\n\t\tconst requestUrl: string = Signer.signUrl(\n\t\t\trequest,\n\t\t\taccessInfo,\n\t\t\tserviceInfo,\n\t\t\tnull\n\t\t);\n\n\t\tconst success: boolean = navigator.sendBeacon(requestUrl, body);\n\n\t\tif (success) {\n\t\t\treturn handlers.resolve('sendBeacon success');\n\t\t}\n\t\treturn handlers.reject('sendBeacon failure');\n\t}\n\n\tprivate _retry(params, handlers) {\n\t\tconst {\n\t\t\tconfig: { resendLimit },\n\t\t} = params;\n\t\t// For backward compatibility\n\t\tparams.resendLimit =\n\t\t\ttypeof params.resendLimit === 'number' ? params.resendLimit : resendLimit;\n\t\tif (params.resendLimit-- > 0) {\n\t\t\tlogger.debug(\n\t\t\t\t`resending event ${params.eventName} with ${params.resendLimit} retry times left`\n\t\t\t);\n\t\t\tthis._pinpointPutEvents(params, handlers);\n\t\t} else {\n\t\t\tlogger.debug(`retry times used up for event ${params.eventName}`);\n\t\t}\n\t}\n\n\tprivate async _updateEndpoint(endpointObject: EventObject) {\n\t\tconst { params, handlers } = endpointObject;\n\t\tconst { config, event } = params;\n\t\tconst { appId, endpointId } = config;\n\n\t\tconst request = this._endpointRequest(\n\t\t\tconfig,\n\t\t\tJS.transferKeyToLowerCase(\n\t\t\t\tevent,\n\t\t\t\t[],\n\t\t\t\t['attributes', 'userAttributes', 'Attributes', 'UserAttributes']\n\t\t\t)\n\t\t);\n\t\tconst update_params = {\n\t\t\tApplicationId: appId,\n\t\t\tEndpointId: endpointId,\n\t\t\tEndpointRequest: request,\n\t\t};\n\n\t\ttry {\n\t\t\tconst command: UpdateEndpointCommand = new UpdateEndpointCommand(\n\t\t\t\tupdate_params\n\t\t\t);\n\t\t\tconst data = await this.pinpointClient.send(command);\n\n\t\t\tlogger.debug('updateEndpoint success', data);\n\t\t\tthis._endpointGenerating = false;\n\t\t\tthis._resumeBuffer();\n\n\t\t\thandlers.resolve(data);\n\t\t\treturn;\n\t\t} catch (err) {\n\t\t\tconst failureData: EndpointFailureData = {\n\t\t\t\terr,\n\t\t\t\tupdate_params,\n\t\t\t\tendpointObject,\n\t\t\t};\n\n\t\t\treturn this._handleEndpointUpdateFailure(failureData);\n\t\t}\n\t}\n\n\tprivate async _handleEndpointUpdateFailure(failureData: EndpointFailureData) {\n\t\tconst { err, endpointObject } = failureData;\n\t\tconst statusCode = err.$metadata && err.$metadata.httpStatusCode;\n\n\t\tlogger.debug('updateEndpoint failed', err);\n\n\t\tswitch (statusCode) {\n\t\t\tcase BAD_REQUEST_CODE:\n\t\t\t\treturn this._handleEndpointUpdateBadRequest(failureData);\n\t\t\tcase FORBIDDEN_CODE:\n\t\t\t\treturn this._handleEndpointUpdateForbidden(failureData);\n\t\t\tdefault:\n\t\t\t\tif (RETRYABLE_CODES.includes(statusCode)) {\n\t\t\t\t\t// Server error. Attempt exponential retry\n\t\t\t\t\tconst exponential = true;\n\t\t\t\t\treturn this._retryEndpointUpdate(endpointObject, exponential);\n\t\t\t\t}\n\t\t\t\tendpointObject.handlers.reject(err);\n\t\t}\n\t}\n\n\tprivate async _handleEndpointUpdateBadRequest(\n\t\tfailureData: EndpointFailureData\n\t) {\n\t\tconst { err, update_params, endpointObject } = failureData;\n\t\tconst { message } = err;\n\t\tconst { ApplicationId, EndpointRequest } = update_params;\n\n\t\tif (\n\t\t\t!String(message).startsWith('Exceeded maximum endpoint per user count')\n\t\t) {\n\t\t\treturn endpointObject.handlers.reject(err);\n\t\t}\n\n\t\ttry {\n\t\t\tawait this._removeUnusedEndpoints(\n\t\t\t\tApplicationId,\n\t\t\t\tEndpointRequest.User.UserId\n\t\t\t);\n\t\t\tlogger.debug('Removed unused endpoints successfully');\n\t\t\tthis._retryEndpointUpdate(endpointObject);\n\t\t} catch (err) {\n\t\t\tlogger.warn(`Failed to remove unused endpoints with error: ${err}`);\n\t\t\tlogger.warn(\n\t\t\t\t`Please ensure you have updated your Pinpoint IAM Policy ` +\n\t\t\t\t\t`with the Action: \"mobiletargeting:GetUserEndpoints\" ` +\n\t\t\t\t\t`in order to get endpoints info of the user`\n\t\t\t);\n\t\t\treturn endpointObject.handlers.reject(err);\n\t\t}\n\t}\n\n\tprivate _handleEndpointUpdateForbidden(failureData: EndpointFailureData) {\n\t\tconst { err, endpointObject } = failureData;\n\n\t\tconst { code, retryable } = err;\n\n\t\tif (code !== EXPIRED_TOKEN_CODE && !retryable) {\n\t\t\treturn endpointObject.handlers.reject(err);\n\t\t}\n\n\t\tthis._retryEndpointUpdate(endpointObject);\n\t}\n\n\tprivate _retryEndpointUpdate(\n\t\tendpointObject: EventObject,\n\t\texponential: boolean = false\n\t) {\n\t\tlogger.debug('_retryEndpointUpdate', endpointObject);\n\t\tconst { params } = endpointObject;\n\n\t\t// TODO: implement retry with exp back off once exp function is available\n\t\tconst {\n\t\t\tconfig: { resendLimit },\n\t\t} = params;\n\n\t\tparams.resendLimit =\n\t\t\ttypeof params.resendLimit === 'number' ? params.resendLimit : resendLimit;\n\n\t\tif (params.resendLimit-- > 0) {\n\t\t\tlogger.debug(\n\t\t\t\t`resending endpoint update ${params.event.eventId} with ${params.resendLimit} retry attempts remaining`\n\t\t\t);\n\t\t\t// insert at the front of endpointBuffer\n\t\t\tthis._endpointBuffer.length\n\t\t\t\t? this._endpointBuffer.unshift(endpointObject)\n\t\t\t\t: this._updateEndpoint(endpointObject);\n\t\t\treturn;\n\t\t}\n\n\t\tlogger.warn(\n\t\t\t`resending endpoint update ${params.event.eventId} failed after ${params.config.resendLimit} attempts`\n\t\t);\n\n\t\tif (this._endpointGenerating) {\n\t\t\tlogger.error('Initial endpoint update failed. ');\n\t\t}\n\t}\n\n\tprivate async _removeUnusedEndpoints(appId, userId) {\n\t\ttry {\n\t\t\t// TODO: re-write with Promise (during refactor pt. 2)\n\t\t\tconst command: GetUserEndpointsCommand = new GetUserEndpointsCommand({\n\t\t\t\tApplicationId: appId,\n\t\t\t\tUserId: userId,\n\t\t\t});\n\t\t\tconst data = await this.pinpointClient.send(command);\n\t\t\tconst endpoints = data.EndpointsResponse.Item;\n\t\t\tlogger.debug(\n\t\t\t\t`get endpoints associated with the userId: ${userId} with data`,\n\t\t\t\tendpoints\n\t\t\t);\n\t\t\tlet endpointToBeDeleted = endpoints[0];\n\t\t\tfor (let i = 1; i < endpoints.length; i++) {\n\t\t\t\tconst timeStamp1 = Date.parse(endpointToBeDeleted['EffectiveDate']);\n\t\t\t\tconst timeStamp2 = Date.parse(endpoints[i]['EffectiveDate']);\n\t\t\t\t// delete the one with invalid effective date\n\t\t\t\tif (isNaN(timeStamp1)) break;\n\t\t\t\tif (isNaN(timeStamp2)) {\n\t\t\t\t\tendpointToBeDeleted = endpoints[i];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (timeStamp2 < timeStamp1) {\n\t\t\t\t\tendpointToBeDeleted = endpoints[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\t// update the endpoint's user id with an empty string\n\t\t\tconst update_params = {\n\t\t\t\tApplicationId: appId,\n\t\t\t\tEndpointId: endpointToBeDeleted['Id'],\n\t\t\t\tEndpointRequest: {\n\t\t\t\t\tUser: {\n\t\t\t\t\t\tUserId: '',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t};\n\n\t\t\ttry {\n\t\t\t\tconst updateEndPointcommand: UpdateEndpointCommand = new UpdateEndpointCommand(\n\t\t\t\t\tupdate_params\n\t\t\t\t);\n\t\t\t\tconst updateEndPointData = await this.pinpointClient.send(\n\t\t\t\t\tupdateEndPointcommand\n\t\t\t\t);\n\t\t\t\tlogger.debug(\n\t\t\t\t\t'The old endpoint is updated with an empty string for user id'\n\t\t\t\t);\n\t\t\t\treturn updateEndPointData;\n\t\t\t} catch (err) {\n\t\t\t\tlogger.debug('Failed to update the endpoint', err);\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tlogger.debug(\n\t\t\t\t`Failed to get endpoints associated with the userId: ${userId} with error`,\n\t\t\t\terr\n\t\t\t);\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @param config\n\t * Init the clients\n\t */\n\tprivate async _initClients(credentials) {\n\t\tlogger.debug('init clients');\n\n\t\tif (\n\t\t\tthis.pinpointClient &&\n\t\t\tthis._config.credentials &&\n\t\t\tthis._config.credentials.sessionToken === credentials.sessionToken &&\n\t\t\tthis._config.credentials.identityId === credentials.identityId\n\t\t) {\n\t\t\tlogger.debug('no change for aws credentials, directly return from init');\n\t\t\treturn;\n\t\t}\n\n\t\tconst identityId = this._config.credentials\n\t\t\t? this._config.credentials.identityId\n\t\t\t: null;\n\n\t\tthis._config.credentials = credentials;\n\t\tconst { region } = this._config;\n\t\tlogger.debug('init clients with credentials', credentials);\n\t\tthis.pinpointClient = new PinpointClient({\n\t\t\tregion,\n\t\t\tcredentials,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\t\t\n\t\t// TODO: remove this middleware once a long term fix is implemented by aws-sdk-js team.\n\t\tthis.pinpointClient.middlewareStack.addRelativeTo(\n\t\t\tnext => args => {\n\t\t\t\tdelete args.request.headers['amz-sdk-invocation-id'];\n\t\t\t\tdelete args.request.headers['amz-sdk-request'];\n\t\t\t\treturn next(args);\n\t\t\t},\n\t\t\t{\n\t\t\t\tstep: 'finalizeRequest',\n\t\t\t\trelation: 'after',\n\t\t\t\ttoMiddleware: 'retryMiddleware',\n\t\t\t}\n\t\t);\n\n\t\tif (this._bufferExists() && identityId === credentials.identityId) {\n\t\t\t// if the identity has remained the same, pass the updated client to the buffer\n\t\t\tthis._updateBufferClient();\n\t\t} else {\n\t\t\t// otherwise flush the buffer and instantiate a new one\n\t\t\t// this will cause the old buffer to send any remaining events\n\t\t\t// with the old credentials and then stop looping and shortly thereafter get picked up by GC\n\t\t\tthis._initBuffer();\n\t\t}\n\n\t\tthis._customizePinpointClientReq();\n\t}\n\n\tprivate _bufferExists() {\n\t\treturn this._buffer && this._buffer instanceof EventsBuffer;\n\t}\n\n\tprivate _initBuffer() {\n\t\tif (this._bufferExists()) {\n\t\t\tthis._flushBuffer();\n\t\t}\n\n\t\tthis._buffer = new EventsBuffer(this.pinpointClient, this._config);\n\n\t\t// if the first endpoint update hasn't yet resolved pause the buffer to\n\t\t// prevent race conditions. It will be resumed as soon as that request succeeds\n\t\tif (this._endpointGenerating) {\n\t\t\tthis._buffer.pause();\n\t\t}\n\t}\n\n\tprivate _updateBufferClient() {\n\t\tif (this._bufferExists()) {\n\t\t\tthis._buffer.updateClient(this.pinpointClient);\n\t\t}\n\t}\n\n\tprivate _flushBuffer() {\n\t\tif (this._bufferExists()) {\n\t\t\tthis._buffer.flush();\n\t\t\tthis._buffer = null;\n\t\t}\n\t}\n\n\tprivate _resumeBuffer() {\n\t\tif (this._bufferExists()) {\n\t\t\tthis._buffer.resume();\n\t\t}\n\t}\n\n\tprivate _customizePinpointClientReq() {\n\t\t// TODO FIXME: Find a middleware to do this with AWS V3 SDK\n\t\t// if (Platform.isReactNative) {\n\t\t// \tthis.pinpointClient.customizeRequests(request => {\n\t\t// \t\trequest.on('build', req => {\n\t\t// \t\t\treq.httpRequest.headers['user-agent'] = Platform.userAgent;\n\t\t// \t\t});\n\t\t// \t});\n\t\t// }\n\t}\n\n\tprivate async _getEndpointId(cacheKey) {\n\t\t// try to get from cache\n\t\tlet endpointId = await Cache.getItem(cacheKey);\n\t\tlogger.debug(\n\t\t\t'endpointId from cache',\n\t\t\tendpointId,\n\t\t\t'type',\n\t\t\ttypeof endpointId\n\t\t);\n\t\tif (!endpointId) {\n\t\t\tendpointId = uuid();\n\t\t\tCache.setItem(cacheKey, endpointId);\n\t\t}\n\t\treturn endpointId;\n\t}\n\n\t/**\n\t * EndPoint request\n\t * @return {Object} - The request of updating endpoint\n\t */\n\tprivate _endpointRequest(config, event) {\n\t\tconst { credentials } = config;\n\t\tconst clientInfo = this._clientInfo || {};\n\t\tconst clientContext = config.clientContext || {};\n\t\t// for now we have three different ways for default endpoint configurations\n\t\t// clientInfo\n\t\t// clientContext (deprecated)\n\t\t// config.endpoint\n\t\tconst defaultEndpointConfig = config.endpoint || {};\n\t\tconst demographicByClientInfo = {\n\t\t\tappVersion: clientInfo.appVersion,\n\t\t\tmake: clientInfo.make,\n\t\t\tmodel: clientInfo.model,\n\t\t\tmodelVersion: clientInfo.version,\n\t\t\tplatform: clientInfo.platform,\n\t\t};\n\t\t// for backward compatibility\n\t\tconst {\n\t\t\tclientId,\n\t\t\tappTitle,\n\t\t\tappVersionName,\n\t\t\tappVersionCode,\n\t\t\tappPackageName,\n\t\t\t...demographicByClientContext\n\t\t} = clientContext;\n\t\tconst channelType = event.address\n\t\t\t? clientInfo.platform === 'android'\n\t\t\t\t? 'GCM'\n\t\t\t\t: 'APNS'\n\t\t\t: undefined;\n\t\tconst tmp = {\n\t\t\tchannelType,\n\t\t\trequestId: uuid(),\n\t\t\teffectiveDate: new Date().toISOString(),\n\t\t\t...defaultEndpointConfig,\n\t\t\t...event,\n\t\t\tattributes: {\n\t\t\t\t...defaultEndpointConfig.attributes,\n\t\t\t\t...event.attributes,\n\t\t\t},\n\t\t\tdemographic: {\n\t\t\t\t...demographicByClientInfo,\n\t\t\t\t...demographicByClientContext,\n\t\t\t\t...defaultEndpointConfig.demographic,\n\t\t\t\t...event.demographic,\n\t\t\t},\n\t\t\tlocation: {\n\t\t\t\t...defaultEndpointConfig.location,\n\t\t\t\t...event.location,\n\t\t\t},\n\t\t\tmetrics: {\n\t\t\t\t...defaultEndpointConfig.metrics,\n\t\t\t\t...event.metrics,\n\t\t\t},\n\t\t\tuser: {\n\t\t\t\tuserId:\n\t\t\t\t\tevent.userId ||\n\t\t\t\t\tdefaultEndpointConfig.userId ||\n\t\t\t\t\tcredentials.identityId,\n\t\t\t\tuserAttributes: {\n\t\t\t\t\t...defaultEndpointConfig.userAttributes,\n\t\t\t\t\t...event.userAttributes,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\t// eliminate unnecessary params\n\t\tconst {\n\t\t\tuserId,\n\t\t\tuserAttributes,\n\t\t\tname,\n\t\t\tsession,\n\t\t\teventId,\n\t\t\timmediate,\n\t\t\t...ret\n\t\t} = tmp;\n\t\treturn JS.transferKeyToUpperCase(\n\t\t\tret,\n\t\t\t[],\n\t\t\t['metrics', 'userAttributes', 'attributes']\n\t\t);\n\t}\n\n\tprivate _eventError(err: any) {\n\t\tlogger.error('record event failed.', err);\n\t\tlogger.warn(\n\t\t\t`Please ensure you have updated your Pinpoint IAM Policy ` +\n\t\t\t\t`with the Action: \"mobiletargeting:PutEvents\" ` +\n\t\t\t\t`in order to record events`\n\t\t);\n\t}\n\n\tprivate async _getCredentials() {\n\t\ttry {\n\t\t\tconst credentials = await Credentials.get();\n\t\t\tif (!credentials) return null;\n\n\t\t\tlogger.debug('set credentials for analytics', credentials);\n\t\t\treturn Credentials.shear(credentials);\n\t\t} catch (err) {\n\t\t\tlogger.debug('ensure credentials error', err);\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\n/**\n * @deprecated use named import\n */\nexport default AWSPinpointProvider;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}