{"ast":null,"code":"import _classCallCheck from \"/Users/ericli/Desktop/pill2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/ericli/Desktop/pill2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { fromHex, toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { Int64 } from \"./Int64\";\nexport var HeaderMarshaller = /*#__PURE__*/function () {\n  function HeaderMarshaller(toUtf8, fromUtf8) {\n    _classCallCheck(this, HeaderMarshaller);\n    this.toUtf8 = toUtf8;\n    this.fromUtf8 = fromUtf8;\n  }\n  _createClass(HeaderMarshaller, [{\n    key: \"format\",\n    value: function format(headers) {\n      var chunks = [];\n      for (var _i = 0, _Object$keys = Object.keys(headers); _i < _Object$keys.length; _i++) {\n        var headerName = _Object$keys[_i];\n        var bytes = this.fromUtf8(headerName);\n        chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));\n      }\n      var out = new Uint8Array(chunks.reduce(function (carry, bytes) {\n        return carry + bytes.byteLength;\n      }, 0));\n      var position = 0;\n      for (var _i2 = 0, _chunks = chunks; _i2 < _chunks.length; _i2++) {\n        var chunk = _chunks[_i2];\n        out.set(chunk, position);\n        position += chunk.byteLength;\n      }\n      return out;\n    }\n  }, {\n    key: \"formatHeaderValue\",\n    value: function formatHeaderValue(header) {\n      switch (header.type) {\n        case \"boolean\":\n          return Uint8Array.from([header.value ? 0 : 1]);\n        case \"byte\":\n          return Uint8Array.from([2, header.value]);\n        case \"short\":\n          var shortView = new DataView(new ArrayBuffer(3));\n          shortView.setUint8(0, 3);\n          shortView.setInt16(1, header.value, false);\n          return new Uint8Array(shortView.buffer);\n        case \"integer\":\n          var intView = new DataView(new ArrayBuffer(5));\n          intView.setUint8(0, 4);\n          intView.setInt32(1, header.value, false);\n          return new Uint8Array(intView.buffer);\n        case \"long\":\n          var longBytes = new Uint8Array(9);\n          longBytes[0] = 5;\n          longBytes.set(header.value.bytes, 1);\n          return longBytes;\n        case \"binary\":\n          var binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));\n          binView.setUint8(0, 6);\n          binView.setUint16(1, header.value.byteLength, false);\n          var binBytes = new Uint8Array(binView.buffer);\n          binBytes.set(header.value, 3);\n          return binBytes;\n        case \"string\":\n          var utf8Bytes = this.fromUtf8(header.value);\n          var strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));\n          strView.setUint8(0, 7);\n          strView.setUint16(1, utf8Bytes.byteLength, false);\n          var strBytes = new Uint8Array(strView.buffer);\n          strBytes.set(utf8Bytes, 3);\n          return strBytes;\n        case \"timestamp\":\n          var tsBytes = new Uint8Array(9);\n          tsBytes[0] = 8;\n          tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);\n          return tsBytes;\n        case \"uuid\":\n          if (!UUID_PATTERN.test(header.value)) {\n            throw new Error(\"Invalid UUID received: \".concat(header.value));\n          }\n          var uuidBytes = new Uint8Array(17);\n          uuidBytes[0] = 9;\n          uuidBytes.set(fromHex(header.value.replace(/\\-/g, \"\")), 1);\n          return uuidBytes;\n      }\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(headers) {\n      var out = {};\n      var position = 0;\n      while (position < headers.byteLength) {\n        var nameLength = headers.getUint8(position++);\n        var name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));\n        position += nameLength;\n        switch (headers.getUint8(position++)) {\n          case 0:\n            out[name] = {\n              type: BOOLEAN_TAG,\n              value: true\n            };\n            break;\n          case 1:\n            out[name] = {\n              type: BOOLEAN_TAG,\n              value: false\n            };\n            break;\n          case 2:\n            out[name] = {\n              type: BYTE_TAG,\n              value: headers.getInt8(position++)\n            };\n            break;\n          case 3:\n            out[name] = {\n              type: SHORT_TAG,\n              value: headers.getInt16(position, false)\n            };\n            position += 2;\n            break;\n          case 4:\n            out[name] = {\n              type: INT_TAG,\n              value: headers.getInt32(position, false)\n            };\n            position += 4;\n            break;\n          case 5:\n            out[name] = {\n              type: LONG_TAG,\n              value: new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8))\n            };\n            position += 8;\n            break;\n          case 6:\n            var binaryLength = headers.getUint16(position, false);\n            position += 2;\n            out[name] = {\n              type: BINARY_TAG,\n              value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength)\n            };\n            position += binaryLength;\n            break;\n          case 7:\n            var stringLength = headers.getUint16(position, false);\n            position += 2;\n            out[name] = {\n              type: STRING_TAG,\n              value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength))\n            };\n            position += stringLength;\n            break;\n          case 8:\n            out[name] = {\n              type: TIMESTAMP_TAG,\n              value: new Date(new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf())\n            };\n            position += 8;\n            break;\n          case 9:\n            var uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);\n            position += 16;\n            out[name] = {\n              type: UUID_TAG,\n              value: \"\".concat(toHex(uuidBytes.subarray(0, 4)), \"-\").concat(toHex(uuidBytes.subarray(4, 6)), \"-\").concat(toHex(uuidBytes.subarray(6, 8)), \"-\").concat(toHex(uuidBytes.subarray(8, 10)), \"-\").concat(toHex(uuidBytes.subarray(10)))\n            };\n            break;\n          default:\n            throw new Error(\"Unrecognized header type tag\");\n        }\n      }\n      return out;\n    }\n  }]);\n  return HeaderMarshaller;\n}();\nvar HEADER_VALUE_TYPE;\n(function (HEADER_VALUE_TYPE) {\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"boolTrue\"] = 0] = \"boolTrue\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"boolFalse\"] = 1] = \"boolFalse\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"byte\"] = 2] = \"byte\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"short\"] = 3] = \"short\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"integer\"] = 4] = \"integer\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"long\"] = 5] = \"long\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"byteArray\"] = 6] = \"byteArray\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"string\"] = 7] = \"string\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"timestamp\"] = 8] = \"timestamp\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"uuid\"] = 9] = \"uuid\";\n})(HEADER_VALUE_TYPE || (HEADER_VALUE_TYPE = {}));\nvar BOOLEAN_TAG = \"boolean\";\nvar BYTE_TAG = \"byte\";\nvar SHORT_TAG = \"short\";\nvar INT_TAG = \"integer\";\nvar LONG_TAG = \"long\";\nvar BINARY_TAG = \"binary\";\nvar STRING_TAG = \"string\";\nvar TIMESTAMP_TAG = \"timestamp\";\nvar UUID_TAG = \"uuid\";\nvar UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;","map":{"version":3,"names":["fromHex","toHex","Int64","HeaderMarshaller","toUtf8","fromUtf8","_classCallCheck","_createClass","key","value","format","headers","chunks","_i","_Object$keys","Object","keys","length","headerName","bytes","push","Uint8Array","from","byteLength","formatHeaderValue","out","reduce","carry","position","_i2","_chunks","chunk","set","header","type","shortView","DataView","ArrayBuffer","setUint8","setInt16","buffer","intView","setInt32","longBytes","binView","setUint16","binBytes","utf8Bytes","strView","strBytes","tsBytes","fromNumber","valueOf","UUID_PATTERN","test","Error","concat","uuidBytes","replace","parse","nameLength","getUint8","name","byteOffset","BOOLEAN_TAG","BYTE_TAG","getInt8","SHORT_TAG","getInt16","INT_TAG","getInt32","LONG_TAG","binaryLength","getUint16","BINARY_TAG","stringLength","STRING_TAG","TIMESTAMP_TAG","Date","UUID_TAG","subarray","HEADER_VALUE_TYPE"],"sources":["/Users/ericli/Desktop/pill2/node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/eventstream-codec/dist-es/HeaderMarshaller.js"],"sourcesContent":["import { fromHex, toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { Int64 } from \"./Int64\";\nexport class HeaderMarshaller {\n    constructor(toUtf8, fromUtf8) {\n        this.toUtf8 = toUtf8;\n        this.fromUtf8 = fromUtf8;\n    }\n    format(headers) {\n        const chunks = [];\n        for (const headerName of Object.keys(headers)) {\n            const bytes = this.fromUtf8(headerName);\n            chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));\n        }\n        const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));\n        let position = 0;\n        for (const chunk of chunks) {\n            out.set(chunk, position);\n            position += chunk.byteLength;\n        }\n        return out;\n    }\n    formatHeaderValue(header) {\n        switch (header.type) {\n            case \"boolean\":\n                return Uint8Array.from([header.value ? 0 : 1]);\n            case \"byte\":\n                return Uint8Array.from([2, header.value]);\n            case \"short\":\n                const shortView = new DataView(new ArrayBuffer(3));\n                shortView.setUint8(0, 3);\n                shortView.setInt16(1, header.value, false);\n                return new Uint8Array(shortView.buffer);\n            case \"integer\":\n                const intView = new DataView(new ArrayBuffer(5));\n                intView.setUint8(0, 4);\n                intView.setInt32(1, header.value, false);\n                return new Uint8Array(intView.buffer);\n            case \"long\":\n                const longBytes = new Uint8Array(9);\n                longBytes[0] = 5;\n                longBytes.set(header.value.bytes, 1);\n                return longBytes;\n            case \"binary\":\n                const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));\n                binView.setUint8(0, 6);\n                binView.setUint16(1, header.value.byteLength, false);\n                const binBytes = new Uint8Array(binView.buffer);\n                binBytes.set(header.value, 3);\n                return binBytes;\n            case \"string\":\n                const utf8Bytes = this.fromUtf8(header.value);\n                const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));\n                strView.setUint8(0, 7);\n                strView.setUint16(1, utf8Bytes.byteLength, false);\n                const strBytes = new Uint8Array(strView.buffer);\n                strBytes.set(utf8Bytes, 3);\n                return strBytes;\n            case \"timestamp\":\n                const tsBytes = new Uint8Array(9);\n                tsBytes[0] = 8;\n                tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);\n                return tsBytes;\n            case \"uuid\":\n                if (!UUID_PATTERN.test(header.value)) {\n                    throw new Error(`Invalid UUID received: ${header.value}`);\n                }\n                const uuidBytes = new Uint8Array(17);\n                uuidBytes[0] = 9;\n                uuidBytes.set(fromHex(header.value.replace(/\\-/g, \"\")), 1);\n                return uuidBytes;\n        }\n    }\n    parse(headers) {\n        const out = {};\n        let position = 0;\n        while (position < headers.byteLength) {\n            const nameLength = headers.getUint8(position++);\n            const name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));\n            position += nameLength;\n            switch (headers.getUint8(position++)) {\n                case 0:\n                    out[name] = {\n                        type: BOOLEAN_TAG,\n                        value: true,\n                    };\n                    break;\n                case 1:\n                    out[name] = {\n                        type: BOOLEAN_TAG,\n                        value: false,\n                    };\n                    break;\n                case 2:\n                    out[name] = {\n                        type: BYTE_TAG,\n                        value: headers.getInt8(position++),\n                    };\n                    break;\n                case 3:\n                    out[name] = {\n                        type: SHORT_TAG,\n                        value: headers.getInt16(position, false),\n                    };\n                    position += 2;\n                    break;\n                case 4:\n                    out[name] = {\n                        type: INT_TAG,\n                        value: headers.getInt32(position, false),\n                    };\n                    position += 4;\n                    break;\n                case 5:\n                    out[name] = {\n                        type: LONG_TAG,\n                        value: new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)),\n                    };\n                    position += 8;\n                    break;\n                case 6:\n                    const binaryLength = headers.getUint16(position, false);\n                    position += 2;\n                    out[name] = {\n                        type: BINARY_TAG,\n                        value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength),\n                    };\n                    position += binaryLength;\n                    break;\n                case 7:\n                    const stringLength = headers.getUint16(position, false);\n                    position += 2;\n                    out[name] = {\n                        type: STRING_TAG,\n                        value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength)),\n                    };\n                    position += stringLength;\n                    break;\n                case 8:\n                    out[name] = {\n                        type: TIMESTAMP_TAG,\n                        value: new Date(new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf()),\n                    };\n                    position += 8;\n                    break;\n                case 9:\n                    const uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);\n                    position += 16;\n                    out[name] = {\n                        type: UUID_TAG,\n                        value: `${toHex(uuidBytes.subarray(0, 4))}-${toHex(uuidBytes.subarray(4, 6))}-${toHex(uuidBytes.subarray(6, 8))}-${toHex(uuidBytes.subarray(8, 10))}-${toHex(uuidBytes.subarray(10))}`,\n                    };\n                    break;\n                default:\n                    throw new Error(`Unrecognized header type tag`);\n            }\n        }\n        return out;\n    }\n}\nvar HEADER_VALUE_TYPE;\n(function (HEADER_VALUE_TYPE) {\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"boolTrue\"] = 0] = \"boolTrue\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"boolFalse\"] = 1] = \"boolFalse\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"byte\"] = 2] = \"byte\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"short\"] = 3] = \"short\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"integer\"] = 4] = \"integer\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"long\"] = 5] = \"long\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"byteArray\"] = 6] = \"byteArray\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"string\"] = 7] = \"string\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"timestamp\"] = 8] = \"timestamp\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"uuid\"] = 9] = \"uuid\";\n})(HEADER_VALUE_TYPE || (HEADER_VALUE_TYPE = {}));\nconst BOOLEAN_TAG = \"boolean\";\nconst BYTE_TAG = \"byte\";\nconst SHORT_TAG = \"short\";\nconst INT_TAG = \"integer\";\nconst LONG_TAG = \"long\";\nconst BINARY_TAG = \"binary\";\nconst STRING_TAG = \"string\";\nconst TIMESTAMP_TAG = \"timestamp\";\nconst UUID_TAG = \"uuid\";\nconst UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}