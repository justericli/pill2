{"ast":null,"code":"import _classCallCheck from \"/Users/ericli/Desktop/pill2/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/ericli/Desktop/pill2/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { toHex } from \"@aws-sdk/util-hex-encoding\";\nexport var Int64 = /*#__PURE__*/function () {\n  function Int64(bytes) {\n    _classCallCheck(this, Int64);\n    this.bytes = bytes;\n    if (bytes.byteLength !== 8) {\n      throw new Error(\"Int64 buffers must be exactly 8 bytes\");\n    }\n  }\n  _createClass(Int64, [{\n    key: \"valueOf\",\n    value: function valueOf() {\n      var bytes = this.bytes.slice(0);\n      var negative = bytes[0] & 128;\n      if (negative) {\n        negate(bytes);\n      }\n      return parseInt(toHex(bytes), 16) * (negative ? -1 : 1);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return String(this.valueOf());\n    }\n  }], [{\n    key: \"fromNumber\",\n    value: function fromNumber(number) {\n      if (number > 9223372036854776000 || number < -9223372036854776000) {\n        throw new Error(\"\".concat(number, \" is too large (or, if negative, too small) to represent as an Int64\"));\n      }\n      var bytes = new Uint8Array(8);\n      for (var i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {\n        bytes[i] = remaining;\n      }\n      if (number < 0) {\n        negate(bytes);\n      }\n      return new Int64(bytes);\n    }\n  }]);\n  return Int64;\n}();\nfunction negate(bytes) {\n  for (var i = 0; i < 8; i++) {\n    bytes[i] ^= 0xff;\n  }\n  for (var _i = 7; _i > -1; _i--) {\n    bytes[_i]++;\n    if (bytes[_i] !== 0) break;\n  }\n}","map":{"version":3,"names":["toHex","Int64","bytes","_classCallCheck","byteLength","Error","_createClass","key","value","valueOf","slice","negative","negate","parseInt","toString","String","fromNumber","number","concat","Uint8Array","i","remaining","Math","abs","round"],"sources":["/Users/ericli/Desktop/pill2/node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/eventstream-codec/dist-es/Int64.js"],"sourcesContent":["import { toHex } from \"@aws-sdk/util-hex-encoding\";\nexport class Int64 {\n    constructor(bytes) {\n        this.bytes = bytes;\n        if (bytes.byteLength !== 8) {\n            throw new Error(\"Int64 buffers must be exactly 8 bytes\");\n        }\n    }\n    static fromNumber(number) {\n        if (number > 9223372036854776000 || number < -9223372036854776000) {\n            throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);\n        }\n        const bytes = new Uint8Array(8);\n        for (let i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {\n            bytes[i] = remaining;\n        }\n        if (number < 0) {\n            negate(bytes);\n        }\n        return new Int64(bytes);\n    }\n    valueOf() {\n        const bytes = this.bytes.slice(0);\n        const negative = bytes[0] & 0b10000000;\n        if (negative) {\n            negate(bytes);\n        }\n        return parseInt(toHex(bytes), 16) * (negative ? -1 : 1);\n    }\n    toString() {\n        return String(this.valueOf());\n    }\n}\nfunction negate(bytes) {\n    for (let i = 0; i < 8; i++) {\n        bytes[i] ^= 0xff;\n    }\n    for (let i = 7; i > -1; i--) {\n        bytes[i]++;\n        if (bytes[i] !== 0)\n            break;\n    }\n}\n"],"mappings":";;AAAA,SAASA,KAAK,QAAQ,4BAA4B;AAClD,WAAaC,KAAK;EACd,SAAAA,MAAYC,KAAK,EAAE;IAAAC,eAAA,OAAAF,KAAA;IACf,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAIA,KAAK,CAACE,UAAU,KAAK,CAAC,EAAE;MACxB,MAAM,IAAIC,KAAK,CAAC,uCAAuC,CAAC;IAC5D;EACJ;EAACC,YAAA,CAAAL,KAAA;IAAAM,GAAA;IAAAC,KAAA,EAcD,SAAAC,QAAA,EAAU;MACN,IAAMP,KAAK,GAAG,IAAI,CAACA,KAAK,CAACQ,KAAK,CAAC,CAAC,CAAC;MACjC,IAAMC,QAAQ,GAAGT,KAAK,CAAC,CAAC,CAAC,GAAG,GAAU;MACtC,IAAIS,QAAQ,EAAE;QACVC,MAAM,CAACV,KAAK,CAAC;MACjB;MACA,OAAOW,QAAQ,CAACb,KAAK,CAACE,KAAK,CAAC,EAAE,EAAE,CAAC,IAAIS,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;IAC3D;EAAC;IAAAJ,GAAA;IAAAC,KAAA,EACD,SAAAM,SAAA,EAAW;MACP,OAAOC,MAAM,CAAC,IAAI,CAACN,OAAO,EAAE,CAAC;IACjC;EAAC;IAAAF,GAAA;IAAAC,KAAA,EAvBD,SAAAQ,WAAkBC,MAAM,EAAE;MACtB,IAAIA,MAAM,GAAG,mBAAmB,IAAIA,MAAM,GAAG,CAAC,mBAAmB,EAAE;QAC/D,MAAM,IAAIZ,KAAK,IAAAa,MAAA,CAAID,MAAM,yEAAsE;MACnG;MACA,IAAMf,KAAK,GAAG,IAAIiB,UAAU,CAAC,CAAC,CAAC;MAC/B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,SAAS,GAAGC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,KAAK,CAACP,MAAM,CAAC,CAAC,EAAEG,CAAC,GAAG,CAAC,CAAC,IAAIC,SAAS,GAAG,CAAC,EAAED,CAAC,EAAE,EAAEC,SAAS,IAAI,GAAG,EAAE;QACtGnB,KAAK,CAACkB,CAAC,CAAC,GAAGC,SAAS;MACxB;MACA,IAAIJ,MAAM,GAAG,CAAC,EAAE;QACZL,MAAM,CAACV,KAAK,CAAC;MACjB;MACA,OAAO,IAAID,KAAK,CAACC,KAAK,CAAC;IAC3B;EAAC;EAAA,OAAAD,KAAA;AAAA;AAaL,SAASW,MAAMA,CAACV,KAAK,EAAE;EACnB,KAAK,IAAIkB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IACxBlB,KAAK,CAACkB,CAAC,CAAC,IAAI,IAAI;EACpB;EACA,KAAK,IAAIA,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAG,CAAC,CAAC,EAAEA,EAAC,EAAE,EAAE;IACzBlB,KAAK,CAACkB,EAAC,CAAC,EAAE;IACV,IAAIlB,KAAK,CAACkB,EAAC,CAAC,KAAK,CAAC,EACd;EACR;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}