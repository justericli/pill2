{"ast":null,"code":"import { isArrayBuffer } from \"@aws-sdk/is-array-buffer\";\nimport { toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { toUint8Array } from \"@aws-sdk/util-utf8\";\nimport { SHA256_HEADER, UNSIGNED_PAYLOAD } from \"./constants\";\nexport const getPayloadHash = async (_ref, hashConstructor) => {\n  let {\n    headers,\n    body\n  } = _ref;\n  for (const headerName of Object.keys(headers)) {\n    if (headerName.toLowerCase() === SHA256_HEADER) {\n      return headers[headerName];\n    }\n  }\n  if (body == undefined) {\n    return \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\";\n  } else if (typeof body === \"string\" || ArrayBuffer.isView(body) || isArrayBuffer(body)) {\n    const hashCtor = new hashConstructor();\n    hashCtor.update(toUint8Array(body));\n    return toHex(await hashCtor.digest());\n  }\n  return UNSIGNED_PAYLOAD;\n};","map":{"version":3,"names":["isArrayBuffer","toHex","toUint8Array","SHA256_HEADER","UNSIGNED_PAYLOAD","getPayloadHash","_ref","hashConstructor","headers","body","headerName","Object","keys","toLowerCase","undefined","ArrayBuffer","isView","hashCtor","update","digest"],"sources":["/Users/ericli/Desktop/pill2/node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/signature-v4/dist-es/getPayloadHash.js"],"sourcesContent":["import { isArrayBuffer } from \"@aws-sdk/is-array-buffer\";\nimport { toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { toUint8Array } from \"@aws-sdk/util-utf8\";\nimport { SHA256_HEADER, UNSIGNED_PAYLOAD } from \"./constants\";\nexport const getPayloadHash = async ({ headers, body }, hashConstructor) => {\n    for (const headerName of Object.keys(headers)) {\n        if (headerName.toLowerCase() === SHA256_HEADER) {\n            return headers[headerName];\n        }\n    }\n    if (body == undefined) {\n        return \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\";\n    }\n    else if (typeof body === \"string\" || ArrayBuffer.isView(body) || isArrayBuffer(body)) {\n        const hashCtor = new hashConstructor();\n        hashCtor.update(toUint8Array(body));\n        return toHex(await hashCtor.digest());\n    }\n    return UNSIGNED_PAYLOAD;\n};\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,0BAA0B;AACxD,SAASC,KAAK,QAAQ,4BAA4B;AAClD,SAASC,YAAY,QAAQ,oBAAoB;AACjD,SAASC,aAAa,EAAEC,gBAAgB,QAAQ,aAAa;AAC7D,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAAC,IAAA,EAA0BC,eAAe,KAAK;EAAA,IAAvC;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAAH,IAAA;EAClD,KAAK,MAAMI,UAAU,IAAIC,MAAM,CAACC,IAAI,CAACJ,OAAO,CAAC,EAAE;IAC3C,IAAIE,UAAU,CAACG,WAAW,EAAE,KAAKV,aAAa,EAAE;MAC5C,OAAOK,OAAO,CAACE,UAAU,CAAC;IAC9B;EACJ;EACA,IAAID,IAAI,IAAIK,SAAS,EAAE;IACnB,OAAO,kEAAkE;EAC7E,CAAC,MACI,IAAI,OAAOL,IAAI,KAAK,QAAQ,IAAIM,WAAW,CAACC,MAAM,CAACP,IAAI,CAAC,IAAIT,aAAa,CAACS,IAAI,CAAC,EAAE;IAClF,MAAMQ,QAAQ,GAAG,IAAIV,eAAe,EAAE;IACtCU,QAAQ,CAACC,MAAM,CAAChB,YAAY,CAACO,IAAI,CAAC,CAAC;IACnC,OAAOR,KAAK,CAAC,MAAMgB,QAAQ,CAACE,MAAM,EAAE,CAAC;EACzC;EACA,OAAOf,gBAAgB;AAC3B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}