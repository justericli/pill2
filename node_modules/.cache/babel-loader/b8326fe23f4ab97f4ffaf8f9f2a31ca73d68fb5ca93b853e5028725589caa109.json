{"ast":null,"code":"import { getHostnameFromVariants } from \"./getHostnameFromVariants\";\nimport { getResolvedHostname } from \"./getResolvedHostname\";\nimport { getResolvedPartition } from \"./getResolvedPartition\";\nimport { getResolvedSigningRegion } from \"./getResolvedSigningRegion\";\nexport const getRegionInfo = (region, _ref) => {\n  let {\n    useFipsEndpoint = false,\n    useDualstackEndpoint = false,\n    signingService,\n    regionHash,\n    partitionHash\n  } = _ref;\n  const partition = getResolvedPartition(region, {\n    partitionHash\n  });\n  const resolvedRegion = region in regionHash ? region : partitionHash[partition]?.endpoint ?? region;\n  const hostnameOptions = {\n    useFipsEndpoint,\n    useDualstackEndpoint\n  };\n  const regionHostname = getHostnameFromVariants(regionHash[resolvedRegion]?.variants, hostnameOptions);\n  const partitionHostname = getHostnameFromVariants(partitionHash[partition]?.variants, hostnameOptions);\n  const hostname = getResolvedHostname(resolvedRegion, {\n    regionHostname,\n    partitionHostname\n  });\n  if (hostname === undefined) {\n    throw new Error(`Endpoint resolution failed for: ${{\n      resolvedRegion,\n      useFipsEndpoint,\n      useDualstackEndpoint\n    }}`);\n  }\n  const signingRegion = getResolvedSigningRegion(hostname, {\n    signingRegion: regionHash[resolvedRegion]?.signingRegion,\n    regionRegex: partitionHash[partition].regionRegex,\n    useFipsEndpoint\n  });\n  return {\n    partition,\n    signingService,\n    hostname,\n    ...(signingRegion && {\n      signingRegion\n    }),\n    ...(regionHash[resolvedRegion]?.signingService && {\n      signingService: regionHash[resolvedRegion].signingService\n    })\n  };\n};","map":{"version":3,"names":["getHostnameFromVariants","getResolvedHostname","getResolvedPartition","getResolvedSigningRegion","getRegionInfo","region","_ref","useFipsEndpoint","useDualstackEndpoint","signingService","regionHash","partitionHash","partition","resolvedRegion","endpoint","hostnameOptions","regionHostname","variants","partitionHostname","hostname","undefined","Error","signingRegion","regionRegex"],"sources":["/Users/ericli/Desktop/pill2/node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/config-resolver/dist-es/regionInfo/getRegionInfo.js"],"sourcesContent":["import { getHostnameFromVariants } from \"./getHostnameFromVariants\";\nimport { getResolvedHostname } from \"./getResolvedHostname\";\nimport { getResolvedPartition } from \"./getResolvedPartition\";\nimport { getResolvedSigningRegion } from \"./getResolvedSigningRegion\";\nexport const getRegionInfo = (region, { useFipsEndpoint = false, useDualstackEndpoint = false, signingService, regionHash, partitionHash, }) => {\n    const partition = getResolvedPartition(region, { partitionHash });\n    const resolvedRegion = region in regionHash ? region : partitionHash[partition]?.endpoint ?? region;\n    const hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };\n    const regionHostname = getHostnameFromVariants(regionHash[resolvedRegion]?.variants, hostnameOptions);\n    const partitionHostname = getHostnameFromVariants(partitionHash[partition]?.variants, hostnameOptions);\n    const hostname = getResolvedHostname(resolvedRegion, { regionHostname, partitionHostname });\n    if (hostname === undefined) {\n        throw new Error(`Endpoint resolution failed for: ${{ resolvedRegion, useFipsEndpoint, useDualstackEndpoint }}`);\n    }\n    const signingRegion = getResolvedSigningRegion(hostname, {\n        signingRegion: regionHash[resolvedRegion]?.signingRegion,\n        regionRegex: partitionHash[partition].regionRegex,\n        useFipsEndpoint,\n    });\n    return {\n        partition,\n        signingService,\n        hostname,\n        ...(signingRegion && { signingRegion }),\n        ...(regionHash[resolvedRegion]?.signingService && {\n            signingService: regionHash[resolvedRegion].signingService,\n        }),\n    };\n};\n"],"mappings":"AAAA,SAASA,uBAAuB,QAAQ,2BAA2B;AACnE,SAASC,mBAAmB,QAAQ,uBAAuB;AAC3D,SAASC,oBAAoB,QAAQ,wBAAwB;AAC7D,SAASC,wBAAwB,QAAQ,4BAA4B;AACrE,OAAO,MAAMC,aAAa,GAAGA,CAACC,MAAM,EAAAC,IAAA,KAA4G;EAAA,IAA1G;IAAEC,eAAe,GAAG,KAAK;IAAEC,oBAAoB,GAAG,KAAK;IAAEC,cAAc;IAAEC,UAAU;IAAEC;EAAe,CAAC,GAAAL,IAAA;EACvI,MAAMM,SAAS,GAAGV,oBAAoB,CAACG,MAAM,EAAE;IAAEM;EAAc,CAAC,CAAC;EACjE,MAAME,cAAc,GAAGR,MAAM,IAAIK,UAAU,GAAGL,MAAM,GAAGM,aAAa,CAACC,SAAS,CAAC,EAAEE,QAAQ,IAAIT,MAAM;EACnG,MAAMU,eAAe,GAAG;IAAER,eAAe;IAAEC;EAAqB,CAAC;EACjE,MAAMQ,cAAc,GAAGhB,uBAAuB,CAACU,UAAU,CAACG,cAAc,CAAC,EAAEI,QAAQ,EAAEF,eAAe,CAAC;EACrG,MAAMG,iBAAiB,GAAGlB,uBAAuB,CAACW,aAAa,CAACC,SAAS,CAAC,EAAEK,QAAQ,EAAEF,eAAe,CAAC;EACtG,MAAMI,QAAQ,GAAGlB,mBAAmB,CAACY,cAAc,EAAE;IAAEG,cAAc;IAAEE;EAAkB,CAAC,CAAC;EAC3F,IAAIC,QAAQ,KAAKC,SAAS,EAAE;IACxB,MAAM,IAAIC,KAAK,CAAE,mCAAkC;MAAER,cAAc;MAAEN,eAAe;MAAEC;IAAqB,CAAE,EAAC,CAAC;EACnH;EACA,MAAMc,aAAa,GAAGnB,wBAAwB,CAACgB,QAAQ,EAAE;IACrDG,aAAa,EAAEZ,UAAU,CAACG,cAAc,CAAC,EAAES,aAAa;IACxDC,WAAW,EAAEZ,aAAa,CAACC,SAAS,CAAC,CAACW,WAAW;IACjDhB;EACJ,CAAC,CAAC;EACF,OAAO;IACHK,SAAS;IACTH,cAAc;IACdU,QAAQ;IACR,IAAIG,aAAa,IAAI;MAAEA;IAAc,CAAC,CAAC;IACvC,IAAIZ,UAAU,CAACG,cAAc,CAAC,EAAEJ,cAAc,IAAI;MAC9CA,cAAc,EAAEC,UAAU,CAACG,cAAc,CAAC,CAACJ;IAC/C,CAAC;EACL,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}