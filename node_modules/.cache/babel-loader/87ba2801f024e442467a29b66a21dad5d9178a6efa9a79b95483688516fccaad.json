{"ast":null,"code":"import { __assign, __awaiter, __generator, __read, __spread } from \"tslib\";\nimport { API, GRAPHQL_AUTH_MODE } from '@aws-amplify/api';\nimport { Auth } from '@aws-amplify/auth';\nimport { Cache } from '@aws-amplify/cache';\nimport { ConsoleLogger as Logger, Hub, BackgroundProcessManager } from '@aws-amplify/core';\nimport { CONTROL_MSG as PUBSUB_CONTROL_MSG } from '@aws-amplify/pubsub';\nimport Observable from 'zen-observable-ts';\nimport { ProcessName } from '../../types';\nimport { buildSubscriptionGraphQLOperation, getAuthorizationRules, getModelAuthModes, getUserGroupsFromToken, TransformerMutationType, getTokenForCustomAuth } from '../utils';\nimport { ModelPredicateCreator } from '../../predicates';\nimport { validatePredicate, USER_AGENT_SUFFIX_DATASTORE } from '../../util';\nimport { getSubscriptionErrorType } from './errorMaps';\nvar logger = new Logger('DataStore');\nexport var CONTROL_MSG;\n(function (CONTROL_MSG) {\n  CONTROL_MSG[\"CONNECTED\"] = \"CONNECTED\";\n})(CONTROL_MSG || (CONTROL_MSG = {}));\nexport var USER_CREDENTIALS;\n(function (USER_CREDENTIALS) {\n  USER_CREDENTIALS[USER_CREDENTIALS[\"none\"] = 0] = \"none\";\n  USER_CREDENTIALS[USER_CREDENTIALS[\"unauth\"] = 1] = \"unauth\";\n  USER_CREDENTIALS[USER_CREDENTIALS[\"auth\"] = 2] = \"auth\";\n})(USER_CREDENTIALS || (USER_CREDENTIALS = {}));\nvar SubscriptionProcessor = /** @class */function () {\n  function SubscriptionProcessor(schema, syncPredicates, amplifyConfig, authModeStrategy, errorHandler, amplifyContext) {\n    if (amplifyConfig === void 0) {\n      amplifyConfig = {};\n    }\n    if (amplifyContext === void 0) {\n      amplifyContext = {\n        Auth: Auth,\n        API: API,\n        Cache: Cache\n      };\n    }\n    this.schema = schema;\n    this.syncPredicates = syncPredicates;\n    this.amplifyConfig = amplifyConfig;\n    this.authModeStrategy = authModeStrategy;\n    this.errorHandler = errorHandler;\n    this.amplifyContext = amplifyContext;\n    this.typeQuery = new WeakMap();\n    this.buffer = [];\n    this.runningProcesses = new BackgroundProcessManager();\n  }\n  SubscriptionProcessor.prototype.buildSubscription = function (namespace, model, transformerMutationType, userCredentials, cognitoTokenPayload, oidcTokenPayload, authMode) {\n    var aws_appsync_authenticationType = this.amplifyConfig.aws_appsync_authenticationType;\n    var _a = this.getAuthorizationInfo(model, userCredentials, aws_appsync_authenticationType, cognitoTokenPayload, oidcTokenPayload, authMode) || {},\n      isOwner = _a.isOwner,\n      ownerField = _a.ownerField,\n      ownerValue = _a.ownerValue;\n    var _b = __read(buildSubscriptionGraphQLOperation(namespace, model, transformerMutationType, isOwner, ownerField), 3),\n      opType = _b[0],\n      opName = _b[1],\n      query = _b[2];\n    return {\n      authMode: authMode,\n      opType: opType,\n      opName: opName,\n      query: query,\n      isOwner: isOwner,\n      ownerField: ownerField,\n      ownerValue: ownerValue\n    };\n  };\n  SubscriptionProcessor.prototype.getAuthorizationInfo = function (model, userCredentials, defaultAuthType, cognitoTokenPayload, oidcTokenPayload, authMode) {\n    if (cognitoTokenPayload === void 0) {\n      cognitoTokenPayload = {};\n    }\n    if (oidcTokenPayload === void 0) {\n      oidcTokenPayload = {};\n    }\n    var rules = getAuthorizationRules(model);\n    // Return null if user doesn't have proper credentials for private API with IAM auth\n    var iamPrivateAuth = authMode === GRAPHQL_AUTH_MODE.AWS_IAM && rules.find(function (rule) {\n      return rule.authStrategy === 'private' && rule.provider === 'iam';\n    });\n    if (iamPrivateAuth && userCredentials === USER_CREDENTIALS.unauth) {\n      return null;\n    }\n    // Group auth should take precedence over owner auth, so we are checking\n    // if rule(s) have group authorization as well as if either the Cognito or\n    // OIDC token has a groupClaim. If so, we are returning auth info before\n    // any further owner-based auth checks.\n    var groupAuthRules = rules.filter(function (rule) {\n      return rule.authStrategy === 'groups' && ['userPools', 'oidc'].includes(rule.provider);\n    });\n    var validGroup = (authMode === GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS || authMode === GRAPHQL_AUTH_MODE.OPENID_CONNECT) && groupAuthRules.find(function (groupAuthRule) {\n      // validate token against groupClaim\n      var cognitoUserGroups = getUserGroupsFromToken(cognitoTokenPayload, groupAuthRule);\n      var oidcUserGroups = getUserGroupsFromToken(oidcTokenPayload, groupAuthRule);\n      return __spread(cognitoUserGroups, oidcUserGroups).find(function (userGroup) {\n        return groupAuthRule.groups.find(function (group) {\n          return group === userGroup;\n        });\n      });\n    });\n    if (validGroup) {\n      return {\n        authMode: authMode,\n        isOwner: false\n      };\n    }\n    // Owner auth needs additional values to be returned in order to create the subscription with\n    // the correct parameters so we are getting the owner value from the Cognito token via the\n    // identityClaim from the auth rule.\n    var cognitoOwnerAuthRules = authMode === GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS ? rules.filter(function (rule) {\n      return rule.authStrategy === 'owner' && rule.provider === 'userPools';\n    }) : [];\n    var ownerAuthInfo;\n    cognitoOwnerAuthRules.forEach(function (ownerAuthRule) {\n      var ownerValue = cognitoTokenPayload[ownerAuthRule.identityClaim];\n      if (ownerValue) {\n        ownerAuthInfo = {\n          authMode: GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS,\n          isOwner: ownerAuthRule.areSubscriptionsPublic ? false : true,\n          ownerField: ownerAuthRule.ownerField,\n          ownerValue: ownerValue\n        };\n      }\n    });\n    if (ownerAuthInfo) {\n      return ownerAuthInfo;\n    }\n    // Owner auth needs additional values to be returned in order to create the subscription with\n    // the correct parameters so we are getting the owner value from the OIDC token via the\n    // identityClaim from the auth rule.\n    var oidcOwnerAuthRules = authMode === GRAPHQL_AUTH_MODE.OPENID_CONNECT ? rules.filter(function (rule) {\n      return rule.authStrategy === 'owner' && rule.provider === 'oidc';\n    }) : [];\n    oidcOwnerAuthRules.forEach(function (ownerAuthRule) {\n      var ownerValue = oidcTokenPayload[ownerAuthRule.identityClaim];\n      if (ownerValue) {\n        ownerAuthInfo = {\n          authMode: GRAPHQL_AUTH_MODE.OPENID_CONNECT,\n          isOwner: ownerAuthRule.areSubscriptionsPublic ? false : true,\n          ownerField: ownerAuthRule.ownerField,\n          ownerValue: ownerValue\n        };\n      }\n    });\n    if (ownerAuthInfo) {\n      return ownerAuthInfo;\n    }\n    // Fallback: return authMode or default auth type\n    return {\n      authMode: authMode || defaultAuthType,\n      isOwner: false\n    };\n  };\n  SubscriptionProcessor.prototype.hubQueryCompletionListener = function (completed, capsule) {\n    var event = capsule.payload.event;\n    if (event === PUBSUB_CONTROL_MSG.SUBSCRIPTION_ACK) {\n      completed();\n    }\n  };\n  SubscriptionProcessor.prototype.start = function () {\n    var _this = this;\n    this.runningProcesses = this.runningProcesses || new BackgroundProcessManager();\n    var ctlObservable = new Observable(function (observer) {\n      var promises = [];\n      // Creating subs for each model/operation combo so they can be unsubscribed\n      // independently, since the auth retry behavior is asynchronous.\n      var subscriptions = {};\n      var cognitoTokenPayload, oidcTokenPayload;\n      var userCredentials = USER_CREDENTIALS.none;\n      _this.runningProcesses.add(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var credentials, err_1, session, err_2, _a, aws_cognito_region, AuthConfig, token, federatedInfo, currentUser, payload, err_3;\n          var _this = this;\n          return __generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                _b.trys.push([0, 2,, 3]);\n                return [4 /*yield*/, this.amplifyContext.Auth.currentCredentials()];\n              case 1:\n                credentials = _b.sent();\n                userCredentials = credentials.authenticated ? USER_CREDENTIALS.auth : USER_CREDENTIALS.unauth;\n                return [3 /*break*/, 3];\n              case 2:\n                err_1 = _b.sent();\n                return [3 /*break*/, 3];\n              case 3:\n                _b.trys.push([3, 5,, 6]);\n                return [4 /*yield*/, this.amplifyContext.Auth.currentSession()];\n              case 4:\n                session = _b.sent();\n                cognitoTokenPayload = session.getIdToken().decodePayload();\n                return [3 /*break*/, 6];\n              case 5:\n                err_2 = _b.sent();\n                return [3 /*break*/, 6];\n              case 6:\n                _b.trys.push([6, 11,, 12]);\n                _a = this.amplifyConfig, aws_cognito_region = _a.aws_cognito_region, AuthConfig = _a.Auth;\n                if (!aws_cognito_region || AuthConfig && !AuthConfig.region) {\n                  throw 'Auth is not configured';\n                }\n                token = void 0;\n                return [4 /*yield*/, this.amplifyContext.Cache.getItem('federatedInfo')];\n              case 7:\n                federatedInfo = _b.sent();\n                if (!federatedInfo) return [3 /*break*/, 8];\n                token = federatedInfo.token;\n                return [3 /*break*/, 10];\n              case 8:\n                return [4 /*yield*/, this.amplifyContext.Auth.currentAuthenticatedUser()];\n              case 9:\n                currentUser = _b.sent();\n                if (currentUser) {\n                  token = currentUser.token;\n                }\n                _b.label = 10;\n              case 10:\n                if (token) {\n                  payload = token.split('.')[1];\n                  oidcTokenPayload = JSON.parse(Buffer.from(payload, 'base64').toString('utf8'));\n                }\n                return [3 /*break*/, 12];\n              case 11:\n                err_3 = _b.sent();\n                logger.debug('error getting OIDC JWT', err_3);\n                return [3 /*break*/, 12];\n              case 12:\n                Object.values(this.schema.namespaces).forEach(function (namespace) {\n                  Object.values(namespace.models).filter(function (_a) {\n                    var syncable = _a.syncable;\n                    return syncable;\n                  }).forEach(function (modelDefinition) {\n                    return _this.runningProcesses.isOpen && _this.runningProcesses.add(function () {\n                      return __awaiter(_this, void 0, void 0, function () {\n                        var modelAuthModes, readAuthModes, operations, operationAuthModeAttempts, authModeRetry;\n                        var _a, _b, _c;\n                        var _this = this;\n                        return __generator(this, function (_d) {\n                          switch (_d.label) {\n                            case 0:\n                              return [4 /*yield*/, getModelAuthModes({\n                                authModeStrategy: this.authModeStrategy,\n                                defaultAuthMode: this.amplifyConfig.aws_appsync_authenticationType,\n                                modelName: modelDefinition.name,\n                                schema: this.schema\n                              })];\n                            case 1:\n                              modelAuthModes = _d.sent();\n                              readAuthModes = modelAuthModes.READ;\n                              subscriptions = __assign(__assign({}, subscriptions), (_a = {}, _a[modelDefinition.name] = (_b = {}, _b[TransformerMutationType.CREATE] = [], _b[TransformerMutationType.UPDATE] = [], _b[TransformerMutationType.DELETE] = [], _b), _a));\n                              operations = [TransformerMutationType.CREATE, TransformerMutationType.UPDATE, TransformerMutationType.DELETE];\n                              operationAuthModeAttempts = (_c = {}, _c[TransformerMutationType.CREATE] = 0, _c[TransformerMutationType.UPDATE] = 0, _c[TransformerMutationType.DELETE] = 0, _c);\n                              authModeRetry = function (operation) {\n                                return __awaiter(_this, void 0, void 0, function () {\n                                  var _a, transformerMutationType, opName, query, isOwner, ownerField, ownerValue, authMode, authToken, variables, userAgentSuffix, queryObservable, subscriptionReadyCallback;\n                                  var _this = this;\n                                  return __generator(this, function (_b) {\n                                    switch (_b.label) {\n                                      case 0:\n                                        _a = this.buildSubscription(namespace, modelDefinition, operation, userCredentials, cognitoTokenPayload, oidcTokenPayload, readAuthModes[operationAuthModeAttempts[operation]]), transformerMutationType = _a.opType, opName = _a.opName, query = _a.query, isOwner = _a.isOwner, ownerField = _a.ownerField, ownerValue = _a.ownerValue, authMode = _a.authMode;\n                                        return [4 /*yield*/, getTokenForCustomAuth(authMode, this.amplifyConfig)];\n                                      case 1:\n                                        authToken = _b.sent();\n                                        variables = {};\n                                        if (isOwner) {\n                                          if (!ownerValue) {\n                                            observer.error('Owner field required, sign in is needed in order to perform this operation');\n                                            return [2 /*return*/];\n                                          }\n\n                                          variables[ownerField] = ownerValue;\n                                        }\n                                        logger.debug(\"Attempting \" + operation + \" subscription with authMode: \" + readAuthModes[operationAuthModeAttempts[operation]]);\n                                        userAgentSuffix = USER_AGENT_SUFFIX_DATASTORE;\n                                        queryObservable = this.amplifyContext.API.graphql(__assign(__assign({\n                                          query: query,\n                                          variables: variables\n                                        }, {\n                                          authMode: authMode\n                                        }), {\n                                          authToken: authToken,\n                                          userAgentSuffix: userAgentSuffix\n                                        }));\n                                        // TODO: consider onTerminate.then(() => API.cancel(...))\n                                        subscriptions[modelDefinition.name][transformerMutationType].push(queryObservable.map(function (_a) {\n                                          var value = _a.value;\n                                          return value;\n                                        }).subscribe({\n                                          next: function (_a) {\n                                            var data = _a.data,\n                                              errors = _a.errors;\n                                            if (Array.isArray(errors) && errors.length > 0) {\n                                              var messages = errors.map(function (_a) {\n                                                var message = _a.message;\n                                                return message;\n                                              });\n                                              logger.warn(\"Skipping incoming subscription. Messages: \" + messages.join('\\n'));\n                                              _this.drainBuffer();\n                                              return;\n                                            }\n                                            var predicatesGroup = ModelPredicateCreator.getPredicates(_this.syncPredicates.get(modelDefinition), false);\n                                            // @ts-ignore\n                                            var _b = data,\n                                              _c = opName,\n                                              record = _b[_c];\n                                            // checking incoming subscription against syncPredicate.\n                                            // once AppSync implements filters on subscriptions, we'll be\n                                            // able to set these when establishing the subscription instead.\n                                            // Until then, we'll need to filter inbound\n                                            if (_this.passesPredicateValidation(record, predicatesGroup)) {\n                                              _this.pushToBuffer(transformerMutationType, modelDefinition, record);\n                                            }\n                                            _this.drainBuffer();\n                                          },\n                                          error: function (subscriptionError) {\n                                            return __awaiter(_this, void 0, void 0, function () {\n                                              var _a, _b, _c, _d, message, e_1;\n                                              return __generator(this, function (_e) {\n                                                switch (_e.label) {\n                                                  case 0:\n                                                    _a = subscriptionError.error, _b = __read((_a === void 0 ? {\n                                                      errors: []\n                                                    } : _a).errors, 1), _c = _b[0], _d = (_c === void 0 ? {} : _c).message, message = _d === void 0 ? '' : _d;\n                                                    if (message.includes(PUBSUB_CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR) || message.includes(PUBSUB_CONTROL_MSG.CONNECTION_FAILED)) {\n                                                      // Unsubscribe and clear subscription array for model/operation\n                                                      subscriptions[modelDefinition.name][transformerMutationType].forEach(function (subscription) {\n                                                        return subscription.unsubscribe();\n                                                      });\n                                                      subscriptions[modelDefinition.name][transformerMutationType] = [];\n                                                      operationAuthModeAttempts[operation]++;\n                                                      if (operationAuthModeAttempts[operation] >= readAuthModes.length) {\n                                                        // last auth mode retry. Continue with error\n                                                        logger.debug(operation + \" subscription failed with authMode: \" + readAuthModes[operationAuthModeAttempts[operation] - 1]);\n                                                      } else {\n                                                        // retry with different auth mode. Do not trigger\n                                                        // observer error or error handler\n                                                        logger.debug(operation + \" subscription failed with authMode: \" + readAuthModes[operationAuthModeAttempts[operation] - 1] + \". Retrying with authMode: \" + readAuthModes[operationAuthModeAttempts[operation]]);\n                                                        authModeRetry(operation);\n                                                        return [2 /*return*/];\n                                                      }\n                                                    }\n\n                                                    logger.warn('subscriptionError', message);\n                                                    _e.label = 1;\n                                                  case 1:\n                                                    _e.trys.push([1, 3,, 4]);\n                                                    return [4 /*yield*/, this.errorHandler({\n                                                      recoverySuggestion: 'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n                                                      localModel: null,\n                                                      message: message,\n                                                      model: modelDefinition.name,\n                                                      operation: operation,\n                                                      errorType: getSubscriptionErrorType(subscriptionError),\n                                                      process: ProcessName.subscribe,\n                                                      remoteModel: null,\n                                                      cause: subscriptionError\n                                                    })];\n                                                  case 2:\n                                                    _e.sent();\n                                                    return [3 /*break*/, 4];\n                                                  case 3:\n                                                    e_1 = _e.sent();\n                                                    logger.error('Subscription error handler failed with:', e_1);\n                                                    return [3 /*break*/, 4];\n                                                  case 4:\n                                                    if (typeof subscriptionReadyCallback === 'function') {\n                                                      subscriptionReadyCallback();\n                                                    }\n                                                    if (message.includes('\"errorType\":\"Unauthorized\"') || message.includes('\"errorType\":\"OperationDisabled\"')) {\n                                                      return [2 /*return*/];\n                                                    }\n\n                                                    observer.error(message);\n                                                    return [2 /*return*/];\n                                                }\n                                              });\n                                            });\n                                          }\n                                        }));\n\n                                        promises.push(function () {\n                                          return __awaiter(_this, void 0, void 0, function () {\n                                            var boundFunction;\n                                            var _this = this;\n                                            return __generator(this, function (_a) {\n                                              switch (_a.label) {\n                                                case 0:\n                                                  return [4 /*yield*/, new Promise(function (res) {\n                                                    subscriptionReadyCallback = res;\n                                                    boundFunction = _this.hubQueryCompletionListener.bind(_this, res);\n                                                    Hub.listen('api', boundFunction);\n                                                  })];\n                                                case 1:\n                                                  _a.sent();\n                                                  Hub.remove('api', boundFunction);\n                                                  return [2 /*return*/];\n                                              }\n                                            });\n                                          });\n                                        }());\n\n                                        return [2 /*return*/];\n                                    }\n                                  });\n                                });\n                              };\n\n                              operations.forEach(function (op) {\n                                return authModeRetry(op);\n                              });\n                              return [2 /*return*/];\n                          }\n                        });\n                      });\n                    });\n                  });\n                });\n\n                this.runningProcesses.isOpen && this.runningProcesses.add(function () {\n                  return Promise.all(promises).then(function () {\n                    observer.next(CONTROL_MSG.CONNECTED);\n                  });\n                });\n                return [2 /*return*/];\n            }\n          });\n        });\n      }, 'subscription processor new subscriber');\n      return _this.runningProcesses.addCleaner(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            Object.keys(subscriptions).forEach(function (modelName) {\n              subscriptions[modelName][TransformerMutationType.CREATE].forEach(function (subscription) {\n                return subscription.unsubscribe();\n              });\n              subscriptions[modelName][TransformerMutationType.UPDATE].forEach(function (subscription) {\n                return subscription.unsubscribe();\n              });\n              subscriptions[modelName][TransformerMutationType.DELETE].forEach(function (subscription) {\n                return subscription.unsubscribe();\n              });\n            });\n            return [2 /*return*/];\n          });\n        });\n      });\n    });\n\n    var dataObservable = new Observable(function (observer) {\n      _this.dataObserver = observer;\n      _this.drainBuffer();\n      return _this.runningProcesses.addCleaner(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            this.dataObserver = null;\n            return [2 /*return*/];\n          });\n        });\n      });\n    });\n\n    return [ctlObservable, dataObservable];\n  };\n  SubscriptionProcessor.prototype.stop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.runningProcesses.close()];\n          case 1:\n            _a.sent();\n            return [4 /*yield*/, this.runningProcesses.open()];\n          case 2:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  SubscriptionProcessor.prototype.passesPredicateValidation = function (record, predicatesGroup) {\n    if (!predicatesGroup) {\n      return true;\n    }\n    var predicates = predicatesGroup.predicates,\n      type = predicatesGroup.type;\n    return validatePredicate(record, type, predicates);\n  };\n  SubscriptionProcessor.prototype.pushToBuffer = function (transformerMutationType, modelDefinition, data) {\n    this.buffer.push([transformerMutationType, modelDefinition, data]);\n  };\n  SubscriptionProcessor.prototype.drainBuffer = function () {\n    var _this = this;\n    if (this.dataObserver) {\n      this.buffer.forEach(function (data) {\n        return _this.dataObserver.next(data);\n      });\n      this.buffer = [];\n    }\n  };\n  return SubscriptionProcessor;\n}();\nexport { SubscriptionProcessor };","map":{"version":3,"names":["API","GRAPHQL_AUTH_MODE","Auth","Cache","ConsoleLogger","Logger","Hub","BackgroundProcessManager","CONTROL_MSG","PUBSUB_CONTROL_MSG","Observable","ProcessName","buildSubscriptionGraphQLOperation","getAuthorizationRules","getModelAuthModes","getUserGroupsFromToken","TransformerMutationType","getTokenForCustomAuth","ModelPredicateCreator","validatePredicate","USER_AGENT_SUFFIX_DATASTORE","getSubscriptionErrorType","logger","USER_CREDENTIALS","SubscriptionProcessor","schema","syncPredicates","amplifyConfig","authModeStrategy","errorHandler","amplifyContext","typeQuery","WeakMap","buffer","runningProcesses","prototype","buildSubscription","namespace","model","transformerMutationType","userCredentials","cognitoTokenPayload","oidcTokenPayload","authMode","aws_appsync_authenticationType","_a","getAuthorizationInfo","isOwner","ownerField","ownerValue","_b","__read","opType","opName","query","defaultAuthType","rules","iamPrivateAuth","AWS_IAM","find","rule","authStrategy","provider","unauth","groupAuthRules","filter","includes","validGroup","AMAZON_COGNITO_USER_POOLS","OPENID_CONNECT","groupAuthRule","cognitoUserGroups","oidcUserGroups","__spread","userGroup","groups","group","cognitoOwnerAuthRules","ownerAuthInfo","forEach","ownerAuthRule","identityClaim","areSubscriptionsPublic","oidcOwnerAuthRules","hubQueryCompletionListener","completed","capsule","event","payload","SUBSCRIPTION_ACK","start","_this","ctlObservable","observer","promises","subscriptions","none","add","__awaiter","currentCredentials","credentials","sent","authenticated","auth","currentSession","session","getIdToken","decodePayload","aws_cognito_region","AuthConfig","region","token","getItem","federatedInfo","currentAuthenticatedUser","currentUser","split","JSON","parse","Buffer","from","toString","debug","err_3","Object","values","namespaces","models","syncable","modelDefinition","isOpen","defaultAuthMode","modelName","name","modelAuthModes","_d","readAuthModes","READ","__assign","CREATE","UPDATE","DELETE","operations","operationAuthModeAttempts","_c","authModeRetry","operation","authToken","variables","error","userAgentSuffix","queryObservable","graphql","push","map","value","subscribe","next","data","errors","Array","isArray","length","messages","message","warn","join","drainBuffer","predicatesGroup","getPredicates","get","record","passesPredicateValidation","pushToBuffer","subscriptionError","REALTIME_SUBSCRIPTION_INIT_ERROR","CONNECTION_FAILED","subscription","unsubscribe","recoverySuggestion","localModel","errorType","process","remoteModel","cause","_e","e_1","subscriptionReadyCallback","Promise","res","boundFunction","bind","listen","remove","op","all","then","CONNECTED","addCleaner","keys","dataObservable","dataObserver","stop","close","open","predicates","type"],"sources":["/Users/ericli/node_modules/@aws-amplify/datastore/src/sync/processors/subscription.ts"],"sourcesContent":["import { API, GraphQLResult, GRAPHQL_AUTH_MODE } from '@aws-amplify/api';\nimport { Auth } from '@aws-amplify/auth';\nimport { Cache } from '@aws-amplify/cache';\nimport {\n\tConsoleLogger as Logger,\n\tHub,\n\tHubCapsule,\n\tBackgroundProcessManager,\n} from '@aws-amplify/core';\nimport { CONTROL_MSG as PUBSUB_CONTROL_MSG } from '@aws-amplify/pubsub';\nimport Observable, { ZenObservable } from 'zen-observable-ts';\nimport {\n\tInternalSchema,\n\tPersistentModel,\n\tSchemaModel,\n\tSchemaNamespace,\n\tPredicatesGroup,\n\tModelPredicate,\n\tAuthModeStrategy,\n\tErrorHandler,\n\tProcessName,\n\tAmplifyContext,\n} from '../../types';\nimport {\n\tbuildSubscriptionGraphQLOperation,\n\tgetAuthorizationRules,\n\tgetModelAuthModes,\n\tgetUserGroupsFromToken,\n\tTransformerMutationType,\n\tgetTokenForCustomAuth,\n} from '../utils';\nimport { ModelPredicateCreator } from '../../predicates';\nimport { validatePredicate, USER_AGENT_SUFFIX_DATASTORE } from '../../util';\nimport { getSubscriptionErrorType } from './errorMaps';\n\nconst logger = new Logger('DataStore');\n\nexport enum CONTROL_MSG {\n\tCONNECTED = 'CONNECTED',\n}\n\nexport enum USER_CREDENTIALS {\n\t'none',\n\t'unauth',\n\t'auth',\n}\n\ntype AuthorizationInfo = {\n\tauthMode: GRAPHQL_AUTH_MODE;\n\tisOwner: boolean;\n\townerField?: string;\n\townerValue?: string;\n};\n\nclass SubscriptionProcessor {\n\tprivate readonly typeQuery = new WeakMap<\n\t\tSchemaModel,\n\t\t[TransformerMutationType, string, string][]\n\t>();\n\tprivate buffer: [TransformerMutationType, SchemaModel, PersistentModel][] =\n\t\t[];\n\tprivate dataObserver!: ZenObservable.Observer<any>;\n\n\tprivate runningProcesses = new BackgroundProcessManager();\n\n\tconstructor(\n\t\tprivate readonly schema: InternalSchema,\n\t\tprivate readonly syncPredicates: WeakMap<SchemaModel, ModelPredicate<any>>,\n\t\tprivate readonly amplifyConfig: Record<string, any> = {},\n\t\tprivate readonly authModeStrategy: AuthModeStrategy,\n\t\tprivate readonly errorHandler: ErrorHandler,\n\t\tprivate readonly amplifyContext: AmplifyContext = { Auth, API, Cache }\n\t) {}\n\n\tprivate buildSubscription(\n\t\tnamespace: SchemaNamespace,\n\t\tmodel: SchemaModel,\n\t\ttransformerMutationType: TransformerMutationType,\n\t\tuserCredentials: USER_CREDENTIALS,\n\t\tcognitoTokenPayload: { [field: string]: any } | undefined,\n\t\toidcTokenPayload: { [field: string]: any } | undefined,\n\t\tauthMode: GRAPHQL_AUTH_MODE\n\t): {\n\t\topType: TransformerMutationType;\n\t\topName: string;\n\t\tquery: string;\n\t\tauthMode: GRAPHQL_AUTH_MODE;\n\t\tisOwner: boolean;\n\t\townerField?: string;\n\t\townerValue?: string;\n\t} {\n\t\tconst { aws_appsync_authenticationType } = this.amplifyConfig;\n\t\tconst { isOwner, ownerField, ownerValue } =\n\t\t\tthis.getAuthorizationInfo(\n\t\t\t\tmodel,\n\t\t\t\tuserCredentials,\n\t\t\t\taws_appsync_authenticationType,\n\t\t\t\tcognitoTokenPayload,\n\t\t\t\toidcTokenPayload,\n\t\t\t\tauthMode\n\t\t\t) || {};\n\n\t\tconst [opType, opName, query] = buildSubscriptionGraphQLOperation(\n\t\t\tnamespace,\n\t\t\tmodel,\n\t\t\ttransformerMutationType,\n\t\t\tisOwner,\n\t\t\townerField!\n\t\t);\n\t\treturn { authMode, opType, opName, query, isOwner, ownerField, ownerValue };\n\t}\n\n\tprivate getAuthorizationInfo(\n\t\tmodel: SchemaModel,\n\t\tuserCredentials: USER_CREDENTIALS,\n\t\tdefaultAuthType: GRAPHQL_AUTH_MODE,\n\t\tcognitoTokenPayload: { [field: string]: any } = {},\n\t\toidcTokenPayload: { [field: string]: any } = {},\n\t\tauthMode: GRAPHQL_AUTH_MODE\n\t): AuthorizationInfo {\n\t\tconst rules = getAuthorizationRules(model);\n\n\t\t// Return null if user doesn't have proper credentials for private API with IAM auth\n\t\tconst iamPrivateAuth =\n\t\t\tauthMode === GRAPHQL_AUTH_MODE.AWS_IAM &&\n\t\t\trules.find(\n\t\t\t\trule => rule.authStrategy === 'private' && rule.provider === 'iam'\n\t\t\t);\n\n\t\tif (iamPrivateAuth && userCredentials === USER_CREDENTIALS.unauth) {\n\t\t\treturn null!;\n\t\t}\n\n\t\t// Group auth should take precedence over owner auth, so we are checking\n\t\t// if rule(s) have group authorization as well as if either the Cognito or\n\t\t// OIDC token has a groupClaim. If so, we are returning auth info before\n\t\t// any further owner-based auth checks.\n\t\tconst groupAuthRules = rules.filter(\n\t\t\trule =>\n\t\t\t\trule.authStrategy === 'groups' &&\n\t\t\t\t['userPools', 'oidc'].includes(rule.provider)\n\t\t);\n\n\t\tconst validGroup =\n\t\t\t(authMode === GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS ||\n\t\t\t\tauthMode === GRAPHQL_AUTH_MODE.OPENID_CONNECT) &&\n\t\t\tgroupAuthRules.find(groupAuthRule => {\n\t\t\t\t// validate token against groupClaim\n\t\t\t\tconst cognitoUserGroups = getUserGroupsFromToken(\n\t\t\t\t\tcognitoTokenPayload,\n\t\t\t\t\tgroupAuthRule\n\t\t\t\t);\n\t\t\t\tconst oidcUserGroups = getUserGroupsFromToken(\n\t\t\t\t\toidcTokenPayload,\n\t\t\t\t\tgroupAuthRule\n\t\t\t\t);\n\n\t\t\t\treturn [...cognitoUserGroups, ...oidcUserGroups].find(userGroup => {\n\t\t\t\t\treturn groupAuthRule.groups.find(group => group === userGroup);\n\t\t\t\t});\n\t\t\t});\n\n\t\tif (validGroup) {\n\t\t\treturn {\n\t\t\t\tauthMode,\n\t\t\t\tisOwner: false,\n\t\t\t};\n\t\t}\n\n\t\t// Owner auth needs additional values to be returned in order to create the subscription with\n\t\t// the correct parameters so we are getting the owner value from the Cognito token via the\n\t\t// identityClaim from the auth rule.\n\t\tconst cognitoOwnerAuthRules =\n\t\t\tauthMode === GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS\n\t\t\t\t? rules.filter(\n\t\t\t\t\t\trule =>\n\t\t\t\t\t\t\trule.authStrategy === 'owner' && rule.provider === 'userPools'\n\t\t\t\t  )\n\t\t\t\t: [];\n\n\t\tlet ownerAuthInfo: AuthorizationInfo;\n\t\tcognitoOwnerAuthRules.forEach(ownerAuthRule => {\n\t\t\tconst ownerValue = cognitoTokenPayload[ownerAuthRule.identityClaim];\n\n\t\t\tif (ownerValue) {\n\t\t\t\townerAuthInfo = {\n\t\t\t\t\tauthMode: GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS,\n\t\t\t\t\tisOwner: ownerAuthRule.areSubscriptionsPublic ? false : true,\n\t\t\t\t\townerField: ownerAuthRule.ownerField,\n\t\t\t\t\townerValue,\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\n\t\tif (ownerAuthInfo!) {\n\t\t\treturn ownerAuthInfo!;\n\t\t}\n\n\t\t// Owner auth needs additional values to be returned in order to create the subscription with\n\t\t// the correct parameters so we are getting the owner value from the OIDC token via the\n\t\t// identityClaim from the auth rule.\n\t\tconst oidcOwnerAuthRules =\n\t\t\tauthMode === GRAPHQL_AUTH_MODE.OPENID_CONNECT\n\t\t\t\t? rules.filter(\n\t\t\t\t\t\trule => rule.authStrategy === 'owner' && rule.provider === 'oidc'\n\t\t\t\t  )\n\t\t\t\t: [];\n\n\t\toidcOwnerAuthRules.forEach(ownerAuthRule => {\n\t\t\tconst ownerValue = oidcTokenPayload[ownerAuthRule.identityClaim];\n\n\t\t\tif (ownerValue) {\n\t\t\t\townerAuthInfo = {\n\t\t\t\t\tauthMode: GRAPHQL_AUTH_MODE.OPENID_CONNECT,\n\t\t\t\t\tisOwner: ownerAuthRule.areSubscriptionsPublic ? false : true,\n\t\t\t\t\townerField: ownerAuthRule.ownerField,\n\t\t\t\t\townerValue,\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\n\t\tif (ownerAuthInfo!) {\n\t\t\treturn ownerAuthInfo!;\n\t\t}\n\n\t\t// Fallback: return authMode or default auth type\n\t\treturn {\n\t\t\tauthMode: authMode || defaultAuthType,\n\t\t\tisOwner: false,\n\t\t};\n\t}\n\n\tprivate hubQueryCompletionListener(completed: Function, capsule: HubCapsule) {\n\t\tconst {\n\t\t\tpayload: { event },\n\t\t} = capsule;\n\n\t\tif (event === PUBSUB_CONTROL_MSG.SUBSCRIPTION_ACK) {\n\t\t\tcompleted();\n\t\t}\n\t}\n\n\tstart(): [\n\t\tObservable<CONTROL_MSG>,\n\t\tObservable<[TransformerMutationType, SchemaModel, PersistentModel]>\n\t] {\n\t\tthis.runningProcesses =\n\t\t\tthis.runningProcesses || new BackgroundProcessManager();\n\n\t\tconst ctlObservable = new Observable<CONTROL_MSG>(observer => {\n\t\t\tconst promises: Promise<void>[] = [];\n\n\t\t\t// Creating subs for each model/operation combo so they can be unsubscribed\n\t\t\t// independently, since the auth retry behavior is asynchronous.\n\t\t\tlet subscriptions: {\n\t\t\t\t[modelName: string]: {\n\t\t\t\t\t[TransformerMutationType.CREATE]: ZenObservable.Subscription[];\n\t\t\t\t\t[TransformerMutationType.UPDATE]: ZenObservable.Subscription[];\n\t\t\t\t\t[TransformerMutationType.DELETE]: ZenObservable.Subscription[];\n\t\t\t\t};\n\t\t\t} = {};\n\t\t\tlet cognitoTokenPayload: { [field: string]: any },\n\t\t\t\toidcTokenPayload: { [field: string]: any };\n\t\t\tlet userCredentials = USER_CREDENTIALS.none;\n\t\t\tthis.runningProcesses.add(async () => {\n\t\t\t\ttry {\n\t\t\t\t\t// retrieving current AWS Credentials\n\t\t\t\t\tconst credentials =\n\t\t\t\t\t\tawait this.amplifyContext.Auth.currentCredentials();\n\t\t\t\t\tuserCredentials = credentials.authenticated\n\t\t\t\t\t\t? USER_CREDENTIALS.auth\n\t\t\t\t\t\t: USER_CREDENTIALS.unauth;\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// best effort to get AWS credentials\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\t// retrieving current token info from Cognito UserPools\n\t\t\t\t\tconst session = await this.amplifyContext.Auth.currentSession();\n\t\t\t\t\tcognitoTokenPayload = session.getIdToken().decodePayload();\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// best effort to get jwt from Cognito\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\t// Checking for the Cognito region in config to see if Auth is configured\n\t\t\t\t\t// before attempting to get federated token. We're using the Cognito region\n\t\t\t\t\t// because it will be there regardless of user/identity pool being present.\n\t\t\t\t\tconst { aws_cognito_region, Auth: AuthConfig } = this.amplifyConfig;\n\t\t\t\t\tif (!aws_cognito_region || (AuthConfig && !AuthConfig.region)) {\n\t\t\t\t\t\tthrow 'Auth is not configured';\n\t\t\t\t\t}\n\n\t\t\t\t\tlet token;\n\t\t\t\t\t// backwards compatibility\n\t\t\t\t\tconst federatedInfo = await this.amplifyContext.Cache.getItem(\n\t\t\t\t\t\t'federatedInfo'\n\t\t\t\t\t);\n\t\t\t\t\tif (federatedInfo) {\n\t\t\t\t\t\ttoken = federatedInfo.token;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst currentUser =\n\t\t\t\t\t\t\tawait this.amplifyContext.Auth.currentAuthenticatedUser();\n\t\t\t\t\t\tif (currentUser) {\n\t\t\t\t\t\t\ttoken = currentUser.token;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (token) {\n\t\t\t\t\t\tconst payload = token.split('.')[1];\n\t\t\t\t\t\toidcTokenPayload = JSON.parse(\n\t\t\t\t\t\t\tBuffer.from(payload, 'base64').toString('utf8')\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\tlogger.debug('error getting OIDC JWT', err);\n\t\t\t\t\t// best effort to get oidc jwt\n\t\t\t\t}\n\n\t\t\t\tObject.values(this.schema.namespaces).forEach(namespace => {\n\t\t\t\t\tObject.values(namespace.models)\n\t\t\t\t\t\t.filter(({ syncable }) => syncable)\n\t\t\t\t\t\t.forEach(\n\t\t\t\t\t\t\tmodelDefinition =>\n\t\t\t\t\t\t\t\tthis.runningProcesses.isOpen &&\n\t\t\t\t\t\t\t\tthis.runningProcesses.add(async () => {\n\t\t\t\t\t\t\t\t\tconst modelAuthModes = await getModelAuthModes({\n\t\t\t\t\t\t\t\t\t\tauthModeStrategy: this.authModeStrategy,\n\t\t\t\t\t\t\t\t\t\tdefaultAuthMode:\n\t\t\t\t\t\t\t\t\t\t\tthis.amplifyConfig.aws_appsync_authenticationType,\n\t\t\t\t\t\t\t\t\t\tmodelName: modelDefinition.name,\n\t\t\t\t\t\t\t\t\t\tschema: this.schema,\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t// subscriptions are created only based on the READ auth mode(s)\n\t\t\t\t\t\t\t\t\tconst readAuthModes = modelAuthModes.READ;\n\n\t\t\t\t\t\t\t\t\tsubscriptions = {\n\t\t\t\t\t\t\t\t\t\t...subscriptions,\n\t\t\t\t\t\t\t\t\t\t[modelDefinition.name]: {\n\t\t\t\t\t\t\t\t\t\t\t[TransformerMutationType.CREATE]: [],\n\t\t\t\t\t\t\t\t\t\t\t[TransformerMutationType.UPDATE]: [],\n\t\t\t\t\t\t\t\t\t\t\t[TransformerMutationType.DELETE]: [],\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\tconst operations = [\n\t\t\t\t\t\t\t\t\t\tTransformerMutationType.CREATE,\n\t\t\t\t\t\t\t\t\t\tTransformerMutationType.UPDATE,\n\t\t\t\t\t\t\t\t\t\tTransformerMutationType.DELETE,\n\t\t\t\t\t\t\t\t\t];\n\n\t\t\t\t\t\t\t\t\tconst operationAuthModeAttempts = {\n\t\t\t\t\t\t\t\t\t\t[TransformerMutationType.CREATE]: 0,\n\t\t\t\t\t\t\t\t\t\t[TransformerMutationType.UPDATE]: 0,\n\t\t\t\t\t\t\t\t\t\t[TransformerMutationType.DELETE]: 0,\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\t// Retry failed subscriptions with next auth mode (if available)\n\t\t\t\t\t\t\t\t\tconst authModeRetry = async operation => {\n\t\t\t\t\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\t\t\t\t\topType: transformerMutationType,\n\t\t\t\t\t\t\t\t\t\t\topName,\n\t\t\t\t\t\t\t\t\t\t\tquery,\n\t\t\t\t\t\t\t\t\t\t\tisOwner,\n\t\t\t\t\t\t\t\t\t\t\townerField,\n\t\t\t\t\t\t\t\t\t\t\townerValue,\n\t\t\t\t\t\t\t\t\t\t\tauthMode,\n\t\t\t\t\t\t\t\t\t\t} = this.buildSubscription(\n\t\t\t\t\t\t\t\t\t\t\tnamespace,\n\t\t\t\t\t\t\t\t\t\t\tmodelDefinition,\n\t\t\t\t\t\t\t\t\t\t\toperation,\n\t\t\t\t\t\t\t\t\t\t\tuserCredentials,\n\t\t\t\t\t\t\t\t\t\t\tcognitoTokenPayload,\n\t\t\t\t\t\t\t\t\t\t\toidcTokenPayload,\n\t\t\t\t\t\t\t\t\t\t\treadAuthModes[operationAuthModeAttempts[operation]]\n\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\tconst authToken = await getTokenForCustomAuth(\n\t\t\t\t\t\t\t\t\t\t\tauthMode,\n\t\t\t\t\t\t\t\t\t\t\tthis.amplifyConfig\n\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\tconst variables = {};\n\n\t\t\t\t\t\t\t\t\t\tif (isOwner) {\n\t\t\t\t\t\t\t\t\t\t\tif (!ownerValue) {\n\t\t\t\t\t\t\t\t\t\t\t\tobserver.error(\n\t\t\t\t\t\t\t\t\t\t\t\t\t'Owner field required, sign in is needed in order to perform this operation'\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\tvariables[ownerField!] = ownerValue;\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t\t\t\t\t`Attempting ${operation} subscription with authMode: ${\n\t\t\t\t\t\t\t\t\t\t\t\treadAuthModes[operationAuthModeAttempts[operation]]\n\t\t\t\t\t\t\t\t\t\t\t}`\n\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\tconst userAgentSuffix = USER_AGENT_SUFFIX_DATASTORE;\n\n\t\t\t\t\t\t\t\t\t\tconst queryObservable = <\n\t\t\t\t\t\t\t\t\t\t\tObservable<{\n\t\t\t\t\t\t\t\t\t\t\t\tvalue: GraphQLResult<Record<string, PersistentModel>>;\n\t\t\t\t\t\t\t\t\t\t\t}>\n\t\t\t\t\t\t\t\t\t\t>(<unknown>this.amplifyContext.API.graphql({\n\t\t\t\t\t\t\t\t\t\t\tquery,\n\t\t\t\t\t\t\t\t\t\t\tvariables,\n\t\t\t\t\t\t\t\t\t\t\t...{ authMode },\n\t\t\t\t\t\t\t\t\t\t\tauthToken,\n\t\t\t\t\t\t\t\t\t\t\tuserAgentSuffix,\n\t\t\t\t\t\t\t\t\t\t}));\n\n\t\t\t\t\t\t\t\t\t\tlet subscriptionReadyCallback: () => void;\n\n\t\t\t\t\t\t\t\t\t\t// TODO: consider onTerminate.then(() => API.cancel(...))\n\n\t\t\t\t\t\t\t\t\t\tsubscriptions[modelDefinition.name][\n\t\t\t\t\t\t\t\t\t\t\ttransformerMutationType\n\t\t\t\t\t\t\t\t\t\t].push(\n\t\t\t\t\t\t\t\t\t\t\tqueryObservable\n\t\t\t\t\t\t\t\t\t\t\t\t.map(({ value }) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t.subscribe({\n\t\t\t\t\t\t\t\t\t\t\t\t\tnext: ({ data, errors }) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (Array.isArray(errors) && errors.length > 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst messages = (<\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage: string;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}[]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t>errors).map(({ message }) => message);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`Skipping incoming subscription. Messages: ${messages.join(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'\\n'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}`\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.drainBuffer();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst predicatesGroup =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tModelPredicateCreator.getPredicates(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.syncPredicates.get(modelDefinition)!,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfalse\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst { [opName]: record } = data;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// checking incoming subscription against syncPredicate.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// once AppSync implements filters on subscriptions, we'll be\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// able to set these when establishing the subscription instead.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Until then, we'll need to filter inbound\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.passesPredicateValidation(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trecord,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpredicatesGroup!\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.pushToBuffer(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttransformerMutationType,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodelDefinition,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trecord\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.drainBuffer();\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\terror: async subscriptionError => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\terror: { errors: [{ message = '' } = {}] } = {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\terrors: [],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t} = subscriptionError;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage.includes(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tPUBSUB_CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t) ||\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage.includes(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tPUBSUB_CONTROL_MSG.CONNECTION_FAILED\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Unsubscribe and clear subscription array for model/operation\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsubscriptions[modelDefinition.name][\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttransformerMutationType\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t].forEach(subscription =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsubscription.unsubscribe()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsubscriptions[modelDefinition.name][\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttransformerMutationType\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t] = [];\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toperationAuthModeAttempts[operation]++;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toperationAuthModeAttempts[operation] >=\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treadAuthModes.length\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// last auth mode retry. Continue with error\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`${operation} subscription failed with authMode: ${\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treadAuthModes[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toperationAuthModeAttempts[operation] - 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}`\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// retry with different auth mode. Do not trigger\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// observer error or error handler\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`${operation} subscription failed with authMode: ${\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treadAuthModes[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toperationAuthModeAttempts[operation] - 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}. Retrying with authMode: ${\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treadAuthModes[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toperationAuthModeAttempts[operation]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}`\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tauthModeRetry(operation);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlogger.warn('subscriptionError', message);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tawait this.errorHandler({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trecoverySuggestion:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocalModel: null!,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmodel: modelDefinition.name,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\toperation,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\terrorType:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgetSubscriptionErrorType(subscriptionError),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tprocess: ProcessName.subscribe,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tremoteModel: null!,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcause: subscriptionError,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlogger.error(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Subscription error handler failed with:',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\te\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttypeof subscriptionReadyCallback === 'function'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsubscriptionReadyCallback();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage.includes('\"errorType\":\"Unauthorized\"') ||\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmessage.includes(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'\"errorType\":\"OperationDisabled\"'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tobserver.error(message);\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\tpromises.push(\n\t\t\t\t\t\t\t\t\t\t\t(async () => {\n\t\t\t\t\t\t\t\t\t\t\t\tlet boundFunction: any;\n\n\t\t\t\t\t\t\t\t\t\t\t\tawait new Promise(res => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tsubscriptionReadyCallback = res;\n\t\t\t\t\t\t\t\t\t\t\t\t\tboundFunction = this.hubQueryCompletionListener.bind(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tres\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\tHub.listen('api', boundFunction);\n\t\t\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\t\t\tHub.remove('api', boundFunction);\n\t\t\t\t\t\t\t\t\t\t\t})()\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\toperations.forEach(op => authModeRetry(op));\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t});\n\n\t\t\t\tthis.runningProcesses.isOpen &&\n\t\t\t\t\tthis.runningProcesses.add(() =>\n\t\t\t\t\t\tPromise.all(promises).then(() => {\n\t\t\t\t\t\t\tobserver.next(CONTROL_MSG.CONNECTED);\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t}, 'subscription processor new subscriber');\n\n\t\t\treturn this.runningProcesses.addCleaner(async () => {\n\t\t\t\tObject.keys(subscriptions).forEach(modelName => {\n\t\t\t\t\tsubscriptions[modelName][TransformerMutationType.CREATE].forEach(\n\t\t\t\t\t\tsubscription => subscription.unsubscribe()\n\t\t\t\t\t);\n\t\t\t\t\tsubscriptions[modelName][TransformerMutationType.UPDATE].forEach(\n\t\t\t\t\t\tsubscription => subscription.unsubscribe()\n\t\t\t\t\t);\n\t\t\t\t\tsubscriptions[modelName][TransformerMutationType.DELETE].forEach(\n\t\t\t\t\t\tsubscription => subscription.unsubscribe()\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tconst dataObservable = new Observable<\n\t\t\t[TransformerMutationType, SchemaModel, PersistentModel]\n\t\t>(observer => {\n\t\t\tthis.dataObserver = observer;\n\t\t\tthis.drainBuffer();\n\n\t\t\treturn this.runningProcesses.addCleaner(async () => {\n\t\t\t\tthis.dataObserver = null!;\n\t\t\t});\n\t\t});\n\n\t\treturn [ctlObservable, dataObservable];\n\t}\n\n\tpublic async stop() {\n\t\tawait this.runningProcesses.close();\n\t\tawait this.runningProcesses.open();\n\t}\n\n\tprivate passesPredicateValidation(\n\t\trecord: PersistentModel,\n\t\tpredicatesGroup: PredicatesGroup<any>\n\t): boolean {\n\t\tif (!predicatesGroup) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst { predicates, type } = predicatesGroup;\n\n\t\treturn validatePredicate(record, type, predicates);\n\t}\n\n\tprivate pushToBuffer(\n\t\ttransformerMutationType: TransformerMutationType,\n\t\tmodelDefinition: SchemaModel,\n\t\tdata: PersistentModel\n\t) {\n\t\tthis.buffer.push([transformerMutationType, modelDefinition, data]);\n\t}\n\n\tprivate drainBuffer() {\n\t\tif (this.dataObserver) {\n\t\t\tthis.buffer.forEach(data => this.dataObserver.next!(data));\n\t\t\tthis.buffer = [];\n\t\t}\n\t}\n}\n\nexport { SubscriptionProcessor };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}