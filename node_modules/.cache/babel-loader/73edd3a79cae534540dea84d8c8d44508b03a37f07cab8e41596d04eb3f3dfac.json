{"ast":null,"code":"/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { ConsoleLogger as Logger, getAmplifyUserAgent, Platform, Credentials } from '@aws-amplify/core';\nimport { S3Client, PutObjectCommand, CreateMultipartUploadCommand, UploadPartCommand, CompleteMultipartUploadCommand, ListPartsCommand, AbortMultipartUploadCommand } from '@aws-sdk/client-s3';\nimport { AxiosHttpHandler, SEND_PROGRESS_EVENT } from './axios-http-handler';\nimport * as events from 'events';\nimport { streamCollector } from '@aws-sdk/fetch-http-handler';\nvar logger = new Logger('AWSS3ProviderManagedUpload');\nvar localTestingStorageEndpoint = 'http://localhost:20005';\nvar SET_CONTENT_LENGTH_HEADER = 'contentLengthMiddleware';\nvar AWSS3ProviderManagedUpload = /** @class */function () {\n  function AWSS3ProviderManagedUpload(params, opts, emitter) {\n    // Defaults\n    this.minPartSize = 5 * 1024 * 1024; // in MB\n    this.queueSize = 4;\n    // Data for current upload\n    this.body = null;\n    this.params = null;\n    this.opts = null;\n    this.multiPartMap = [];\n    this.cancel = false;\n    // Progress reporting\n    this.bytesUploaded = 0;\n    this.totalBytesToUpload = 0;\n    this.emitter = null;\n    this.params = params;\n    this.opts = opts;\n    this.emitter = emitter;\n  }\n  AWSS3ProviderManagedUpload.prototype.upload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, putObjectCommand, s3, uploadId, numberOfPartsToUpload, start, parts;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this;\n            return [4 /*yield*/, this.validateAndSanitizeBody(this.params.Body)];\n          case 1:\n            _a.body = _b.sent();\n            this.totalBytesToUpload = this.byteLength(this.body);\n            if (!(this.totalBytesToUpload <= this.minPartSize)) return [3 /*break*/, 3];\n            // Multipart upload is not required. Upload the sanitized body as is\n            this.params.Body = this.body;\n            putObjectCommand = new PutObjectCommand(this.params);\n            return [4 /*yield*/, this._createNewS3Client(this.opts, this.emitter)];\n          case 2:\n            s3 = _b.sent();\n            return [2 /*return*/, s3.send(putObjectCommand)];\n          case 3:\n            return [4 /*yield*/, this.createMultiPartUpload()];\n          case 4:\n            uploadId = _b.sent();\n            numberOfPartsToUpload = Math.ceil(this.totalBytesToUpload / this.minPartSize);\n            start = 0;\n            _b.label = 5;\n          case 5:\n            if (!(start < numberOfPartsToUpload)) return [3 /*break*/, 10];\n            /** This first block will try to cancel the upload if the cancel\n             *\trequest came before any parts uploads have started.\n             **/\n            return [4 /*yield*/, this.checkIfUploadCancelled(uploadId)];\n          case 6:\n            /** This first block will try to cancel the upload if the cancel\n             *\trequest came before any parts uploads have started.\n             **/\n            _b.sent();\n            parts = this.createParts(start);\n            return [4 /*yield*/, this.uploadParts(uploadId, parts)];\n          case 7:\n            _b.sent();\n            /** Call cleanup a second time in case there were part upload requests\n             *  in flight. This is to ensure that all parts are cleaned up.\n             */\n            return [4 /*yield*/, this.checkIfUploadCancelled(uploadId)];\n          case 8:\n            /** Call cleanup a second time in case there were part upload requests\n             *  in flight. This is to ensure that all parts are cleaned up.\n             */\n            _b.sent();\n            _b.label = 9;\n          case 9:\n            start += this.queueSize;\n            return [3 /*break*/, 5];\n          case 10:\n            return [4 /*yield*/, this.finishMultiPartUpload(uploadId)];\n          case 11:\n            // Step 3: Finalize the upload such that S3 can recreate the file\n            return [2 /*return*/, _b.sent()];\n        }\n      });\n    });\n  };\n  AWSS3ProviderManagedUpload.prototype.createParts = function (startPartNumber) {\n    var parts = [];\n    var partNumber = startPartNumber;\n    for (var bodyStart = startPartNumber * this.minPartSize; bodyStart < this.totalBytesToUpload && parts.length < this.queueSize;) {\n      var bodyEnd = Math.min(bodyStart + this.minPartSize, this.totalBytesToUpload);\n      parts.push({\n        bodyPart: this.body.slice(bodyStart, bodyEnd),\n        partNumber: ++partNumber,\n        emitter: new events.EventEmitter(),\n        _lastUploadedBytes: 0\n      });\n      bodyStart += this.minPartSize;\n    }\n    return parts;\n  };\n  AWSS3ProviderManagedUpload.prototype.createMultiPartUpload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var createMultiPartUploadCommand, s3, response;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            createMultiPartUploadCommand = new CreateMultipartUploadCommand(this.params);\n            return [4 /*yield*/, this._createNewS3Client(this.opts)];\n          case 1:\n            s3 = _a.sent();\n            // @aws-sdk/client-s3 seems to be ignoring the `ContentType` parameter, so we\n            // are explicitly adding it via middleware.\n            // https://github.com/aws/aws-sdk-js-v3/issues/2000\n            s3.middlewareStack.add(function (next) {\n              return function (args) {\n                if (_this.params.ContentType && args && args.request && args.request.headers) {\n                  args.request.headers['Content-Type'] = _this.params.ContentType;\n                }\n                return next(args);\n              };\n            }, {\n              step: 'build'\n            });\n            return [4 /*yield*/, s3.send(createMultiPartUploadCommand)];\n          case 2:\n            response = _a.sent();\n            logger.debug(response.UploadId);\n            return [2 /*return*/, response.UploadId];\n        }\n      });\n    });\n  };\n  /**\n   * @private Not to be extended outside of tests\n   * @VisibleFotTesting\n   */\n  AWSS3ProviderManagedUpload.prototype.uploadParts = function (uploadId, parts) {\n    return __awaiter(this, void 0, void 0, function () {\n      var promises, parts_1, parts_1_1, part, uploadPartCommandInput, uploadPartCommand, s3, e_1_1, allResults, i, error_1;\n      var e_1, _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            promises = [];\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 6, 7, 8]);\n            parts_1 = __values(parts), parts_1_1 = parts_1.next();\n            _b.label = 2;\n          case 2:\n            if (!!parts_1_1.done) return [3 /*break*/, 5];\n            part = parts_1_1.value;\n            this.setupEventListener(part);\n            uploadPartCommandInput = {\n              PartNumber: part.partNumber,\n              Body: part.bodyPart,\n              UploadId: uploadId,\n              Key: this.params.Key,\n              Bucket: this.params.Bucket\n            };\n            uploadPartCommand = new UploadPartCommand(uploadPartCommandInput);\n            return [4 /*yield*/, this._createNewS3Client(this.opts, part.emitter)];\n          case 3:\n            s3 = _b.sent();\n            promises.push(s3.send(uploadPartCommand));\n            _b.label = 4;\n          case 4:\n            parts_1_1 = parts_1.next();\n            return [3 /*break*/, 2];\n          case 5:\n            return [3 /*break*/, 8];\n          case 6:\n            e_1_1 = _b.sent();\n            e_1 = {\n              error: e_1_1\n            };\n            return [3 /*break*/, 8];\n          case 7:\n            try {\n              if (parts_1_1 && !parts_1_1.done && (_a = parts_1.return)) _a.call(parts_1);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n            return [7 /*endfinally*/];\n          case 8:\n            _b.trys.push([8, 10,, 11]);\n            return [4 /*yield*/, Promise.all(promises)];\n          case 9:\n            allResults = _b.sent();\n            // The order of resolved promises is the same as input promise order.\n            for (i = 0; i < allResults.length; i++) {\n              this.multiPartMap.push({\n                PartNumber: parts[i].partNumber,\n                ETag: allResults[i].ETag\n              });\n            }\n            return [3 /*break*/, 11];\n          case 10:\n            error_1 = _b.sent();\n            logger.error('error happened while uploading a part. Cancelling the multipart upload', error_1);\n            this.cancelUpload();\n            return [2 /*return*/];\n          case 11:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.finishMultiPartUpload = function (uploadId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var input, completeUploadCommand, s3, data, error_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            input = {\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: uploadId,\n              MultipartUpload: {\n                Parts: this.multiPartMap\n              }\n            };\n            completeUploadCommand = new CompleteMultipartUploadCommand(input);\n            return [4 /*yield*/, this._createNewS3Client(this.opts)];\n          case 1:\n            s3 = _a.sent();\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, s3.send(completeUploadCommand)];\n          case 3:\n            data = _a.sent();\n            return [2 /*return*/, data.Key];\n          case 4:\n            error_2 = _a.sent();\n            logger.error('error happened while finishing the upload. Cancelling the multipart upload', error_2);\n            this.cancelUpload();\n            return [2 /*return*/];\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.checkIfUploadCancelled = function (uploadId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var errorMessage, error_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.cancel) return [3 /*break*/, 5];\n            errorMessage = 'Upload was cancelled.';\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this.cleanup(uploadId)];\n          case 2:\n            _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            error_3 = _a.sent();\n            errorMessage += error_3.errorMessage;\n            return [3 /*break*/, 4];\n          case 4:\n            throw new Error(errorMessage);\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.cancelUpload = function () {\n    this.cancel = true;\n  };\n  AWSS3ProviderManagedUpload.prototype.cleanup = function (uploadId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var input, s3, data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // Reset this's state\n            this.body = null;\n            this.multiPartMap = [];\n            this.bytesUploaded = 0;\n            this.totalBytesToUpload = 0;\n            input = {\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: uploadId\n            };\n            return [4 /*yield*/, this._createNewS3Client(this.opts)];\n          case 1:\n            s3 = _a.sent();\n            return [4 /*yield*/, s3.send(new AbortMultipartUploadCommand(input))];\n          case 2:\n            _a.sent();\n            return [4 /*yield*/, s3.send(new ListPartsCommand(input))];\n          case 3:\n            data = _a.sent();\n            if (data && data.Parts && data.Parts.length > 0) {\n              throw new Error('Multi Part upload clean up failed');\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.setupEventListener = function (part) {\n    var _this = this;\n    part.emitter.on(SEND_PROGRESS_EVENT, function (progress) {\n      _this.progressChanged(part.partNumber, progress.loaded - part._lastUploadedBytes);\n      part._lastUploadedBytes = progress.loaded;\n    });\n  };\n  AWSS3ProviderManagedUpload.prototype.progressChanged = function (partNumber, incrementalUpdate) {\n    this.bytesUploaded += incrementalUpdate;\n    this.emitter.emit(SEND_PROGRESS_EVENT, {\n      loaded: this.bytesUploaded,\n      total: this.totalBytesToUpload,\n      part: partNumber,\n      key: this.params.Key\n    });\n  };\n  AWSS3ProviderManagedUpload.prototype.byteLength = function (input) {\n    if (input === null || input === undefined) return 0;\n    if (typeof input.byteLength === 'number') {\n      return input.byteLength;\n    } else if (typeof input.length === 'number') {\n      return input.length;\n    } else if (typeof input.size === 'number') {\n      return input.size;\n    } else if (typeof input.path === 'string') {\n      /* NodeJs Support\n      return require('fs').lstatSync(input.path).size;\n      */\n    } else {\n      throw new Error('Cannot determine length of ' + input);\n    }\n  };\n  AWSS3ProviderManagedUpload.prototype.validateAndSanitizeBody = function (body) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.isGenericObject(body)) return [3 /*break*/, 1];\n            // Any javascript object\n            return [2 /*return*/, JSON.stringify(body)];\n          case 1:\n            if (!this.isBlob(body)) return [3 /*break*/, 4];\n            if (!Platform.isReactNative) return [3 /*break*/, 3];\n            return [4 /*yield*/, streamCollector(body)];\n          case 2:\n            return [2 /*return*/, _a.sent()];\n          case 3:\n            return [2 /*return*/, body];\n          case 4:\n            // Files, arrayBuffer etc\n            return [2 /*return*/, body];\n        }\n      });\n    });\n  };\n  AWSS3ProviderManagedUpload.prototype.isBlob = function (body) {\n    return typeof Blob !== 'undefined' && body instanceof Blob;\n  };\n  AWSS3ProviderManagedUpload.prototype.isGenericObject = function (body) {\n    if (body !== null && typeof body === 'object') {\n      try {\n        return !(this.byteLength(body) >= 0);\n      } catch (error) {\n        // If we cannot determine the length of the body, consider it\n        // as a generic object and upload a stringified version of it\n        return true;\n      }\n    }\n    return false;\n  };\n  /**\n   * @private\n   * creates an S3 client with new V3 aws sdk\n   */\n  AWSS3ProviderManagedUpload.prototype._createNewS3Client = function (config, emitter) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, region, dangerouslyConnectToHttpEndpointForTesting, cancelTokenSource, localTestingConfig, client;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._getCredentials()];\n          case 1:\n            credentials = _a.sent();\n            region = config.region, dangerouslyConnectToHttpEndpointForTesting = config.dangerouslyConnectToHttpEndpointForTesting, cancelTokenSource = config.cancelTokenSource;\n            localTestingConfig = {};\n            if (dangerouslyConnectToHttpEndpointForTesting) {\n              localTestingConfig = {\n                endpoint: localTestingStorageEndpoint,\n                tls: false,\n                bucketEndpoint: false,\n                forcePathStyle: true\n              };\n            }\n            client = new S3Client(__assign(__assign({\n              region: region,\n              credentials: credentials\n            }, localTestingConfig), {\n              requestHandler: new AxiosHttpHandler({}, emitter, cancelTokenSource),\n              customUserAgent: getAmplifyUserAgent()\n            }));\n            client.middlewareStack.remove(SET_CONTENT_LENGTH_HEADER);\n            return [2 /*return*/, client];\n        }\n      });\n    });\n  };\n  /**\n   * @private\n   */\n  AWSS3ProviderManagedUpload.prototype._getCredentials = function () {\n    return Credentials.get().then(function (credentials) {\n      if (!credentials) return false;\n      var cred = Credentials.shear(credentials);\n      logger.debug('set credentials for storage', cred);\n      return cred;\n    }).catch(function (error) {\n      logger.warn('ensure credentials error', error);\n      return false;\n    });\n  };\n  return AWSS3ProviderManagedUpload;\n}();\nexport { AWSS3ProviderManagedUpload };","map":{"version":3,"names":["ConsoleLogger","Logger","getAmplifyUserAgent","Platform","Credentials","S3Client","PutObjectCommand","CreateMultipartUploadCommand","UploadPartCommand","CompleteMultipartUploadCommand","ListPartsCommand","AbortMultipartUploadCommand","AxiosHttpHandler","SEND_PROGRESS_EVENT","events","streamCollector","logger","localTestingStorageEndpoint","SET_CONTENT_LENGTH_HEADER","AWSS3ProviderManagedUpload","params","opts","emitter","minPartSize","queueSize","body","multiPartMap","cancel","bytesUploaded","totalBytesToUpload","prototype","upload","_a","validateAndSanitizeBody","Body","_b","sent","byteLength","putObjectCommand","_createNewS3Client","s3","send","createMultiPartUpload","uploadId","numberOfPartsToUpload","Math","ceil","start","checkIfUploadCancelled","parts","createParts","uploadParts","finishMultiPartUpload","startPartNumber","partNumber","bodyStart","length","bodyEnd","min","push","bodyPart","slice","EventEmitter","_lastUploadedBytes","createMultiPartUploadCommand","middlewareStack","add","next","args","_this","ContentType","request","headers","step","response","debug","UploadId","promises","parts_1","__values","parts_1_1","part","value","setupEventListener","uploadPartCommandInput","PartNumber","Key","Bucket","uploadPartCommand","Promise","all","allResults","i","ETag","error","error_1","cancelUpload","input","MultipartUpload","Parts","completeUploadCommand","data","error_2","errorMessage","cleanup","error_3","Error","on","progress","progressChanged","loaded","incrementalUpdate","emit","total","key","undefined","size","path","isGenericObject","JSON","stringify","isBlob","isReactNative","Blob","config","_getCredentials","credentials","region","dangerouslyConnectToHttpEndpointForTesting","cancelTokenSource","localTestingConfig","endpoint","tls","bucketEndpoint","forcePathStyle","client","__assign","requestHandler","customUserAgent","remove","get","then","cred","shear","catch","warn"],"sources":["/Users/ericli/node_modules/@aws-amplify/storage/src/providers/AWSS3ProviderManagedUpload.ts"],"sourcesContent":["/*\r\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\r\n * the License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/apache2.0/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\r\n * and limitations under the License.\r\n */\r\n\r\nimport {\r\n\tConsoleLogger as Logger,\r\n\tgetAmplifyUserAgent,\r\n\tPlatform,\r\n\tCredentials,\r\n} from '@aws-amplify/core';\r\nimport {\r\n\tS3Client,\r\n\tPutObjectCommand,\r\n\tCreateMultipartUploadCommand,\r\n\tUploadPartCommand,\r\n\tCompleteMultipartUploadCommand,\r\n\tCompleteMultipartUploadCommandInput,\r\n\tUploadPartCommandOutput,\r\n\tUploadPartCommandInput,\r\n\tListPartsCommand,\r\n\tAbortMultipartUploadCommand,\r\n} from '@aws-sdk/client-s3';\r\nimport { AxiosHttpHandler, SEND_PROGRESS_EVENT } from './axios-http-handler';\r\nimport * as events from 'events';\r\nimport { streamCollector } from '@aws-sdk/fetch-http-handler';\r\n\r\nconst logger = new Logger('AWSS3ProviderManagedUpload');\r\n\r\nconst localTestingStorageEndpoint = 'http://localhost:20005';\r\n\r\nconst SET_CONTENT_LENGTH_HEADER = 'contentLengthMiddleware';\r\nexport declare interface Part {\r\n\tbodyPart: any;\r\n\tpartNumber: number;\r\n\temitter: any;\r\n\tetag?: string;\r\n\t_lastUploadedBytes: number;\r\n}\r\n\r\nexport class AWSS3ProviderManagedUpload {\r\n\t// Defaults\r\n\tprotected minPartSize = 5 * 1024 * 1024; // in MB\r\n\tprivate queueSize = 4;\r\n\r\n\t// Data for current upload\r\n\tprivate body = null;\r\n\tprivate params = null;\r\n\tprivate opts = null;\r\n\tprivate multiPartMap = [];\r\n\tprivate cancel: boolean = false;\r\n\r\n\t// Progress reporting\r\n\tprivate bytesUploaded = 0;\r\n\tprivate totalBytesToUpload = 0;\r\n\tprivate emitter = null;\r\n\r\n\tconstructor(params, opts, emitter) {\r\n\t\tthis.params = params;\r\n\t\tthis.opts = opts;\r\n\t\tthis.emitter = emitter;\r\n\t}\r\n\r\n\tpublic async upload() {\r\n\t\tthis.body = await this.validateAndSanitizeBody(this.params.Body);\r\n\t\tthis.totalBytesToUpload = this.byteLength(this.body);\r\n\t\tif (this.totalBytesToUpload <= this.minPartSize) {\r\n\t\t\t// Multipart upload is not required. Upload the sanitized body as is\r\n\t\t\tthis.params.Body = this.body;\r\n\t\t\tconst putObjectCommand = new PutObjectCommand(this.params);\r\n\t\t\tconst s3 = await this._createNewS3Client(this.opts, this.emitter);\r\n\t\t\treturn s3.send(putObjectCommand);\r\n\t\t} else {\r\n\t\t\t// Step 1: Initiate the multi part upload\r\n\t\t\tconst uploadId = await this.createMultiPartUpload();\r\n\r\n\t\t\t// Step 2: Upload chunks in parallel as requested\r\n\t\t\tconst numberOfPartsToUpload = Math.ceil(\r\n\t\t\t\tthis.totalBytesToUpload / this.minPartSize\r\n\t\t\t);\r\n\t\t\tfor (\r\n\t\t\t\tlet start = 0;\r\n\t\t\t\tstart < numberOfPartsToUpload;\r\n\t\t\t\tstart += this.queueSize\r\n\t\t\t) {\r\n\t\t\t\t/** This first block will try to cancel the upload if the cancel\r\n\t\t\t\t *\trequest came before any parts uploads have started.\r\n\t\t\t\t **/\r\n\t\t\t\tawait this.checkIfUploadCancelled(uploadId);\r\n\r\n\t\t\t\t// Upload as many as `queueSize` parts simultaneously\r\n\t\t\t\tconst parts: Part[] = this.createParts(start);\r\n\t\t\t\tawait this.uploadParts(uploadId, parts);\r\n\r\n\t\t\t\t/** Call cleanup a second time in case there were part upload requests\r\n\t\t\t\t *  in flight. This is to ensure that all parts are cleaned up.\r\n\t\t\t\t */\r\n\t\t\t\tawait this.checkIfUploadCancelled(uploadId);\r\n\t\t\t}\r\n\r\n\t\t\t// Step 3: Finalize the upload such that S3 can recreate the file\r\n\t\t\treturn await this.finishMultiPartUpload(uploadId);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate createParts(startPartNumber: number): Part[] {\r\n\t\tconst parts: Part[] = [];\r\n\t\tlet partNumber = startPartNumber;\r\n\t\tfor (\r\n\t\t\tlet bodyStart = startPartNumber * this.minPartSize;\r\n\t\t\tbodyStart < this.totalBytesToUpload && parts.length < this.queueSize;\r\n\r\n\t\t) {\r\n\t\t\tconst bodyEnd = Math.min(\r\n\t\t\t\tbodyStart + this.minPartSize,\r\n\t\t\t\tthis.totalBytesToUpload\r\n\t\t\t);\r\n\t\t\tparts.push({\r\n\t\t\t\tbodyPart: this.body.slice(bodyStart, bodyEnd),\r\n\t\t\t\tpartNumber: ++partNumber,\r\n\t\t\t\temitter: new events.EventEmitter(),\r\n\t\t\t\t_lastUploadedBytes: 0,\r\n\t\t\t});\r\n\t\t\tbodyStart += this.minPartSize;\r\n\t\t}\r\n\t\treturn parts;\r\n\t}\r\n\r\n\tprivate async createMultiPartUpload() {\r\n\t\tconst createMultiPartUploadCommand = new CreateMultipartUploadCommand(\r\n\t\t\tthis.params\r\n\t\t);\r\n\t\tconst s3 = await this._createNewS3Client(this.opts);\r\n\r\n\t\t// @aws-sdk/client-s3 seems to be ignoring the `ContentType` parameter, so we\r\n\t\t// are explicitly adding it via middleware.\r\n\t\t// https://github.com/aws/aws-sdk-js-v3/issues/2000\r\n\t\ts3.middlewareStack.add(\r\n\t\t\tnext => (args: any) => {\r\n\t\t\t\tif (\r\n\t\t\t\t\tthis.params.ContentType &&\r\n\t\t\t\t\targs &&\r\n\t\t\t\t\targs.request &&\r\n\t\t\t\t\targs.request.headers\r\n\t\t\t\t) {\r\n\t\t\t\t\targs.request.headers['Content-Type'] = this.params.ContentType;\r\n\t\t\t\t}\r\n\t\t\t\treturn next(args);\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tstep: 'build',\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tconst response = await s3.send(createMultiPartUploadCommand);\r\n\t\tlogger.debug(response.UploadId);\r\n\t\treturn response.UploadId;\r\n\t}\r\n\r\n\t/**\r\n\t * @private Not to be extended outside of tests\r\n\t * @VisibleFotTesting\r\n\t */\r\n\tprotected async uploadParts(uploadId: string, parts: Part[]) {\r\n\t\tconst promises: Array<Promise<UploadPartCommandOutput>> = [];\r\n\t\tfor (const part of parts) {\r\n\t\t\tthis.setupEventListener(part);\r\n\t\t\tconst uploadPartCommandInput: UploadPartCommandInput = {\r\n\t\t\t\tPartNumber: part.partNumber,\r\n\t\t\t\tBody: part.bodyPart,\r\n\t\t\t\tUploadId: uploadId,\r\n\t\t\t\tKey: this.params.Key,\r\n\t\t\t\tBucket: this.params.Bucket,\r\n\t\t\t};\r\n\t\t\tconst uploadPartCommand = new UploadPartCommand(uploadPartCommandInput);\r\n\t\t\tconst s3 = await this._createNewS3Client(this.opts, part.emitter);\r\n\t\t\tpromises.push(s3.send(uploadPartCommand));\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tconst allResults: Array<UploadPartCommandOutput> = await Promise.all(\r\n\t\t\t\tpromises\r\n\t\t\t);\r\n\t\t\t// The order of resolved promises is the same as input promise order.\r\n\t\t\tfor (let i = 0; i < allResults.length; i++) {\r\n\t\t\t\tthis.multiPartMap.push({\r\n\t\t\t\t\tPartNumber: parts[i].partNumber,\r\n\t\t\t\t\tETag: allResults[i].ETag,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tlogger.error(\r\n\t\t\t\t'error happened while uploading a part. Cancelling the multipart upload',\r\n\t\t\t\terror\r\n\t\t\t);\r\n\t\t\tthis.cancelUpload();\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async finishMultiPartUpload(uploadId: string) {\r\n\t\tconst input: CompleteMultipartUploadCommandInput = {\r\n\t\t\tBucket: this.params.Bucket,\r\n\t\t\tKey: this.params.Key,\r\n\t\t\tUploadId: uploadId,\r\n\t\t\tMultipartUpload: { Parts: this.multiPartMap },\r\n\t\t};\r\n\t\tconst completeUploadCommand = new CompleteMultipartUploadCommand(input);\r\n\t\tconst s3 = await this._createNewS3Client(this.opts);\r\n\t\ttry {\r\n\t\t\tconst data = await s3.send(completeUploadCommand);\r\n\t\t\treturn data.Key;\r\n\t\t} catch (error) {\r\n\t\t\tlogger.error(\r\n\t\t\t\t'error happened while finishing the upload. Cancelling the multipart upload',\r\n\t\t\t\terror\r\n\t\t\t);\r\n\t\t\tthis.cancelUpload();\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async checkIfUploadCancelled(uploadId: string) {\r\n\t\tif (this.cancel) {\r\n\t\t\tlet errorMessage = 'Upload was cancelled.';\r\n\t\t\ttry {\r\n\t\t\t\tawait this.cleanup(uploadId);\r\n\t\t\t} catch (error) {\r\n\t\t\t\terrorMessage += error.errorMessage;\r\n\t\t\t}\r\n\t\t\tthrow new Error(errorMessage);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic cancelUpload() {\r\n\t\tthis.cancel = true;\r\n\t}\r\n\r\n\tprivate async cleanup(uploadId: string) {\r\n\t\t// Reset this's state\r\n\t\tthis.body = null;\r\n\t\tthis.multiPartMap = [];\r\n\t\tthis.bytesUploaded = 0;\r\n\t\tthis.totalBytesToUpload = 0;\r\n\r\n\t\tconst input = {\r\n\t\t\tBucket: this.params.Bucket,\r\n\t\t\tKey: this.params.Key,\r\n\t\t\tUploadId: uploadId,\r\n\t\t};\r\n\r\n\t\tconst s3 = await this._createNewS3Client(this.opts);\r\n\t\tawait s3.send(new AbortMultipartUploadCommand(input));\r\n\r\n\t\t// verify that all parts are removed.\r\n\t\tconst data = await s3.send(new ListPartsCommand(input));\r\n\r\n\t\tif (data && data.Parts && data.Parts.length > 0) {\r\n\t\t\tthrow new Error('Multi Part upload clean up failed');\r\n\t\t}\r\n\t}\r\n\r\n\tprivate setupEventListener(part: Part) {\r\n\t\tpart.emitter.on(SEND_PROGRESS_EVENT, progress => {\r\n\t\t\tthis.progressChanged(\r\n\t\t\t\tpart.partNumber,\r\n\t\t\t\tprogress.loaded - part._lastUploadedBytes\r\n\t\t\t);\r\n\t\t\tpart._lastUploadedBytes = progress.loaded;\r\n\t\t});\r\n\t}\r\n\r\n\tprivate progressChanged(partNumber: number, incrementalUpdate: number) {\r\n\t\tthis.bytesUploaded += incrementalUpdate;\r\n\t\tthis.emitter.emit(SEND_PROGRESS_EVENT, {\r\n\t\t\tloaded: this.bytesUploaded,\r\n\t\t\ttotal: this.totalBytesToUpload,\r\n\t\t\tpart: partNumber,\r\n\t\t\tkey: this.params.Key,\r\n\t\t});\r\n\t}\r\n\r\n\tprivate byteLength(input: any) {\r\n\t\tif (input === null || input === undefined) return 0;\r\n\t\tif (typeof input.byteLength === 'number') {\r\n\t\t\treturn input.byteLength;\r\n\t\t} else if (typeof input.length === 'number') {\r\n\t\t\treturn input.length;\r\n\t\t} else if (typeof input.size === 'number') {\r\n\t\t\treturn input.size;\r\n\t\t} else if (typeof input.path === 'string') {\r\n\t\t\t/* NodeJs Support\r\n\t\t\treturn require('fs').lstatSync(input.path).size;\r\n\t\t\t*/\r\n\t\t} else {\r\n\t\t\tthrow new Error('Cannot determine length of ' + input);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async validateAndSanitizeBody(body: any): Promise<any> {\r\n\t\tif (this.isGenericObject(body)) {\r\n\t\t\t// Any javascript object\r\n\t\t\treturn JSON.stringify(body);\r\n\t\t} else if (this.isBlob(body)) {\r\n\t\t\t// If it's a blob, we need to convert it to an array buffer as axios has issues\r\n\t\t\t// with correctly identifying blobs in *react native* environment. For more\r\n\t\t\t// details see https://github.com/aws-amplify/amplify-js/issues/5311\r\n\t\t\tif (Platform.isReactNative) {\r\n\t\t\t\treturn await streamCollector(body);\r\n\t\t\t}\r\n\t\t\treturn body;\r\n\t\t} else {\r\n\t\t\t// Files, arrayBuffer etc\r\n\t\t\treturn body;\r\n\t\t}\r\n\t\t/* TODO: streams and files for nodejs \r\n\t\tif (\r\n\t\t\ttypeof body.path === 'string' &&\r\n\t\t\trequire('fs').lstatSync(body.path).size > 0\r\n\t\t) {\r\n\t\t\treturn body;\r\n\t\t} */\r\n\t}\r\n\r\n\tprivate isBlob(body: any) {\r\n\t\treturn typeof Blob !== 'undefined' && body instanceof Blob;\r\n\t}\r\n\r\n\tprivate isGenericObject(body: any) {\r\n\t\tif (body !== null && typeof body === 'object') {\r\n\t\t\ttry {\r\n\t\t\t\treturn !(this.byteLength(body) >= 0);\r\n\t\t\t} catch (error) {\r\n\t\t\t\t// If we cannot determine the length of the body, consider it\r\n\t\t\t\t// as a generic object and upload a stringified version of it\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * creates an S3 client with new V3 aws sdk\r\n\t */\r\n\tprotected async _createNewS3Client(config, emitter?) {\r\n\t\tconst credentials = await this._getCredentials();\r\n\t\tconst {\r\n\t\t\tregion,\r\n\t\t\tdangerouslyConnectToHttpEndpointForTesting,\r\n\t\t\tcancelTokenSource,\r\n\t\t} = config;\r\n\t\tlet localTestingConfig = {};\r\n\r\n\t\tif (dangerouslyConnectToHttpEndpointForTesting) {\r\n\t\t\tlocalTestingConfig = {\r\n\t\t\t\tendpoint: localTestingStorageEndpoint,\r\n\t\t\t\ttls: false,\r\n\t\t\t\tbucketEndpoint: false,\r\n\t\t\t\tforcePathStyle: true,\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tconst client = new S3Client({\r\n\t\t\tregion,\r\n\t\t\tcredentials,\r\n\t\t\t...localTestingConfig,\r\n\t\t\trequestHandler: new AxiosHttpHandler({}, emitter, cancelTokenSource),\r\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\r\n\t\t});\r\n\t\tclient.middlewareStack.remove(SET_CONTENT_LENGTH_HEADER);\r\n\t\treturn client;\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t */\r\n\t_getCredentials() {\r\n\t\treturn Credentials.get()\r\n\t\t\t.then(credentials => {\r\n\t\t\t\tif (!credentials) return false;\r\n\t\t\t\tconst cred = Credentials.shear(credentials);\r\n\t\t\t\tlogger.debug('set credentials for storage', cred);\r\n\t\t\t\treturn cred;\r\n\t\t\t})\r\n\t\t\t.catch(error => {\r\n\t\t\t\tlogger.warn('ensure credentials error', error);\r\n\t\t\t\treturn false;\r\n\t\t\t});\r\n\t}\r\n}\r\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,SACCA,aAAa,IAAIC,MAAM,EACvBC,mBAAmB,EACnBC,QAAQ,EACRC,WAAW,QACL,mBAAmB;AAC1B,SACCC,QAAQ,EACRC,gBAAgB,EAChBC,4BAA4B,EAC5BC,iBAAiB,EACjBC,8BAA8B,EAI9BC,gBAAgB,EAChBC,2BAA2B,QACrB,oBAAoB;AAC3B,SAASC,gBAAgB,EAAEC,mBAAmB,QAAQ,sBAAsB;AAC5E,OAAO,KAAKC,MAAM,MAAM,QAAQ;AAChC,SAASC,eAAe,QAAQ,6BAA6B;AAE7D,IAAMC,MAAM,GAAG,IAAIf,MAAM,CAAC,4BAA4B,CAAC;AAEvD,IAAMgB,2BAA2B,GAAG,wBAAwB;AAE5D,IAAMC,yBAAyB,GAAG,yBAAyB;AAS3D,IAAAC,0BAAA;EAiBC,SAAAA,2BAAYC,MAAM,EAAEC,IAAI,EAAEC,OAAO;IAhBjC;IACU,KAAAC,WAAW,GAAG,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;IACjC,KAAAC,SAAS,GAAG,CAAC;IAErB;IACQ,KAAAC,IAAI,GAAG,IAAI;IACX,KAAAL,MAAM,GAAG,IAAI;IACb,KAAAC,IAAI,GAAG,IAAI;IACX,KAAAK,YAAY,GAAG,EAAE;IACjB,KAAAC,MAAM,GAAY,KAAK;IAE/B;IACQ,KAAAC,aAAa,GAAG,CAAC;IACjB,KAAAC,kBAAkB,GAAG,CAAC;IACtB,KAAAP,OAAO,GAAG,IAAI;IAGrB,IAAI,CAACF,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,OAAO,GAAGA,OAAO;EACvB;EAEaH,0BAAA,CAAAW,SAAA,CAAAC,MAAM,GAAnB;;;;;;YACCC,EAAA,OAAI;YAAQ,qBAAM,IAAI,CAACC,uBAAuB,CAAC,IAAI,CAACb,MAAM,CAACc,IAAI,CAAC;;YAAhEF,EAAA,CAAKP,IAAI,GAAGU,EAAA,CAAAC,IAAA,EAAoD;YAChE,IAAI,CAACP,kBAAkB,GAAG,IAAI,CAACQ,UAAU,CAAC,IAAI,CAACZ,IAAI,CAAC;kBAChD,IAAI,CAACI,kBAAkB,IAAI,IAAI,CAACN,WAAW,GAA3C;YACH;YACA,IAAI,CAACH,MAAM,CAACc,IAAI,GAAG,IAAI,CAACT,IAAI;YACtBa,gBAAgB,GAAG,IAAIhC,gBAAgB,CAAC,IAAI,CAACc,MAAM,CAAC;YAC/C,qBAAM,IAAI,CAACmB,kBAAkB,CAAC,IAAI,CAAClB,IAAI,EAAE,IAAI,CAACC,OAAO,CAAC;;YAA3DkB,EAAE,GAAGL,EAAA,CAAAC,IAAA,EAAsD;YACjE,sBAAOI,EAAE,CAACC,IAAI,CAACH,gBAAgB,CAAC;;YAGf,qBAAM,IAAI,CAACI,qBAAqB,EAAE;;YAA7CC,QAAQ,GAAGR,EAAA,CAAAC,IAAA,EAAkC;YAG7CQ,qBAAqB,GAAGC,IAAI,CAACC,IAAI,CACtC,IAAI,CAACjB,kBAAkB,GAAG,IAAI,CAACN,WAAW,CAC1C;YAEIwB,KAAK,GAAG,CAAC;;;kBACbA,KAAK,GAAGH,qBAAqB;YAG7B;;;YAGA,qBAAM,IAAI,CAACI,sBAAsB,CAACL,QAAQ,CAAC;;YAH3C;;;YAGAR,EAAA,CAAAC,IAAA,EAA2C;YAGrCa,KAAK,GAAW,IAAI,CAACC,WAAW,CAACH,KAAK,CAAC;YAC7C,qBAAM,IAAI,CAACI,WAAW,CAACR,QAAQ,EAAEM,KAAK,CAAC;;YAAvCd,EAAA,CAAAC,IAAA,EAAuC;YAEvC;;;YAGA,qBAAM,IAAI,CAACY,sBAAsB,CAACL,QAAQ,CAAC;;YAH3C;;;YAGAR,EAAA,CAAAC,IAAA,EAA2C;;;YAd3CW,KAAK,IAAI,IAAI,CAACvB,SAAS;;;YAkBjB,qBAAM,IAAI,CAAC4B,qBAAqB,CAACT,QAAQ,CAAC;;YADjD;YACA,sBAAOR,EAAA,CAAAC,IAAA,EAA0C;QAAC;;;GAEnD;EAEOjB,0BAAA,CAAAW,SAAA,CAAAoB,WAAW,GAAnB,UAAoBG,eAAuB;IAC1C,IAAMJ,KAAK,GAAW,EAAE;IACxB,IAAIK,UAAU,GAAGD,eAAe;IAChC,KACC,IAAIE,SAAS,GAAGF,eAAe,GAAG,IAAI,CAAC9B,WAAW,EAClDgC,SAAS,GAAG,IAAI,CAAC1B,kBAAkB,IAAIoB,KAAK,CAACO,MAAM,GAAG,IAAI,CAAChC,SAAS,GAEnE;MACD,IAAMiC,OAAO,GAAGZ,IAAI,CAACa,GAAG,CACvBH,SAAS,GAAG,IAAI,CAAChC,WAAW,EAC5B,IAAI,CAACM,kBAAkB,CACvB;MACDoB,KAAK,CAACU,IAAI,CAAC;QACVC,QAAQ,EAAE,IAAI,CAACnC,IAAI,CAACoC,KAAK,CAACN,SAAS,EAAEE,OAAO,CAAC;QAC7CH,UAAU,EAAE,EAAEA,UAAU;QACxBhC,OAAO,EAAE,IAAIR,MAAM,CAACgD,YAAY,EAAE;QAClCC,kBAAkB,EAAE;OACpB,CAAC;MACFR,SAAS,IAAI,IAAI,CAAChC,WAAW;;IAE9B,OAAO0B,KAAK;EACb,CAAC;EAEa9B,0BAAA,CAAAW,SAAA,CAAAY,qBAAqB,GAAnC;;;;;;;YACOsB,4BAA4B,GAAG,IAAIzD,4BAA4B,CACpE,IAAI,CAACa,MAAM,CACX;YACU,qBAAM,IAAI,CAACmB,kBAAkB,CAAC,IAAI,CAAClB,IAAI,CAAC;;YAA7CmB,EAAE,GAAGR,EAAA,CAAAI,IAAA,EAAwC;YAEnD;YACA;YACA;YACAI,EAAE,CAACyB,eAAe,CAACC,GAAG,CACrB,UAAAC,IAAI;cAAI,iBAACC,IAAS;gBACjB,IACCC,KAAI,CAACjD,MAAM,CAACkD,WAAW,IACvBF,IAAI,IACJA,IAAI,CAACG,OAAO,IACZH,IAAI,CAACG,OAAO,CAACC,OAAO,EACnB;kBACDJ,IAAI,CAACG,OAAO,CAACC,OAAO,CAAC,cAAc,CAAC,GAAGH,KAAI,CAACjD,MAAM,CAACkD,WAAW;;gBAE/D,OAAOH,IAAI,CAACC,IAAI,CAAC;cAClB,CAAC;YAVO,CAUP,EACD;cACCK,IAAI,EAAE;aACN,CACD;YAEgB,qBAAMjC,EAAE,CAACC,IAAI,CAACuB,4BAA4B,CAAC;;YAAtDU,QAAQ,GAAG1C,EAAA,CAAAI,IAAA,EAA2C;YAC5DpB,MAAM,CAAC2D,KAAK,CAACD,QAAQ,CAACE,QAAQ,CAAC;YAC/B,sBAAOF,QAAQ,CAACE,QAAQ;QAAC;;;GACzB;EAED;;;;EAIgBzD,0BAAA,CAAAW,SAAA,CAAAqB,WAAW,GAA3B,UAA4BR,QAAgB,EAAEM,KAAa;;;;;;;YACpD4B,QAAQ,GAA4C,EAAE;;;;YACzCC,OAAA,GAAAC,QAAA,CAAA9B,KAAK,GAAA+B,SAAA,GAAAF,OAAA,CAAAX,IAAA;;;;YAAbc,IAAI,GAAAD,SAAA,CAAAE,KAAA;YACd,IAAI,CAACC,kBAAkB,CAACF,IAAI,CAAC;YACvBG,sBAAsB,GAA2B;cACtDC,UAAU,EAAEJ,IAAI,CAAC3B,UAAU;cAC3BpB,IAAI,EAAE+C,IAAI,CAACrB,QAAQ;cACnBgB,QAAQ,EAAEjC,QAAQ;cAClB2C,GAAG,EAAE,IAAI,CAAClE,MAAM,CAACkE,GAAG;cACpBC,MAAM,EAAE,IAAI,CAACnE,MAAM,CAACmE;aACpB;YACKC,iBAAiB,GAAG,IAAIhF,iBAAiB,CAAC4E,sBAAsB,CAAC;YAC5D,qBAAM,IAAI,CAAC7C,kBAAkB,CAAC,IAAI,CAAClB,IAAI,EAAE4D,IAAI,CAAC3D,OAAO,CAAC;;YAA3DkB,EAAE,GAAGL,EAAA,CAAAC,IAAA,EAAsD;YACjEyC,QAAQ,CAAClB,IAAI,CAACnB,EAAE,CAACC,IAAI,CAAC+C,iBAAiB,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;YAGU,qBAAMC,OAAO,CAACC,GAAG,CACnEb,QAAQ,CACR;;YAFKc,UAAU,GAAmCxD,EAAA,CAAAC,IAAA,EAElD;YACD;YACA,KAASwD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,UAAU,CAACnC,MAAM,EAAEoC,CAAC,EAAE,EAAE;cAC3C,IAAI,CAAClE,YAAY,CAACiC,IAAI,CAAC;gBACtB0B,UAAU,EAAEpC,KAAK,CAAC2C,CAAC,CAAC,CAACtC,UAAU;gBAC/BuC,IAAI,EAAEF,UAAU,CAACC,CAAC,CAAC,CAACC;eACpB,CAAC;;;;;YAGH7E,MAAM,CAAC8E,KAAK,CACX,wEAAwE,EACxEC,OAAK,CACL;YACD,IAAI,CAACC,YAAY,EAAE;YACnB;;;;;;GAED;;EAEa7E,0BAAA,CAAAW,SAAA,CAAAsB,qBAAqB,GAAnC,UAAoCT,QAAgB;;;;;;YAC7CsD,KAAK,GAAwC;cAClDV,MAAM,EAAE,IAAI,CAACnE,MAAM,CAACmE,MAAM;cAC1BD,GAAG,EAAE,IAAI,CAAClE,MAAM,CAACkE,GAAG;cACpBV,QAAQ,EAAEjC,QAAQ;cAClBuD,eAAe,EAAE;gBAAEC,KAAK,EAAE,IAAI,CAACzE;cAAY;aAC3C;YACK0E,qBAAqB,GAAG,IAAI3F,8BAA8B,CAACwF,KAAK,CAAC;YAC5D,qBAAM,IAAI,CAAC1D,kBAAkB,CAAC,IAAI,CAAClB,IAAI,CAAC;;YAA7CmB,EAAE,GAAGR,EAAA,CAAAI,IAAA,EAAwC;;;;YAErC,qBAAMI,EAAE,CAACC,IAAI,CAAC2D,qBAAqB,CAAC;;YAA3CC,IAAI,GAAGrE,EAAA,CAAAI,IAAA,EAAoC;YACjD,sBAAOiE,IAAI,CAACf,GAAG;;;YAEftE,MAAM,CAAC8E,KAAK,CACX,4EAA4E,EAC5EQ,OAAK,CACL;YACD,IAAI,CAACN,YAAY,EAAE;YACnB;;;;;;GAED;;EAEa7E,0BAAA,CAAAW,SAAA,CAAAkB,sBAAsB,GAApC,UAAqCL,QAAgB;;;;;;iBAChD,IAAI,CAAChB,MAAM,EAAX;YACC4E,YAAY,GAAG,uBAAuB;;;;YAEzC,qBAAM,IAAI,CAACC,OAAO,CAAC7D,QAAQ,CAAC;;YAA5BX,EAAA,CAAAI,IAAA,EAA4B;;;;YAE5BmE,YAAY,IAAIE,OAAK,CAACF,YAAY;;;YAEnC,MAAM,IAAIG,KAAK,CAACH,YAAY,CAAC;;;;;;GAE9B;;EAEMpF,0BAAA,CAAAW,SAAA,CAAAkE,YAAY,GAAnB;IACC,IAAI,CAACrE,MAAM,GAAG,IAAI;EACnB,CAAC;EAEaR,0BAAA,CAAAW,SAAA,CAAA0E,OAAO,GAArB,UAAsB7D,QAAgB;;;;;;YACrC;YACA,IAAI,CAAClB,IAAI,GAAG,IAAI;YAChB,IAAI,CAACC,YAAY,GAAG,EAAE;YACtB,IAAI,CAACE,aAAa,GAAG,CAAC;YACtB,IAAI,CAACC,kBAAkB,GAAG,CAAC;YAErBoE,KAAK,GAAG;cACbV,MAAM,EAAE,IAAI,CAACnE,MAAM,CAACmE,MAAM;cAC1BD,GAAG,EAAE,IAAI,CAAClE,MAAM,CAACkE,GAAG;cACpBV,QAAQ,EAAEjC;aACV;YAEU,qBAAM,IAAI,CAACJ,kBAAkB,CAAC,IAAI,CAAClB,IAAI,CAAC;;YAA7CmB,EAAE,GAAGR,EAAA,CAAAI,IAAA,EAAwC;YACnD,qBAAMI,EAAE,CAACC,IAAI,CAAC,IAAI9B,2BAA2B,CAACsF,KAAK,CAAC,CAAC;;YAArDjE,EAAA,CAAAI,IAAA,EAAqD;YAGxC,qBAAMI,EAAE,CAACC,IAAI,CAAC,IAAI/B,gBAAgB,CAACuF,KAAK,CAAC,CAAC;;YAAjDI,IAAI,GAAGrE,EAAA,CAAAI,IAAA,EAA0C;YAEvD,IAAIiE,IAAI,IAAIA,IAAI,CAACF,KAAK,IAAIE,IAAI,CAACF,KAAK,CAAC3C,MAAM,GAAG,CAAC,EAAE;cAChD,MAAM,IAAIkD,KAAK,CAAC,mCAAmC,CAAC;;;;;;GAErD;;EAEOvF,0BAAA,CAAAW,SAAA,CAAAqD,kBAAkB,GAA1B,UAA2BF,IAAU;IAArC,IAAAZ,KAAA;IACCY,IAAI,CAAC3D,OAAO,CAACqF,EAAE,CAAC9F,mBAAmB,EAAE,UAAA+F,QAAQ;MAC5CvC,KAAI,CAACwC,eAAe,CACnB5B,IAAI,CAAC3B,UAAU,EACfsD,QAAQ,CAACE,MAAM,GAAG7B,IAAI,CAAClB,kBAAkB,CACzC;MACDkB,IAAI,CAAClB,kBAAkB,GAAG6C,QAAQ,CAACE,MAAM;IAC1C,CAAC,CAAC;EACH,CAAC;EAEO3F,0BAAA,CAAAW,SAAA,CAAA+E,eAAe,GAAvB,UAAwBvD,UAAkB,EAAEyD,iBAAyB;IACpE,IAAI,CAACnF,aAAa,IAAImF,iBAAiB;IACvC,IAAI,CAACzF,OAAO,CAAC0F,IAAI,CAACnG,mBAAmB,EAAE;MACtCiG,MAAM,EAAE,IAAI,CAAClF,aAAa;MAC1BqF,KAAK,EAAE,IAAI,CAACpF,kBAAkB;MAC9BoD,IAAI,EAAE3B,UAAU;MAChB4D,GAAG,EAAE,IAAI,CAAC9F,MAAM,CAACkE;KACjB,CAAC;EACH,CAAC;EAEOnE,0BAAA,CAAAW,SAAA,CAAAO,UAAU,GAAlB,UAAmB4D,KAAU;IAC5B,IAAIA,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKkB,SAAS,EAAE,OAAO,CAAC;IACnD,IAAI,OAAOlB,KAAK,CAAC5D,UAAU,KAAK,QAAQ,EAAE;MACzC,OAAO4D,KAAK,CAAC5D,UAAU;KACvB,MAAM,IAAI,OAAO4D,KAAK,CAACzC,MAAM,KAAK,QAAQ,EAAE;MAC5C,OAAOyC,KAAK,CAACzC,MAAM;KACnB,MAAM,IAAI,OAAOyC,KAAK,CAACmB,IAAI,KAAK,QAAQ,EAAE;MAC1C,OAAOnB,KAAK,CAACmB,IAAI;KACjB,MAAM,IAAI,OAAOnB,KAAK,CAACoB,IAAI,KAAK,QAAQ,EAAE;MAC1C;;;IAAA,CAGA,MAAM;MACN,MAAM,IAAIX,KAAK,CAAC,6BAA6B,GAAGT,KAAK,CAAC;;EAExD,CAAC;EAEa9E,0BAAA,CAAAW,SAAA,CAAAG,uBAAuB,GAArC,UAAsCR,IAAS;;;;;iBAC1C,IAAI,CAAC6F,eAAe,CAAC7F,IAAI,CAAC,EAA1B;YACH;YACA,sBAAO8F,IAAI,CAACC,SAAS,CAAC/F,IAAI,CAAC;;iBACjB,IAAI,CAACgG,MAAM,CAAChG,IAAI,CAAC,EAAjB;iBAINtB,QAAQ,CAACuH,aAAa,EAAtB;YACI,qBAAM3G,eAAe,CAACU,IAAI,CAAC;;YAAlC,sBAAOO,EAAA,CAAAI,IAAA,EAA2B;;YAEnC,sBAAOX,IAAI;;YAEX;YACA,sBAAOA,IAAI;QAAC;;;GASb;EAEON,0BAAA,CAAAW,SAAA,CAAA2F,MAAM,GAAd,UAAehG,IAAS;IACvB,OAAO,OAAOkG,IAAI,KAAK,WAAW,IAAIlG,IAAI,YAAYkG,IAAI;EAC3D,CAAC;EAEOxG,0BAAA,CAAAW,SAAA,CAAAwF,eAAe,GAAvB,UAAwB7F,IAAS;IAChC,IAAIA,IAAI,KAAK,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;MAC9C,IAAI;QACH,OAAO,EAAE,IAAI,CAACY,UAAU,CAACZ,IAAI,CAAC,IAAI,CAAC,CAAC;OACpC,CAAC,OAAOqE,KAAK,EAAE;QACf;QACA;QACA,OAAO,IAAI;;;IAGb,OAAO,KAAK;EACb,CAAC;EAED;;;;EAIgB3E,0BAAA,CAAAW,SAAA,CAAAS,kBAAkB,GAAlC,UAAmCqF,MAAM,EAAEtG,OAAQ;;;;;;YAC9B,qBAAM,IAAI,CAACuG,eAAe,EAAE;;YAA1CC,WAAW,GAAG9F,EAAA,CAAAI,IAAA,EAA4B;YAE/C2F,MAAM,GAGHH,MAAM,CAAAG,MAHH,EACNC,0CAA0C,GAEvCJ,MAAM,CAAAI,0CAFiC,EAC1CC,iBAAiB,GACdL,MAAM,CAAAK,iBADQ;YAEdC,kBAAkB,GAAG,EAAE;YAE3B,IAAIF,0CAA0C,EAAE;cAC/CE,kBAAkB,GAAG;gBACpBC,QAAQ,EAAElH,2BAA2B;gBACrCmH,GAAG,EAAE,KAAK;gBACVC,cAAc,EAAE,KAAK;gBACrBC,cAAc,EAAE;eAChB;;YAGIC,MAAM,GAAG,IAAIlI,QAAQ,CAAAmI,QAAA,CAAAA,QAAA;cAC1BT,MAAM,EAAAA,MAAA;cACND,WAAW,EAAAA;YAAA,GACRI,kBAAkB;cACrBO,cAAc,EAAE,IAAI7H,gBAAgB,CAAC,EAAE,EAAEU,OAAO,EAAE2G,iBAAiB,CAAC;cACpES,eAAe,EAAExI,mBAAmB;YAAE,GACrC;YACFqI,MAAM,CAACtE,eAAe,CAAC0E,MAAM,CAACzH,yBAAyB,CAAC;YACxD,sBAAOqH,MAAM;QAAC;;;GACd;EAED;;;EAGApH,0BAAA,CAAAW,SAAA,CAAA+F,eAAe,GAAf;IACC,OAAOzH,WAAW,CAACwI,GAAG,EAAE,CACtBC,IAAI,CAAC,UAAAf,WAAW;MAChB,IAAI,CAACA,WAAW,EAAE,OAAO,KAAK;MAC9B,IAAMgB,IAAI,GAAG1I,WAAW,CAAC2I,KAAK,CAACjB,WAAW,CAAC;MAC3C9G,MAAM,CAAC2D,KAAK,CAAC,6BAA6B,EAAEmE,IAAI,CAAC;MACjD,OAAOA,IAAI;IACZ,CAAC,CAAC,CACDE,KAAK,CAAC,UAAAlD,KAAK;MACX9E,MAAM,CAACiI,IAAI,CAAC,0BAA0B,EAAEnD,KAAK,CAAC;MAC9C,OAAO,KAAK;IACb,CAAC,CAAC;EACJ,CAAC;EACF,OAAA3E,0BAAC;AAAD,CAAC,EA7VD"},"metadata":{},"sourceType":"module","externalDependencies":[]}