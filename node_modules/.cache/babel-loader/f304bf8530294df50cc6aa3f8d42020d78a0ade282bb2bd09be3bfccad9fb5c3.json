{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ericli/Desktop/pill2/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _defineProperty from \"/Users/ericli/Desktop/pill2/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/Users/ericli/Desktop/pill2/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/ericli/Desktop/pill2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { getChecksumAlgorithmForRequest } from \"./getChecksumAlgorithmForRequest\";\nimport { getChecksumLocationName } from \"./getChecksumLocationName\";\nimport { hasHeader } from \"./hasHeader\";\nimport { isStreaming } from \"./isStreaming\";\nimport { selectChecksumAlgorithmFunction } from \"./selectChecksumAlgorithmFunction\";\nimport { stringHasher } from \"./stringHasher\";\nimport { validateChecksumFromResponse } from \"./validateChecksumFromResponse\";\nexport var flexibleChecksumsMiddleware = function flexibleChecksumsMiddleware(config, middlewareConfig) {\n  return function (next) {\n    return /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(args) {\n        var request, requestBody, headers, base64Encoder, streamHasher, input, requestChecksumRequired, requestAlgorithmMember, checksumAlgorithm, updatedBody, updatedHeaders, checksumLocationName, checksumAlgorithmFn, getAwsChunkedEncodingStream, bodyLengthChecker, rawChecksum, result, requestValidationModeMember, responseAlgorithms;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (HttpRequest.isInstance(args.request)) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\", next(args));\n            case 2:\n              request = args.request;\n              requestBody = request.body, headers = request.headers;\n              base64Encoder = config.base64Encoder, streamHasher = config.streamHasher;\n              input = middlewareConfig.input, requestChecksumRequired = middlewareConfig.requestChecksumRequired, requestAlgorithmMember = middlewareConfig.requestAlgorithmMember;\n              checksumAlgorithm = getChecksumAlgorithmForRequest(input, {\n                requestChecksumRequired: requestChecksumRequired,\n                requestAlgorithmMember: requestAlgorithmMember\n              });\n              updatedBody = requestBody;\n              updatedHeaders = headers;\n              if (!checksumAlgorithm) {\n                _context.next = 24;\n                break;\n              }\n              checksumLocationName = getChecksumLocationName(checksumAlgorithm);\n              checksumAlgorithmFn = selectChecksumAlgorithmFunction(checksumAlgorithm, config);\n              if (!isStreaming(requestBody)) {\n                _context.next = 19;\n                break;\n              }\n              getAwsChunkedEncodingStream = config.getAwsChunkedEncodingStream, bodyLengthChecker = config.bodyLengthChecker;\n              updatedBody = getAwsChunkedEncodingStream(requestBody, {\n                base64Encoder: base64Encoder,\n                bodyLengthChecker: bodyLengthChecker,\n                checksumLocationName: checksumLocationName,\n                checksumAlgorithmFn: checksumAlgorithmFn,\n                streamHasher: streamHasher\n              });\n              updatedHeaders = _objectSpread(_objectSpread({}, headers), {}, {\n                \"content-encoding\": headers[\"content-encoding\"] ? \"\".concat(headers[\"content-encoding\"], \",aws-chunked\") : \"aws-chunked\",\n                \"transfer-encoding\": \"chunked\",\n                \"x-amz-decoded-content-length\": headers[\"content-length\"],\n                \"x-amz-content-sha256\": \"STREAMING-UNSIGNED-PAYLOAD-TRAILER\",\n                \"x-amz-trailer\": checksumLocationName\n              });\n              delete updatedHeaders[\"content-length\"];\n              _context.next = 24;\n              break;\n            case 19:\n              if (hasHeader(checksumLocationName, headers)) {\n                _context.next = 24;\n                break;\n              }\n              _context.next = 22;\n              return stringHasher(checksumAlgorithmFn, requestBody);\n            case 22:\n              rawChecksum = _context.sent;\n              updatedHeaders = _objectSpread(_objectSpread({}, headers), {}, _defineProperty({}, checksumLocationName, base64Encoder(rawChecksum)));\n            case 24:\n              _context.next = 26;\n              return next(_objectSpread(_objectSpread({}, args), {}, {\n                request: _objectSpread(_objectSpread({}, request), {}, {\n                  headers: updatedHeaders,\n                  body: updatedBody\n                })\n              }));\n            case 26:\n              result = _context.sent;\n              requestValidationModeMember = middlewareConfig.requestValidationModeMember, responseAlgorithms = middlewareConfig.responseAlgorithms;\n              if (requestValidationModeMember && input[requestValidationModeMember] === \"ENABLED\") {\n                validateChecksumFromResponse(result.response, {\n                  config: config,\n                  responseAlgorithms: responseAlgorithms\n                });\n              }\n              return _context.abrupt(\"return\", result);\n            case 30:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  };\n};","map":{"version":3,"names":["HttpRequest","getChecksumAlgorithmForRequest","getChecksumLocationName","hasHeader","isStreaming","selectChecksumAlgorithmFunction","stringHasher","validateChecksumFromResponse","flexibleChecksumsMiddleware","config","middlewareConfig","next","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","args","request","requestBody","headers","base64Encoder","streamHasher","input","requestChecksumRequired","requestAlgorithmMember","checksumAlgorithm","updatedBody","updatedHeaders","checksumLocationName","checksumAlgorithmFn","getAwsChunkedEncodingStream","bodyLengthChecker","rawChecksum","result","requestValidationModeMember","responseAlgorithms","wrap","_callee$","_context","prev","isInstance","abrupt","body","_objectSpread","concat","sent","_defineProperty","response","stop","_x","apply","arguments"],"sources":["/Users/ericli/Desktop/pill2/node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/flexibleChecksumsMiddleware.js"],"sourcesContent":["import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { getChecksumAlgorithmForRequest } from \"./getChecksumAlgorithmForRequest\";\nimport { getChecksumLocationName } from \"./getChecksumLocationName\";\nimport { hasHeader } from \"./hasHeader\";\nimport { isStreaming } from \"./isStreaming\";\nimport { selectChecksumAlgorithmFunction } from \"./selectChecksumAlgorithmFunction\";\nimport { stringHasher } from \"./stringHasher\";\nimport { validateChecksumFromResponse } from \"./validateChecksumFromResponse\";\nexport const flexibleChecksumsMiddleware = (config, middlewareConfig) => (next) => async (args) => {\n    if (!HttpRequest.isInstance(args.request)) {\n        return next(args);\n    }\n    const { request } = args;\n    const { body: requestBody, headers } = request;\n    const { base64Encoder, streamHasher } = config;\n    const { input, requestChecksumRequired, requestAlgorithmMember } = middlewareConfig;\n    const checksumAlgorithm = getChecksumAlgorithmForRequest(input, {\n        requestChecksumRequired,\n        requestAlgorithmMember,\n    });\n    let updatedBody = requestBody;\n    let updatedHeaders = headers;\n    if (checksumAlgorithm) {\n        const checksumLocationName = getChecksumLocationName(checksumAlgorithm);\n        const checksumAlgorithmFn = selectChecksumAlgorithmFunction(checksumAlgorithm, config);\n        if (isStreaming(requestBody)) {\n            const { getAwsChunkedEncodingStream, bodyLengthChecker } = config;\n            updatedBody = getAwsChunkedEncodingStream(requestBody, {\n                base64Encoder,\n                bodyLengthChecker,\n                checksumLocationName,\n                checksumAlgorithmFn,\n                streamHasher,\n            });\n            updatedHeaders = {\n                ...headers,\n                \"content-encoding\": headers[\"content-encoding\"]\n                    ? `${headers[\"content-encoding\"]},aws-chunked`\n                    : \"aws-chunked\",\n                \"transfer-encoding\": \"chunked\",\n                \"x-amz-decoded-content-length\": headers[\"content-length\"],\n                \"x-amz-content-sha256\": \"STREAMING-UNSIGNED-PAYLOAD-TRAILER\",\n                \"x-amz-trailer\": checksumLocationName,\n            };\n            delete updatedHeaders[\"content-length\"];\n        }\n        else if (!hasHeader(checksumLocationName, headers)) {\n            const rawChecksum = await stringHasher(checksumAlgorithmFn, requestBody);\n            updatedHeaders = {\n                ...headers,\n                [checksumLocationName]: base64Encoder(rawChecksum),\n            };\n        }\n    }\n    const result = await next({\n        ...args,\n        request: {\n            ...request,\n            headers: updatedHeaders,\n            body: updatedBody,\n        },\n    });\n    const { requestValidationModeMember, responseAlgorithms } = middlewareConfig;\n    if (requestValidationModeMember && input[requestValidationModeMember] === \"ENABLED\") {\n        validateChecksumFromResponse(result.response, {\n            config,\n            responseAlgorithms,\n        });\n    }\n    return result;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}