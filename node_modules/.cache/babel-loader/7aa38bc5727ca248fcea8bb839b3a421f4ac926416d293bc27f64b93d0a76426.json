{"ast":null,"code":"/*\n * Copyright 2019-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { ConsoleLogger as Logger, Credentials, JS, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { PersonalizeEventsClient, PutEventsCommand } from '@aws-sdk/client-personalize-events';\nimport { SessionInfoManager, MediaAutoTrack } from './AmazonPersonalizeHelper';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport isEqual from 'lodash/isEqual';\nvar logger = new Logger('AmazonPersonalizeProvider');\n// events buffer\nvar FLUSH_SIZE = 5;\nvar FLUSH_SIZE_THRESHHOLD = 10;\nvar FLUSH_INTERVAL = 5 * 1000; // 5s\nvar IDENTIFY_EVENT = 'Identify';\nvar AmazonPersonalizeProvider = /** @class */function () {\n  function AmazonPersonalizeProvider(config) {\n    this._buffer = [];\n    this._config = config ? config : {};\n    this._config.flushSize = this._config.flushSize > 0 && this._config.flushSize <= FLUSH_SIZE_THRESHHOLD ? this._config.flushSize : FLUSH_SIZE;\n    this._config.flushInterval = this._config.flushInterval || FLUSH_INTERVAL;\n    this._sessionManager = new SessionInfoManager();\n    if (!isEmpty(this._config.trackingId)) {\n      this._sessionInfo = this._sessionManager.retrieveSessionInfo(this._config.trackingId);\n    }\n    this._isBrowser = JS.browserOrNode().isBrowser;\n    // flush event buffer\n    this._setupTimer();\n  }\n  AmazonPersonalizeProvider.prototype._setupTimer = function () {\n    if (this._timer) {\n      clearInterval(this._timer);\n    }\n    var flushInterval = this._config.flushInterval;\n    var that = this;\n    this._timer = setInterval(function () {\n      that._sendFromBuffer();\n    }, flushInterval);\n  };\n  /**\n   * Record event\n   * @param eventType      - type of the event action. e.g. \"Click\"\n   * @param properties     - properties of the event\n   * @return Promise\n   */\n  AmazonPersonalizeProvider.prototype.record = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, _a, eventType, properties, requestParams, isLoaded;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this._getCredentials()];\n          case 1:\n            credentials = _b.sent();\n            if (!credentials) return [2 /*return*/, Promise.resolve(false)];\n            Object.assign(params, {\n              config: this._config,\n              credentials: credentials,\n              sentAt: new Date()\n            });\n            _a = params.event, eventType = _a.eventType, properties = _a.properties;\n            if (eventType === IDENTIFY_EVENT) {\n              this._sessionManager.updateSessionInfo(properties && properties.userId ? properties.userId : '', this._sessionInfo);\n              return [2 /*return*/];\n            } else if (!isEmpty(params.event.userId)) {\n              this._sessionManager.updateSessionInfo(params.event.userId, this._sessionInfo);\n            }\n            requestParams = this.generateRequestParams(params, this._sessionInfo);\n            if (!(eventType === 'MediaAutoTrack')) return [3 /*break*/, 7];\n            if (!this._isBrowser) return [3 /*break*/, 5];\n            if (!!isEmpty(get(requestParams, 'eventData.properties.domElementId', null))) return [3 /*break*/, 3];\n            return [4 /*yield*/, this.isElementFullyLoaded(this.loadElement, requestParams.eventData.properties['domElementId'], 500, 5)];\n          case 2:\n            isLoaded = _b.sent();\n            if (isLoaded) {\n              new MediaAutoTrack(requestParams, this);\n            } else {\n              logger.debug('Cannot find the media element.');\n            }\n            return [3 /*break*/, 4];\n          case 3:\n            logger.debug(\"Missing domElementId field in 'properties' for MediaAutoTrack event type.\");\n            _b.label = 4;\n          case 4:\n            return [3 /*break*/, 6];\n          case 5:\n            logger.debug('MediaAutoTrack only for browser');\n            _b.label = 6;\n          case 6:\n            return [2 /*return*/];\n          case 7:\n            return [2 /*return*/, this.putToBuffer(requestParams)];\n        }\n      });\n    });\n  };\n  AmazonPersonalizeProvider.prototype.loadElement = function (domId) {\n    return new Promise(function (resolve, reject) {\n      if (document.getElementById(domId) && document.getElementById(domId).clientHeight) {\n        return resolve(true);\n      } else {\n        return reject(true);\n      }\n    });\n  };\n  AmazonPersonalizeProvider.prototype.isElementFullyLoaded = function (operation, params, delay, times) {\n    var _this = this;\n    var wait = function (ms) {\n      return new Promise(function (r) {\n        return setTimeout(r, ms);\n      });\n    };\n    return new Promise(function (resolve, reject) {\n      return operation(params).then(resolve).catch(function (reason) {\n        if (times - 1 > 0) {\n          return wait(delay).then(_this.isElementFullyLoaded.bind(null, operation, params, delay, times - 1)).then(resolve).catch(reject);\n        }\n        return reject(reason);\n      });\n    });\n  };\n  /**\n   * get the category of the plugin\n   */\n  AmazonPersonalizeProvider.prototype.getCategory = function () {\n    return 'Analytics';\n  };\n  /**\n   * get provider name of the plugin\n   */\n  AmazonPersonalizeProvider.prototype.getProviderName = function () {\n    return 'AmazonPersonalize';\n  };\n  /**\n   * configure the plugin\n   * @param {Object} config - configuration\n   */\n  AmazonPersonalizeProvider.prototype.configure = function (config) {\n    logger.debug('configure Analytics', config);\n    var conf = config ? config : {};\n    this._config = Object.assign({}, this._config, conf);\n    if (!isEmpty(this._config.trackingId)) {\n      this._sessionInfo = this._sessionManager.retrieveSessionInfo(this._config.trackingId);\n    }\n    this._setupTimer();\n    return this._config;\n  };\n  /**\n   * Generate the requestParams from customer input params and sessionInfo\n   * @private\n   * @param eventData      - customer input for event data\n   * @param api            - api name\n   * @return RequestParams - wrapper object with all information required for make request\n   */\n  AmazonPersonalizeProvider.prototype.generateRequestParams = function (params, sessionInfo) {\n    var requestParams = {};\n    var _a = params.event,\n      eventType = _a.eventType,\n      properties = _a.properties;\n    requestParams.eventData = {\n      eventType: eventType,\n      properties: properties\n    };\n    requestParams.sessionInfo = sessionInfo;\n    requestParams.sentAt = params.sentAt;\n    requestParams.credentials = params.credentials;\n    requestParams.config = params.config;\n    return requestParams;\n  };\n  /**\n   * record an event\n   * @param {Object} params - the params of an event\n   */\n  AmazonPersonalizeProvider.prototype._sendEvents = function (group) {\n    var groupLen = group.length;\n    if (groupLen === 0) {\n      logger.debug('events array is empty, directly return');\n      return;\n    }\n    var _a = group[0],\n      config = _a.config,\n      credentials = _a.credentials,\n      sessionInfo = _a.sessionInfo;\n    var initClients = this._init(config, credentials);\n    if (!initClients) return false;\n    if (groupLen > 0) {\n      var events = [];\n      for (var i = 0; i < groupLen; i += 1) {\n        var params = group.shift();\n        var eventPayload = this._generateSingleRecordPayload(params, sessionInfo);\n        events.push(eventPayload);\n      }\n      var payload_1 = {};\n      payload_1.trackingId = sessionInfo.trackingId;\n      payload_1.sessionId = sessionInfo.sessionId;\n      payload_1.userId = sessionInfo.userId;\n      payload_1.eventList = [];\n      events.forEach(function (event) {\n        // @ts-ignore\n        payload_1.eventList.push(event);\n      });\n      var command = new PutEventsCommand(payload_1);\n      this._personalize.send(command, function (err) {\n        if (err) logger.debug('Failed to call putEvents in Personalize', err);else logger.debug('Put events');\n      });\n    }\n  };\n  /**\n   * Put event into buffer\n   * @private\n   * @param params - params for the event recording\n   */\n  AmazonPersonalizeProvider.prototype.putToBuffer = function (params) {\n    if (this._buffer.length < this._config.flushSize) {\n      this._buffer.push(params);\n    } else {\n      this._buffer.push(params);\n      this._sendFromBuffer();\n    }\n    return Promise.resolve(true);\n  };\n  /**\n   * flush the buffer and batch sending the request\n   * @private\n   * @param eventsParams - the buffer for cache the payload\n   */\n  AmazonPersonalizeProvider.prototype._sendFromBuffer = function () {\n    var _this = this;\n    var size = this._buffer.length;\n    if (size <= 0) return;\n    var eventsGroups = [];\n    var preCred = null;\n    var group = [];\n    for (var i = 0; i < size; i += 1) {\n      var currRequestParams = this._buffer.shift();\n      var cred = currRequestParams.credentials;\n      var sessionInfo = currRequestParams.sessionInfo;\n      if (i === 0) {\n        group.push(currRequestParams);\n        preCred = cred;\n      } else {\n        if (isEqual(sessionInfo, this._sessionInfo) && cred.sessionToken === preCred.sessionToken && cred.identityId === preCred.identityId) {\n          logger.debug('no change for cred, put event in the same group');\n          group.push(currRequestParams);\n        } else {\n          eventsGroups.push(group);\n          group = [];\n          group.push(currRequestParams);\n          preCred = cred;\n          this._sessionInfo = sessionInfo;\n        }\n      }\n    }\n    eventsGroups.push(group);\n    eventsGroups.map(function (group) {\n      _this._sendEvents(group);\n    });\n  };\n  /**\n   * Generate the record payload for single event\n   * @private\n   * @param params - RequestParams\n   */\n  AmazonPersonalizeProvider.prototype._generateSingleRecordPayload = function (params, sessionInfo) {\n    var eventData = params.eventData,\n      sentAt = params.sentAt;\n    var trackPayload = {};\n    trackPayload.sentAt = sentAt;\n    trackPayload.properties = eventData.properties && JSON.stringify(eventData.properties);\n    trackPayload.eventId = this._sessionManager.getTimerKey() + sessionInfo.sessionId;\n    trackPayload.eventType = eventData.eventType;\n    return trackPayload;\n  };\n  /**\n   * Initialize the personalize client\n   * @private\n   * @param params - RequestParams\n   */\n  AmazonPersonalizeProvider.prototype._init = function (config, credentials) {\n    logger.debug('init clients');\n    if (this._personalize && this._config.credentials && this._config.credentials.sessionToken === credentials.sessionToken && this._config.credentials.identityId === credentials.identityId) {\n      logger.debug('no change for analytics config, directly return from init');\n      return true;\n    }\n    this._config.credentials = credentials;\n    var region = config.region;\n    logger.debug('initialize personalize with credentials', credentials);\n    this._personalize = new PersonalizeEventsClient({\n      region: region,\n      credentials: credentials,\n      customUserAgent: getAmplifyUserAgent()\n    });\n    return true;\n  };\n  /**\n   * check if current credentials exists\n   * @private\n   */\n  AmazonPersonalizeProvider.prototype._getCredentials = function () {\n    var that = this;\n    return Credentials.get().then(function (credentials) {\n      if (!credentials) return null;\n      logger.debug('set credentials for analytics', that._config.credentials);\n      return Credentials.shear(credentials);\n    }).catch(function (err) {\n      logger.debug('ensure credentials error', err);\n      return null;\n    });\n  };\n  return AmazonPersonalizeProvider;\n}();\nexport { AmazonPersonalizeProvider };\n/**\n * @deprecated use named import\n */\nexport default AmazonPersonalizeProvider;","map":{"version":3,"names":["ConsoleLogger","Logger","Credentials","JS","getAmplifyUserAgent","PersonalizeEventsClient","PutEventsCommand","SessionInfoManager","MediaAutoTrack","get","isEmpty","isEqual","logger","FLUSH_SIZE","FLUSH_SIZE_THRESHHOLD","FLUSH_INTERVAL","IDENTIFY_EVENT","AmazonPersonalizeProvider","config","_buffer","_config","flushSize","flushInterval","_sessionManager","trackingId","_sessionInfo","retrieveSessionInfo","_isBrowser","browserOrNode","isBrowser","_setupTimer","prototype","_timer","clearInterval","that","setInterval","_sendFromBuffer","record","params","_getCredentials","credentials","_b","sent","Promise","resolve","Object","assign","sentAt","Date","_a","event","eventType","properties","updateSessionInfo","userId","requestParams","generateRequestParams","isElementFullyLoaded","loadElement","eventData","isLoaded","debug","putToBuffer","domId","reject","document","getElementById","clientHeight","operation","delay","times","_this","wait","ms","r","setTimeout","then","catch","reason","bind","getCategory","getProviderName","configure","conf","sessionInfo","_sendEvents","group","groupLen","length","initClients","_init","events","i","shift","eventPayload","_generateSingleRecordPayload","push","payload_1","sessionId","eventList","forEach","command","_personalize","send","err","size","eventsGroups","preCred","currRequestParams","cred","sessionToken","identityId","map","trackPayload","JSON","stringify","eventId","getTimerKey","region","customUserAgent","shear"],"sources":["/Users/ericli/node_modules/@aws-amplify/analytics/src/Providers/AmazonPersonalizeProvider.ts"],"sourcesContent":["/*\n * Copyright 2019-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport {\n\tConsoleLogger as Logger,\n\tCredentials,\n\tJS,\n\tgetAmplifyUserAgent,\n} from '@aws-amplify/core';\nimport {\n\tPersonalizeEventsClient,\n\tPutEventsCommand,\n\tPutEventsCommandInput,\n} from '@aws-sdk/client-personalize-events';\nimport {\n\tSessionInfo,\n\tRequestParams,\n\tRecordEventPayload,\n\tSessionInfoManager,\n\tMediaAutoTrack,\n} from './AmazonPersonalizeHelper';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport isEqual from 'lodash/isEqual';\nimport { AnalyticsProvider } from '../types';\n\nconst logger = new Logger('AmazonPersonalizeProvider');\n\n// events buffer\nconst FLUSH_SIZE = 5;\nconst FLUSH_SIZE_THRESHHOLD = 10;\nconst FLUSH_INTERVAL = 5 * 1000; // 5s\n\nconst IDENTIFY_EVENT = 'Identify';\n\nexport class AmazonPersonalizeProvider implements AnalyticsProvider {\n\tprivate _config;\n\tprivate _personalize;\n\tprivate _buffer;\n\tprivate _timer;\n\tprivate _sessionInfo: SessionInfo;\n\tprivate _sessionManager;\n\tprivate _isBrowser;\n\n\tconstructor(config?) {\n\t\tthis._buffer = [];\n\t\tthis._config = config ? config : {};\n\t\tthis._config.flushSize =\n\t\t\tthis._config.flushSize > 0 &&\n\t\t\tthis._config.flushSize <= FLUSH_SIZE_THRESHHOLD\n\t\t\t\t? this._config.flushSize\n\t\t\t\t: FLUSH_SIZE;\n\t\tthis._config.flushInterval = this._config.flushInterval || FLUSH_INTERVAL;\n\t\tthis._sessionManager = new SessionInfoManager();\n\t\tif (!isEmpty(this._config.trackingId)) {\n\t\t\tthis._sessionInfo = this._sessionManager.retrieveSessionInfo(\n\t\t\t\tthis._config.trackingId\n\t\t\t);\n\t\t}\n\t\tthis._isBrowser = JS.browserOrNode().isBrowser;\n\n\t\t// flush event buffer\n\t\tthis._setupTimer();\n\t}\n\n\tprivate _setupTimer() {\n\t\tif (this._timer) {\n\t\t\tclearInterval(this._timer);\n\t\t}\n\t\tconst { flushInterval } = this._config;\n\t\tconst that = this;\n\t\tthis._timer = setInterval(() => {\n\t\t\tthat._sendFromBuffer();\n\t\t}, flushInterval);\n\t}\n\n\t/**\n\t * Record event\n\t * @param eventType      - type of the event action. e.g. \"Click\"\n\t * @param properties     - properties of the event\n\t * @return Promise\n\t */\n\tpublic async record(params): Promise<boolean> {\n\t\tconst credentials = await this._getCredentials();\n\t\tif (!credentials) return Promise.resolve(false);\n\n\t\tObject.assign(params, {\n\t\t\tconfig: this._config,\n\t\t\tcredentials,\n\t\t\tsentAt: new Date(),\n\t\t});\n\t\tconst { eventType, properties } = params.event;\n\n\t\tif (eventType === IDENTIFY_EVENT) {\n\t\t\tthis._sessionManager.updateSessionInfo(\n\t\t\t\tproperties && properties.userId ? properties.userId : '',\n\t\t\t\tthis._sessionInfo\n\t\t\t);\n\t\t\treturn;\n\t\t} else if (!isEmpty(params.event.userId)) {\n\t\t\tthis._sessionManager.updateSessionInfo(\n\t\t\t\tparams.event.userId,\n\t\t\t\tthis._sessionInfo\n\t\t\t);\n\t\t}\n\t\tconst requestParams: RequestParams = this.generateRequestParams(\n\t\t\tparams,\n\t\t\tthis._sessionInfo\n\t\t);\n\t\tif (eventType === 'MediaAutoTrack') {\n\t\t\tif (this._isBrowser) {\n\t\t\t\tif (\n\t\t\t\t\t!isEmpty(\n\t\t\t\t\t\tget(requestParams, 'eventData.properties.domElementId', null)\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tconst isLoaded = await this.isElementFullyLoaded(\n\t\t\t\t\t\tthis.loadElement,\n\t\t\t\t\t\trequestParams.eventData.properties['domElementId'],\n\t\t\t\t\t\t500,\n\t\t\t\t\t\t5\n\t\t\t\t\t);\n\t\t\t\t\tif (isLoaded) {\n\t\t\t\t\t\tnew MediaAutoTrack(requestParams, this);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlogger.debug('Cannot find the media element.');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\"Missing domElementId field in 'properties' for MediaAutoTrack event type.\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlogger.debug('MediaAutoTrack only for browser');\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\treturn this.putToBuffer(requestParams);\n\t}\n\n\tprivate loadElement(domId): Promise<boolean> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (\n\t\t\t\tdocument.getElementById(domId) &&\n\t\t\t\tdocument.getElementById(domId).clientHeight\n\t\t\t) {\n\t\t\t\treturn resolve(true);\n\t\t\t} else {\n\t\t\t\treturn reject(true);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate isElementFullyLoaded(\n\t\toperation,\n\t\tparams,\n\t\tdelay,\n\t\ttimes\n\t): Promise<boolean> {\n\t\tconst wait = ms => new Promise(r => setTimeout(r, ms));\n\t\treturn new Promise((resolve, reject) => {\n\t\t\treturn operation(params)\n\t\t\t\t.then(resolve)\n\t\t\t\t.catch(reason => {\n\t\t\t\t\tif (times - 1 > 0) {\n\t\t\t\t\t\treturn wait(delay)\n\t\t\t\t\t\t\t.then(\n\t\t\t\t\t\t\t\tthis.isElementFullyLoaded.bind(\n\t\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t\toperation,\n\t\t\t\t\t\t\t\t\tparams,\n\t\t\t\t\t\t\t\t\tdelay,\n\t\t\t\t\t\t\t\t\ttimes - 1\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t.then(resolve)\n\t\t\t\t\t\t\t.catch(reject);\n\t\t\t\t\t}\n\t\t\t\t\treturn reject(reason);\n\t\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * get the category of the plugin\n\t */\n\tpublic getCategory(): string {\n\t\treturn 'Analytics';\n\t}\n\n\t/**\n\t * get provider name of the plugin\n\t */\n\tpublic getProviderName(): string {\n\t\treturn 'AmazonPersonalize';\n\t}\n\n\t/**\n\t * configure the plugin\n\t * @param {Object} config - configuration\n\t */\n\tpublic configure(config): object {\n\t\tlogger.debug('configure Analytics', config);\n\t\tconst conf = config ? config : {};\n\t\tthis._config = Object.assign({}, this._config, conf);\n\t\tif (!isEmpty(this._config.trackingId)) {\n\t\t\tthis._sessionInfo = this._sessionManager.retrieveSessionInfo(\n\t\t\t\tthis._config.trackingId\n\t\t\t);\n\t\t}\n\t\tthis._setupTimer();\n\t\treturn this._config;\n\t}\n\n\t/**\n\t * Generate the requestParams from customer input params and sessionInfo\n\t * @private\n\t * @param eventData      - customer input for event data\n\t * @param api            - api name\n\t * @return RequestParams - wrapper object with all information required for make request\n\t */\n\tprivate generateRequestParams(params, sessionInfo): RequestParams {\n\t\tconst requestParams = <RequestParams>{};\n\t\tconst { eventType, properties } = params.event;\n\t\trequestParams.eventData = { eventType, properties };\n\t\trequestParams.sessionInfo = sessionInfo;\n\t\trequestParams.sentAt = params.sentAt;\n\t\trequestParams.credentials = params.credentials;\n\t\trequestParams.config = params.config;\n\t\treturn requestParams;\n\t}\n\n\t/**\n\t * record an event\n\t * @param {Object} params - the params of an event\n\t */\n\tprivate _sendEvents(group) {\n\t\tconst groupLen = group.length;\n\t\tif (groupLen === 0) {\n\t\t\tlogger.debug('events array is empty, directly return');\n\t\t\treturn;\n\t\t}\n\n\t\tconst { config, credentials, sessionInfo } = group[0];\n\n\t\tconst initClients = this._init(config, credentials);\n\t\tif (!initClients) return false;\n\t\tif (groupLen > 0) {\n\t\t\tconst events: RecordEventPayload[] = [];\n\t\t\tfor (let i = 0; i < groupLen; i += 1) {\n\t\t\t\tconst params: RequestParams = group.shift();\n\t\t\t\tconst eventPayload: RecordEventPayload = this._generateSingleRecordPayload(\n\t\t\t\t\tparams,\n\t\t\t\t\tsessionInfo\n\t\t\t\t);\n\t\t\t\tevents.push(eventPayload);\n\t\t\t}\n\t\t\tconst payload = <PutEventsCommandInput>{};\n\t\t\tpayload.trackingId = sessionInfo.trackingId;\n\t\t\tpayload.sessionId = sessionInfo.sessionId;\n\t\t\tpayload.userId = sessionInfo.userId;\n\t\t\tpayload.eventList = [];\n\t\t\tevents.forEach(event => {\n\t\t\t\t// @ts-ignore\n\t\t\t\tpayload.eventList.push(event);\n\t\t\t});\n\t\t\tconst command: PutEventsCommand = new PutEventsCommand(payload);\n\t\t\tthis._personalize.send(command, err => {\n\t\t\t\tif (err) logger.debug('Failed to call putEvents in Personalize', err);\n\t\t\t\telse logger.debug('Put events');\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Put event into buffer\n\t * @private\n\t * @param params - params for the event recording\n\t */\n\tprivate putToBuffer(params: RequestParams) {\n\t\tif (this._buffer.length < this._config.flushSize) {\n\t\t\tthis._buffer.push(params);\n\t\t} else {\n\t\t\tthis._buffer.push(params);\n\t\t\tthis._sendFromBuffer();\n\t\t}\n\t\treturn Promise.resolve(true);\n\t}\n\n\t/**\n\t * flush the buffer and batch sending the request\n\t * @private\n\t * @param eventsParams - the buffer for cache the payload\n\t */\n\tprivate _sendFromBuffer() {\n\t\tconst size = this._buffer.length;\n\t\tif (size <= 0) return;\n\t\tconst eventsGroups = [];\n\t\tlet preCred = null;\n\t\tlet group = [];\n\t\tfor (let i = 0; i < size; i += 1) {\n\t\t\tconst currRequestParams: RequestParams = this._buffer.shift();\n\t\t\tconst cred = currRequestParams.credentials;\n\t\t\tconst sessionInfo = currRequestParams.sessionInfo;\n\t\t\tif (i === 0) {\n\t\t\t\tgroup.push(currRequestParams);\n\t\t\t\tpreCred = cred;\n\t\t\t} else {\n\t\t\t\tif (\n\t\t\t\t\tisEqual(sessionInfo, this._sessionInfo) &&\n\t\t\t\t\tcred.sessionToken === preCred.sessionToken &&\n\t\t\t\t\tcred.identityId === preCred.identityId\n\t\t\t\t) {\n\t\t\t\t\tlogger.debug('no change for cred, put event in the same group');\n\t\t\t\t\tgroup.push(currRequestParams);\n\t\t\t\t} else {\n\t\t\t\t\teventsGroups.push(group);\n\t\t\t\t\tgroup = [];\n\t\t\t\t\tgroup.push(currRequestParams);\n\t\t\t\t\tpreCred = cred;\n\t\t\t\t\tthis._sessionInfo = sessionInfo;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\teventsGroups.push(group);\n\n\t\teventsGroups.map(group => {\n\t\t\tthis._sendEvents(group);\n\t\t});\n\t}\n\n\t/**\n\t * Generate the record payload for single event\n\t * @private\n\t * @param params - RequestParams\n\t */\n\tprivate _generateSingleRecordPayload(\n\t\tparams: RequestParams,\n\t\tsessionInfo\n\t): RecordEventPayload {\n\t\tconst { eventData, sentAt } = params;\n\t\tconst trackPayload = <RecordEventPayload>{};\n\t\ttrackPayload.sentAt = sentAt;\n\t\ttrackPayload.properties =\n\t\t\teventData.properties && JSON.stringify(eventData.properties);\n\t\ttrackPayload.eventId =\n\t\t\tthis._sessionManager.getTimerKey() + sessionInfo.sessionId;\n\t\ttrackPayload.eventType = eventData.eventType;\n\t\treturn trackPayload;\n\t}\n\n\t/**\n\t * Initialize the personalize client\n\t * @private\n\t * @param params - RequestParams\n\t */\n\tprivate _init(config, credentials) {\n\t\tlogger.debug('init clients');\n\n\t\tif (\n\t\t\tthis._personalize &&\n\t\t\tthis._config.credentials &&\n\t\t\tthis._config.credentials.sessionToken === credentials.sessionToken &&\n\t\t\tthis._config.credentials.identityId === credentials.identityId\n\t\t) {\n\t\t\tlogger.debug('no change for analytics config, directly return from init');\n\t\t\treturn true;\n\t\t}\n\n\t\tthis._config.credentials = credentials;\n\t\tconst { region } = config;\n\t\tlogger.debug('initialize personalize with credentials', credentials);\n\t\tthis._personalize = new PersonalizeEventsClient({\n\t\t\tregion,\n\t\t\tcredentials,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\t\treturn true;\n\t}\n\n\t/**\n\t * check if current credentials exists\n\t * @private\n\t */\n\tprivate _getCredentials() {\n\t\tconst that = this;\n\t\treturn Credentials.get()\n\t\t\t.then(credentials => {\n\t\t\t\tif (!credentials) return null;\n\t\t\t\tlogger.debug('set credentials for analytics', that._config.credentials);\n\t\t\t\treturn Credentials.shear(credentials);\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tlogger.debug('ensure credentials error', err);\n\t\t\t\treturn null;\n\t\t\t});\n\t}\n}\n\n/**\n * @deprecated use named import\n */\nexport default AmazonPersonalizeProvider;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}