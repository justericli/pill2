{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport * as Paho from 'paho-mqtt';\nimport { v4 as uuid } from 'uuid';\nimport Observable from 'zen-observable-ts';\nimport { AbstractPubSubProvider } from './PubSubProvider';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('MqttOverWSProvider');\nexport function mqttTopicMatch(filter, topic) {\n  var filterArray = filter.split('/');\n  var length = filterArray.length;\n  var topicArray = topic.split('/');\n  for (var i = 0; i < length; ++i) {\n    var left = filterArray[i];\n    var right = topicArray[i];\n    if (left === '#') return topicArray.length >= length;\n    if (left !== '+' && left !== right) return false;\n  }\n  return length === topicArray.length;\n}\nvar ClientsQueue = /** @class */function () {\n  function ClientsQueue() {\n    this.promises = new Map();\n  }\n  ClientsQueue.prototype.get = function (clientId, clientFactory) {\n    return __awaiter(this, void 0, void 0, function () {\n      var promise;\n      return __generator(this, function (_a) {\n        promise = this.promises.get(clientId);\n        if (promise) {\n          return [2 /*return*/, promise];\n        }\n        promise = clientFactory(clientId);\n        this.promises.set(clientId, promise);\n        return [2 /*return*/, promise];\n      });\n    });\n  };\n  Object.defineProperty(ClientsQueue.prototype, \"allClients\", {\n    get: function () {\n      return Array.from(this.promises.keys());\n    },\n    enumerable: true,\n    configurable: true\n  });\n  ClientsQueue.prototype.remove = function (clientId) {\n    this.promises.delete(clientId);\n  };\n  return ClientsQueue;\n}();\nvar topicSymbol = typeof Symbol !== 'undefined' ? Symbol('topic') : '@@topic';\nvar MqttOverWSProvider = /** @class */function (_super) {\n  __extends(MqttOverWSProvider, _super);\n  function MqttOverWSProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _this = _super.call(this, __assign(__assign({}, options), {\n      clientId: options.clientId || uuid()\n    })) || this;\n    _this._clientsQueue = new ClientsQueue();\n    _this._topicObservers = new Map();\n    _this._clientIdObservers = new Map();\n    return _this;\n  }\n  Object.defineProperty(MqttOverWSProvider.prototype, \"clientId\", {\n    get: function () {\n      return this.options.clientId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MqttOverWSProvider.prototype, \"endpoint\", {\n    get: function () {\n      return this.options.aws_pubsub_endpoint;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MqttOverWSProvider.prototype, \"clientsQueue\", {\n    get: function () {\n      return this._clientsQueue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MqttOverWSProvider.prototype, \"isSSLEnabled\", {\n    get: function () {\n      return !this.options.aws_appsync_dangerously_connect_to_http_endpoint_for_testing;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  MqttOverWSProvider.prototype.getTopicForValue = function (value) {\n    return typeof value === 'object' && value[topicSymbol];\n  };\n  MqttOverWSProvider.prototype.getProviderName = function () {\n    return 'MqttOverWSProvider';\n  };\n  MqttOverWSProvider.prototype.onDisconnect = function (_a) {\n    var _this = this;\n    var clientId = _a.clientId,\n      errorCode = _a.errorCode,\n      args = __rest(_a, [\"clientId\", \"errorCode\"]);\n    if (errorCode !== 0) {\n      logger.warn(clientId, JSON.stringify(__assign({\n        errorCode: errorCode\n      }, args), null, 2));\n      var topicsToDelete_1 = [];\n      var clientIdObservers = this._clientIdObservers.get(clientId);\n      if (!clientIdObservers) {\n        return;\n      }\n      clientIdObservers.forEach(function (observer) {\n        observer.error('Disconnected, error code: ' + errorCode);\n        // removing observers for disconnected clientId\n        _this._topicObservers.forEach(function (observerForTopic, observerTopic) {\n          observerForTopic.delete(observer);\n          if (observerForTopic.size === 0) {\n            topicsToDelete_1.push(observerTopic);\n          }\n        });\n      });\n      // forgiving any trace of clientId\n      this._clientIdObservers.delete(clientId);\n      // Removing topics that are not listen by an observer\n      topicsToDelete_1.forEach(function (topic) {\n        _this._topicObservers.delete(topic);\n      });\n    }\n  };\n  MqttOverWSProvider.prototype.newClient = function (_a) {\n    var url = _a.url,\n      clientId = _a.clientId;\n    return __awaiter(this, void 0, void 0, function () {\n      var client;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            logger.debug('Creating new MQTT client', clientId);\n            client = new Paho.Client(url, clientId);\n            // client.trace = (args) => logger.debug(clientId, JSON.stringify(args, null, 2));\n            client.onMessageArrived = function (_a) {\n              var topic = _a.destinationName,\n                msg = _a.payloadString;\n              _this._onMessage(topic, msg);\n            };\n            client.onConnectionLost = function (_a) {\n              var errorCode = _a.errorCode,\n                args = __rest(_a, [\"errorCode\"]);\n              _this.onDisconnect(__assign({\n                clientId: clientId,\n                errorCode: errorCode\n              }, args));\n            };\n            return [4 /*yield*/, new Promise(function (resolve, reject) {\n              client.connect({\n                useSSL: _this.isSSLEnabled,\n                mqttVersion: 3,\n                onSuccess: function () {\n                  return resolve(client);\n                },\n                onFailure: reject\n              });\n            })];\n          case 1:\n            _b.sent();\n            return [2 /*return*/, client];\n        }\n      });\n    });\n  };\n  MqttOverWSProvider.prototype.connect = function (clientId, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.clientsQueue.get(clientId, function (clientId) {\n              return _this.newClient(__assign(__assign({}, options), {\n                clientId: clientId\n              }));\n            })];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  MqttOverWSProvider.prototype.disconnect = function (clientId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var client;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.clientsQueue.get(clientId, function () {\n              return null;\n            })];\n          case 1:\n            client = _a.sent();\n            if (client && client.isConnected()) {\n              client.disconnect();\n            }\n            this.clientsQueue.remove(clientId);\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  MqttOverWSProvider.prototype.publish = function (topics, msg) {\n    return __awaiter(this, void 0, void 0, function () {\n      var targetTopics, message, url, client;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            targetTopics = [].concat(topics);\n            message = JSON.stringify(msg);\n            return [4 /*yield*/, this.endpoint];\n          case 1:\n            url = _a.sent();\n            return [4 /*yield*/, this.connect(this.clientId, {\n              url: url\n            })];\n          case 2:\n            client = _a.sent();\n            logger.debug('Publishing to topic(s)', targetTopics.join(','), message);\n            targetTopics.forEach(function (topic) {\n              return client.send(topic, message);\n            });\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  MqttOverWSProvider.prototype._onMessage = function (topic, msg) {\n    try {\n      var matchedTopicObservers_1 = [];\n      this._topicObservers.forEach(function (observerForTopic, observerTopic) {\n        if (mqttTopicMatch(observerTopic, topic)) {\n          matchedTopicObservers_1.push(observerForTopic);\n        }\n      });\n      var parsedMessage_1 = JSON.parse(msg);\n      if (typeof parsedMessage_1 === 'object') {\n        parsedMessage_1[topicSymbol] = topic;\n      }\n      matchedTopicObservers_1.forEach(function (observersForTopic) {\n        observersForTopic.forEach(function (observer) {\n          return observer.next(parsedMessage_1);\n        });\n      });\n    } catch (error) {\n      logger.warn('Error handling message', error, msg);\n    }\n  };\n  MqttOverWSProvider.prototype.subscribe = function (topics, options) {\n    var _this = this;\n    if (options === void 0) {\n      options = {};\n    }\n    var targetTopics = [].concat(topics);\n    logger.debug('Subscribing to topic(s)', targetTopics.join(','));\n    return new Observable(function (observer) {\n      targetTopics.forEach(function (topic) {\n        // this._topicObservers is used to notify the observers according to the topic received on the message\n        var observersForTopic = _this._topicObservers.get(topic);\n        if (!observersForTopic) {\n          observersForTopic = new Set();\n          _this._topicObservers.set(topic, observersForTopic);\n        }\n        observersForTopic.add(observer);\n      });\n      // @ts-ignore\n      var client;\n      var _a = options.clientId,\n        clientId = _a === void 0 ? _this.clientId : _a;\n      // this._clientIdObservers is used to close observers when client gets disconnected\n      var observersForClientId = _this._clientIdObservers.get(clientId);\n      if (!observersForClientId) {\n        observersForClientId = new Set();\n      }\n      observersForClientId.add(observer);\n      _this._clientIdObservers.set(clientId, observersForClientId);\n      (function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var _a, url, _b, e_1;\n          return __generator(this, function (_c) {\n            switch (_c.label) {\n              case 0:\n                _a = options.url;\n                if (!(_a === void 0)) return [3 /*break*/, 2];\n                return [4 /*yield*/, this.endpoint];\n              case 1:\n                _b = _c.sent();\n                return [3 /*break*/, 3];\n              case 2:\n                _b = _a;\n                _c.label = 3;\n              case 3:\n                url = _b;\n                _c.label = 4;\n              case 4:\n                _c.trys.push([4, 6,, 7]);\n                return [4 /*yield*/, this.connect(clientId, {\n                  url: url\n                })];\n              case 5:\n                client = _c.sent();\n                targetTopics.forEach(function (topic) {\n                  client.subscribe(topic);\n                });\n                return [3 /*break*/, 7];\n              case 6:\n                e_1 = _c.sent();\n                observer.error(e_1);\n                return [3 /*break*/, 7];\n              case 7:\n                return [2 /*return*/];\n            }\n          });\n        });\n      })();\n\n      return function () {\n        logger.debug('Unsubscribing from topic(s)', targetTopics.join(','));\n        if (client) {\n          _this._clientIdObservers.get(clientId).delete(observer);\n          // No more observers per client => client not needed anymore\n          if (_this._clientIdObservers.get(clientId).size === 0) {\n            _this.disconnect(clientId);\n            _this._clientIdObservers.delete(clientId);\n          }\n          targetTopics.forEach(function (topic) {\n            var observersForTopic = _this._topicObservers.get(topic) || new Set();\n            observersForTopic.delete(observer);\n            // if no observers exists for the topic, topic should be removed\n            if (observersForTopic.size === 0) {\n              _this._topicObservers.delete(topic);\n              if (client.isConnected()) {\n                client.unsubscribe(topic);\n              }\n            }\n          });\n        }\n        return null;\n      };\n    });\n  };\n  return MqttOverWSProvider;\n}(AbstractPubSubProvider);\nexport { MqttOverWSProvider };","map":{"version":3,"names":["Paho","v4","uuid","Observable","AbstractPubSubProvider","ConsoleLogger","Logger","logger","mqttTopicMatch","filter","topic","filterArray","split","length","topicArray","i","left","right","ClientsQueue","promises","Map","prototype","get","clientId","clientFactory","promise","set","Object","defineProperty","Array","from","keys","remove","delete","topicSymbol","Symbol","MqttOverWSProvider","_super","__extends","options","_this","call","__assign","_clientsQueue","_topicObservers","_clientIdObservers","aws_pubsub_endpoint","aws_appsync_dangerously_connect_to_http_endpoint_for_testing","getTopicForValue","value","getProviderName","onDisconnect","_a","errorCode","args","__rest","warn","JSON","stringify","topicsToDelete_1","clientIdObservers","forEach","observer","error","observerForTopic","observerTopic","size","push","newClient","url","debug","client","Client","onMessageArrived","destinationName","msg","payloadString","_onMessage","onConnectionLost","Promise","resolve","reject","connect","useSSL","isSSLEnabled","mqttVersion","onSuccess","onFailure","_b","sent","clientsQueue","disconnect","isConnected","publish","topics","targetTopics","concat","message","endpoint","join","send","matchedTopicObservers_1","parsedMessage_1","parse","observersForTopic","next","subscribe","Set","add","observersForClientId","__awaiter","_c","e_1","unsubscribe"],"sources":["/Users/ericli/node_modules/@aws-amplify/api-graphql/node_modules/@aws-amplify/pubsub/src/Providers/MqttOverWSProvider.ts"],"sourcesContent":["/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport * as Paho from 'paho-mqtt';\nimport { v4 as uuid } from 'uuid';\nimport Observable from 'zen-observable-ts';\n\nimport { AbstractPubSubProvider } from './PubSubProvider';\nimport { ProvidertOptions, SubscriptionObserver } from '../types';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\n\nconst logger = new Logger('MqttOverWSProvider');\n\nexport function mqttTopicMatch(filter: string, topic: string) {\n\tconst filterArray = filter.split('/');\n\tconst length = filterArray.length;\n\tconst topicArray = topic.split('/');\n\n\tfor (let i = 0; i < length; ++i) {\n\t\tconst left = filterArray[i];\n\t\tconst right = topicArray[i];\n\t\tif (left === '#') return topicArray.length >= length;\n\t\tif (left !== '+' && left !== right) return false;\n\t}\n\treturn length === topicArray.length;\n}\n\nexport interface MqttProvidertOptions extends ProvidertOptions {\n\tclientId?: string;\n\turl?: string;\n}\n\nclass ClientsQueue {\n\tprivate promises: Map<string, Promise<any>> = new Map();\n\n\tasync get(clientId: string, clientFactory: (string) => Promise<any>) {\n\t\tlet promise = this.promises.get(clientId);\n\t\tif (promise) {\n\t\t\treturn promise;\n\t\t}\n\n\t\tpromise = clientFactory(clientId);\n\n\t\tthis.promises.set(clientId, promise);\n\n\t\treturn promise;\n\t}\n\n\tget allClients() {\n\t\treturn Array.from(this.promises.keys());\n\t}\n\n\tremove(clientId) {\n\t\tthis.promises.delete(clientId);\n\t}\n}\n\nconst topicSymbol = typeof Symbol !== 'undefined' ? Symbol('topic') : '@@topic';\n\nexport class MqttOverWSProvider extends AbstractPubSubProvider {\n\tprivate _clientsQueue = new ClientsQueue();\n\n\tconstructor(options: MqttProvidertOptions = {}) {\n\t\tsuper({ ...options, clientId: options.clientId || uuid() });\n\t}\n\n\tprotected get clientId() {\n\t\treturn this.options.clientId;\n\t}\n\n\tprotected get endpoint() {\n\t\treturn this.options.aws_pubsub_endpoint;\n\t}\n\n\tprotected get clientsQueue() {\n\t\treturn this._clientsQueue;\n\t}\n\n\tprotected get isSSLEnabled() {\n\t\treturn !this.options\n\t\t\t.aws_appsync_dangerously_connect_to_http_endpoint_for_testing;\n\t}\n\n\tprotected getTopicForValue(value) {\n\t\treturn typeof value === 'object' && value[topicSymbol];\n\t}\n\n\tgetProviderName() {\n\t\treturn 'MqttOverWSProvider';\n\t}\n\n\tpublic onDisconnect({ clientId, errorCode, ...args }) {\n\t\tif (errorCode !== 0) {\n\t\t\tlogger.warn(clientId, JSON.stringify({ errorCode, ...args }, null, 2));\n\n\t\t\tconst topicsToDelete = [];\n\t\t\tconst clientIdObservers = this._clientIdObservers.get(clientId);\n\t\t\tif (!clientIdObservers) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tclientIdObservers.forEach(observer => {\n\t\t\t\tobserver.error('Disconnected, error code: ' + errorCode);\n\t\t\t\t// removing observers for disconnected clientId\n\t\t\t\tthis._topicObservers.forEach((observerForTopic, observerTopic) => {\n\t\t\t\t\tobserverForTopic.delete(observer);\n\t\t\t\t\tif (observerForTopic.size === 0) {\n\t\t\t\t\t\ttopicsToDelete.push(observerTopic);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// forgiving any trace of clientId\n\t\t\tthis._clientIdObservers.delete(clientId);\n\n\t\t\t// Removing topics that are not listen by an observer\n\t\t\ttopicsToDelete.forEach(topic => {\n\t\t\t\tthis._topicObservers.delete(topic);\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic async newClient({\n\t\turl,\n\t\tclientId,\n\t}: MqttProvidertOptions): Promise<any> {\n\t\tlogger.debug('Creating new MQTT client', clientId);\n\n\t\t// @ts-ignore\n\t\tconst client = new Paho.Client(url, clientId);\n\t\t// client.trace = (args) => logger.debug(clientId, JSON.stringify(args, null, 2));\n\t\tclient.onMessageArrived = ({\n\t\t\tdestinationName: topic,\n\t\t\tpayloadString: msg,\n\t\t}) => {\n\t\t\tthis._onMessage(topic, msg);\n\t\t};\n\t\tclient.onConnectionLost = ({ errorCode, ...args }) => {\n\t\t\tthis.onDisconnect({ clientId, errorCode, ...args });\n\t\t};\n\n\t\tawait new Promise((resolve, reject) => {\n\t\t\tclient.connect({\n\t\t\t\tuseSSL: this.isSSLEnabled,\n\t\t\t\tmqttVersion: 3,\n\t\t\t\tonSuccess: () => resolve(client),\n\t\t\t\tonFailure: reject,\n\t\t\t});\n\t\t});\n\n\t\treturn client;\n\t}\n\n\tprotected async connect(\n\t\tclientId: string,\n\t\toptions: MqttProvidertOptions = {}\n\t): Promise<any> {\n\t\treturn await this.clientsQueue.get(clientId, clientId =>\n\t\t\tthis.newClient({ ...options, clientId })\n\t\t);\n\t}\n\n\tprotected async disconnect(clientId: string): Promise<void> {\n\t\tconst client = await this.clientsQueue.get(clientId, () => null);\n\n\t\tif (client && client.isConnected()) {\n\t\t\tclient.disconnect();\n\t\t}\n\t\tthis.clientsQueue.remove(clientId);\n\t}\n\n\tasync publish(topics: string[] | string, msg: any) {\n\t\tconst targetTopics = ([] as string[]).concat(topics);\n\t\tconst message = JSON.stringify(msg);\n\n\t\tconst url = await this.endpoint;\n\n\t\tconst client = await this.connect(this.clientId, { url });\n\n\t\tlogger.debug('Publishing to topic(s)', targetTopics.join(','), message);\n\t\ttargetTopics.forEach(topic => client.send(topic, message));\n\t}\n\n\tprotected _topicObservers: Map<\n\t\tstring,\n\t\tSet<SubscriptionObserver<any>>\n\t> = new Map();\n\n\tprotected _clientIdObservers: Map<\n\t\tstring,\n\t\tSet<SubscriptionObserver<any>>\n\t> = new Map();\n\n\tprivate _onMessage(topic: string, msg: any) {\n\t\ttry {\n\t\t\tconst matchedTopicObservers = [];\n\t\t\tthis._topicObservers.forEach((observerForTopic, observerTopic) => {\n\t\t\t\tif (mqttTopicMatch(observerTopic, topic)) {\n\t\t\t\t\tmatchedTopicObservers.push(observerForTopic);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst parsedMessage = JSON.parse(msg);\n\n\t\t\tif (typeof parsedMessage === 'object') {\n\t\t\t\tparsedMessage[topicSymbol] = topic;\n\t\t\t}\n\n\t\t\tmatchedTopicObservers.forEach(observersForTopic => {\n\t\t\t\tobserversForTopic.forEach(observer => observer.next(parsedMessage));\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tlogger.warn('Error handling message', error, msg);\n\t\t}\n\t}\n\n\tsubscribe(\n\t\ttopics: string[] | string,\n\t\toptions: MqttProvidertOptions = {}\n\t): Observable<any> {\n\t\tconst targetTopics = ([] as string[]).concat(topics);\n\t\tlogger.debug('Subscribing to topic(s)', targetTopics.join(','));\n\n\t\treturn new Observable(observer => {\n\t\t\ttargetTopics.forEach(topic => {\n\t\t\t\t// this._topicObservers is used to notify the observers according to the topic received on the message\n\t\t\t\tlet observersForTopic = this._topicObservers.get(topic);\n\n\t\t\t\tif (!observersForTopic) {\n\t\t\t\t\tobserversForTopic = new Set();\n\n\t\t\t\t\tthis._topicObservers.set(topic, observersForTopic);\n\t\t\t\t}\n\n\t\t\t\tobserversForTopic.add(observer);\n\t\t\t});\n\n\t\t\t// @ts-ignore\n\t\t\tlet client: Paho.Client;\n\t\t\tconst { clientId = this.clientId } = options;\n\n\t\t\t// this._clientIdObservers is used to close observers when client gets disconnected\n\t\t\tlet observersForClientId = this._clientIdObservers.get(clientId);\n\t\t\tif (!observersForClientId) {\n\t\t\t\tobserversForClientId = new Set();\n\t\t\t}\n\t\t\tobserversForClientId.add(observer);\n\t\t\tthis._clientIdObservers.set(clientId, observersForClientId);\n\n\t\t\t(async () => {\n\t\t\t\tconst { url = await this.endpoint } = options;\n\n\t\t\t\ttry {\n\t\t\t\t\tclient = await this.connect(clientId, { url });\n\t\t\t\t\ttargetTopics.forEach(topic => {\n\t\t\t\t\t\tclient.subscribe(topic);\n\t\t\t\t\t});\n\t\t\t\t} catch (e) {\n\t\t\t\t\tobserver.error(e);\n\t\t\t\t}\n\t\t\t})();\n\n\t\t\treturn () => {\n\t\t\t\tlogger.debug('Unsubscribing from topic(s)', targetTopics.join(','));\n\n\t\t\t\tif (client) {\n\t\t\t\t\tthis._clientIdObservers.get(clientId).delete(observer);\n\t\t\t\t\t// No more observers per client => client not needed anymore\n\t\t\t\t\tif (this._clientIdObservers.get(clientId).size === 0) {\n\t\t\t\t\t\tthis.disconnect(clientId);\n\t\t\t\t\t\tthis._clientIdObservers.delete(clientId);\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetTopics.forEach(topic => {\n\t\t\t\t\t\tconst observersForTopic =\n\t\t\t\t\t\t\tthis._topicObservers.get(topic) ||\n\t\t\t\t\t\t\t(new Set() as Set<SubscriptionObserver<any>>);\n\n\t\t\t\t\t\tobserversForTopic.delete(observer);\n\n\t\t\t\t\t\t// if no observers exists for the topic, topic should be removed\n\t\t\t\t\t\tif (observersForTopic.size === 0) {\n\t\t\t\t\t\t\tthis._topicObservers.delete(topic);\n\t\t\t\t\t\t\tif (client.isConnected()) {\n\t\t\t\t\t\t\t\tclient.unsubscribe(topic);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\t\t\t};\n\t\t});\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}