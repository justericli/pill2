{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\n/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport Observable from 'zen-observable-ts';\nimport { GraphQLError } from 'graphql';\nimport * as url from 'url';\nimport { v4 as uuid } from 'uuid';\nimport { Buffer } from 'buffer';\nimport { Logger, Credentials, Signer, Hub, Constants, USER_AGENT_HEADER, jitteredExponentialRetry, NonRetryableError } from '@aws-amplify/core';\nimport Cache from '@aws-amplify/cache';\nimport Auth from '@aws-amplify/auth';\nimport { AbstractPubSubProvider } from './PubSubProvider';\nimport { CONTROL_MSG } from '../index';\nvar logger = new Logger('AWSAppSyncRealTimeProvider');\nvar AMPLIFY_SYMBOL = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function' ? Symbol.for('amplify_default') : '@@amplify_default';\nvar dispatchApiEvent = function (event, data, message) {\n  Hub.dispatch('api', {\n    event: event,\n    data: data,\n    message: message\n  }, 'PubSub', AMPLIFY_SYMBOL);\n};\nvar MAX_DELAY_MS = 5000;\nvar NON_RETRYABLE_CODES = [400, 401, 403];\nvar MESSAGE_TYPES;\n(function (MESSAGE_TYPES) {\n  /**\n   * Client -> Server message.\n   * This message type is the first message after handshake and this will initialize AWS AppSync RealTime communication\n   */\n  MESSAGE_TYPES[\"GQL_CONNECTION_INIT\"] = \"connection_init\";\n  /**\n   * Server -> Client message\n   * This message type is in case there is an issue with AWS AppSync RealTime when establishing connection\n   */\n  MESSAGE_TYPES[\"GQL_CONNECTION_ERROR\"] = \"connection_error\";\n  /**\n   * Server -> Client message.\n   * This message type is for the ack response from AWS AppSync RealTime for GQL_CONNECTION_INIT message\n   */\n  MESSAGE_TYPES[\"GQL_CONNECTION_ACK\"] = \"connection_ack\";\n  /**\n   * Client -> Server message.\n   * This message type is for register subscriptions with AWS AppSync RealTime\n   */\n  MESSAGE_TYPES[\"GQL_START\"] = \"start\";\n  /**\n   * Server -> Client message.\n   * This message type is for the ack response from AWS AppSync RealTime for GQL_START message\n   */\n  MESSAGE_TYPES[\"GQL_START_ACK\"] = \"start_ack\";\n  /**\n   * Server -> Client message.\n   * This message type is for subscription message from AWS AppSync RealTime\n   */\n  MESSAGE_TYPES[\"GQL_DATA\"] = \"data\";\n  /**\n   * Server -> Client message.\n   * This message type helps the client to know is still receiving messages from AWS AppSync RealTime\n   */\n  MESSAGE_TYPES[\"GQL_CONNECTION_KEEP_ALIVE\"] = \"ka\";\n  /**\n   * Client -> Server message.\n   * This message type is for unregister subscriptions with AWS AppSync RealTime\n   */\n  MESSAGE_TYPES[\"GQL_STOP\"] = \"stop\";\n  /**\n   * Server -> Client message.\n   * This message type is for the ack response from AWS AppSync RealTime for GQL_STOP message\n   */\n  MESSAGE_TYPES[\"GQL_COMPLETE\"] = \"complete\";\n  /**\n   * Server -> Client message.\n   * This message type is for sending error messages from AWS AppSync RealTime to the client\n   */\n  MESSAGE_TYPES[\"GQL_ERROR\"] = \"error\";\n})(MESSAGE_TYPES || (MESSAGE_TYPES = {}));\nvar SUBSCRIPTION_STATUS;\n(function (SUBSCRIPTION_STATUS) {\n  SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS[\"PENDING\"] = 0] = \"PENDING\";\n  SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS[\"CONNECTED\"] = 1] = \"CONNECTED\";\n  SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS[\"FAILED\"] = 2] = \"FAILED\";\n})(SUBSCRIPTION_STATUS || (SUBSCRIPTION_STATUS = {}));\nvar SOCKET_STATUS;\n(function (SOCKET_STATUS) {\n  SOCKET_STATUS[SOCKET_STATUS[\"CLOSED\"] = 0] = \"CLOSED\";\n  SOCKET_STATUS[SOCKET_STATUS[\"READY\"] = 1] = \"READY\";\n  SOCKET_STATUS[SOCKET_STATUS[\"CONNECTING\"] = 2] = \"CONNECTING\";\n})(SOCKET_STATUS || (SOCKET_STATUS = {}));\nvar AWS_APPSYNC_REALTIME_HEADERS = {\n  accept: 'application/json, text/javascript',\n  'content-encoding': 'amz-1.0',\n  'content-type': 'application/json; charset=UTF-8'\n};\n/**\n * Time in milleseconds to wait for GQL_CONNECTION_INIT message\n */\nvar CONNECTION_INIT_TIMEOUT = 15000;\n/**\n * Time in milleseconds to wait for GQL_START_ACK message\n */\nvar START_ACK_TIMEOUT = 15000;\n/**\n * Default Time in milleseconds to wait for GQL_CONNECTION_KEEP_ALIVE message\n */\nvar DEFAULT_KEEP_ALIVE_TIMEOUT = 5 * 60 * 1000;\nvar AWSAppSyncRealTimeProvider = /** @class */function (_super) {\n  __extends(AWSAppSyncRealTimeProvider, _super);\n  function AWSAppSyncRealTimeProvider() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.socketStatus = SOCKET_STATUS.CLOSED;\n    _this.keepAliveTimeout = DEFAULT_KEEP_ALIVE_TIMEOUT;\n    _this.subscriptionObserverMap = new Map();\n    _this.promiseArray = [];\n    return _this;\n  }\n  AWSAppSyncRealTimeProvider.prototype.getProviderName = function () {\n    return 'AWSAppSyncRealTimeProvider';\n  };\n  AWSAppSyncRealTimeProvider.prototype.newClient = function () {\n    throw new Error('Not used here');\n  };\n  AWSAppSyncRealTimeProvider.prototype.publish = function (_topics, _msg, _options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error('Operation not supported');\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype.subscribe = function (_topics, options) {\n    var _this = this;\n    var appSyncGraphqlEndpoint = options.appSyncGraphqlEndpoint;\n    return new Observable(function (observer) {\n      if (!appSyncGraphqlEndpoint) {\n        observer.error({\n          errors: [__assign({}, new GraphQLError(\"Subscribe only available for AWS AppSync endpoint\"))]\n        });\n        observer.complete();\n      } else {\n        var subscriptionId_1 = uuid();\n        _this._startSubscriptionWithAWSAppSyncRealTime({\n          options: options,\n          observer: observer,\n          subscriptionId: subscriptionId_1\n        }).catch(function (err) {\n          observer.error({\n            errors: [__assign({}, new GraphQLError(CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR + \": \" + err))]\n          });\n          observer.complete();\n        });\n        return function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            var subscriptionState, err_1;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  _a.trys.push([0, 2, 3, 4]);\n                  // Waiting that subscription has been connected before trying to unsubscribe\n                  return [4 /*yield*/, this._waitForSubscriptionToBeConnected(subscriptionId_1)];\n                case 1:\n                  // Waiting that subscription has been connected before trying to unsubscribe\n                  _a.sent();\n                  subscriptionState = (this.subscriptionObserverMap.get(subscriptionId_1) || {}).subscriptionState;\n                  if (!subscriptionState) {\n                    // subscription already unsubscribed\n                    return [2 /*return*/];\n                  }\n\n                  if (subscriptionState === SUBSCRIPTION_STATUS.CONNECTED) {\n                    this._sendUnsubscriptionMessage(subscriptionId_1);\n                  } else {\n                    throw new Error('Subscription never connected');\n                  }\n                  return [3 /*break*/, 4];\n                case 2:\n                  err_1 = _a.sent();\n                  logger.debug(\"Error while unsubscribing \" + err_1);\n                  return [3 /*break*/, 4];\n                case 3:\n                  this._removeSubscriptionObserver(subscriptionId_1);\n                  return [7 /*endfinally*/];\n                case 4:\n                  return [2 /*return*/];\n              }\n            });\n          });\n        };\n      }\n    });\n  };\n\n  Object.defineProperty(AWSAppSyncRealTimeProvider.prototype, \"isSSLEnabled\", {\n    get: function () {\n      return !this.options.aws_appsync_dangerously_connect_to_http_endpoint_for_testing;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  AWSAppSyncRealTimeProvider.prototype._startSubscriptionWithAWSAppSyncRealTime = function (_a) {\n    var options = _a.options,\n      observer = _a.observer,\n      subscriptionId = _a.subscriptionId;\n    return __awaiter(this, void 0, void 0, function () {\n      var appSyncGraphqlEndpoint, authenticationType, query, variables, apiKey, region, _b, graphql_headers, _c, additionalHeaders, subscriptionState, data, dataString, headerObj, _d, _e, subscriptionMessage, stringToAWSRealTime, err_2, _f, message, subscriptionFailedCallback_1, _g, subscriptionFailedCallback, subscriptionReadyCallback;\n      var _h;\n      var _this = this;\n      return __generator(this, function (_j) {\n        switch (_j.label) {\n          case 0:\n            appSyncGraphqlEndpoint = options.appSyncGraphqlEndpoint, authenticationType = options.authenticationType, query = options.query, variables = options.variables, apiKey = options.apiKey, region = options.region, _b = options.graphql_headers, graphql_headers = _b === void 0 ? function () {\n              return {};\n            } : _b, _c = options.additionalHeaders, additionalHeaders = _c === void 0 ? {} : _c;\n            subscriptionState = SUBSCRIPTION_STATUS.PENDING;\n            data = {\n              query: query,\n              variables: variables\n            };\n            // Having a subscription id map will make it simple to forward messages received\n            this.subscriptionObserverMap.set(subscriptionId, {\n              observer: observer,\n              query: query,\n              variables: variables,\n              subscriptionState: subscriptionState,\n              startAckTimeoutId: null\n            });\n            dataString = JSON.stringify(data);\n            _d = [{}];\n            return [4 /*yield*/, this._awsRealTimeHeaderBasedAuth({\n              apiKey: apiKey,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              authenticationType: authenticationType,\n              payload: dataString,\n              canonicalUri: '',\n              region: region\n            })];\n          case 1:\n            _e = [__assign.apply(void 0, _d.concat([_j.sent()]))];\n            return [4 /*yield*/, graphql_headers()];\n          case 2:\n            headerObj = __assign.apply(void 0, [__assign.apply(void 0, [__assign.apply(void 0, _e.concat([_j.sent()])), additionalHeaders]), (_h = {}, _h[USER_AGENT_HEADER] = Constants.userAgent, _h)]);\n            subscriptionMessage = {\n              id: subscriptionId,\n              payload: {\n                data: dataString,\n                extensions: {\n                  authorization: __assign({}, headerObj)\n                }\n              },\n              type: MESSAGE_TYPES.GQL_START\n            };\n            stringToAWSRealTime = JSON.stringify(subscriptionMessage);\n            _j.label = 3;\n          case 3:\n            _j.trys.push([3, 5,, 6]);\n            return [4 /*yield*/, this._initializeWebSocketConnection({\n              apiKey: apiKey,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              authenticationType: authenticationType,\n              region: region\n            })];\n          case 4:\n            _j.sent();\n            return [3 /*break*/, 6];\n          case 5:\n            err_2 = _j.sent();\n            logger.debug({\n              err: err_2\n            });\n            _f = err_2.message, message = _f === void 0 ? '' : _f;\n            observer.error({\n              errors: [__assign({}, new GraphQLError(CONTROL_MSG.CONNECTION_FAILED + \": \" + message))]\n            });\n            observer.complete();\n            subscriptionFailedCallback_1 = (this.subscriptionObserverMap.get(subscriptionId) || {}).subscriptionFailedCallback;\n            // Notify concurrent unsubscription\n            if (typeof subscriptionFailedCallback_1 === 'function') {\n              subscriptionFailedCallback_1();\n            }\n            return [2 /*return*/];\n          case 6:\n            _g = this.subscriptionObserverMap.get(subscriptionId), subscriptionFailedCallback = _g.subscriptionFailedCallback, subscriptionReadyCallback = _g.subscriptionReadyCallback;\n            // This must be done before sending the message in order to be listening immediately\n            this.subscriptionObserverMap.set(subscriptionId, {\n              observer: observer,\n              subscriptionState: subscriptionState,\n              variables: variables,\n              query: query,\n              subscriptionReadyCallback: subscriptionReadyCallback,\n              subscriptionFailedCallback: subscriptionFailedCallback,\n              startAckTimeoutId: setTimeout(function () {\n                _this._timeoutStartSubscriptionAck.call(_this, subscriptionId);\n              }, START_ACK_TIMEOUT)\n            });\n            if (this.awsRealTimeSocket) {\n              this.awsRealTimeSocket.send(stringToAWSRealTime);\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  // Waiting that subscription has been connected before trying to unsubscribe\n  AWSAppSyncRealTimeProvider.prototype._waitForSubscriptionToBeConnected = function (subscriptionId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var subscriptionState;\n      var _this = this;\n      return __generator(this, function (_a) {\n        subscriptionState = this.subscriptionObserverMap.get(subscriptionId).subscriptionState;\n        // This in case unsubscribe is invoked before sending start subscription message\n        if (subscriptionState === SUBSCRIPTION_STATUS.PENDING) {\n          return [2 /*return*/, new Promise(function (res, rej) {\n            var _a = _this.subscriptionObserverMap.get(subscriptionId),\n              observer = _a.observer,\n              subscriptionState = _a.subscriptionState,\n              variables = _a.variables,\n              query = _a.query;\n            _this.subscriptionObserverMap.set(subscriptionId, {\n              observer: observer,\n              subscriptionState: subscriptionState,\n              variables: variables,\n              query: query,\n              subscriptionReadyCallback: res,\n              subscriptionFailedCallback: rej\n            });\n          })];\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._sendUnsubscriptionMessage = function (subscriptionId) {\n    try {\n      if (this.awsRealTimeSocket && this.awsRealTimeSocket.readyState === WebSocket.OPEN && this.socketStatus === SOCKET_STATUS.READY) {\n        // Preparing unsubscribe message to stop receiving messages for that subscription\n        var unsubscribeMessage = {\n          id: subscriptionId,\n          type: MESSAGE_TYPES.GQL_STOP\n        };\n        var stringToAWSRealTime = JSON.stringify(unsubscribeMessage);\n        this.awsRealTimeSocket.send(stringToAWSRealTime);\n      }\n    } catch (err) {\n      // If GQL_STOP is not sent because of disconnection issue, then there is nothing the client can do\n      logger.debug({\n        err: err\n      });\n    }\n  };\n  AWSAppSyncRealTimeProvider.prototype._removeSubscriptionObserver = function (subscriptionId) {\n    this.subscriptionObserverMap.delete(subscriptionId);\n    // Verifying 1000ms after removing subscription in case there are new subscription unmount/mount\n    setTimeout(this._closeSocketIfRequired.bind(this), 1000);\n  };\n  AWSAppSyncRealTimeProvider.prototype._closeSocketIfRequired = function () {\n    if (this.subscriptionObserverMap.size > 0) {\n      // Active subscriptions on the WebSocket\n      return;\n    }\n    if (!this.awsRealTimeSocket) {\n      this.socketStatus = SOCKET_STATUS.CLOSED;\n      return;\n    }\n    if (this.awsRealTimeSocket.bufferedAmount > 0) {\n      // Still data on the WebSocket\n      setTimeout(this._closeSocketIfRequired.bind(this), 1000);\n    } else {\n      logger.debug('closing WebSocket...');\n      clearTimeout(this.keepAliveTimeoutId);\n      var tempSocket = this.awsRealTimeSocket;\n      // Cleaning callbacks to avoid race condition, socket still exists\n      tempSocket.onclose = undefined;\n      tempSocket.onerror = undefined;\n      tempSocket.close(1000);\n      this.awsRealTimeSocket = null;\n      this.socketStatus = SOCKET_STATUS.CLOSED;\n    }\n  };\n  AWSAppSyncRealTimeProvider.prototype._handleIncomingSubscriptionMessage = function (message) {\n    logger.debug(\"subscription message from AWS AppSync RealTime: \" + message.data);\n    var _a = JSON.parse(message.data),\n      _b = _a.id,\n      id = _b === void 0 ? '' : _b,\n      payload = _a.payload,\n      type = _a.type;\n    var _c = this.subscriptionObserverMap.get(id) || {},\n      _d = _c.observer,\n      observer = _d === void 0 ? null : _d,\n      _e = _c.query,\n      query = _e === void 0 ? '' : _e,\n      _f = _c.variables,\n      variables = _f === void 0 ? {} : _f,\n      startAckTimeoutId = _c.startAckTimeoutId,\n      subscriptionReadyCallback = _c.subscriptionReadyCallback,\n      subscriptionFailedCallback = _c.subscriptionFailedCallback;\n    logger.debug({\n      id: id,\n      observer: observer,\n      query: query,\n      variables: variables\n    });\n    if (type === MESSAGE_TYPES.GQL_DATA && payload && payload.data) {\n      if (observer) {\n        observer.next(payload);\n      } else {\n        logger.debug(\"observer not found for id: \" + id);\n      }\n      return;\n    }\n    if (type === MESSAGE_TYPES.GQL_START_ACK) {\n      logger.debug(\"subscription ready for \" + JSON.stringify({\n        query: query,\n        variables: variables\n      }));\n      if (typeof subscriptionReadyCallback === 'function') {\n        subscriptionReadyCallback();\n      }\n      clearTimeout(startAckTimeoutId);\n      dispatchApiEvent(CONTROL_MSG.SUBSCRIPTION_ACK, {\n        query: query,\n        variables: variables\n      }, 'Connection established for subscription');\n      var subscriptionState = SUBSCRIPTION_STATUS.CONNECTED;\n      this.subscriptionObserverMap.set(id, {\n        observer: observer,\n        query: query,\n        variables: variables,\n        startAckTimeoutId: null,\n        subscriptionState: subscriptionState,\n        subscriptionReadyCallback: subscriptionReadyCallback,\n        subscriptionFailedCallback: subscriptionFailedCallback\n      });\n      // TODO: emit event on hub but it requires to store the id first\n      return;\n    }\n    if (type === MESSAGE_TYPES.GQL_CONNECTION_KEEP_ALIVE) {\n      clearTimeout(this.keepAliveTimeoutId);\n      this.keepAliveTimeoutId = setTimeout(this._errorDisconnect.bind(this, CONTROL_MSG.TIMEOUT_DISCONNECT), this.keepAliveTimeout);\n      return;\n    }\n    if (type === MESSAGE_TYPES.GQL_ERROR) {\n      var subscriptionState = SUBSCRIPTION_STATUS.FAILED;\n      this.subscriptionObserverMap.set(id, {\n        observer: observer,\n        query: query,\n        variables: variables,\n        startAckTimeoutId: startAckTimeoutId,\n        subscriptionReadyCallback: subscriptionReadyCallback,\n        subscriptionFailedCallback: subscriptionFailedCallback,\n        subscriptionState: subscriptionState\n      });\n      observer.error({\n        errors: [__assign({}, new GraphQLError(CONTROL_MSG.CONNECTION_FAILED + \": \" + JSON.stringify(payload)))]\n      });\n      clearTimeout(startAckTimeoutId);\n      observer.complete();\n      if (typeof subscriptionFailedCallback === 'function') {\n        subscriptionFailedCallback();\n      }\n    }\n  };\n  AWSAppSyncRealTimeProvider.prototype._errorDisconnect = function (msg) {\n    logger.debug(\"Disconnect error: \" + msg);\n    this.subscriptionObserverMap.forEach(function (_a) {\n      var observer = _a.observer;\n      if (observer && !observer.closed) {\n        observer.error({\n          errors: [__assign({}, new GraphQLError(msg))]\n        });\n      }\n    });\n    this.subscriptionObserverMap.clear();\n    if (this.awsRealTimeSocket) {\n      this.awsRealTimeSocket.close();\n    }\n    this.socketStatus = SOCKET_STATUS.CLOSED;\n  };\n  AWSAppSyncRealTimeProvider.prototype._timeoutStartSubscriptionAck = function (subscriptionId) {\n    var _a = this.subscriptionObserverMap.get(subscriptionId) || {},\n      observer = _a.observer,\n      query = _a.query,\n      variables = _a.variables;\n    if (!observer) {\n      return;\n    }\n    this.subscriptionObserverMap.set(subscriptionId, {\n      observer: observer,\n      query: query,\n      variables: variables,\n      subscriptionState: SUBSCRIPTION_STATUS.FAILED\n    });\n    if (observer && !observer.closed) {\n      observer.error({\n        errors: [__assign({}, new GraphQLError(\"Subscription timeout \" + JSON.stringify({\n          query: query,\n          variables: variables\n        })))]\n      });\n      // Cleanup will be automatically executed\n      observer.complete();\n    }\n    logger.debug('timeoutStartSubscription', JSON.stringify({\n      query: query,\n      variables: variables\n    }));\n  };\n  AWSAppSyncRealTimeProvider.prototype._initializeWebSocketConnection = function (_a) {\n    var _this = this;\n    var appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n      authenticationType = _a.authenticationType,\n      apiKey = _a.apiKey,\n      region = _a.region;\n    if (this.socketStatus === SOCKET_STATUS.READY) {\n      return;\n    }\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var protocol, discoverableEndpoint, payloadString, headerString, _a, _b, headerQs, payloadQs, awsRealTimeUrl, err_3;\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              this.promiseArray.push({\n                res: res,\n                rej: rej\n              });\n              if (!(this.socketStatus === SOCKET_STATUS.CLOSED)) return [3 /*break*/, 5];\n              _c.label = 1;\n            case 1:\n              _c.trys.push([1, 4,, 5]);\n              this.socketStatus = SOCKET_STATUS.CONNECTING;\n              protocol = this.isSSLEnabled ? 'wss://' : 'ws://';\n              discoverableEndpoint = appSyncGraphqlEndpoint.replace('https://', protocol).replace('http://', protocol).replace('appsync-api', 'appsync-realtime-api').replace('gogi-beta', 'grt-beta');\n              payloadString = '{}';\n              _b = (_a = JSON).stringify;\n              return [4 /*yield*/, this._awsRealTimeHeaderBasedAuth({\n                authenticationType: authenticationType,\n                payload: payloadString,\n                canonicalUri: '/connect',\n                apiKey: apiKey,\n                appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n                region: region\n              })];\n            case 2:\n              headerString = _b.apply(_a, [_c.sent()]);\n              headerQs = Buffer.from(headerString).toString('base64');\n              payloadQs = Buffer.from(payloadString).toString('base64');\n              awsRealTimeUrl = discoverableEndpoint + \"?header=\" + headerQs + \"&payload=\" + payloadQs;\n              return [4 /*yield*/, this._initializeRetryableHandshake({\n                awsRealTimeUrl: awsRealTimeUrl\n              })];\n            case 3:\n              _c.sent();\n              this.promiseArray.forEach(function (_a) {\n                var res = _a.res;\n                logger.debug('Notifying connection successful');\n                res();\n              });\n              this.socketStatus = SOCKET_STATUS.READY;\n              this.promiseArray = [];\n              return [3 /*break*/, 5];\n            case 4:\n              err_3 = _c.sent();\n              this.promiseArray.forEach(function (_a) {\n                var rej = _a.rej;\n                return rej(err_3);\n              });\n              this.promiseArray = [];\n              if (this.awsRealTimeSocket && this.awsRealTimeSocket.readyState === WebSocket.OPEN) {\n                this.awsRealTimeSocket.close(3001);\n              }\n              this.awsRealTimeSocket = null;\n              this.socketStatus = SOCKET_STATUS.CLOSED;\n              return [3 /*break*/, 5];\n            case 5:\n              return [2 /*return*/];\n          }\n        });\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._initializeRetryableHandshake = function (_a) {\n    var awsRealTimeUrl = _a.awsRealTimeUrl;\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            logger.debug(\"Initializaling retryable Handshake\");\n            return [4 /*yield*/, jitteredExponentialRetry(this._initializeHandshake.bind(this), [{\n              awsRealTimeUrl: awsRealTimeUrl\n            }], MAX_DELAY_MS)];\n          case 1:\n            _b.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._initializeHandshake = function (_a) {\n    var awsRealTimeUrl = _a.awsRealTimeUrl;\n    return __awaiter(this, void 0, void 0, function () {\n      var err_4, errorType, errorCode;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            logger.debug(\"Initializing handshake \" + awsRealTimeUrl);\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 4,, 5]);\n            return [4 /*yield*/, function () {\n              return new Promise(function (res, rej) {\n                var newSocket = new WebSocket(awsRealTimeUrl, 'graphql-ws');\n                newSocket.onerror = function () {\n                  logger.debug(\"WebSocket connection error\");\n                };\n                newSocket.onclose = function () {\n                  rej(new Error('Connection handshake error'));\n                };\n                newSocket.onopen = function () {\n                  _this.awsRealTimeSocket = newSocket;\n                  return res();\n                };\n              });\n            }()];\n          case 2:\n            _b.sent();\n            // Step 2: wait for ack from AWS AppSyncReaTime after sending init\n            return [4 /*yield*/, function () {\n              return new Promise(function (res, rej) {\n                var ackOk = false;\n                _this.awsRealTimeSocket.onerror = function (error) {\n                  logger.debug(\"WebSocket error \" + JSON.stringify(error));\n                };\n                _this.awsRealTimeSocket.onclose = function (event) {\n                  logger.debug(\"WebSocket closed \" + event.reason);\n                  rej(new Error(JSON.stringify(event)));\n                };\n                _this.awsRealTimeSocket.onmessage = function (message) {\n                  logger.debug(\"subscription message from AWS AppSyncRealTime: \" + message.data + \" \");\n                  var data = JSON.parse(message.data);\n                  var type = data.type,\n                    _a = data.payload,\n                    _b = (_a === void 0 ? {} : _a).connectionTimeoutMs,\n                    connectionTimeoutMs = _b === void 0 ? DEFAULT_KEEP_ALIVE_TIMEOUT : _b;\n                  if (type === MESSAGE_TYPES.GQL_CONNECTION_ACK) {\n                    ackOk = true;\n                    _this.keepAliveTimeout = connectionTimeoutMs;\n                    _this.awsRealTimeSocket.onmessage = _this._handleIncomingSubscriptionMessage.bind(_this);\n                    _this.awsRealTimeSocket.onerror = function (err) {\n                      logger.debug(err);\n                      _this._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n                    };\n                    _this.awsRealTimeSocket.onclose = function (event) {\n                      logger.debug(\"WebSocket closed \" + event.reason);\n                      _this._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n                    };\n                    res('Cool, connected to AWS AppSyncRealTime');\n                    return;\n                  }\n                  if (type === MESSAGE_TYPES.GQL_CONNECTION_ERROR) {\n                    var _c = data.payload,\n                      _d = (_c === void 0 ? {} : _c).errors,\n                      _e = __read(_d === void 0 ? [] : _d, 1),\n                      _f = _e[0],\n                      _g = _f === void 0 ? {} : _f,\n                      _h = _g.errorType,\n                      errorType = _h === void 0 ? '' : _h,\n                      _j = _g.errorCode,\n                      errorCode = _j === void 0 ? 0 : _j;\n                    rej({\n                      errorType: errorType,\n                      errorCode: errorCode\n                    });\n                  }\n                };\n                var gqlInit = {\n                  type: MESSAGE_TYPES.GQL_CONNECTION_INIT\n                };\n                _this.awsRealTimeSocket.send(JSON.stringify(gqlInit));\n                function checkAckOk() {\n                  if (!ackOk) {\n                    rej(new Error(\"Connection timeout: ack from AWSRealTime was not received on \" + CONNECTION_INIT_TIMEOUT + \" ms\"));\n                  }\n                }\n                setTimeout(checkAckOk.bind(_this), CONNECTION_INIT_TIMEOUT);\n              });\n            }()];\n          case 3:\n            // Step 2: wait for ack from AWS AppSyncReaTime after sending init\n            _b.sent();\n            return [3 /*break*/, 5];\n          case 4:\n            err_4 = _b.sent();\n            errorType = err_4.errorType, errorCode = err_4.errorCode;\n            if (NON_RETRYABLE_CODES.includes(errorCode)) {\n              throw new NonRetryableError(errorType);\n            } else if (errorType) {\n              throw new Error(errorType);\n            } else {\n              throw err_4;\n            }\n            return [3 /*break*/, 5];\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeHeaderBasedAuth = function (_a) {\n    var authenticationType = _a.authenticationType,\n      payload = _a.payload,\n      canonicalUri = _a.canonicalUri,\n      appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n      apiKey = _a.apiKey,\n      region = _a.region;\n    return __awaiter(this, void 0, void 0, function () {\n      var headerHandler, handler, host, result;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            headerHandler = {\n              API_KEY: this._awsRealTimeApiKeyHeader.bind(this),\n              AWS_IAM: this._awsRealTimeIAMHeader.bind(this),\n              OPENID_CONNECT: this._awsRealTimeOPENIDHeader.bind(this),\n              AMAZON_COGNITO_USER_POOLS: this._awsRealTimeCUPHeader.bind(this)\n            };\n            handler = headerHandler[authenticationType];\n            if (typeof handler !== 'function') {\n              logger.debug(\"Authentication type \" + authenticationType + \" not supported\");\n              return [2 /*return*/, ''];\n            }\n            host = url.parse(appSyncGraphqlEndpoint).host;\n            return [4 /*yield*/, handler({\n              payload: payload,\n              canonicalUri: canonicalUri,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              apiKey: apiKey,\n              region: region,\n              host: host\n            })];\n          case 1:\n            result = _b.sent();\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeCUPHeader = function (_a) {\n    var host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var session;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, Auth.currentSession()];\n          case 1:\n            session = _b.sent();\n            return [2 /*return*/, {\n              Authorization: session.getAccessToken().getJwtToken(),\n              host: host\n            }];\n        }\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeOPENIDHeader = function (_a) {\n    var host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var token, federatedInfo, currentUser;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, Cache.getItem('federatedInfo')];\n          case 1:\n            federatedInfo = _b.sent();\n            if (!federatedInfo) return [3 /*break*/, 2];\n            token = federatedInfo.token;\n            return [3 /*break*/, 4];\n          case 2:\n            return [4 /*yield*/, Auth.currentAuthenticatedUser()];\n          case 3:\n            currentUser = _b.sent();\n            if (currentUser) {\n              token = currentUser.token;\n            }\n            _b.label = 4;\n          case 4:\n            if (!token) {\n              throw new Error('No federated jwt');\n            }\n            return [2 /*return*/, {\n              Authorization: token,\n              host: host\n            }];\n        }\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeApiKeyHeader = function (_a) {\n    var apiKey = _a.apiKey,\n      host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var dt, dtStr;\n      return __generator(this, function (_b) {\n        dt = new Date();\n        dtStr = dt.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n        return [2 /*return*/, {\n          host: host,\n          'x-amz-date': dtStr,\n          'x-api-key': apiKey\n        }];\n      });\n    });\n  };\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeIAMHeader = function (_a) {\n    var payload = _a.payload,\n      canonicalUri = _a.canonicalUri,\n      appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n      region = _a.region;\n    return __awaiter(this, void 0, void 0, function () {\n      var endpointInfo, credentialsOK, creds, request, signed_params;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            endpointInfo = {\n              region: region,\n              service: 'appsync'\n            };\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _b.sent();\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n            return [4 /*yield*/, Credentials.get().then(function (credentials) {\n              return {\n                secret_key: credentials.secretAccessKey,\n                access_key: credentials.accessKeyId,\n                session_token: credentials.sessionToken\n              };\n            })];\n          case 2:\n            creds = _b.sent();\n            request = {\n              url: \"\" + appSyncGraphqlEndpoint + canonicalUri,\n              data: payload,\n              method: 'POST',\n              headers: __assign({}, AWS_APPSYNC_REALTIME_HEADERS)\n            };\n            signed_params = Signer.sign(request, creds, endpointInfo);\n            return [2 /*return*/, signed_params.headers];\n        }\n      });\n    });\n  };\n  /**\n   * @private\n   */\n  AWSAppSyncRealTimeProvider.prototype._ensureCredentials = function () {\n    return Credentials.get().then(function (credentials) {\n      if (!credentials) return false;\n      var cred = Credentials.shear(credentials);\n      logger.debug('set credentials for AWSAppSyncRealTimeProvider', cred);\n      return true;\n    }).catch(function (err) {\n      logger.warn('ensure credentials error', err);\n      return false;\n    });\n  };\n  return AWSAppSyncRealTimeProvider;\n}(AbstractPubSubProvider);\nexport { AWSAppSyncRealTimeProvider };","map":{"version":3,"names":["Observable","GraphQLError","url","v4","uuid","Buffer","Logger","Credentials","Signer","Hub","Constants","USER_AGENT_HEADER","jitteredExponentialRetry","NonRetryableError","Cache","Auth","AbstractPubSubProvider","CONTROL_MSG","logger","AMPLIFY_SYMBOL","Symbol","for","dispatchApiEvent","event","data","message","dispatch","MAX_DELAY_MS","NON_RETRYABLE_CODES","MESSAGE_TYPES","SUBSCRIPTION_STATUS","SOCKET_STATUS","AWS_APPSYNC_REALTIME_HEADERS","accept","CONNECTION_INIT_TIMEOUT","START_ACK_TIMEOUT","DEFAULT_KEEP_ALIVE_TIMEOUT","AWSAppSyncRealTimeProvider","_super","__extends","_this","apply","arguments","socketStatus","CLOSED","keepAliveTimeout","subscriptionObserverMap","Map","promiseArray","prototype","getProviderName","newClient","Error","publish","_topics","_msg","_options","subscribe","options","appSyncGraphqlEndpoint","observer","error","errors","complete","subscriptionId_1","_startSubscriptionWithAWSAppSyncRealTime","subscriptionId","catch","err","REALTIME_SUBSCRIPTION_INIT_ERROR","__awaiter","_waitForSubscriptionToBeConnected","_a","sent","subscriptionState","get","CONNECTED","_sendUnsubscriptionMessage","debug","err_1","_removeSubscriptionObserver","Object","defineProperty","aws_appsync_dangerously_connect_to_http_endpoint_for_testing","authenticationType","query","variables","apiKey","region","_b","graphql_headers","_c","additionalHeaders","PENDING","set","startAckTimeoutId","dataString","JSON","stringify","_awsRealTimeHeaderBasedAuth","payload","canonicalUri","_j","headerObj","__assign","_e","concat","_h","userAgent","subscriptionMessage","id","extensions","authorization","type","GQL_START","stringToAWSRealTime","_initializeWebSocketConnection","err_2","_f","CONNECTION_FAILED","subscriptionFailedCallback_1","subscriptionFailedCallback","_g","subscriptionReadyCallback","setTimeout","_timeoutStartSubscriptionAck","call","awsRealTimeSocket","send","Promise","res","rej","readyState","WebSocket","OPEN","READY","unsubscribeMessage","GQL_STOP","delete","_closeSocketIfRequired","bind","size","bufferedAmount","clearTimeout","keepAliveTimeoutId","tempSocket","onclose","undefined","onerror","close","_handleIncomingSubscriptionMessage","parse","_d","GQL_DATA","next","GQL_START_ACK","SUBSCRIPTION_ACK","GQL_CONNECTION_KEEP_ALIVE","_errorDisconnect","TIMEOUT_DISCONNECT","GQL_ERROR","FAILED","msg","forEach","closed","clear","push","CONNECTING","protocol","isSSLEnabled","discoverableEndpoint","replace","payloadString","headerString","headerQs","from","toString","payloadQs","awsRealTimeUrl","_initializeRetryableHandshake","err_3","_initializeHandshake","newSocket","onopen","ackOk","reason","onmessage","connectionTimeoutMs","GQL_CONNECTION_ACK","CONNECTION_CLOSED","GQL_CONNECTION_ERROR","__read","errorType","errorCode","gqlInit","GQL_CONNECTION_INIT","checkAckOk","err_4","includes","headerHandler","API_KEY","_awsRealTimeApiKeyHeader","AWS_IAM","_awsRealTimeIAMHeader","OPENID_CONNECT","_awsRealTimeOPENIDHeader","AMAZON_COGNITO_USER_POOLS","_awsRealTimeCUPHeader","handler","host","result","currentSession","session","Authorization","getAccessToken","getJwtToken","getItem","federatedInfo","token","currentAuthenticatedUser","currentUser","dt","Date","dtStr","toISOString","endpointInfo","service","_ensureCredentials","credentialsOK","then","credentials","secret_key","secretAccessKey","access_key","accessKeyId","session_token","sessionToken","creds","request","method","headers","signed_params","sign","cred","shear","warn"],"sources":["/Users/ericli/node_modules/@aws-amplify/api-graphql/node_modules/@aws-amplify/pubsub/src/Providers/AWSAppSyncRealTimeProvider.ts"],"sourcesContent":["/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport Observable, { ZenObservable } from 'zen-observable-ts';\nimport { GraphQLError } from 'graphql';\nimport * as url from 'url';\nimport { v4 as uuid } from 'uuid';\nimport { Buffer } from 'buffer';\nimport { ProvidertOptions } from '../types';\nimport {\n\tLogger,\n\tCredentials,\n\tSigner,\n\tHub,\n\tConstants,\n\tUSER_AGENT_HEADER,\n\tjitteredExponentialRetry,\n\tNonRetryableError,\n} from '@aws-amplify/core';\nimport Cache from '@aws-amplify/cache';\nimport Auth from '@aws-amplify/auth';\nimport { AbstractPubSubProvider } from './PubSubProvider';\nimport { CONTROL_MSG } from '../index';\n\nconst logger = new Logger('AWSAppSyncRealTimeProvider');\n\nconst AMPLIFY_SYMBOL = (typeof Symbol !== 'undefined' &&\ntypeof Symbol.for === 'function'\n\t? Symbol.for('amplify_default')\n\t: '@@amplify_default') as Symbol;\n\nconst dispatchApiEvent = (event: string, data: any, message: string) => {\n\tHub.dispatch('api', { event, data, message }, 'PubSub', AMPLIFY_SYMBOL);\n};\n\nconst MAX_DELAY_MS = 5000;\n\nconst NON_RETRYABLE_CODES = [400, 401, 403];\n\ntype ObserverQuery = {\n\tobserver: ZenObservable.SubscriptionObserver<any>;\n\tquery: string;\n\tvariables: object;\n\tsubscriptionState: SUBSCRIPTION_STATUS;\n\tsubscriptionReadyCallback?: Function;\n\tsubscriptionFailedCallback?: Function;\n\tstartAckTimeoutId?;\n};\n\nenum MESSAGE_TYPES {\n\t/**\n\t * Client -> Server message.\n\t * This message type is the first message after handshake and this will initialize AWS AppSync RealTime communication\n\t */\n\tGQL_CONNECTION_INIT = 'connection_init',\n\t/**\n\t * Server -> Client message\n\t * This message type is in case there is an issue with AWS AppSync RealTime when establishing connection\n\t */\n\tGQL_CONNECTION_ERROR = 'connection_error',\n\t/**\n\t * Server -> Client message.\n\t * This message type is for the ack response from AWS AppSync RealTime for GQL_CONNECTION_INIT message\n\t */\n\tGQL_CONNECTION_ACK = 'connection_ack',\n\t/**\n\t * Client -> Server message.\n\t * This message type is for register subscriptions with AWS AppSync RealTime\n\t */\n\tGQL_START = 'start',\n\t/**\n\t * Server -> Client message.\n\t * This message type is for the ack response from AWS AppSync RealTime for GQL_START message\n\t */\n\tGQL_START_ACK = 'start_ack',\n\t/**\n\t * Server -> Client message.\n\t * This message type is for subscription message from AWS AppSync RealTime\n\t */\n\tGQL_DATA = 'data',\n\t/**\n\t * Server -> Client message.\n\t * This message type helps the client to know is still receiving messages from AWS AppSync RealTime\n\t */\n\tGQL_CONNECTION_KEEP_ALIVE = 'ka',\n\t/**\n\t * Client -> Server message.\n\t * This message type is for unregister subscriptions with AWS AppSync RealTime\n\t */\n\tGQL_STOP = 'stop',\n\t/**\n\t * Server -> Client message.\n\t * This message type is for the ack response from AWS AppSync RealTime for GQL_STOP message\n\t */\n\tGQL_COMPLETE = 'complete',\n\t/**\n\t * Server -> Client message.\n\t * This message type is for sending error messages from AWS AppSync RealTime to the client\n\t */\n\tGQL_ERROR = 'error', // Server -> Client\n}\n\nenum SUBSCRIPTION_STATUS {\n\tPENDING,\n\tCONNECTED,\n\tFAILED,\n}\n\nenum SOCKET_STATUS {\n\tCLOSED,\n\tREADY,\n\tCONNECTING,\n}\n\nconst AWS_APPSYNC_REALTIME_HEADERS = {\n\taccept: 'application/json, text/javascript',\n\t'content-encoding': 'amz-1.0',\n\t'content-type': 'application/json; charset=UTF-8',\n};\n\n/**\n * Time in milleseconds to wait for GQL_CONNECTION_INIT message\n */\nconst CONNECTION_INIT_TIMEOUT = 15000;\n\n/**\n * Time in milleseconds to wait for GQL_START_ACK message\n */\nconst START_ACK_TIMEOUT = 15000;\n\n/**\n * Default Time in milleseconds to wait for GQL_CONNECTION_KEEP_ALIVE message\n */\nconst DEFAULT_KEEP_ALIVE_TIMEOUT = 5 * 60 * 1000;\n\nexport class AWSAppSyncRealTimeProvider extends AbstractPubSubProvider {\n\tprivate awsRealTimeSocket: WebSocket;\n\tprivate socketStatus: SOCKET_STATUS = SOCKET_STATUS.CLOSED;\n\tprivate keepAliveTimeoutId;\n\tprivate keepAliveTimeout = DEFAULT_KEEP_ALIVE_TIMEOUT;\n\tprivate subscriptionObserverMap: Map<string, ObserverQuery> = new Map();\n\tprivate promiseArray: Array<{ res: Function; rej: Function }> = [];\n\n\tgetProviderName() {\n\t\treturn 'AWSAppSyncRealTimeProvider';\n\t}\n\n\tnewClient(): Promise<any> {\n\t\tthrow new Error('Not used here');\n\t}\n\n\tpublic async publish(_topics: string[] | string, _msg: any, _options?: any) {\n\t\tthrow new Error('Operation not supported');\n\t}\n\n\tsubscribe(\n\t\t_topics: string[] | string,\n\t\toptions?: ProvidertOptions\n\t): Observable<any> {\n\t\tconst { appSyncGraphqlEndpoint } = options;\n\n\t\treturn new Observable(observer => {\n\t\t\tif (!appSyncGraphqlEndpoint) {\n\t\t\t\tobserver.error({\n\t\t\t\t\terrors: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...new GraphQLError(\n\t\t\t\t\t\t\t\t`Subscribe only available for AWS AppSync endpoint`\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t});\n\t\t\t\tobserver.complete();\n\t\t\t} else {\n\t\t\t\tconst subscriptionId = uuid();\n\t\t\t\tthis._startSubscriptionWithAWSAppSyncRealTime({\n\t\t\t\t\toptions,\n\t\t\t\t\tobserver,\n\t\t\t\t\tsubscriptionId,\n\t\t\t\t}).catch(err => {\n\t\t\t\t\tobserver.error({\n\t\t\t\t\t\terrors: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t...new GraphQLError(\n\t\t\t\t\t\t\t\t\t`${CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR}: ${err}`\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t});\n\t\t\t\t\tobserver.complete();\n\t\t\t\t});\n\n\t\t\t\treturn async () => {\n\t\t\t\t\t// Cleanup after unsubscribing or observer.complete was called after _startSubscriptionWithAWSAppSyncRealTime\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// Waiting that subscription has been connected before trying to unsubscribe\n\t\t\t\t\t\tawait this._waitForSubscriptionToBeConnected(subscriptionId);\n\n\t\t\t\t\t\tconst { subscriptionState } =\n\t\t\t\t\t\t\tthis.subscriptionObserverMap.get(subscriptionId) || {};\n\n\t\t\t\t\t\tif (!subscriptionState) {\n\t\t\t\t\t\t\t// subscription already unsubscribed\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (subscriptionState === SUBSCRIPTION_STATUS.CONNECTED) {\n\t\t\t\t\t\t\tthis._sendUnsubscriptionMessage(subscriptionId);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow new Error('Subscription never connected');\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tlogger.debug(`Error while unsubscribing ${err}`);\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tthis._removeSubscriptionObserver(subscriptionId);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected get isSSLEnabled() {\n\t\treturn !this.options\n\t\t\t.aws_appsync_dangerously_connect_to_http_endpoint_for_testing;\n\t}\n\tprivate async _startSubscriptionWithAWSAppSyncRealTime({\n\t\toptions,\n\t\tobserver,\n\t\tsubscriptionId,\n\t}) {\n\t\tconst {\n\t\t\tappSyncGraphqlEndpoint,\n\t\t\tauthenticationType,\n\t\t\tquery,\n\t\t\tvariables,\n\t\t\tapiKey,\n\t\t\tregion,\n\t\t\tgraphql_headers = () => ({}),\n\t\t\tadditionalHeaders = {},\n\t\t} = options;\n\n\t\tconst subscriptionState: SUBSCRIPTION_STATUS = SUBSCRIPTION_STATUS.PENDING;\n\t\tconst data = {\n\t\t\tquery,\n\t\t\tvariables,\n\t\t};\n\t\t// Having a subscription id map will make it simple to forward messages received\n\t\tthis.subscriptionObserverMap.set(subscriptionId, {\n\t\t\tobserver,\n\t\t\tquery,\n\t\t\tvariables,\n\t\t\tsubscriptionState,\n\t\t\tstartAckTimeoutId: null,\n\t\t});\n\n\t\t// Preparing payload for subscription message\n\n\t\tconst dataString = JSON.stringify(data);\n\t\tconst headerObj = {\n\t\t\t...(await this._awsRealTimeHeaderBasedAuth({\n\t\t\t\tapiKey,\n\t\t\t\tappSyncGraphqlEndpoint,\n\t\t\t\tauthenticationType,\n\t\t\t\tpayload: dataString,\n\t\t\t\tcanonicalUri: '',\n\t\t\t\tregion,\n\t\t\t})),\n\t\t\t...(await graphql_headers()),\n\t\t\t...additionalHeaders,\n\t\t\t[USER_AGENT_HEADER]: Constants.userAgent,\n\t\t};\n\n\t\tconst subscriptionMessage = {\n\t\t\tid: subscriptionId,\n\t\t\tpayload: {\n\t\t\t\tdata: dataString,\n\t\t\t\textensions: {\n\t\t\t\t\tauthorization: {\n\t\t\t\t\t\t...headerObj,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\ttype: MESSAGE_TYPES.GQL_START,\n\t\t};\n\n\t\tconst stringToAWSRealTime = JSON.stringify(subscriptionMessage);\n\n\t\ttry {\n\t\t\tawait this._initializeWebSocketConnection({\n\t\t\t\tapiKey,\n\t\t\t\tappSyncGraphqlEndpoint,\n\t\t\t\tauthenticationType,\n\t\t\t\tregion,\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tlogger.debug({ err });\n\t\t\tconst { message = '' } = err;\n\t\t\tobserver.error({\n\t\t\t\terrors: [\n\t\t\t\t\t{\n\t\t\t\t\t\t...new GraphQLError(`${CONTROL_MSG.CONNECTION_FAILED}: ${message}`),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t\tobserver.complete();\n\n\t\t\tconst { subscriptionFailedCallback } =\n\t\t\t\tthis.subscriptionObserverMap.get(subscriptionId) || {};\n\n\t\t\t// Notify concurrent unsubscription\n\t\t\tif (typeof subscriptionFailedCallback === 'function') {\n\t\t\t\tsubscriptionFailedCallback();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// Potential race condition can occur when unsubscribe is called during _initializeWebSocketConnection.\n\t\t// E.g.unsubscribe gets invoked prior to finishing WebSocket handshake or START_ACK.\n\t\t// Both subscriptionFailedCallback and subscriptionReadyCallback are used to synchronized this.\n\n\t\tconst {\n\t\t\tsubscriptionFailedCallback,\n\t\t\tsubscriptionReadyCallback,\n\t\t} = this.subscriptionObserverMap.get(subscriptionId);\n\n\t\t// This must be done before sending the message in order to be listening immediately\n\t\tthis.subscriptionObserverMap.set(subscriptionId, {\n\t\t\tobserver,\n\t\t\tsubscriptionState,\n\t\t\tvariables,\n\t\t\tquery,\n\t\t\tsubscriptionReadyCallback,\n\t\t\tsubscriptionFailedCallback,\n\t\t\tstartAckTimeoutId: setTimeout(() => {\n\t\t\t\tthis._timeoutStartSubscriptionAck.call(this, subscriptionId);\n\t\t\t}, START_ACK_TIMEOUT),\n\t\t});\n\t\tif (this.awsRealTimeSocket) {\n\t\t\tthis.awsRealTimeSocket.send(stringToAWSRealTime);\n\t\t}\n\t}\n\n\t// Waiting that subscription has been connected before trying to unsubscribe\n\tprivate async _waitForSubscriptionToBeConnected(subscriptionId) {\n\t\tconst { subscriptionState } = this.subscriptionObserverMap.get(\n\t\t\tsubscriptionId\n\t\t);\n\t\t// This in case unsubscribe is invoked before sending start subscription message\n\t\tif (subscriptionState === SUBSCRIPTION_STATUS.PENDING) {\n\t\t\treturn new Promise((res, rej) => {\n\t\t\t\tconst {\n\t\t\t\t\tobserver,\n\t\t\t\t\tsubscriptionState,\n\t\t\t\t\tvariables,\n\t\t\t\t\tquery,\n\t\t\t\t} = this.subscriptionObserverMap.get(subscriptionId);\n\t\t\t\tthis.subscriptionObserverMap.set(subscriptionId, {\n\t\t\t\t\tobserver,\n\t\t\t\t\tsubscriptionState,\n\t\t\t\t\tvariables,\n\t\t\t\t\tquery,\n\t\t\t\t\tsubscriptionReadyCallback: res,\n\t\t\t\t\tsubscriptionFailedCallback: rej,\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate _sendUnsubscriptionMessage(subscriptionId) {\n\t\ttry {\n\t\t\tif (\n\t\t\t\tthis.awsRealTimeSocket &&\n\t\t\t\tthis.awsRealTimeSocket.readyState === WebSocket.OPEN &&\n\t\t\t\tthis.socketStatus === SOCKET_STATUS.READY\n\t\t\t) {\n\t\t\t\t// Preparing unsubscribe message to stop receiving messages for that subscription\n\t\t\t\tconst unsubscribeMessage = {\n\t\t\t\t\tid: subscriptionId,\n\t\t\t\t\ttype: MESSAGE_TYPES.GQL_STOP,\n\t\t\t\t};\n\t\t\t\tconst stringToAWSRealTime = JSON.stringify(unsubscribeMessage);\n\t\t\t\tthis.awsRealTimeSocket.send(stringToAWSRealTime);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\t// If GQL_STOP is not sent because of disconnection issue, then there is nothing the client can do\n\t\t\tlogger.debug({ err });\n\t\t}\n\t}\n\n\tprivate _removeSubscriptionObserver(subscriptionId) {\n\t\tthis.subscriptionObserverMap.delete(subscriptionId);\n\n\t\t// Verifying 1000ms after removing subscription in case there are new subscription unmount/mount\n\t\tsetTimeout(this._closeSocketIfRequired.bind(this), 1000);\n\t}\n\n\tprivate _closeSocketIfRequired() {\n\t\tif (this.subscriptionObserverMap.size > 0) {\n\t\t\t// Active subscriptions on the WebSocket\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.awsRealTimeSocket) {\n\t\t\tthis.socketStatus = SOCKET_STATUS.CLOSED;\n\t\t\treturn;\n\t\t}\n\t\tif (this.awsRealTimeSocket.bufferedAmount > 0) {\n\t\t\t// Still data on the WebSocket\n\t\t\tsetTimeout(this._closeSocketIfRequired.bind(this), 1000);\n\t\t} else {\n\t\t\tlogger.debug('closing WebSocket...');\n\t\t\tclearTimeout(this.keepAliveTimeoutId);\n\t\t\tconst tempSocket = this.awsRealTimeSocket;\n\t\t\t// Cleaning callbacks to avoid race condition, socket still exists\n\t\t\ttempSocket.onclose = undefined;\n\t\t\ttempSocket.onerror = undefined;\n\t\t\ttempSocket.close(1000);\n\t\t\tthis.awsRealTimeSocket = null;\n\t\t\tthis.socketStatus = SOCKET_STATUS.CLOSED;\n\t\t}\n\t}\n\n\tprivate _handleIncomingSubscriptionMessage(message: MessageEvent) {\n\t\tlogger.debug(\n\t\t\t`subscription message from AWS AppSync RealTime: ${message.data}`\n\t\t);\n\t\tconst { id = '', payload, type } = JSON.parse(message.data);\n\t\tconst {\n\t\t\tobserver = null,\n\t\t\tquery = '',\n\t\t\tvariables = {},\n\t\t\tstartAckTimeoutId,\n\t\t\tsubscriptionReadyCallback,\n\t\t\tsubscriptionFailedCallback,\n\t\t} = this.subscriptionObserverMap.get(id) || {};\n\n\t\tlogger.debug({ id, observer, query, variables });\n\n\t\tif (type === MESSAGE_TYPES.GQL_DATA && payload && payload.data) {\n\t\t\tif (observer) {\n\t\t\t\tobserver.next(payload);\n\t\t\t} else {\n\t\t\t\tlogger.debug(`observer not found for id: ${id}`);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif (type === MESSAGE_TYPES.GQL_START_ACK) {\n\t\t\tlogger.debug(\n\t\t\t\t`subscription ready for ${JSON.stringify({ query, variables })}`\n\t\t\t);\n\t\t\tif (typeof subscriptionReadyCallback === 'function') {\n\t\t\t\tsubscriptionReadyCallback();\n\t\t\t}\n\t\t\tclearTimeout(startAckTimeoutId);\n\t\t\tdispatchApiEvent(\n\t\t\t\tCONTROL_MSG.SUBSCRIPTION_ACK,\n\t\t\t\t{ query, variables },\n\t\t\t\t'Connection established for subscription'\n\t\t\t);\n\t\t\tconst subscriptionState = SUBSCRIPTION_STATUS.CONNECTED;\n\t\t\tthis.subscriptionObserverMap.set(id, {\n\t\t\t\tobserver,\n\t\t\t\tquery,\n\t\t\t\tvariables,\n\t\t\t\tstartAckTimeoutId: null,\n\t\t\t\tsubscriptionState,\n\t\t\t\tsubscriptionReadyCallback,\n\t\t\t\tsubscriptionFailedCallback,\n\t\t\t});\n\n\t\t\t// TODO: emit event on hub but it requires to store the id first\n\t\t\treturn;\n\t\t}\n\n\t\tif (type === MESSAGE_TYPES.GQL_CONNECTION_KEEP_ALIVE) {\n\t\t\tclearTimeout(this.keepAliveTimeoutId);\n\t\t\tthis.keepAliveTimeoutId = setTimeout(\n\t\t\t\tthis._errorDisconnect.bind(this, CONTROL_MSG.TIMEOUT_DISCONNECT),\n\t\t\t\tthis.keepAliveTimeout\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tif (type === MESSAGE_TYPES.GQL_ERROR) {\n\t\t\tconst subscriptionState = SUBSCRIPTION_STATUS.FAILED;\n\t\t\tthis.subscriptionObserverMap.set(id, {\n\t\t\t\tobserver,\n\t\t\t\tquery,\n\t\t\t\tvariables,\n\t\t\t\tstartAckTimeoutId,\n\t\t\t\tsubscriptionReadyCallback,\n\t\t\t\tsubscriptionFailedCallback,\n\t\t\t\tsubscriptionState,\n\t\t\t});\n\n\t\t\tobserver.error({\n\t\t\t\terrors: [\n\t\t\t\t\t{\n\t\t\t\t\t\t...new GraphQLError(\n\t\t\t\t\t\t\t`${CONTROL_MSG.CONNECTION_FAILED}: ${JSON.stringify(payload)}`\n\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t\tclearTimeout(startAckTimeoutId);\n\n\t\t\tobserver.complete();\n\t\t\tif (typeof subscriptionFailedCallback === 'function') {\n\t\t\t\tsubscriptionFailedCallback();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _errorDisconnect(msg: string) {\n\t\tlogger.debug(`Disconnect error: ${msg}`);\n\t\tthis.subscriptionObserverMap.forEach(({ observer }) => {\n\t\t\tif (observer && !observer.closed) {\n\t\t\t\tobserver.error({\n\t\t\t\t\terrors: [{ ...new GraphQLError(msg) }],\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\tthis.subscriptionObserverMap.clear();\n\t\tif (this.awsRealTimeSocket) {\n\t\t\tthis.awsRealTimeSocket.close();\n\t\t}\n\n\t\tthis.socketStatus = SOCKET_STATUS.CLOSED;\n\t}\n\n\tprivate _timeoutStartSubscriptionAck(subscriptionId) {\n\t\tconst { observer, query, variables } =\n\t\t\tthis.subscriptionObserverMap.get(subscriptionId) || {};\n\t\tif (!observer) {\n\t\t\treturn;\n\t\t}\n\t\tthis.subscriptionObserverMap.set(subscriptionId, {\n\t\t\tobserver,\n\t\t\tquery,\n\t\t\tvariables,\n\t\t\tsubscriptionState: SUBSCRIPTION_STATUS.FAILED,\n\t\t});\n\n\t\tif (observer && !observer.closed) {\n\t\t\tobserver.error({\n\t\t\t\terrors: [\n\t\t\t\t\t{\n\t\t\t\t\t\t...new GraphQLError(\n\t\t\t\t\t\t\t`Subscription timeout ${JSON.stringify({ query, variables })}`\n\t\t\t\t\t\t),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t\t// Cleanup will be automatically executed\n\t\t\tobserver.complete();\n\t\t}\n\t\tlogger.debug(\n\t\t\t'timeoutStartSubscription',\n\t\t\tJSON.stringify({ query, variables })\n\t\t);\n\t}\n\n\tprivate _initializeWebSocketConnection({\n\t\tappSyncGraphqlEndpoint,\n\t\tauthenticationType,\n\t\tapiKey,\n\t\tregion,\n\t}) {\n\t\tif (this.socketStatus === SOCKET_STATUS.READY) {\n\t\t\treturn;\n\t\t}\n\t\treturn new Promise(async (res, rej) => {\n\t\t\tthis.promiseArray.push({ res, rej });\n\n\t\t\tif (this.socketStatus === SOCKET_STATUS.CLOSED) {\n\t\t\t\ttry {\n\t\t\t\t\tthis.socketStatus = SOCKET_STATUS.CONNECTING;\n\t\t\t\t\t// Creating websocket url with required query strings\n\t\t\t\t\tconst protocol = this.isSSLEnabled ? 'wss://' : 'ws://';\n\t\t\t\t\tconst discoverableEndpoint = appSyncGraphqlEndpoint\n\t\t\t\t\t\t.replace('https://', protocol)\n\t\t\t\t\t\t.replace('http://', protocol)\n\t\t\t\t\t\t.replace('appsync-api', 'appsync-realtime-api')\n\t\t\t\t\t\t.replace('gogi-beta', 'grt-beta');\n\n\t\t\t\t\tconst payloadString = '{}';\n\t\t\t\t\tconst headerString = JSON.stringify(\n\t\t\t\t\t\tawait this._awsRealTimeHeaderBasedAuth({\n\t\t\t\t\t\t\tauthenticationType,\n\t\t\t\t\t\t\tpayload: payloadString,\n\t\t\t\t\t\t\tcanonicalUri: '/connect',\n\t\t\t\t\t\t\tapiKey,\n\t\t\t\t\t\t\tappSyncGraphqlEndpoint,\n\t\t\t\t\t\t\tregion,\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t\tconst headerQs = Buffer.from(headerString).toString('base64');\n\n\t\t\t\t\tconst payloadQs = Buffer.from(payloadString).toString('base64');\n\t\t\t\t\tconst awsRealTimeUrl = `${discoverableEndpoint}?header=${headerQs}&payload=${payloadQs}`;\n\n\t\t\t\t\tawait this._initializeRetryableHandshake({ awsRealTimeUrl });\n\n\t\t\t\t\tthis.promiseArray.forEach(({ res }) => {\n\t\t\t\t\t\tlogger.debug('Notifying connection successful');\n\t\t\t\t\t\tres();\n\t\t\t\t\t});\n\t\t\t\t\tthis.socketStatus = SOCKET_STATUS.READY;\n\t\t\t\t\tthis.promiseArray = [];\n\t\t\t\t} catch (err) {\n\t\t\t\t\tthis.promiseArray.forEach(({ rej }) => rej(err));\n\t\t\t\t\tthis.promiseArray = [];\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis.awsRealTimeSocket &&\n\t\t\t\t\t\tthis.awsRealTimeSocket.readyState === WebSocket.OPEN\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.awsRealTimeSocket.close(3001);\n\t\t\t\t\t}\n\t\t\t\t\tthis.awsRealTimeSocket = null;\n\t\t\t\t\tthis.socketStatus = SOCKET_STATUS.CLOSED;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async _initializeRetryableHandshake({ awsRealTimeUrl }) {\n\t\tlogger.debug(`Initializaling retryable Handshake`);\n\t\tawait jitteredExponentialRetry(\n\t\t\tthis._initializeHandshake.bind(this),\n\t\t\t[{ awsRealTimeUrl }],\n\t\t\tMAX_DELAY_MS\n\t\t);\n\t}\n\n\tprivate async _initializeHandshake({ awsRealTimeUrl }) {\n\t\tlogger.debug(`Initializing handshake ${awsRealTimeUrl}`);\n\t\t// Because connecting the socket is async, is waiting until connection is open\n\t\t// Step 1: connect websocket\n\t\ttry {\n\t\t\tawait (() => {\n\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\tconst newSocket = new WebSocket(awsRealTimeUrl, 'graphql-ws');\n\t\t\t\t\tnewSocket.onerror = () => {\n\t\t\t\t\t\tlogger.debug(`WebSocket connection error`);\n\t\t\t\t\t};\n\t\t\t\t\tnewSocket.onclose = () => {\n\t\t\t\t\t\trej(new Error('Connection handshake error'));\n\t\t\t\t\t};\n\t\t\t\t\tnewSocket.onopen = () => {\n\t\t\t\t\t\tthis.awsRealTimeSocket = newSocket;\n\t\t\t\t\t\treturn res();\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t})();\n\n\t\t\t// Step 2: wait for ack from AWS AppSyncReaTime after sending init\n\t\t\tawait (() => {\n\t\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t\tlet ackOk = false;\n\t\t\t\t\tthis.awsRealTimeSocket.onerror = error => {\n\t\t\t\t\t\tlogger.debug(`WebSocket error ${JSON.stringify(error)}`);\n\t\t\t\t\t};\n\t\t\t\t\tthis.awsRealTimeSocket.onclose = event => {\n\t\t\t\t\t\tlogger.debug(`WebSocket closed ${event.reason}`);\n\t\t\t\t\t\trej(new Error(JSON.stringify(event)));\n\t\t\t\t\t};\n\n\t\t\t\t\tthis.awsRealTimeSocket.onmessage = (message: MessageEvent) => {\n\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t`subscription message from AWS AppSyncRealTime: ${message.data} `\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst data = JSON.parse(message.data);\n\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\tpayload: {\n\t\t\t\t\t\t\t\tconnectionTimeoutMs = DEFAULT_KEEP_ALIVE_TIMEOUT,\n\t\t\t\t\t\t\t} = {},\n\t\t\t\t\t\t} = data;\n\t\t\t\t\t\tif (type === MESSAGE_TYPES.GQL_CONNECTION_ACK) {\n\t\t\t\t\t\t\tackOk = true;\n\t\t\t\t\t\t\tthis.keepAliveTimeout = connectionTimeoutMs;\n\t\t\t\t\t\t\tthis.awsRealTimeSocket.onmessage = this._handleIncomingSubscriptionMessage.bind(\n\t\t\t\t\t\t\t\tthis\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tthis.awsRealTimeSocket.onerror = err => {\n\t\t\t\t\t\t\t\tlogger.debug(err);\n\t\t\t\t\t\t\t\tthis._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tthis.awsRealTimeSocket.onclose = event => {\n\t\t\t\t\t\t\t\tlogger.debug(`WebSocket closed ${event.reason}`);\n\t\t\t\t\t\t\t\tthis._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tres('Cool, connected to AWS AppSyncRealTime');\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (type === MESSAGE_TYPES.GQL_CONNECTION_ERROR) {\n\t\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\t\tpayload: {\n\t\t\t\t\t\t\t\t\terrors: [{ errorType = '', errorCode = 0 } = {}] = [],\n\t\t\t\t\t\t\t\t} = {},\n\t\t\t\t\t\t\t} = data;\n\n\t\t\t\t\t\t\trej({ errorType, errorCode });\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\tconst gqlInit = {\n\t\t\t\t\t\ttype: MESSAGE_TYPES.GQL_CONNECTION_INIT,\n\t\t\t\t\t};\n\t\t\t\t\tthis.awsRealTimeSocket.send(JSON.stringify(gqlInit));\n\n\t\t\t\t\tfunction checkAckOk() {\n\t\t\t\t\t\tif (!ackOk) {\n\t\t\t\t\t\t\trej(\n\t\t\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t\t\t`Connection timeout: ack from AWSRealTime was not received on ${CONNECTION_INIT_TIMEOUT} ms`\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tsetTimeout(checkAckOk.bind(this), CONNECTION_INIT_TIMEOUT);\n\t\t\t\t});\n\t\t\t})();\n\t\t} catch (err) {\n\t\t\tconst { errorType, errorCode } = err;\n\n\t\t\tif (NON_RETRYABLE_CODES.includes(errorCode)) {\n\t\t\t\tthrow new NonRetryableError(errorType);\n\t\t\t} else if (errorType) {\n\t\t\t\tthrow new Error(errorType);\n\t\t\t} else {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async _awsRealTimeHeaderBasedAuth({\n\t\tauthenticationType,\n\t\tpayload,\n\t\tcanonicalUri,\n\t\tappSyncGraphqlEndpoint,\n\t\tapiKey,\n\t\tregion,\n\t}): Promise<any> {\n\t\tconst headerHandler = {\n\t\t\tAPI_KEY: this._awsRealTimeApiKeyHeader.bind(this),\n\t\t\tAWS_IAM: this._awsRealTimeIAMHeader.bind(this),\n\t\t\tOPENID_CONNECT: this._awsRealTimeOPENIDHeader.bind(this),\n\t\t\tAMAZON_COGNITO_USER_POOLS: this._awsRealTimeCUPHeader.bind(this),\n\t\t};\n\n\t\tconst handler = headerHandler[authenticationType];\n\n\t\tif (typeof handler !== 'function') {\n\t\t\tlogger.debug(`Authentication type ${authenticationType} not supported`);\n\t\t\treturn '';\n\t\t}\n\n\t\tconst { host } = url.parse(appSyncGraphqlEndpoint);\n\n\t\tconst result = await handler({\n\t\t\tpayload,\n\t\t\tcanonicalUri,\n\t\t\tappSyncGraphqlEndpoint,\n\t\t\tapiKey,\n\t\t\tregion,\n\t\t\thost,\n\t\t});\n\n\t\treturn result;\n\t}\n\n\tprivate async _awsRealTimeCUPHeader({ host }) {\n\t\tconst session = await Auth.currentSession();\n\t\treturn {\n\t\t\tAuthorization: session.getAccessToken().getJwtToken(),\n\t\t\thost,\n\t\t};\n\t}\n\n\tprivate async _awsRealTimeOPENIDHeader({ host }) {\n\t\tlet token;\n\t\t// backwards compatibility\n\t\tconst federatedInfo = await Cache.getItem('federatedInfo');\n\t\tif (federatedInfo) {\n\t\t\ttoken = federatedInfo.token;\n\t\t} else {\n\t\t\tconst currentUser = await Auth.currentAuthenticatedUser();\n\t\t\tif (currentUser) {\n\t\t\t\ttoken = currentUser.token;\n\t\t\t}\n\t\t}\n\t\tif (!token) {\n\t\t\tthrow new Error('No federated jwt');\n\t\t}\n\t\treturn {\n\t\t\tAuthorization: token,\n\t\t\thost,\n\t\t};\n\t}\n\n\tprivate async _awsRealTimeApiKeyHeader({ apiKey, host }) {\n\t\tconst dt = new Date();\n\t\tconst dtStr = dt.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n\n\t\treturn {\n\t\t\thost,\n\t\t\t'x-amz-date': dtStr,\n\t\t\t'x-api-key': apiKey,\n\t\t};\n\t}\n\n\tprivate async _awsRealTimeIAMHeader({\n\t\tpayload,\n\t\tcanonicalUri,\n\t\tappSyncGraphqlEndpoint,\n\t\tregion,\n\t}) {\n\t\tconst endpointInfo = {\n\t\t\tregion,\n\t\t\tservice: 'appsync',\n\t\t};\n\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\tthrow new Error('No credentials');\n\t\t}\n\t\tconst creds = await Credentials.get().then(credentials => ({\n\t\t\tsecret_key: credentials.secretAccessKey,\n\t\t\taccess_key: credentials.accessKeyId,\n\t\t\tsession_token: credentials.sessionToken,\n\t\t}));\n\n\t\tconst request = {\n\t\t\turl: `${appSyncGraphqlEndpoint}${canonicalUri}`,\n\t\t\tdata: payload,\n\t\t\tmethod: 'POST',\n\t\t\theaders: { ...AWS_APPSYNC_REALTIME_HEADERS },\n\t\t};\n\n\t\tconst signed_params = Signer.sign(request, creds, endpointInfo);\n\t\treturn signed_params.headers;\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_ensureCredentials() {\n\t\treturn Credentials.get()\n\t\t\t.then(credentials => {\n\t\t\t\tif (!credentials) return false;\n\t\t\t\tconst cred = Credentials.shear(credentials);\n\t\t\t\tlogger.debug('set credentials for AWSAppSyncRealTimeProvider', cred);\n\n\t\t\t\treturn true;\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tlogger.warn('ensure credentials error', err);\n\t\t\t\treturn false;\n\t\t\t});\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;AAYA,OAAOA,UAA6B,MAAM,mBAAmB;AAC7D,SAASC,YAAY,QAAQ,SAAS;AACtC,OAAO,KAAKC,GAAG,MAAM,KAAK;AAC1B,SAASC,EAAE,IAAIC,IAAI,QAAQ,MAAM;AACjC,SAASC,MAAM,QAAQ,QAAQ;AAE/B,SACCC,MAAM,EACNC,WAAW,EACXC,MAAM,EACNC,GAAG,EACHC,SAAS,EACTC,iBAAiB,EACjBC,wBAAwB,EACxBC,iBAAiB,QACX,mBAAmB;AAC1B,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,IAAI,MAAM,mBAAmB;AACpC,SAASC,sBAAsB,QAAQ,kBAAkB;AACzD,SAASC,WAAW,QAAQ,UAAU;AAEtC,IAAMC,MAAM,GAAG,IAAIZ,MAAM,CAAC,4BAA4B,CAAC;AAEvD,IAAMa,cAAc,GAAI,OAAOC,MAAM,KAAK,WAAW,IACrD,OAAOA,MAAM,CAACC,GAAG,KAAK,UAAU,GAC7BD,MAAM,CAACC,GAAG,CAAC,iBAAiB,CAAC,GAC7B,mBAA8B;AAEjC,IAAMC,gBAAgB,GAAG,SAAAA,CAACC,KAAa,EAAEC,IAAS,EAAEC,OAAe;EAClEhB,GAAG,CAACiB,QAAQ,CAAC,KAAK,EAAE;IAAEH,KAAK,EAAAA,KAAA;IAAEC,IAAI,EAAAA,IAAA;IAAEC,OAAO,EAAAA;EAAA,CAAE,EAAE,QAAQ,EAAEN,cAAc,CAAC;AACxE,CAAC;AAED,IAAMQ,YAAY,GAAG,IAAI;AAEzB,IAAMC,mBAAmB,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;AAY3C,IAAKC,aAmDJ;AAnDD,WAAKA,aAAa;EACjB;;;;EAIAA,aAAA,2CAAuC;EACvC;;;;EAIAA,aAAA,6CAAyC;EACzC;;;;EAIAA,aAAA,yCAAqC;EACrC;;;;EAIAA,aAAA,uBAAmB;EACnB;;;;EAIAA,aAAA,+BAA2B;EAC3B;;;;EAIAA,aAAA,qBAAiB;EACjB;;;;EAIAA,aAAA,oCAAgC;EAChC;;;;EAIAA,aAAA,qBAAiB;EACjB;;;;EAIAA,aAAA,6BAAyB;EACzB;;;;EAIAA,aAAA,uBAAmB;AACpB,CAAC,EAnDIA,aAAa,KAAbA,aAAa;AAqDlB,IAAKC,mBAIJ;AAJD,WAAKA,mBAAmB;EACvBA,mBAAA,CAAAA,mBAAA,4BAAO;EACPA,mBAAA,CAAAA,mBAAA,gCAAS;EACTA,mBAAA,CAAAA,mBAAA,0BAAM;AACP,CAAC,EAJIA,mBAAmB,KAAnBA,mBAAmB;AAMxB,IAAKC,aAIJ;AAJD,WAAKA,aAAa;EACjBA,aAAA,CAAAA,aAAA,0BAAM;EACNA,aAAA,CAAAA,aAAA,wBAAK;EACLA,aAAA,CAAAA,aAAA,kCAAU;AACX,CAAC,EAJIA,aAAa,KAAbA,aAAa;AAMlB,IAAMC,4BAA4B,GAAG;EACpCC,MAAM,EAAE,mCAAmC;EAC3C,kBAAkB,EAAE,SAAS;EAC7B,cAAc,EAAE;CAChB;AAED;;;AAGA,IAAMC,uBAAuB,GAAG,KAAK;AAErC;;;AAGA,IAAMC,iBAAiB,GAAG,KAAK;AAE/B;;;AAGA,IAAMC,0BAA0B,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI;AAEhD,IAAAC,0BAAA,0BAAAC,MAAA;EAAgDC,SAAA,CAAAF,0BAAA,EAAAC,MAAA;EAAhD,SAAAD,2BAAA;IAAA,IAAAG,KAAA,GAAAF,MAAA,aAAAA,MAAA,CAAAG,KAAA,OAAAC,SAAA;IAESF,KAAA,CAAAG,YAAY,GAAkBZ,aAAa,CAACa,MAAM;IAElDJ,KAAA,CAAAK,gBAAgB,GAAGT,0BAA0B;IAC7CI,KAAA,CAAAM,uBAAuB,GAA+B,IAAIC,GAAG,EAAE;IAC/DP,KAAA,CAAAQ,YAAY,GAA4C,EAAE;;EAmtBnE;EAjtBCX,0BAAA,CAAAY,SAAA,CAAAC,eAAe,GAAf;IACC,OAAO,4BAA4B;EACpC,CAAC;EAEDb,0BAAA,CAAAY,SAAA,CAAAE,SAAS,GAAT;IACC,MAAM,IAAIC,KAAK,CAAC,eAAe,CAAC;EACjC,CAAC;EAEYf,0BAAA,CAAAY,SAAA,CAAAI,OAAO,GAApB,UAAqBC,OAA0B,EAAEC,IAAS,EAAEC,QAAc;;;QACzE,MAAM,IAAIJ,KAAK,CAAC,yBAAyB,CAAC;;;GAC1C;EAEDf,0BAAA,CAAAY,SAAA,CAAAQ,SAAS,GAAT,UACCH,OAA0B,EAC1BI,OAA0B;IAF3B,IAAAlB,KAAA;IAIS,IAAAmB,sBAAA,GAAAD,OAAA,CAAAC,sBAAsB;IAE9B,OAAO,IAAI3D,UAAU,CAAC,UAAA4D,QAAQ;MAC7B,IAAI,CAACD,sBAAsB,EAAE;QAC5BC,QAAQ,CAACC,KAAK,CAAC;UACdC,MAAM,EAAE,C,aAEH,IAAI7D,YAAY,CAClB,mDAAmD,CACnD;SAGH,CAAC;QACF2D,QAAQ,CAACG,QAAQ,EAAE;OACnB,MAAM;QACN,IAAMC,gBAAc,GAAG5D,IAAI,EAAE;QAC7BoC,KAAI,CAACyB,wCAAwC,CAAC;UAC7CP,OAAO,EAAAA,OAAA;UACPE,QAAQ,EAAAA,QAAA;UACRM,cAAc,EAAAF;SACd,CAAC,CAACG,KAAK,CAAC,UAAAC,GAAG;UACXR,QAAQ,CAACC,KAAK,CAAC;YACdC,MAAM,EAAE,C,aAEH,IAAI7D,YAAY,CACfgB,WAAW,CAACoD,gCAAgC,UAAKD,GAAK,CACzD;WAGH,CAAC;UACFR,QAAQ,CAACG,QAAQ,EAAE;QACpB,CAAC,CAAC;QAEF,OAAO;UAAA,OAAAO,SAAA,CAAA9B,KAAA;;;;;;kBAGL;kBACA,qBAAM,IAAI,CAAC+B,iCAAiC,CAACP,gBAAc,CAAC;;kBAD5D;kBACAQ,EAAA,CAAAC,IAAA,EAA4D;kBAEpDC,iBAAiB,GACxB,KAAI,CAAC5B,uBAAuB,CAAC6B,GAAG,CAACX,gBAAc,CAAC,IAAI,EAAE,EAAAU,iBAD9B;kBAGzB,IAAI,CAACA,iBAAiB,EAAE;oBACvB;oBACA;;;kBAGD,IAAIA,iBAAiB,KAAK5C,mBAAmB,CAAC8C,SAAS,EAAE;oBACxD,IAAI,CAACC,0BAA0B,CAACb,gBAAc,CAAC;mBAC/C,MAAM;oBACN,MAAM,IAAIZ,KAAK,CAAC,8BAA8B,CAAC;;;;;kBAGhDlC,MAAM,CAAC4D,KAAK,CAAC,+BAA6BC,KAAK,CAAC;;;kBAEhD,IAAI,CAACC,2BAA2B,CAAChB,gBAAc,CAAC;;;;;;;SAEjD;;IAEH,CAAC,CAAC;EACH,CAAC;;EAEDiB,MAAA,CAAAC,cAAA,CAAc7C,0BAAA,CAAAY,SAAA,gBAAY;SAA1B,SAAA0B,CAAA;MACC,OAAO,CAAC,IAAI,CAACjB,OAAO,CAClByB,4DAA4D;IAC/D,CAAC;;;;EACa9C,0BAAA,CAAAY,SAAA,CAAAgB,wCAAwC,GAAtD,UAAuDO,EAItD;QAHAd,OAAA,GAAAc,EAAA,CAAAd,OAAO;MACPE,QAAA,GAAAY,EAAA,CAAAZ,QAAQ;MACRM,cAAA,GAAAM,EAAA,CAAAN,cAAc;;;;;;;;YAGbP,sBAAsB,GAQnBD,OAAO,CAAAC,sBARY,EACtByB,kBAAkB,GAOf1B,OAAO,CAAA0B,kBAPQ,EAClBC,KAAK,GAMF3B,OAAO,CAAA2B,KANL,EACLC,SAAS,GAKN5B,OAAO,CAAA4B,SALD,EACTC,MAAM,GAIH7B,OAAO,CAAA6B,MAJJ,EACNC,MAAM,GAGH9B,OAAO,CAAA8B,MAHJ,EACNC,EAAA,GAEG/B,OAAO,CAAAgC,eAFkB,EAA5BA,eAAe,GAAAD,EAAA,cAAG;cAAM,OAAC,EAAE;YAAH,CAAI,GAAAA,EAAA,EAC5BE,EAAA,GACGjC,OAAO,CAAAkC,iBADY,EAAtBA,iBAAiB,GAAAD,EAAA,cAAG,EAAE,GAAAA,EAAA;YAGjBjB,iBAAiB,GAAwB5C,mBAAmB,CAAC+D,OAAO;YACpErE,IAAI,GAAG;cACZ6D,KAAK,EAAAA,KAAA;cACLC,SAAS,EAAAA;aACT;YACD;YACA,IAAI,CAACxC,uBAAuB,CAACgD,GAAG,CAAC5B,cAAc,EAAE;cAChDN,QAAQ,EAAAA,QAAA;cACRyB,KAAK,EAAAA,KAAA;cACLC,SAAS,EAAAA,SAAA;cACTZ,iBAAiB,EAAAA,iBAAA;cACjBqB,iBAAiB,EAAE;aACnB,CAAC;YAIIC,UAAU,GAAGC,IAAI,CAACC,SAAS,CAAC1E,IAAI,CAAC;;YAElC,qBAAM,IAAI,CAAC2E,2BAA2B,CAAC;cAC1CZ,MAAM,EAAAA,MAAA;cACN5B,sBAAsB,EAAAA,sBAAA;cACtByB,kBAAkB,EAAAA,kBAAA;cAClBgB,OAAO,EAAEJ,UAAU;cACnBK,YAAY,EAAE,EAAE;cAChBb,MAAM,EAAAA;aACN,CAAC;;oDAPEc,EAAA,CAAA7B,IAAA,EAOF,CAAC;YACC,qBAAMiB,eAAe,EAAE;;YATtBa,SAAS,GAAAC,QAAA,CAAA/D,KAAA,UAAA+D,QAAA,CAAA/D,KAAA,UAAA+D,QAAA,CAAA/D,KAAA,SAAAgE,EAAA,CAAAC,MAAA,EASVJ,EAAA,CAAA7B,IAAA,EAAuB,CAAC,IACzBmB,iBAAiB,KAAAe,EAAA,OAAAA,EAAA,CACnBhG,iBAAiB,IAAGD,SAAS,CAACkG,SAAS,EAAAD,EAAA,GACxC;YAEKE,mBAAmB,GAAG;cAC3BC,EAAE,EAAE5C,cAAc;cAClBkC,OAAO,EAAE;gBACR5E,IAAI,EAAEwE,UAAU;gBAChBe,UAAU,EAAE;kBACXC,aAAa,EAAAR,QAAA,KACTD,SAAS;;eAGd;cACDU,IAAI,EAAEpF,aAAa,CAACqF;aACpB;YAEKC,mBAAmB,GAAGlB,IAAI,CAACC,SAAS,CAACW,mBAAmB,CAAC;;;;YAG9D,qBAAM,IAAI,CAACO,8BAA8B,CAAC;cACzC7B,MAAM,EAAAA,MAAA;cACN5B,sBAAsB,EAAAA,sBAAA;cACtByB,kBAAkB,EAAAA,kBAAA;cAClBI,MAAM,EAAAA;aACN,CAAC;;YALFc,EAAA,CAAA7B,IAAA,EAKE;;;;YAEFvD,MAAM,CAAC4D,KAAK,CAAC;cAAEV,GAAG,EAAAiD;YAAA,CAAE,CAAC;YACbC,EAAA,GAAiBD,KAAG,CAAA5F,OAAR,EAAZA,OAAO,GAAA6F,EAAA,cAAG,EAAE,GAAAA,EAAA;YACpB1D,QAAQ,CAACC,KAAK,CAAC;cACdC,MAAM,EAAE,C,aAEH,IAAI7D,YAAY,CAAIgB,WAAW,CAACsG,iBAAiB,UAAK9F,OAAS,CAAC;aAGrE,CAAC;YACFmC,QAAQ,CAACG,QAAQ,EAAE;YAEXyD,4BAAA,GACP,KAAI,CAAC1E,uBAAuB,CAAC6B,GAAG,CAACT,cAAc,CAAC,IAAI,EAAE,EAAAuD,0BADrB;YAGlC;YACA,IAAI,OAAOD,4BAA0B,KAAK,UAAU,EAAE;cACrDA,4BAA0B,EAAE;;YAE7B;;YAOKE,EAAA,GAGF,IAAI,CAAC5E,uBAAuB,CAAC6B,GAAG,CAACT,cAAc,CAAC,EAFnDuD,0BAA0B,GAAAC,EAAA,CAAAD,0BAAA,EAC1BE,yBAAyB,GAAAD,EAAA,CAAAC,yBAAA;YAG1B;YACA,IAAI,CAAC7E,uBAAuB,CAACgD,GAAG,CAAC5B,cAAc,EAAE;cAChDN,QAAQ,EAAAA,QAAA;cACRc,iBAAiB,EAAAA,iBAAA;cACjBY,SAAS,EAAAA,SAAA;cACTD,KAAK,EAAAA,KAAA;cACLsC,yBAAyB,EAAAA,yBAAA;cACzBF,0BAA0B,EAAAA,0BAAA;cAC1B1B,iBAAiB,EAAE6B,UAAU,CAAC;gBAC7BpF,KAAI,CAACqF,4BAA4B,CAACC,IAAI,CAACtF,KAAI,EAAE0B,cAAc,CAAC;cAC7D,CAAC,EAAE/B,iBAAiB;aACpB,CAAC;YACF,IAAI,IAAI,CAAC4F,iBAAiB,EAAE;cAC3B,IAAI,CAACA,iBAAiB,CAACC,IAAI,CAACb,mBAAmB,CAAC;;;;;;GAEjD;EAED;EACc9E,0BAAA,CAAAY,SAAA,CAAAsB,iCAAiC,GAA/C,UAAgDL,cAAc;;;;;QACrDQ,iBAAiB,GAAK,IAAI,CAAC5B,uBAAuB,CAAC6B,GAAG,CAC7DT,cAAc,CACd,CAAAQ,iBAFwB;QAGzB;QACA,IAAIA,iBAAiB,KAAK5C,mBAAmB,CAAC+D,OAAO,EAAE;UACtD,sBAAO,IAAIoC,OAAO,CAAC,UAACC,GAAG,EAAEC,GAAG;YACrB,IAAA3D,EAAA,GAAAhC,KAAA,CAAAM,uBAAA,CAAA6B,GAAA,CAAAT,cAAA,CAK8C;cAJnDN,QAAA,GAAAY,EAAA,CAAAZ,QAAQ;cACRc,iBAAA,GAAAF,EAAA,CAAAE,iBAAiB;cACjBY,SAAA,GAAAd,EAAA,CAAAc,SAAS;cACTD,KAAA,GAAAb,EAAA,CAAAa,KACmD;YACpD7C,KAAI,CAACM,uBAAuB,CAACgD,GAAG,CAAC5B,cAAc,EAAE;cAChDN,QAAQ,EAAAA,QAAA;cACRc,iBAAiB,EAAAA,iBAAA;cACjBY,SAAS,EAAAA,SAAA;cACTD,KAAK,EAAAA,KAAA;cACLsC,yBAAyB,EAAEO,GAAG;cAC9BT,0BAA0B,EAAEU;aAC5B,CAAC;UACH,CAAC,CAAC;;;;;GAEH;;EAEO9F,0BAAA,CAAAY,SAAA,CAAA4B,0BAA0B,GAAlC,UAAmCX,cAAc;IAChD,IAAI;MACH,IACC,IAAI,CAAC6D,iBAAiB,IACtB,IAAI,CAACA,iBAAiB,CAACK,UAAU,KAAKC,SAAS,CAACC,IAAI,IACpD,IAAI,CAAC3F,YAAY,KAAKZ,aAAa,CAACwG,KAAK,EACxC;QACD;QACA,IAAMC,kBAAkB,GAAG;UAC1B1B,EAAE,EAAE5C,cAAc;UAClB+C,IAAI,EAAEpF,aAAa,CAAC4G;SACpB;QACD,IAAMtB,mBAAmB,GAAGlB,IAAI,CAACC,SAAS,CAACsC,kBAAkB,CAAC;QAC9D,IAAI,CAACT,iBAAiB,CAACC,IAAI,CAACb,mBAAmB,CAAC;;KAEjD,CAAC,OAAO/C,GAAG,EAAE;MACb;MACAlD,MAAM,CAAC4D,KAAK,CAAC;QAAEV,GAAG,EAAAA;MAAA,CAAE,CAAC;;EAEvB,CAAC;EAEO/B,0BAAA,CAAAY,SAAA,CAAA+B,2BAA2B,GAAnC,UAAoCd,cAAc;IACjD,IAAI,CAACpB,uBAAuB,CAAC4F,MAAM,CAACxE,cAAc,CAAC;IAEnD;IACA0D,UAAU,CAAC,IAAI,CAACe,sBAAsB,CAACC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC;EACzD,CAAC;EAEOvG,0BAAA,CAAAY,SAAA,CAAA0F,sBAAsB,GAA9B;IACC,IAAI,IAAI,CAAC7F,uBAAuB,CAAC+F,IAAI,GAAG,CAAC,EAAE;MAC1C;MACA;;IAGD,IAAI,CAAC,IAAI,CAACd,iBAAiB,EAAE;MAC5B,IAAI,CAACpF,YAAY,GAAGZ,aAAa,CAACa,MAAM;MACxC;;IAED,IAAI,IAAI,CAACmF,iBAAiB,CAACe,cAAc,GAAG,CAAC,EAAE;MAC9C;MACAlB,UAAU,CAAC,IAAI,CAACe,sBAAsB,CAACC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC;KACxD,MAAM;MACN1H,MAAM,CAAC4D,KAAK,CAAC,sBAAsB,CAAC;MACpCiE,YAAY,CAAC,IAAI,CAACC,kBAAkB,CAAC;MACrC,IAAMC,UAAU,GAAG,IAAI,CAAClB,iBAAiB;MACzC;MACAkB,UAAU,CAACC,OAAO,GAAGC,SAAS;MAC9BF,UAAU,CAACG,OAAO,GAAGD,SAAS;MAC9BF,UAAU,CAACI,KAAK,CAAC,IAAI,CAAC;MACtB,IAAI,CAACtB,iBAAiB,GAAG,IAAI;MAC7B,IAAI,CAACpF,YAAY,GAAGZ,aAAa,CAACa,MAAM;;EAE1C,CAAC;EAEOP,0BAAA,CAAAY,SAAA,CAAAqG,kCAAkC,GAA1C,UAA2C7H,OAAqB;IAC/DP,MAAM,CAAC4D,KAAK,CACX,qDAAmDrD,OAAO,CAACD,IAAM,CACjE;IACK,IAAAgD,EAAA,GAAAyB,IAAA,CAAAsD,KAAA,CAAA9H,OAAA,CAAAD,IAAA,CAAqD;MAAnDiE,EAAA,GAAAjB,EAAA,CAAAsC,EAAO;MAAPA,EAAA,GAAArB,EAAA,mBAAAA,EAAO;MAAEW,OAAA,GAAA5B,EAAA,CAAA4B,OAAO;MAAEa,IAAA,GAAAzC,EAAA,CAAAyC,IAAiC;IACrD,IAAAtB,EAAA,QAAA7C,uBAAA,CAAA6B,GAAA,CAAAmC,EAAA,OAOwC;MAN7C0C,EAAA,GAAA7D,EAAA,CAAA/B,QAAe;MAAfA,QAAA,GAAA4F,EAAA,qBAAAA,EAAe;MACf/C,EAAA,GAAAd,EAAA,CAAAN,KAAU;MAAVA,KAAA,GAAAoB,EAAA,mBAAAA,EAAU;MACVa,EAAA,GAAA3B,EAAA,CAAAL,SAAc;MAAdA,SAAA,GAAAgC,EAAA,mBAAAA,EAAc;MACdvB,iBAAA,GAAAJ,EAAA,CAAAI,iBAAiB;MACjB4B,yBAAA,GAAAhC,EAAA,CAAAgC,yBAAyB;MACzBF,0BAAA,GAAA9B,EAAA,CAAA8B,0BAC6C;IAE9CvG,MAAM,CAAC4D,KAAK,CAAC;MAAEgC,EAAE,EAAAA,EAAA;MAAElD,QAAQ,EAAAA,QAAA;MAAEyB,KAAK,EAAAA,KAAA;MAAEC,SAAS,EAAAA;IAAA,CAAE,CAAC;IAEhD,IAAI2B,IAAI,KAAKpF,aAAa,CAAC4H,QAAQ,IAAIrD,OAAO,IAAIA,OAAO,CAAC5E,IAAI,EAAE;MAC/D,IAAIoC,QAAQ,EAAE;QACbA,QAAQ,CAAC8F,IAAI,CAACtD,OAAO,CAAC;OACtB,MAAM;QACNlF,MAAM,CAAC4D,KAAK,CAAC,gCAA8BgC,EAAI,CAAC;;MAEjD;;IAGD,IAAIG,IAAI,KAAKpF,aAAa,CAAC8H,aAAa,EAAE;MACzCzI,MAAM,CAAC4D,KAAK,CACX,4BAA0BmB,IAAI,CAACC,SAAS,CAAC;QAAEb,KAAK,EAAAA,KAAA;QAAEC,SAAS,EAAAA;MAAA,CAAE,CAAG,CAChE;MACD,IAAI,OAAOqC,yBAAyB,KAAK,UAAU,EAAE;QACpDA,yBAAyB,EAAE;;MAE5BoB,YAAY,CAAChD,iBAAiB,CAAC;MAC/BzE,gBAAgB,CACfL,WAAW,CAAC2I,gBAAgB,EAC5B;QAAEvE,KAAK,EAAAA,KAAA;QAAEC,SAAS,EAAAA;MAAA,CAAE,EACpB,yCAAyC,CACzC;MACD,IAAMZ,iBAAiB,GAAG5C,mBAAmB,CAAC8C,SAAS;MACvD,IAAI,CAAC9B,uBAAuB,CAACgD,GAAG,CAACgB,EAAE,EAAE;QACpClD,QAAQ,EAAAA,QAAA;QACRyB,KAAK,EAAAA,KAAA;QACLC,SAAS,EAAAA,SAAA;QACTS,iBAAiB,EAAE,IAAI;QACvBrB,iBAAiB,EAAAA,iBAAA;QACjBiD,yBAAyB,EAAAA,yBAAA;QACzBF,0BAA0B,EAAAA;OAC1B,CAAC;MAEF;MACA;;IAGD,IAAIR,IAAI,KAAKpF,aAAa,CAACgI,yBAAyB,EAAE;MACrDd,YAAY,CAAC,IAAI,CAACC,kBAAkB,CAAC;MACrC,IAAI,CAACA,kBAAkB,GAAGpB,UAAU,CACnC,IAAI,CAACkC,gBAAgB,CAAClB,IAAI,CAAC,IAAI,EAAE3H,WAAW,CAAC8I,kBAAkB,CAAC,EAChE,IAAI,CAAClH,gBAAgB,CACrB;MACD;;IAGD,IAAIoE,IAAI,KAAKpF,aAAa,CAACmI,SAAS,EAAE;MACrC,IAAMtF,iBAAiB,GAAG5C,mBAAmB,CAACmI,MAAM;MACpD,IAAI,CAACnH,uBAAuB,CAACgD,GAAG,CAACgB,EAAE,EAAE;QACpClD,QAAQ,EAAAA,QAAA;QACRyB,KAAK,EAAAA,KAAA;QACLC,SAAS,EAAAA,SAAA;QACTS,iBAAiB,EAAAA,iBAAA;QACjB4B,yBAAyB,EAAAA,yBAAA;QACzBF,0BAA0B,EAAAA,0BAAA;QAC1B/C,iBAAiB,EAAAA;OACjB,CAAC;MAEFd,QAAQ,CAACC,KAAK,CAAC;QACdC,MAAM,EAAE,C,aAEH,IAAI7D,YAAY,CACfgB,WAAW,CAACsG,iBAAiB,UAAKtB,IAAI,CAACC,SAAS,CAACE,OAAO,CAAG,CAC9D;OAGH,CAAC;MACF2C,YAAY,CAAChD,iBAAiB,CAAC;MAE/BnC,QAAQ,CAACG,QAAQ,EAAE;MACnB,IAAI,OAAO0D,0BAA0B,KAAK,UAAU,EAAE;QACrDA,0BAA0B,EAAE;;;EAG/B,CAAC;EAEOpF,0BAAA,CAAAY,SAAA,CAAA6G,gBAAgB,GAAxB,UAAyBI,GAAW;IACnChJ,MAAM,CAAC4D,KAAK,CAAC,uBAAqBoF,GAAK,CAAC;IACxC,IAAI,CAACpH,uBAAuB,CAACqH,OAAO,CAAC,UAAC3F,EAAY;UAAVZ,QAAA,GAAAY,EAAA,CAAAZ,QAAQ;MAC/C,IAAIA,QAAQ,IAAI,CAACA,QAAQ,CAACwG,MAAM,EAAE;QACjCxG,QAAQ,CAACC,KAAK,CAAC;UACdC,MAAM,EAAE,CAAA0C,QAAA,KAAM,IAAIvG,YAAY,CAACiK,GAAG,CAAC;SACnC,CAAC;;IAEJ,CAAC,CAAC;IACF,IAAI,CAACpH,uBAAuB,CAACuH,KAAK,EAAE;IACpC,IAAI,IAAI,CAACtC,iBAAiB,EAAE;MAC3B,IAAI,CAACA,iBAAiB,CAACsB,KAAK,EAAE;;IAG/B,IAAI,CAAC1G,YAAY,GAAGZ,aAAa,CAACa,MAAM;EACzC,CAAC;EAEOP,0BAAA,CAAAY,SAAA,CAAA4E,4BAA4B,GAApC,UAAqC3D,cAAc;IAC5C,IAAAM,EAAA,QAAA1B,uBAAA,CAAA6B,GAAA,CAAAT,cAAA,OACiD;MAD/CN,QAAA,GAAAY,EAAA,CAAAZ,QAAQ;MAAEyB,KAAA,GAAAb,EAAA,CAAAa,KAAK;MAAEC,SAAA,GAAAd,EAAA,CAAAc,SAC8B;IACvD,IAAI,CAAC1B,QAAQ,EAAE;MACd;;IAED,IAAI,CAACd,uBAAuB,CAACgD,GAAG,CAAC5B,cAAc,EAAE;MAChDN,QAAQ,EAAAA,QAAA;MACRyB,KAAK,EAAAA,KAAA;MACLC,SAAS,EAAAA,SAAA;MACTZ,iBAAiB,EAAE5C,mBAAmB,CAACmI;KACvC,CAAC;IAEF,IAAIrG,QAAQ,IAAI,CAACA,QAAQ,CAACwG,MAAM,EAAE;MACjCxG,QAAQ,CAACC,KAAK,CAAC;QACdC,MAAM,EAAE,C,aAEH,IAAI7D,YAAY,CAClB,0BAAwBgG,IAAI,CAACC,SAAS,CAAC;UAAEb,KAAK,EAAAA,KAAA;UAAEC,SAAS,EAAAA;QAAA,CAAE,CAAG,CAC9D;OAGH,CAAC;MACF;MACA1B,QAAQ,CAACG,QAAQ,EAAE;;IAEpB7C,MAAM,CAAC4D,KAAK,CACX,0BAA0B,EAC1BmB,IAAI,CAACC,SAAS,CAAC;MAAEb,KAAK,EAAAA,KAAA;MAAEC,SAAS,EAAAA;IAAA,CAAE,CAAC,CACpC;EACF,CAAC;EAEOjD,0BAAA,CAAAY,SAAA,CAAAmE,8BAA8B,GAAtC,UAAuC5C,EAKtC;IALD,IAAAhC,KAAA;QACCmB,sBAAA,GAAAa,EAAA,CAAAb,sBAAsB;MACtByB,kBAAA,GAAAZ,EAAA,CAAAY,kBAAkB;MAClBG,MAAA,GAAAf,EAAA,CAAAe,MAAM;MACNC,MAAA,GAAAhB,EAAA,CAAAgB,MAAM;IAEN,IAAI,IAAI,CAAC7C,YAAY,KAAKZ,aAAa,CAACwG,KAAK,EAAE;MAC9C;;IAED,OAAO,IAAIN,OAAO,CAAC,UAAOC,GAAG,EAAEC,GAAG;MAAA,OAAA7D,SAAA,CAAA9B,KAAA;;;;;cACjC,IAAI,CAACQ,YAAY,CAACsH,IAAI,CAAC;gBAAEpC,GAAG,EAAAA,GAAA;gBAAEC,GAAG,EAAAA;cAAA,CAAE,CAAC;oBAEhC,IAAI,CAACxF,YAAY,KAAKZ,aAAa,CAACa,MAAM,GAA1C;;;;cAEF,IAAI,CAACD,YAAY,GAAGZ,aAAa,CAACwI,UAAU;cAEtCC,QAAQ,GAAG,IAAI,CAACC,YAAY,GAAG,QAAQ,GAAG,OAAO;cACjDC,oBAAoB,GAAG/G,sBAAsB,CACjDgH,OAAO,CAAC,UAAU,EAAEH,QAAQ,CAAC,CAC7BG,OAAO,CAAC,SAAS,EAAEH,QAAQ,CAAC,CAC5BG,OAAO,CAAC,aAAa,EAAE,sBAAsB,CAAC,CAC9CA,OAAO,CAAC,WAAW,EAAE,UAAU,CAAC;cAE5BC,aAAa,GAAG,IAAI;cACLnF,EAAA,IAAAjB,EAAA,GAAAyB,IAAI,EAACC,SAAS;cAClC,qBAAM,IAAI,CAACC,2BAA2B,CAAC;gBACtCf,kBAAkB,EAAAA,kBAAA;gBAClBgB,OAAO,EAAEwE,aAAa;gBACtBvE,YAAY,EAAE,UAAU;gBACxBd,MAAM,EAAAA,MAAA;gBACN5B,sBAAsB,EAAAA,sBAAA;gBACtB6B,MAAM,EAAAA;eACN,CAAC;;cARGqF,YAAY,GAAGpF,EAAA,CAAAhD,KAAA,CAAA+B,EAAA,GACpBmB,EAAA,CAAAlB,IAAA,EAOE,EACF;cACKqG,QAAQ,GAAGzK,MAAM,CAAC0K,IAAI,CAACF,YAAY,CAAC,CAACG,QAAQ,CAAC,QAAQ,CAAC;cAEvDC,SAAS,GAAG5K,MAAM,CAAC0K,IAAI,CAACH,aAAa,CAAC,CAACI,QAAQ,CAAC,QAAQ,CAAC;cACzDE,cAAc,GAAMR,oBAAoB,gBAAWI,QAAQ,iBAAYG,SAAW;cAExF,qBAAM,IAAI,CAACE,6BAA6B,CAAC;gBAAED,cAAc,EAAAA;cAAA,CAAE,CAAC;;cAA5DvF,EAAA,CAAAlB,IAAA,EAA4D;cAE5D,IAAI,CAACzB,YAAY,CAACmH,OAAO,CAAC,UAAC3F,EAAO;oBAAL0D,GAAA,GAAA1D,EAAA,CAAA0D,GAAG;gBAC/BhH,MAAM,CAAC4D,KAAK,CAAC,iCAAiC,CAAC;gBAC/CoD,GAAG,EAAE;cACN,CAAC,CAAC;cACF,IAAI,CAACvF,YAAY,GAAGZ,aAAa,CAACwG,KAAK;cACvC,IAAI,CAACvF,YAAY,GAAG,EAAE;;;;cAEtB,IAAI,CAACA,YAAY,CAACmH,OAAO,CAAC,UAAC3F,EAAO;oBAAL2D,GAAA,GAAA3D,EAAA,CAAA2D,GAAG;gBAAO,OAAAA,GAAG,CAACiD,KAAG,CAAC;cAAR,CAAQ,CAAC;cAChD,IAAI,CAACpI,YAAY,GAAG,EAAE;cACtB,IACC,IAAI,CAAC+E,iBAAiB,IACtB,IAAI,CAACA,iBAAiB,CAACK,UAAU,KAAKC,SAAS,CAACC,IAAI,EACnD;gBACD,IAAI,CAACP,iBAAiB,CAACsB,KAAK,CAAC,IAAI,CAAC;;cAEnC,IAAI,CAACtB,iBAAiB,GAAG,IAAI;cAC7B,IAAI,CAACpF,YAAY,GAAGZ,aAAa,CAACa,MAAM;;;;;;;KAG1C,CAAC;EACH,CAAC;;EAEaP,0BAAA,CAAAY,SAAA,CAAAkI,6BAA6B,GAA3C,UAA4C3G,EAAkB;QAAhB0G,cAAA,GAAA1G,EAAA,CAAA0G,cAAc;;;;;YAC3DhK,MAAM,CAAC4D,KAAK,CAAC,oCAAoC,CAAC;YAClD,qBAAMlE,wBAAwB,CAC7B,IAAI,CAACyK,oBAAoB,CAACzC,IAAI,CAAC,IAAI,CAAC,EACpC,CAAC;cAAEsC,cAAc,EAAAA;YAAA,CAAE,CAAC,EACpBvJ,YAAY,CACZ;;YAJD8D,EAAA,CAAAhB,IAAA,EAIC;;;;;GACD;;EAEapC,0BAAA,CAAAY,SAAA,CAAAoI,oBAAoB,GAAlC,UAAmC7G,EAAkB;QAAhB0G,cAAA,GAAA1G,EAAA,CAAA0G,cAAc;;;;;;;YAClDhK,MAAM,CAAC4D,KAAK,CAAC,4BAA0BoG,cAAgB,CAAC;;;;YAIvD,qBAAO;cACN,OAAO,IAAIjD,OAAO,CAAC,UAACC,GAAG,EAAEC,GAAG;gBAC3B,IAAMmD,SAAS,GAAG,IAAIjD,SAAS,CAAC6C,cAAc,EAAE,YAAY,CAAC;gBAC7DI,SAAS,CAAClC,OAAO,GAAG;kBACnBlI,MAAM,CAAC4D,KAAK,CAAC,4BAA4B,CAAC;gBAC3C,CAAC;gBACDwG,SAAS,CAACpC,OAAO,GAAG;kBACnBf,GAAG,CAAC,IAAI/E,KAAK,CAAC,4BAA4B,CAAC,CAAC;gBAC7C,CAAC;gBACDkI,SAAS,CAACC,MAAM,GAAG;kBAClB/I,KAAI,CAACuF,iBAAiB,GAAGuD,SAAS;kBAClC,OAAOpD,GAAG,EAAE;gBACb,CAAC;cACF,CAAC,CAAC;YACH,CAAC,EAAG;;YAdJzC,EAAA,CAAAhB,IAAA,EAcI;YAEJ;YACA,qBAAO;cACN,OAAO,IAAIwD,OAAO,CAAC,UAACC,GAAG,EAAEC,GAAG;gBAC3B,IAAIqD,KAAK,GAAG,KAAK;gBACjBhJ,KAAI,CAACuF,iBAAiB,CAACqB,OAAO,GAAG,UAAAvF,KAAK;kBACrC3C,MAAM,CAAC4D,KAAK,CAAC,qBAAmBmB,IAAI,CAACC,SAAS,CAACrC,KAAK,CAAG,CAAC;gBACzD,CAAC;gBACDrB,KAAI,CAACuF,iBAAiB,CAACmB,OAAO,GAAG,UAAA3H,KAAK;kBACrCL,MAAM,CAAC4D,KAAK,CAAC,sBAAoBvD,KAAK,CAACkK,MAAQ,CAAC;kBAChDtD,GAAG,CAAC,IAAI/E,KAAK,CAAC6C,IAAI,CAACC,SAAS,CAAC3E,KAAK,CAAC,CAAC,CAAC;gBACtC,CAAC;gBAEDiB,KAAI,CAACuF,iBAAiB,CAAC2D,SAAS,GAAG,UAACjK,OAAqB;kBACxDP,MAAM,CAAC4D,KAAK,CACX,oDAAkDrD,OAAO,CAACD,IAAI,MAAG,CACjE;kBACD,IAAMA,IAAI,GAAGyE,IAAI,CAACsD,KAAK,CAAC9H,OAAO,CAACD,IAAI,CAAC;kBAEpC,IAAAyF,IAAA,GAAAzF,IAAA,CAAAyF,IAAI;oBACJzC,EAAA,GAAAhD,IAAA,CAAA4E,OAEM;oBADLX,EAAA,IAAAjB,EAAA,mBAAAA,EAAA,EAAAmH,mBAAgD;oBAAhDA,mBAAA,GAAAlG,EAAA,cAAArD,0BAAA,GAAAqD,EACK;kBAEP,IAAIwB,IAAI,KAAKpF,aAAa,CAAC+J,kBAAkB,EAAE;oBAC9CJ,KAAK,GAAG,IAAI;oBACZhJ,KAAI,CAACK,gBAAgB,GAAG8I,mBAAmB;oBAC3CnJ,KAAI,CAACuF,iBAAiB,CAAC2D,SAAS,GAAGlJ,KAAI,CAAC8G,kCAAkC,CAACV,IAAI,CAC9EpG,KAAI,CACJ;oBACDA,KAAI,CAACuF,iBAAiB,CAACqB,OAAO,GAAG,UAAAhF,GAAG;sBACnClD,MAAM,CAAC4D,KAAK,CAACV,GAAG,CAAC;sBACjB5B,KAAI,CAACsH,gBAAgB,CAAC7I,WAAW,CAAC4K,iBAAiB,CAAC;oBACrD,CAAC;oBACDrJ,KAAI,CAACuF,iBAAiB,CAACmB,OAAO,GAAG,UAAA3H,KAAK;sBACrCL,MAAM,CAAC4D,KAAK,CAAC,sBAAoBvD,KAAK,CAACkK,MAAQ,CAAC;sBAChDjJ,KAAI,CAACsH,gBAAgB,CAAC7I,WAAW,CAAC4K,iBAAiB,CAAC;oBACrD,CAAC;oBACD3D,GAAG,CAAC,wCAAwC,CAAC;oBAC7C;;kBAGD,IAAIjB,IAAI,KAAKpF,aAAa,CAACiK,oBAAoB,EAAE;oBAE/C,IAAAnG,EAAA,GAAAnE,IAAA,CAAA4E,OAEM;sBADLoD,EAAA,IAAA7D,EAAA,mBAAAA,EAAA,EAAA7B,MAAqD;sBAArD2C,EAAA,GAAAsF,MAAA,CAAAvC,EAAA,mBAAAA,EAAA,IAAqD;sBAA5ClC,EAAA,GAAAb,EAAA,GAAsC;sBAAtCiB,EAAA,GAAAJ,EAAA,mBAAAA,EAAsC;sBAApCX,EAAA,GAAAe,EAAA,CAAAsE,SAAc;sBAAdA,SAAA,GAAArF,EAAA,mBAAAA,EAAc;sBAAEL,EAAA,GAAAoB,EAAA,CAAAuE,SAAa;sBAAbA,SAAA,GAAA3F,EAAA,kBAAAA,EACtB;oBAGP6B,GAAG,CAAC;sBAAE6D,SAAS,EAAAA,SAAA;sBAAEC,SAAS,EAAAA;oBAAA,CAAE,CAAC;;gBAE/B,CAAC;gBAED,IAAMC,OAAO,GAAG;kBACfjF,IAAI,EAAEpF,aAAa,CAACsK;iBACpB;gBACD3J,KAAI,CAACuF,iBAAiB,CAACC,IAAI,CAAC/B,IAAI,CAACC,SAAS,CAACgG,OAAO,CAAC,CAAC;gBAEpD,SAASE,UAAUA,CAAA;kBAClB,IAAI,CAACZ,KAAK,EAAE;oBACXrD,GAAG,CACF,IAAI/E,KAAK,CACR,kEAAgElB,uBAAuB,QAAK,CAC5F,CACD;;gBAEH;gBAEA0F,UAAU,CAACwE,UAAU,CAACxD,IAAI,CAACpG,KAAI,CAAC,EAAEN,uBAAuB,CAAC;cAC3D,CAAC,CAAC;YACH,CAAC,EAAG;;YArEJ;YACAuD,EAAA,CAAAhB,IAAA,EAoEI;;;;YAEIuH,SAAS,GAAgBK,KAAG,CAAAL,SAAnB,EAAEC,SAAS,GAAKI,KAAG,CAAAJ,SAAR;YAE5B,IAAIrK,mBAAmB,CAAC0K,QAAQ,CAACL,SAAS,CAAC,EAAE;cAC5C,MAAM,IAAIpL,iBAAiB,CAACmL,SAAS,CAAC;aACtC,MAAM,IAAIA,SAAS,EAAE;cACrB,MAAM,IAAI5I,KAAK,CAAC4I,SAAS,CAAC;aAC1B,MAAM;cACN,MAAMK,KAAG;;;;;;;;GAGX;;EAEahK,0BAAA,CAAAY,SAAA,CAAAkD,2BAA2B,GAAzC,UAA0C3B,EAOzC;QANAY,kBAAA,GAAAZ,EAAA,CAAAY,kBAAkB;MAClBgB,OAAA,GAAA5B,EAAA,CAAA4B,OAAO;MACPC,YAAA,GAAA7B,EAAA,CAAA6B,YAAY;MACZ1C,sBAAA,GAAAa,EAAA,CAAAb,sBAAsB;MACtB4B,MAAA,GAAAf,EAAA,CAAAe,MAAM;MACNC,MAAA,GAAAhB,EAAA,CAAAgB,MAAM;;;;;;YAEA+G,aAAa,GAAG;cACrBC,OAAO,EAAE,IAAI,CAACC,wBAAwB,CAAC7D,IAAI,CAAC,IAAI,CAAC;cACjD8D,OAAO,EAAE,IAAI,CAACC,qBAAqB,CAAC/D,IAAI,CAAC,IAAI,CAAC;cAC9CgE,cAAc,EAAE,IAAI,CAACC,wBAAwB,CAACjE,IAAI,CAAC,IAAI,CAAC;cACxDkE,yBAAyB,EAAE,IAAI,CAACC,qBAAqB,CAACnE,IAAI,CAAC,IAAI;aAC/D;YAEKoE,OAAO,GAAGT,aAAa,CAACnH,kBAAkB,CAAC;YAEjD,IAAI,OAAO4H,OAAO,KAAK,UAAU,EAAE;cAClC9L,MAAM,CAAC4D,KAAK,CAAC,yBAAuBM,kBAAkB,mBAAgB,CAAC;cACvE,sBAAO,EAAE;;YAGF6H,IAAI,GAAK/M,GAAG,CAACqJ,KAAK,CAAC5F,sBAAsB,CAAC,CAAAsJ,IAAtC;YAEG,qBAAMD,OAAO,CAAC;cAC5B5G,OAAO,EAAAA,OAAA;cACPC,YAAY,EAAAA,YAAA;cACZ1C,sBAAsB,EAAAA,sBAAA;cACtB4B,MAAM,EAAAA,MAAA;cACNC,MAAM,EAAAA,MAAA;cACNyH,IAAI,EAAAA;aACJ,CAAC;;YAPIC,MAAM,GAAGzH,EAAA,CAAAhB,IAAA,EAOb;YAEF,sBAAOyI,MAAM;QAAC;;;GACd;EAEa7K,0BAAA,CAAAY,SAAA,CAAA8J,qBAAqB,GAAnC,UAAoCvI,EAAQ;QAANyI,IAAA,GAAAzI,EAAA,CAAAyI,IAAI;;;;;;YACzB,qBAAMlM,IAAI,CAACoM,cAAc,EAAE;;YAArCC,OAAO,GAAG3H,EAAA,CAAAhB,IAAA,EAA2B;YAC3C,sBAAO;cACN4I,aAAa,EAAED,OAAO,CAACE,cAAc,EAAE,CAACC,WAAW,EAAE;cACrDN,IAAI,EAAAA;aACJ;QAAC;;;GACF;EAEa5K,0BAAA,CAAAY,SAAA,CAAA4J,wBAAwB,GAAtC,UAAuCrI,EAAQ;QAANyI,IAAA,GAAAzI,EAAA,CAAAyI,IAAI;;;;;;YAGtB,qBAAMnM,KAAK,CAAC0M,OAAO,CAAC,eAAe,CAAC;;YAApDC,aAAa,GAAGhI,EAAA,CAAAhB,IAAA,EAAoC;iBACtDgJ,aAAa,EAAb;YACHC,KAAK,GAAGD,aAAa,CAACC,KAAK;;;YAEP,qBAAM3M,IAAI,CAAC4M,wBAAwB,EAAE;;YAAnDC,WAAW,GAAGnI,EAAA,CAAAhB,IAAA,EAAqC;YACzD,IAAImJ,WAAW,EAAE;cAChBF,KAAK,GAAGE,WAAW,CAACF,KAAK;;;;YAG3B,IAAI,CAACA,KAAK,EAAE;cACX,MAAM,IAAItK,KAAK,CAAC,kBAAkB,CAAC;;YAEpC,sBAAO;cACNiK,aAAa,EAAEK,KAAK;cACpBT,IAAI,EAAAA;aACJ;QAAC;;;GACF;EAEa5K,0BAAA,CAAAY,SAAA,CAAAwJ,wBAAwB,GAAtC,UAAuCjI,EAAgB;QAAde,MAAA,GAAAf,EAAA,CAAAe,MAAM;MAAE0H,IAAA,GAAAzI,EAAA,CAAAyI,IAAI;;;;QAC9CY,EAAE,GAAG,IAAIC,IAAI,EAAE;QACfC,KAAK,GAAGF,EAAE,CAACG,WAAW,EAAE,CAACrD,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC;QAE5D,sBAAO;UACNsC,IAAI,EAAAA,IAAA;UACJ,YAAY,EAAEc,KAAK;UACnB,WAAW,EAAExI;SACb;;;GACD;EAEalD,0BAAA,CAAAY,SAAA,CAAA0J,qBAAqB,GAAnC,UAAoCnI,EAKnC;QAJA4B,OAAA,GAAA5B,EAAA,CAAA4B,OAAO;MACPC,YAAA,GAAA7B,EAAA,CAAA6B,YAAY;MACZ1C,sBAAA,GAAAa,EAAA,CAAAb,sBAAsB;MACtB6B,MAAA,GAAAhB,EAAA,CAAAgB,MAAM;;;;;;YAEAyI,YAAY,GAAG;cACpBzI,MAAM,EAAAA,MAAA;cACN0I,OAAO,EAAE;aACT;YAEqB,qBAAM,IAAI,CAACC,kBAAkB,EAAE;;YAA/CC,aAAa,GAAG3I,EAAA,CAAAhB,IAAA,EAA+B;YACrD,IAAI,CAAC2J,aAAa,EAAE;cACnB,MAAM,IAAIhL,KAAK,CAAC,gBAAgB,CAAC;;YAEpB,qBAAM7C,WAAW,CAACoE,GAAG,EAAE,CAAC0J,IAAI,CAAC,UAAAC,WAAW;cAAI,OAAC;gBAC1DC,UAAU,EAAED,WAAW,CAACE,eAAe;gBACvCC,UAAU,EAAEH,WAAW,CAACI,WAAW;gBACnCC,aAAa,EAAEL,WAAW,CAACM;eAC3B;YAJyD,CAIxD,CAAC;;YAJGC,KAAK,GAAGpJ,EAAA,CAAAhB,IAAA,EAIX;YAEGqK,OAAO,GAAG;cACf5O,GAAG,EAAE,KAAGyD,sBAAsB,GAAG0C,YAAc;cAC/C7E,IAAI,EAAE4E,OAAO;cACb2I,MAAM,EAAE,MAAM;cACdC,OAAO,EAAAxI,QAAA,KAAOxE,4BAA4B;aAC1C;YAEKiN,aAAa,GAAGzO,MAAM,CAAC0O,IAAI,CAACJ,OAAO,EAAED,KAAK,EAAEZ,YAAY,CAAC;YAC/D,sBAAOgB,aAAa,CAACD,OAAO;QAAC;;;GAC7B;EAED;;;EAGA3M,0BAAA,CAAAY,SAAA,CAAAkL,kBAAkB,GAAlB;IACC,OAAO5N,WAAW,CAACoE,GAAG,EAAE,CACtB0J,IAAI,CAAC,UAAAC,WAAW;MAChB,IAAI,CAACA,WAAW,EAAE,OAAO,KAAK;MAC9B,IAAMa,IAAI,GAAG5O,WAAW,CAAC6O,KAAK,CAACd,WAAW,CAAC;MAC3CpN,MAAM,CAAC4D,KAAK,CAAC,gDAAgD,EAAEqK,IAAI,CAAC;MAEpE,OAAO,IAAI;IACZ,CAAC,CAAC,CACDhL,KAAK,CAAC,UAAAC,GAAG;MACTlD,MAAM,CAACmO,IAAI,CAAC,0BAA0B,EAAEjL,GAAG,CAAC;MAC5C,OAAO,KAAK;IACb,CAAC,CAAC;EACJ,CAAC;EACF,OAAA/B,0BAAC;AAAD,CAAC,CAztB+CrB,sBAAsB"},"metadata":{},"sourceType":"module","externalDependencies":[]}