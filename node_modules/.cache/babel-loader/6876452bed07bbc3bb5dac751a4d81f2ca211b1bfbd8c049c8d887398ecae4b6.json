{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ericli/Desktop/pill2/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"/Users/ericli/Desktop/pill2/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"/Users/ericli/Desktop/pill2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { getChecksum } from \"./getChecksum\";\nimport { getChecksumAlgorithmListForResponse } from \"./getChecksumAlgorithmListForResponse\";\nimport { getChecksumLocationName } from \"./getChecksumLocationName\";\nimport { selectChecksumAlgorithmFunction } from \"./selectChecksumAlgorithmFunction\";\nexport var validateChecksumFromResponse = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(response, _ref) {\n    var config, responseAlgorithms, checksumAlgorithms, responseBody, responseHeaders, _iterator, _step, algorithm, responseHeader, checksumFromResponse, checksumAlgorithmFn, streamHasher, base64Encoder, checksum;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          config = _ref.config, responseAlgorithms = _ref.responseAlgorithms;\n          checksumAlgorithms = getChecksumAlgorithmListForResponse(responseAlgorithms);\n          responseBody = response.body, responseHeaders = response.headers;\n          _iterator = _createForOfIteratorHelper(checksumAlgorithms);\n          _context.prev = 4;\n          _iterator.s();\n        case 6:\n          if ((_step = _iterator.n()).done) {\n            _context.next = 21;\n            break;\n          }\n          algorithm = _step.value;\n          responseHeader = getChecksumLocationName(algorithm);\n          checksumFromResponse = responseHeaders[responseHeader];\n          if (!checksumFromResponse) {\n            _context.next = 19;\n            break;\n          }\n          checksumAlgorithmFn = selectChecksumAlgorithmFunction(algorithm, config);\n          streamHasher = config.streamHasher, base64Encoder = config.base64Encoder;\n          _context.next = 15;\n          return getChecksum(responseBody, {\n            streamHasher: streamHasher,\n            checksumAlgorithmFn: checksumAlgorithmFn,\n            base64Encoder: base64Encoder\n          });\n        case 15:\n          checksum = _context.sent;\n          if (!(checksum === checksumFromResponse)) {\n            _context.next = 18;\n            break;\n          }\n          return _context.abrupt(\"break\", 21);\n        case 18:\n          throw new Error(\"Checksum mismatch: expected \\\"\".concat(checksum, \"\\\" but received \\\"\").concat(checksumFromResponse, \"\\\"\") + \" in response header \\\"\".concat(responseHeader, \"\\\".\"));\n        case 19:\n          _context.next = 6;\n          break;\n        case 21:\n          _context.next = 26;\n          break;\n        case 23:\n          _context.prev = 23;\n          _context.t0 = _context[\"catch\"](4);\n          _iterator.e(_context.t0);\n        case 26:\n          _context.prev = 26;\n          _iterator.f();\n          return _context.finish(26);\n        case 29:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[4, 23, 26, 29]]);\n  }));\n  return function validateChecksumFromResponse(_x, _x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["getChecksum","getChecksumAlgorithmListForResponse","getChecksumLocationName","selectChecksumAlgorithmFunction","validateChecksumFromResponse","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","_ref","config","responseAlgorithms","checksumAlgorithms","responseBody","responseHeaders","_iterator","_step","algorithm","responseHeader","checksumFromResponse","checksumAlgorithmFn","streamHasher","base64Encoder","checksum","wrap","_callee$","_context","prev","next","body","headers","_createForOfIteratorHelper","s","n","done","value","sent","abrupt","Error","concat","t0","e","f","finish","stop","_x","_x2","apply","arguments"],"sources":["/Users/ericli/Desktop/pill2/node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/validateChecksumFromResponse.js"],"sourcesContent":["import { getChecksum } from \"./getChecksum\";\nimport { getChecksumAlgorithmListForResponse } from \"./getChecksumAlgorithmListForResponse\";\nimport { getChecksumLocationName } from \"./getChecksumLocationName\";\nimport { selectChecksumAlgorithmFunction } from \"./selectChecksumAlgorithmFunction\";\nexport const validateChecksumFromResponse = async (response, { config, responseAlgorithms }) => {\n    const checksumAlgorithms = getChecksumAlgorithmListForResponse(responseAlgorithms);\n    const { body: responseBody, headers: responseHeaders } = response;\n    for (const algorithm of checksumAlgorithms) {\n        const responseHeader = getChecksumLocationName(algorithm);\n        const checksumFromResponse = responseHeaders[responseHeader];\n        if (checksumFromResponse) {\n            const checksumAlgorithmFn = selectChecksumAlgorithmFunction(algorithm, config);\n            const { streamHasher, base64Encoder } = config;\n            const checksum = await getChecksum(responseBody, { streamHasher, checksumAlgorithmFn, base64Encoder });\n            if (checksum === checksumFromResponse) {\n                break;\n            }\n            throw new Error(`Checksum mismatch: expected \"${checksum}\" but received \"${checksumFromResponse}\"` +\n                ` in response header \"${responseHeader}\".`);\n        }\n    }\n};\n"],"mappings":";;;AAAA,SAASA,WAAW,QAAQ,eAAe;AAC3C,SAASC,mCAAmC,QAAQ,uCAAuC;AAC3F,SAASC,uBAAuB,QAAQ,2BAA2B;AACnE,SAASC,+BAA+B,QAAQ,mCAAmC;AACnF,OAAO,IAAMC,4BAA4B;EAAA,IAAAC,KAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAG,SAAAC,QAAOC,QAAQ,EAAAC,IAAA;IAAA,IAAAC,MAAA,EAAAC,kBAAA,EAAAC,kBAAA,EAAAC,YAAA,EAAAC,eAAA,EAAAC,SAAA,EAAAC,KAAA,EAAAC,SAAA,EAAAC,cAAA,EAAAC,oBAAA,EAAAC,mBAAA,EAAAC,YAAA,EAAAC,aAAA,EAAAC,QAAA;IAAA,OAAAlB,mBAAA,GAAAmB,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAIlB,MAAM,GAAAD,IAAA,CAANC,MAAM,EAAEC,kBAAkB,GAAAF,IAAA,CAAlBE,kBAAkB;UAC/EC,kBAAkB,GAAGb,mCAAmC,CAACY,kBAAkB,CAAC;UACpEE,YAAY,GAA+BL,QAAQ,CAAzDqB,IAAI,EAAyBf,eAAe,GAAKN,QAAQ,CAArCsB,OAAO;UAAAf,SAAA,GAAAgB,0BAAA,CACXnB,kBAAkB;UAAAc,QAAA,CAAAC,IAAA;UAAAZ,SAAA,CAAAiB,CAAA;QAAA;UAAA,KAAAhB,KAAA,GAAAD,SAAA,CAAAkB,CAAA,IAAAC,IAAA;YAAAR,QAAA,CAAAE,IAAA;YAAA;UAAA;UAA/BX,SAAS,GAAAD,KAAA,CAAAmB,KAAA;UACVjB,cAAc,GAAGlB,uBAAuB,CAACiB,SAAS,CAAC;UACnDE,oBAAoB,GAAGL,eAAe,CAACI,cAAc,CAAC;UAAA,KACxDC,oBAAoB;YAAAO,QAAA,CAAAE,IAAA;YAAA;UAAA;UACdR,mBAAmB,GAAGnB,+BAA+B,CAACgB,SAAS,EAAEP,MAAM,CAAC;UACtEW,YAAY,GAAoBX,MAAM,CAAtCW,YAAY,EAAEC,aAAa,GAAKZ,MAAM,CAAxBY,aAAa;UAAAI,QAAA,CAAAE,IAAA;UAAA,OACZ9B,WAAW,CAACe,YAAY,EAAE;YAAEQ,YAAY,EAAZA,YAAY;YAAED,mBAAmB,EAAnBA,mBAAmB;YAAEE,aAAa,EAAbA;UAAc,CAAC,CAAC;QAAA;UAAhGC,QAAQ,GAAAG,QAAA,CAAAU,IAAA;UAAA,MACVb,QAAQ,KAAKJ,oBAAoB;YAAAO,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,OAAAF,QAAA,CAAAW,MAAA;QAAA;UAAA,MAG/B,IAAIC,KAAK,CAAC,iCAAAC,MAAA,CAAgChB,QAAQ,wBAAAgB,MAAA,CAAmBpB,oBAAoB,mCAAAoB,MAAA,CACnErB,cAAc,QAAI,CAAC;QAAA;UAAAQ,QAAA,CAAAE,IAAA;UAAA;QAAA;UAAAF,QAAA,CAAAE,IAAA;UAAA;QAAA;UAAAF,QAAA,CAAAC,IAAA;UAAAD,QAAA,CAAAc,EAAA,GAAAd,QAAA;UAAAX,SAAA,CAAA0B,CAAA,CAAAf,QAAA,CAAAc,EAAA;QAAA;UAAAd,QAAA,CAAAC,IAAA;UAAAZ,SAAA,CAAA2B,CAAA;UAAA,OAAAhB,QAAA,CAAAiB,MAAA;QAAA;QAAA;UAAA,OAAAjB,QAAA,CAAAkB,IAAA;MAAA;IAAA,GAAArC,OAAA;EAAA,CAG1D;EAAA,gBAjBYL,4BAA4BA,CAAA2C,EAAA,EAAAC,GAAA;IAAA,OAAA3C,KAAA,CAAA4C,KAAA,OAAAC,SAAA;EAAA;AAAA,GAiBxC"},"metadata":{},"sourceType":"module","externalDependencies":[]}