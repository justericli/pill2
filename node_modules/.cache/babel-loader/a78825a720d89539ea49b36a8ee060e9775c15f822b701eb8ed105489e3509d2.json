{"ast":null,"code":"import { __awaiter, __generator, __read } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify, ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { SumerianProvider } from './Providers/SumerianProvider';\nimport { XRProviderNotConfigured } from './Errors';\nvar logger = new Logger('XR');\nvar DEFAULT_PROVIDER_NAME = 'SumerianProvider';\nvar XRClass = /** @class */function () {\n  /**\n   * Initialize XR with AWS configurations\n   *\n   * @param {XROptions} options - Configuration object for XR\n   */\n  function XRClass(options) {\n    this._options = options;\n    logger.debug('XR Options', this._options);\n    this._defaultProvider = DEFAULT_PROVIDER_NAME;\n    this._pluggables = {};\n    // Add default provider\n    this.addPluggable(new SumerianProvider());\n  }\n  /**\n   * Configure XR part with configurations\n   *\n   * @param {XROptions} config - Configuration for XR\n   * @return {Object} - The current configuration\n   */\n  XRClass.prototype.configure = function (options) {\n    var _this = this;\n    var opt = options ? options.XR || options : {};\n    logger.debug('configure XR', {\n      opt: opt\n    });\n    this._options = Object.assign({}, this._options, opt);\n    Object.entries(this._pluggables).map(function (_a) {\n      var _b = __read(_a, 2),\n        name = _b[0],\n        provider = _b[1];\n      if (name === _this._defaultProvider && !opt[_this._defaultProvider]) {\n        provider.configure(_this._options);\n      } else {\n        provider.configure(_this._options[name]);\n      }\n    });\n    return this._options;\n  };\n  /**\n   * add plugin into XR category\n   * @param {Object} pluggable - an instance of the plugin\n   */\n  XRClass.prototype.addPluggable = function (pluggable) {\n    return __awaiter(this, void 0, void 0, function () {\n      var config;\n      return __generator(this, function (_a) {\n        if (pluggable && pluggable.getCategory() === 'XR') {\n          this._pluggables[pluggable.getProviderName()] = pluggable;\n          config = pluggable.configure(this._options);\n          return [2 /*return*/, config];\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  XRClass.prototype.loadScene = function (sceneName, domElementId, sceneOptions, provider) {\n    if (sceneOptions === void 0) {\n      sceneOptions = {};\n    }\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n            return [4 /*yield*/, this._pluggables[provider].loadScene(sceneName, domElementId, sceneOptions)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  XRClass.prototype.isSceneLoaded = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].isSceneLoaded(sceneName);\n  };\n  XRClass.prototype.getSceneController = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].getSceneController(sceneName);\n  };\n  XRClass.prototype.isVRCapable = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].isVRCapable(sceneName);\n  };\n  XRClass.prototype.isVRPresentationActive = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].isVRPresentationActive(sceneName);\n  };\n  XRClass.prototype.start = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].start(sceneName);\n  };\n  XRClass.prototype.enterVR = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].enterVR(sceneName);\n  };\n  XRClass.prototype.exitVR = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].exitVR(sceneName);\n  };\n  XRClass.prototype.isMuted = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].isMuted(sceneName);\n  };\n  XRClass.prototype.setMuted = function (sceneName, muted, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].setMuted(sceneName, muted);\n  };\n  XRClass.prototype.onSceneEvent = function (sceneName, eventName, eventHandler, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].onSceneEvent(sceneName, eventName, eventHandler);\n  };\n  XRClass.prototype.enableAudio = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].enableAudio(sceneName);\n  };\n  return XRClass;\n}();\nexport { XRClass };\nexport var XR = new XRClass(null);\nAmplify.register(XR);","map":{"version":3,"names":["Amplify","ConsoleLogger","Logger","SumerianProvider","XRProviderNotConfigured","logger","DEFAULT_PROVIDER_NAME","XRClass","options","_options","debug","_defaultProvider","_pluggables","addPluggable","prototype","configure","_this","opt","XR","Object","assign","entries","map","_a","_b","__read","name","provider","pluggable","getCategory","getProviderName","config","loadScene","sceneName","domElementId","sceneOptions","sent","isSceneLoaded","getSceneController","isVRCapable","isVRPresentationActive","start","enterVR","exitVR","isMuted","setMuted","muted","onSceneEvent","eventName","eventHandler","enableAudio","register"],"sources":["/Users/ericli/node_modules/aws-amplify/node_modules/@aws-amplify/xr/src/XR.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify, ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { XRProvider, XROptions, SceneOptions } from './types';\nimport { SumerianProvider } from './Providers/SumerianProvider';\nimport { XRProviderNotConfigured } from './Errors';\n\nconst logger = new Logger('XR');\n\nconst DEFAULT_PROVIDER_NAME = 'SumerianProvider';\n\nexport class XRClass {\n\tprivate _options: XROptions;\n\n\tprivate _pluggables: { [key: string]: XRProvider };\n\tprivate _defaultProvider: string;\n\n\t/**\n\t * Initialize XR with AWS configurations\n\t *\n\t * @param {XROptions} options - Configuration object for XR\n\t */\n\tconstructor(options: XROptions) {\n\t\tthis._options = options;\n\t\tlogger.debug('XR Options', this._options);\n\t\tthis._defaultProvider = DEFAULT_PROVIDER_NAME;\n\t\tthis._pluggables = {};\n\n\t\t// Add default provider\n\t\tthis.addPluggable(new SumerianProvider());\n\t}\n\n\t/**\n\t * Configure XR part with configurations\n\t *\n\t * @param {XROptions} config - Configuration for XR\n\t * @return {Object} - The current configuration\n\t */\n\tconfigure(options: XROptions) {\n\t\tconst opt = options ? options.XR || options : {};\n\t\tlogger.debug('configure XR', { opt });\n\n\t\tthis._options = Object.assign({}, this._options, opt);\n\n\t\tObject.entries(this._pluggables).map(([name, provider]) => {\n\t\t\tif (name === this._defaultProvider && !opt[this._defaultProvider]) {\n\t\t\t\tprovider.configure(this._options);\n\t\t\t} else {\n\t\t\t\tprovider.configure(this._options[name]);\n\t\t\t}\n\t\t});\n\n\t\treturn this._options;\n\t}\n\n\t/**\n\t * add plugin into XR category\n\t * @param {Object} pluggable - an instance of the plugin\n\t */\n\tpublic async addPluggable(pluggable: XRProvider) {\n\t\tif (pluggable && pluggable.getCategory() === 'XR') {\n\t\t\tthis._pluggables[pluggable.getProviderName()] = pluggable;\n\t\t\tconst config = pluggable.configure(this._options);\n\n\t\t\treturn config;\n\t\t}\n\t}\n\n\tpublic async loadScene(\n\t\tsceneName: string,\n\t\tdomElementId: string,\n\t\tsceneOptions: SceneOptions = {},\n\t\tprovider: string = this._defaultProvider\n\t) {\n\t\tif (!this._pluggables[provider])\n\t\t\tthrow new XRProviderNotConfigured(\n\t\t\t\t`Provider '${provider}' not configured`\n\t\t\t);\n\t\treturn await this._pluggables[provider].loadScene(\n\t\t\tsceneName,\n\t\t\tdomElementId,\n\t\t\tsceneOptions\n\t\t);\n\t}\n\n\tpublic isSceneLoaded(\n\t\tsceneName: string,\n\t\tprovider: string = this._defaultProvider\n\t) {\n\t\tif (!this._pluggables[provider])\n\t\t\tthrow new XRProviderNotConfigured(\n\t\t\t\t`Provider '${provider}' not configured`\n\t\t\t);\n\t\treturn this._pluggables[provider].isSceneLoaded(sceneName);\n\t}\n\n\tpublic getSceneController(\n\t\tsceneName: string,\n\t\tprovider: string = this._defaultProvider\n\t) {\n\t\tif (!this._pluggables[provider])\n\t\t\tthrow new XRProviderNotConfigured(\n\t\t\t\t`Provider '${provider}' not configured`\n\t\t\t);\n\t\treturn this._pluggables[provider].getSceneController(sceneName);\n\t}\n\n\tpublic isVRCapable(\n\t\tsceneName: string,\n\t\tprovider: string = this._defaultProvider\n\t) {\n\t\tif (!this._pluggables[provider])\n\t\t\tthrow new XRProviderNotConfigured(\n\t\t\t\t`Provider '${provider}' not configured`\n\t\t\t);\n\t\treturn this._pluggables[provider].isVRCapable(sceneName);\n\t}\n\n\tpublic isVRPresentationActive(\n\t\tsceneName: string,\n\t\tprovider: string = this._defaultProvider\n\t) {\n\t\tif (!this._pluggables[provider])\n\t\t\tthrow new XRProviderNotConfigured(\n\t\t\t\t`Provider '${provider}' not configured`\n\t\t\t);\n\t\treturn this._pluggables[provider].isVRPresentationActive(sceneName);\n\t}\n\n\tpublic start(sceneName: string, provider: string = this._defaultProvider) {\n\t\tif (!this._pluggables[provider])\n\t\t\tthrow new XRProviderNotConfigured(\n\t\t\t\t`Provider '${provider}' not configured`\n\t\t\t);\n\t\treturn this._pluggables[provider].start(sceneName);\n\t}\n\n\tpublic enterVR(sceneName: string, provider: string = this._defaultProvider) {\n\t\tif (!this._pluggables[provider])\n\t\t\tthrow new XRProviderNotConfigured(\n\t\t\t\t`Provider '${provider}' not configured`\n\t\t\t);\n\t\treturn this._pluggables[provider].enterVR(sceneName);\n\t}\n\n\tpublic exitVR(sceneName: string, provider: string = this._defaultProvider) {\n\t\tif (!this._pluggables[provider])\n\t\t\tthrow new XRProviderNotConfigured(\n\t\t\t\t`Provider '${provider}' not configured`\n\t\t\t);\n\t\treturn this._pluggables[provider].exitVR(sceneName);\n\t}\n\n\tpublic isMuted(sceneName: string, provider: string = this._defaultProvider) {\n\t\tif (!this._pluggables[provider])\n\t\t\tthrow new XRProviderNotConfigured(\n\t\t\t\t`Provider '${provider}' not configured`\n\t\t\t);\n\t\treturn this._pluggables[provider].isMuted(sceneName);\n\t}\n\n\tpublic setMuted(\n\t\tsceneName: string,\n\t\tmuted: boolean,\n\t\tprovider: string = this._defaultProvider\n\t) {\n\t\tif (!this._pluggables[provider])\n\t\t\tthrow new XRProviderNotConfigured(\n\t\t\t\t`Provider '${provider}' not configured`\n\t\t\t);\n\t\treturn this._pluggables[provider].setMuted(sceneName, muted);\n\t}\n\n\tpublic onSceneEvent(\n\t\tsceneName: string,\n\t\teventName: string,\n\t\teventHandler: Function,\n\t\tprovider: string = this._defaultProvider\n\t) {\n\t\tif (!this._pluggables[provider])\n\t\t\tthrow new XRProviderNotConfigured(\n\t\t\t\t`Provider '${provider}' not configured`\n\t\t\t);\n\t\treturn this._pluggables[provider].onSceneEvent(\n\t\t\tsceneName,\n\t\t\teventName,\n\t\t\teventHandler\n\t\t);\n\t}\n\n\tpublic enableAudio(\n\t\tsceneName: string,\n\t\tprovider: string = this._defaultProvider\n\t) {\n\t\tif (!this._pluggables[provider])\n\t\t\tthrow new XRProviderNotConfigured(\n\t\t\t\t`Provider '${provider}' not configured`\n\t\t\t);\n\t\treturn this._pluggables[provider].enableAudio(sceneName);\n\t}\n}\n\nexport const XR = new XRClass(null);\nAmplify.register(XR);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}