{"ast":null,"code":"import { NO_RETRY_INCREMENT, RETRY_COST, TIMEOUT_RETRY_COST } from \"@aws-sdk/util-retry\";\nexport var getDefaultRetryQuota = function getDefaultRetryQuota(initialRetryTokens, options) {\n  var _options$noRetryIncre, _options$retryCost, _options$timeoutRetry;\n  var MAX_CAPACITY = initialRetryTokens;\n  var noRetryIncrement = (_options$noRetryIncre = options === null || options === void 0 ? void 0 : options.noRetryIncrement) !== null && _options$noRetryIncre !== void 0 ? _options$noRetryIncre : NO_RETRY_INCREMENT;\n  var retryCost = (_options$retryCost = options === null || options === void 0 ? void 0 : options.retryCost) !== null && _options$retryCost !== void 0 ? _options$retryCost : RETRY_COST;\n  var timeoutRetryCost = (_options$timeoutRetry = options === null || options === void 0 ? void 0 : options.timeoutRetryCost) !== null && _options$timeoutRetry !== void 0 ? _options$timeoutRetry : TIMEOUT_RETRY_COST;\n  var availableCapacity = initialRetryTokens;\n  var getCapacityAmount = function getCapacityAmount(error) {\n    return error.name === \"TimeoutError\" ? timeoutRetryCost : retryCost;\n  };\n  var hasRetryTokens = function hasRetryTokens(error) {\n    return getCapacityAmount(error) <= availableCapacity;\n  };\n  var retrieveRetryTokens = function retrieveRetryTokens(error) {\n    if (!hasRetryTokens(error)) {\n      throw new Error(\"No retry token available\");\n    }\n    var capacityAmount = getCapacityAmount(error);\n    availableCapacity -= capacityAmount;\n    return capacityAmount;\n  };\n  var releaseRetryTokens = function releaseRetryTokens(capacityReleaseAmount) {\n    availableCapacity += capacityReleaseAmount !== null && capacityReleaseAmount !== void 0 ? capacityReleaseAmount : noRetryIncrement;\n    availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);\n  };\n  return Object.freeze({\n    hasRetryTokens: hasRetryTokens,\n    retrieveRetryTokens: retrieveRetryTokens,\n    releaseRetryTokens: releaseRetryTokens\n  });\n};","map":{"version":3,"names":["NO_RETRY_INCREMENT","RETRY_COST","TIMEOUT_RETRY_COST","getDefaultRetryQuota","initialRetryTokens","options","_options$noRetryIncre","_options$retryCost","_options$timeoutRetry","MAX_CAPACITY","noRetryIncrement","retryCost","timeoutRetryCost","availableCapacity","getCapacityAmount","error","name","hasRetryTokens","retrieveRetryTokens","Error","capacityAmount","releaseRetryTokens","capacityReleaseAmount","Math","min","Object","freeze"],"sources":["/Users/ericli/Desktop/pill2/node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/middleware-retry/dist-es/defaultRetryQuota.js"],"sourcesContent":["import { NO_RETRY_INCREMENT, RETRY_COST, TIMEOUT_RETRY_COST } from \"@aws-sdk/util-retry\";\nexport const getDefaultRetryQuota = (initialRetryTokens, options) => {\n    const MAX_CAPACITY = initialRetryTokens;\n    const noRetryIncrement = options?.noRetryIncrement ?? NO_RETRY_INCREMENT;\n    const retryCost = options?.retryCost ?? RETRY_COST;\n    const timeoutRetryCost = options?.timeoutRetryCost ?? TIMEOUT_RETRY_COST;\n    let availableCapacity = initialRetryTokens;\n    const getCapacityAmount = (error) => (error.name === \"TimeoutError\" ? timeoutRetryCost : retryCost);\n    const hasRetryTokens = (error) => getCapacityAmount(error) <= availableCapacity;\n    const retrieveRetryTokens = (error) => {\n        if (!hasRetryTokens(error)) {\n            throw new Error(\"No retry token available\");\n        }\n        const capacityAmount = getCapacityAmount(error);\n        availableCapacity -= capacityAmount;\n        return capacityAmount;\n    };\n    const releaseRetryTokens = (capacityReleaseAmount) => {\n        availableCapacity += capacityReleaseAmount ?? noRetryIncrement;\n        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);\n    };\n    return Object.freeze({\n        hasRetryTokens,\n        retrieveRetryTokens,\n        releaseRetryTokens,\n    });\n};\n"],"mappings":"AAAA,SAASA,kBAAkB,EAAEC,UAAU,EAAEC,kBAAkB,QAAQ,qBAAqB;AACxF,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAAIC,kBAAkB,EAAEC,OAAO,EAAK;EAAA,IAAAC,qBAAA,EAAAC,kBAAA,EAAAC,qBAAA;EACjE,IAAMC,YAAY,GAAGL,kBAAkB;EACvC,IAAMM,gBAAgB,IAAAJ,qBAAA,GAAGD,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEK,gBAAgB,cAAAJ,qBAAA,cAAAA,qBAAA,GAAIN,kBAAkB;EACxE,IAAMW,SAAS,IAAAJ,kBAAA,GAAGF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEM,SAAS,cAAAJ,kBAAA,cAAAA,kBAAA,GAAIN,UAAU;EAClD,IAAMW,gBAAgB,IAAAJ,qBAAA,GAAGH,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEO,gBAAgB,cAAAJ,qBAAA,cAAAA,qBAAA,GAAIN,kBAAkB;EACxE,IAAIW,iBAAiB,GAAGT,kBAAkB;EAC1C,IAAMU,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAIC,KAAK;IAAA,OAAMA,KAAK,CAACC,IAAI,KAAK,cAAc,GAAGJ,gBAAgB,GAAGD,SAAS;EAAA,CAAC;EACnG,IAAMM,cAAc,GAAG,SAAjBA,cAAcA,CAAIF,KAAK;IAAA,OAAKD,iBAAiB,CAACC,KAAK,CAAC,IAAIF,iBAAiB;EAAA;EAC/E,IAAMK,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAIH,KAAK,EAAK;IACnC,IAAI,CAACE,cAAc,CAACF,KAAK,CAAC,EAAE;MACxB,MAAM,IAAII,KAAK,CAAC,0BAA0B,CAAC;IAC/C;IACA,IAAMC,cAAc,GAAGN,iBAAiB,CAACC,KAAK,CAAC;IAC/CF,iBAAiB,IAAIO,cAAc;IACnC,OAAOA,cAAc;EACzB,CAAC;EACD,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAIC,qBAAqB,EAAK;IAClDT,iBAAiB,IAAIS,qBAAqB,aAArBA,qBAAqB,cAArBA,qBAAqB,GAAIZ,gBAAgB;IAC9DG,iBAAiB,GAAGU,IAAI,CAACC,GAAG,CAACX,iBAAiB,EAAEJ,YAAY,CAAC;EACjE,CAAC;EACD,OAAOgB,MAAM,CAACC,MAAM,CAAC;IACjBT,cAAc,EAAdA,cAAc;IACdC,mBAAmB,EAAnBA,mBAAmB;IACnBG,kBAAkB,EAAlBA;EACJ,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}