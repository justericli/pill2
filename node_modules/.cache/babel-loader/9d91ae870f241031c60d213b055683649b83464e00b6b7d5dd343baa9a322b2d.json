{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ericli/Desktop/pill2/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/ericli/Desktop/pill2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nexport var getEndpointFromRegion = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(input) {\n    var _yield$input$regionIn;\n    var _input$tls, tls, region, dnsHostRegex, useDualstackEndpoint, useFipsEndpoint, _ref2, hostname;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _input$tls = input.tls, tls = _input$tls === void 0 ? true : _input$tls;\n          _context.next = 3;\n          return input.region();\n        case 3:\n          region = _context.sent;\n          dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);\n          if (dnsHostRegex.test(region)) {\n            _context.next = 7;\n            break;\n          }\n          throw new Error(\"Invalid region in client config\");\n        case 7:\n          _context.next = 9;\n          return input.useDualstackEndpoint();\n        case 9:\n          useDualstackEndpoint = _context.sent;\n          _context.next = 12;\n          return input.useFipsEndpoint();\n        case 12:\n          useFipsEndpoint = _context.sent;\n          _context.next = 15;\n          return input.regionInfoProvider(region, {\n            useDualstackEndpoint: useDualstackEndpoint,\n            useFipsEndpoint: useFipsEndpoint\n          });\n        case 15:\n          _context.t1 = _yield$input$regionIn = _context.sent;\n          _context.t0 = _context.t1 !== null;\n          if (!_context.t0) {\n            _context.next = 19;\n            break;\n          }\n          _context.t0 = _yield$input$regionIn !== void 0;\n        case 19:\n          if (!_context.t0) {\n            _context.next = 23;\n            break;\n          }\n          _context.t2 = _yield$input$regionIn;\n          _context.next = 24;\n          break;\n        case 23:\n          _context.t2 = {};\n        case 24:\n          _ref2 = _context.t2;\n          hostname = _ref2.hostname;\n          if (hostname) {\n            _context.next = 28;\n            break;\n          }\n          throw new Error(\"Cannot resolve hostname from client config\");\n        case 28:\n          return _context.abrupt(\"return\", input.urlParser(\"\".concat(tls ? \"https:\" : \"http:\", \"//\").concat(hostname)));\n        case 29:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function getEndpointFromRegion(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["getEndpointFromRegion","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","input","_yield$input$regionIn","_input$tls","tls","region","dnsHostRegex","useDualstackEndpoint","useFipsEndpoint","_ref2","hostname","wrap","_callee$","_context","prev","next","sent","RegExp","test","Error","regionInfoProvider","t1","t0","t2","abrupt","urlParser","concat","stop","_x","apply","arguments"],"sources":["/Users/ericli/Desktop/pill2/node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/utils/getEndpointFromRegion.js"],"sourcesContent":["export const getEndpointFromRegion = async (input) => {\n    const { tls = true } = input;\n    const region = await input.region();\n    const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);\n    if (!dnsHostRegex.test(region)) {\n        throw new Error(\"Invalid region in client config\");\n    }\n    const useDualstackEndpoint = await input.useDualstackEndpoint();\n    const useFipsEndpoint = await input.useFipsEndpoint();\n    const { hostname } = (await input.regionInfoProvider(region, { useDualstackEndpoint, useFipsEndpoint })) ?? {};\n    if (!hostname) {\n        throw new Error(\"Cannot resolve hostname from client config\");\n    }\n    return input.urlParser(`${tls ? \"https:\" : \"http:\"}//${hostname}`);\n};\n"],"mappings":";;AAAA,OAAO,IAAMA,qBAAqB;EAAA,IAAAC,IAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAG,SAAAC,QAAOC,KAAK;IAAA,IAAAC,qBAAA;IAAA,IAAAC,UAAA,EAAAC,GAAA,EAAAC,MAAA,EAAAC,YAAA,EAAAC,oBAAA,EAAAC,eAAA,EAAAC,KAAA,EAAAC,QAAA;IAAA,OAAAZ,mBAAA,GAAAa,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAAZ,UAAA,GACtBF,KAAK,CAApBG,GAAG,EAAHA,GAAG,GAAAD,UAAA,cAAG,IAAI,GAAAA,UAAA;UAAAU,QAAA,CAAAE,IAAA;UAAA,OACGd,KAAK,CAACI,MAAM,EAAE;QAAA;UAA7BA,MAAM,GAAAQ,QAAA,CAAAG,IAAA;UACNV,YAAY,GAAG,IAAIW,MAAM,CAAC,0DAA0D,CAAC;UAAA,IACtFX,YAAY,CAACY,IAAI,CAACb,MAAM,CAAC;YAAAQ,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,MACpB,IAAII,KAAK,CAAC,iCAAiC,CAAC;QAAA;UAAAN,QAAA,CAAAE,IAAA;UAAA,OAEnBd,KAAK,CAACM,oBAAoB,EAAE;QAAA;UAAzDA,oBAAoB,GAAAM,QAAA,CAAAG,IAAA;UAAAH,QAAA,CAAAE,IAAA;UAAA,OACId,KAAK,CAACO,eAAe,EAAE;QAAA;UAA/CA,eAAe,GAAAK,QAAA,CAAAG,IAAA;UAAAH,QAAA,CAAAE,IAAA;UAAA,OACOd,KAAK,CAACmB,kBAAkB,CAACf,MAAM,EAAE;YAAEE,oBAAoB,EAApBA,oBAAoB;YAAEC,eAAe,EAAfA;UAAgB,CAAC,CAAC;QAAA;UAAAK,QAAA,CAAAQ,EAAA,GAAAnB,qBAAA,GAAAW,QAAA,CAAAG,IAAA;UAAAH,QAAA,CAAAS,EAAA,GAAAT,QAAA,CAAAQ,EAAA;UAAA,KAAAR,QAAA,CAAAS,EAAA;YAAAT,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAAF,QAAA,CAAAS,EAAA,GAAApB,qBAAA;QAAA;UAAA,KAAAW,QAAA,CAAAS,EAAA;YAAAT,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAAF,QAAA,CAAAU,EAAA,GAAArB,qBAAA;UAAAW,QAAA,CAAAE,IAAA;UAAA;QAAA;UAAAF,QAAA,CAAAU,EAAA,GAAK,CAAC,CAAC;QAAA;UAAAd,KAAA,GAAAI,QAAA,CAAAU,EAAA;UAAtGb,QAAQ,GAAAD,KAAA,CAARC,QAAQ;UAAA,IACXA,QAAQ;YAAAG,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,MACH,IAAII,KAAK,CAAC,4CAA4C,CAAC;QAAA;UAAA,OAAAN,QAAA,CAAAW,MAAA,WAE1DvB,KAAK,CAACwB,SAAS,IAAAC,MAAA,CAAItB,GAAG,GAAG,QAAQ,GAAG,OAAO,QAAAsB,MAAA,CAAKhB,QAAQ,EAAG;QAAA;QAAA;UAAA,OAAAG,QAAA,CAAAc,IAAA;MAAA;IAAA,GAAA3B,OAAA;EAAA,CACrE;EAAA,gBAdYL,qBAAqBA,CAAAiC,EAAA;IAAA,OAAAhC,IAAA,CAAAiC,KAAA,OAAAC,SAAA;EAAA;AAAA,GAcjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}