{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { isa as __isa } from \"@aws-sdk/smithy-client\";\nexport var Event;\n(function (Event) {\n  Event.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n  Event.isa = function (o) {\n    return __isa(o, \"Event\");\n  };\n})(Event || (Event = {}));\nexport var InvalidInputException;\n(function (InvalidInputException) {\n  InvalidInputException.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n  InvalidInputException.isa = function (o) {\n    return __isa(o, \"InvalidInputException\");\n  };\n})(InvalidInputException || (InvalidInputException = {}));\nexport var PutEventsRequest;\n(function (PutEventsRequest) {\n  PutEventsRequest.filterSensitiveLog = function (obj) {\n    return __assign({}, obj);\n  };\n  PutEventsRequest.isa = function (o) {\n    return __isa(o, \"PutEventsRequest\");\n  };\n})(PutEventsRequest || (PutEventsRequest = {}));","map":{"version":3,"names":["isa","__isa","Event","filterSensitiveLog","obj","__assign","o","InvalidInputException","PutEventsRequest"],"sources":["/Users/ericli/node_modules/@aws-sdk/client-personalize-events/models/index.ts"],"sourcesContent":["import {\n  SENSITIVE_STRING,\n  LazyJsonString as __LazyJsonString,\n  SmithyException as __SmithyException,\n  isa as __isa,\n} from \"@aws-sdk/smithy-client\";\nimport { MetadataBearer as $MetadataBearer } from \"@aws-sdk/types\";\n\n/**\n * <p>Represents user interaction event information sent using the\n *       <code>PutEvents</code> API.</p>\n */\nexport interface Event {\n  __type?: \"Event\";\n  /**\n   * <p>The type of event. This property corresponds to the <code>EVENT_TYPE</code>\n   *       field of the Interactions schema.</p>\n   */\n  eventType: string | undefined;\n\n  /**\n   * <p>A string map of event-specific data that you might choose to record. For example, if a\n   *       user rates a movie on your site, you might send the movie ID and rating, and the number of\n   *       movie ratings made by the user.</p>\n   *          <p>Each item in the map consists of a key-value pair. For example,</p>\n   *          <p>\n   *             <code>{\"itemId\": \"movie1\"}</code>\n   *          </p>\n   *          <p>\n   *             <code>{\"itemId\": \"movie2\", \"eventValue\": \"4.5\"}</code>\n   *          </p>\n   *          <p>\n   *             <code>{\"itemId\": \"movie3\", \"eventValue\": \"3\", \"numberOfRatings\": \"12\"}</code>\n   *          </p>\n   *          <p>The keys use camel case names that match the fields in the Interactions\n   *       schema. The <code>itemId</code> and <code>eventValue</code> keys correspond to the\n   *       <code>ITEM_ID</code> and <code>EVENT_VALUE</code> fields.\n   *       In the above example, the <code>eventType</code> might be 'MovieRating' with\n   *       <code>eventValue</code> being the rating. The <code>numberOfRatings</code> would match the\n   *       'NUMBER_OF_RATINGS' field defined in the Interactions schema.</p>\n   */\n  properties: __LazyJsonString | string | undefined;\n\n  /**\n   * <p>The timestamp on the client side when the event occurred.</p>\n   */\n  sentAt: Date | undefined;\n\n  /**\n   * <p>An ID associated with the event. If an event ID is not provided, Amazon Personalize generates\n   *       a unique ID for the event. An event ID is not used as an input to the model. Amazon Personalize uses\n   *       the event ID to distinquish unique events. Any subsequent events after the first with the\n   *       same event ID are not used in model training.</p>\n   */\n  eventId?: string;\n}\n\nexport namespace Event {\n  export const filterSensitiveLog = (obj: Event): any => ({\n    ...obj,\n  });\n  export const isa = (o: any): o is Event => __isa(o, \"Event\");\n}\n\n/**\n * <p>Provide a valid value for the field or parameter.</p>\n */\nexport interface InvalidInputException extends __SmithyException, $MetadataBearer {\n  name: \"InvalidInputException\";\n  $fault: \"client\";\n  message?: string;\n}\n\nexport namespace InvalidInputException {\n  export const filterSensitiveLog = (obj: InvalidInputException): any => ({\n    ...obj,\n  });\n  export const isa = (o: any): o is InvalidInputException => __isa(o, \"InvalidInputException\");\n}\n\nexport interface PutEventsRequest {\n  __type?: \"PutEventsRequest\";\n  /**\n   * <p>A list of event data from the session.</p>\n   */\n  eventList: Event[] | undefined;\n\n  /**\n   * <p>The user associated with the event.</p>\n   */\n  userId?: string;\n\n  /**\n   * <p>The tracking ID for the event.\n   *       The ID is generated by a call to the\n   *       <a href=\"https://docs.aws.amazon.com/personalize/latest/dg/API_CreateEventTracker.html\">CreateEventTracker</a> API.</p>\n   */\n  trackingId: string | undefined;\n\n  /**\n   * <p>The session ID associated with the user's visit.</p>\n   */\n  sessionId: string | undefined;\n}\n\nexport namespace PutEventsRequest {\n  export const filterSensitiveLog = (obj: PutEventsRequest): any => ({\n    ...obj,\n  });\n  export const isa = (o: any): o is PutEventsRequest => __isa(o, \"PutEventsRequest\");\n}\n"],"mappings":";AAAA,SAIEA,GAAG,IAAIC,KAAK,QACP,wBAAwB;AAoD/B,OAAM,IAAWC,KAAK;AAAtB,WAAiBA,KAAK;EACPA,KAAA,CAAAC,kBAAkB,GAAG,UAACC,GAAU;IAAU,OAAAC,QAAA,KAClDD,GAAG;EAD+C,CAErD;EACWF,KAAA,CAAAF,GAAG,GAAG,UAACM,CAAM;IAAiB,OAAAL,KAAK,CAACK,CAAC,EAAE,OAAO,CAAC;EAAjB,CAAiB;AAC9D,CAAC,EALgBJ,KAAK,KAALA,KAAK;AAgBtB,OAAM,IAAWK,qBAAqB;AAAtC,WAAiBA,qBAAqB;EACvBA,qBAAA,CAAAJ,kBAAkB,GAAG,UAACC,GAA0B;IAAU,OAAAC,QAAA,KAClED,GAAG;EAD+D,CAErE;EACWG,qBAAA,CAAAP,GAAG,GAAG,UAACM,CAAM;IAAiC,OAAAL,KAAK,CAACK,CAAC,EAAE,uBAAuB,CAAC;EAAjC,CAAiC;AAC9F,CAAC,EALgBC,qBAAqB,KAArBA,qBAAqB;AAgCtC,OAAM,IAAWC,gBAAgB;AAAjC,WAAiBA,gBAAgB;EAClBA,gBAAA,CAAAL,kBAAkB,GAAG,UAACC,GAAqB;IAAU,OAAAC,QAAA,KAC7DD,GAAG;EAD0D,CAEhE;EACWI,gBAAA,CAAAR,GAAG,GAAG,UAACM,CAAM;IAA4B,OAAAL,KAAK,CAACK,CAAC,EAAE,kBAAkB,CAAC;EAA5B,CAA4B;AACpF,CAAC,EALgBE,gBAAgB,KAAhBA,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}