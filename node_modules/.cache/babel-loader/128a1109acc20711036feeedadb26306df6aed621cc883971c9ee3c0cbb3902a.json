{"ast":null,"code":"import _slicedToArray from \"/Users/ericli/Desktop/pill2/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/ericli/Desktop/pill2/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nexport function parseQueryString(querystring) {\n  var query = {};\n  querystring = querystring.replace(/^\\?/, \"\");\n  if (querystring) {\n    var _iterator = _createForOfIteratorHelper(querystring.split(\"&\")),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var pair = _step.value;\n        var _pair$split = pair.split(\"=\"),\n          _pair$split2 = _slicedToArray(_pair$split, 2),\n          key = _pair$split2[0],\n          _pair$split2$ = _pair$split2[1],\n          value = _pair$split2$ === void 0 ? null : _pair$split2$;\n        key = decodeURIComponent(key);\n        if (value) {\n          value = decodeURIComponent(value);\n        }\n        if (!(key in query)) {\n          query[key] = value;\n        } else if (Array.isArray(query[key])) {\n          query[key].push(value);\n        } else {\n          query[key] = [query[key], value];\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return query;\n}","map":{"version":3,"names":["parseQueryString","querystring","query","replace","_iterator","_createForOfIteratorHelper","split","_step","s","n","done","pair","value","_pair$split","_pair$split2","_slicedToArray","key","_pair$split2$","decodeURIComponent","Array","isArray","push","err","e","f"],"sources":["/Users/ericli/Desktop/pill2/node_modules/@aws-sdk/middleware-endpoint/node_modules/@aws-sdk/querystring-parser/dist-es/index.js"],"sourcesContent":["export function parseQueryString(querystring) {\n    const query = {};\n    querystring = querystring.replace(/^\\?/, \"\");\n    if (querystring) {\n        for (const pair of querystring.split(\"&\")) {\n            let [key, value = null] = pair.split(\"=\");\n            key = decodeURIComponent(key);\n            if (value) {\n                value = decodeURIComponent(value);\n            }\n            if (!(key in query)) {\n                query[key] = value;\n            }\n            else if (Array.isArray(query[key])) {\n                query[key].push(value);\n            }\n            else {\n                query[key] = [query[key], value];\n            }\n        }\n    }\n    return query;\n}\n"],"mappings":";;AAAA,OAAO,SAASA,gBAAgBA,CAACC,WAAW,EAAE;EAC1C,IAAMC,KAAK,GAAG,CAAC,CAAC;EAChBD,WAAW,GAAGA,WAAW,CAACE,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;EAC5C,IAAIF,WAAW,EAAE;IAAA,IAAAG,SAAA,GAAAC,0BAAA,CACMJ,WAAW,CAACK,KAAK,CAAC,GAAG,CAAC;MAAAC,KAAA;IAAA;MAAzC,KAAAH,SAAA,CAAAI,CAAA,MAAAD,KAAA,GAAAH,SAAA,CAAAK,CAAA,IAAAC,IAAA,GAA2C;QAAA,IAAhCC,IAAI,GAAAJ,KAAA,CAAAK,KAAA;QACX,IAAAC,WAAA,GAA0BF,IAAI,CAACL,KAAK,CAAC,GAAG,CAAC;UAAAQ,YAAA,GAAAC,cAAA,CAAAF,WAAA;UAApCG,GAAG,GAAAF,YAAA;UAAAG,aAAA,GAAAH,YAAA;UAAEF,KAAK,GAAAK,aAAA,cAAG,IAAI,GAAAA,aAAA;QACtBD,GAAG,GAAGE,kBAAkB,CAACF,GAAG,CAAC;QAC7B,IAAIJ,KAAK,EAAE;UACPA,KAAK,GAAGM,kBAAkB,CAACN,KAAK,CAAC;QACrC;QACA,IAAI,EAAEI,GAAG,IAAId,KAAK,CAAC,EAAE;UACjBA,KAAK,CAACc,GAAG,CAAC,GAAGJ,KAAK;QACtB,CAAC,MACI,IAAIO,KAAK,CAACC,OAAO,CAAClB,KAAK,CAACc,GAAG,CAAC,CAAC,EAAE;UAChCd,KAAK,CAACc,GAAG,CAAC,CAACK,IAAI,CAACT,KAAK,CAAC;QAC1B,CAAC,MACI;UACDV,KAAK,CAACc,GAAG,CAAC,GAAG,CAACd,KAAK,CAACc,GAAG,CAAC,EAAEJ,KAAK,CAAC;QACpC;MACJ;IAAC,SAAAU,GAAA;MAAAlB,SAAA,CAAAmB,CAAA,CAAAD,GAAA;IAAA;MAAAlB,SAAA,CAAAoB,CAAA;IAAA;EACL;EACA,OAAOtB,KAAK;AAChB"},"metadata":{},"sourceType":"module","externalDependencies":[]}