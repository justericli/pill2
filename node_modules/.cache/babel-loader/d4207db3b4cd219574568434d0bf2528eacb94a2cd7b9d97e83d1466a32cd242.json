{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { ConsoleLogger as Logger, Hub, Credentials, Parser, getAmplifyUserAgent } from '@aws-amplify/core';\nimport { S3Client, GetObjectCommand, DeleteObjectCommand, ListObjectsCommand } from '@aws-sdk/client-s3';\nimport { formatUrl } from '@aws-sdk/util-format-url';\nimport { createRequest } from '@aws-sdk/util-create-request';\nimport { S3RequestPresigner } from '@aws-sdk/s3-request-presigner';\nimport { AxiosHttpHandler } from './axios-http-handler';\nimport { AWSS3ProviderManagedUpload } from './AWSS3ProviderManagedUpload';\nimport * as events from 'events';\nvar logger = new Logger('AWSS3Provider');\nvar AMPLIFY_SYMBOL = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function' ? Symbol.for('amplify_default') : '@@amplify_default';\nvar dispatchStorageEvent = function (track, event, attrs, metrics, message) {\n  if (track) {\n    var data = {\n      attrs: attrs\n    };\n    if (metrics) {\n      data['metrics'] = metrics;\n    }\n    Hub.dispatch('storage', {\n      event: event,\n      data: data,\n      message: message\n    }, 'Storage', AMPLIFY_SYMBOL);\n  }\n};\nvar localTestingStorageEndpoint = 'http://localhost:20005';\n/**\n * Provide storage methods to use AWS S3\n */\nvar AWSS3Provider = /** @class */function () {\n  /**\n   * Initialize Storage with AWS configurations\n   * @param {Object} config - Configuration object for storage\n   */\n  function AWSS3Provider(config) {\n    this._config = config ? config : {};\n    logger.debug('Storage Options', this._config);\n  }\n  /**\n   * get the category of the plugin\n   */\n  AWSS3Provider.prototype.getCategory = function () {\n    return AWSS3Provider.CATEGORY;\n  };\n  /**\n   * get provider name of the plugin\n   */\n  AWSS3Provider.prototype.getProviderName = function () {\n    return AWSS3Provider.PROVIDER_NAME;\n  };\n  /**\n   * Configure Storage part with aws configuration\n   * @param {Object} config - Configuration of the Storage\n   * @return {Object} - Current configuration\n   */\n  AWSS3Provider.prototype.configure = function (config) {\n    logger.debug('configure Storage', config);\n    if (!config) return this._config;\n    var amplifyConfig = Parser.parseMobilehubConfig(config);\n    this._config = Object.assign({}, this._config, amplifyConfig.Storage);\n    if (!this._config.bucket) {\n      logger.debug('Do not have bucket yet');\n    }\n    return this._config;\n  };\n  /**\n   * Get a presigned URL of the file or the object data when download:true\n   *\n   * @param {string} key - key of the object\n   * @param {Object} [config] - { level : private|protected|public, download: true|false }\n   * @return - A promise resolves to Amazon S3 presigned URL on success\n   */\n  AWSS3Provider.prototype.get = function (key, config) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, opt, bucket, download, cacheControl, contentDisposition, contentEncoding, contentLanguage, contentType, expires, track, prefix, final_key, s3, params, getObjectCommand, response, error_1, signer, request, url, _a, error_2;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _b.sent();\n            if (!credentialsOK) {\n              return [2 /*return*/, Promise.reject('No credentials')];\n            }\n            opt = Object.assign({}, this._config, config);\n            bucket = opt.bucket, download = opt.download, cacheControl = opt.cacheControl, contentDisposition = opt.contentDisposition, contentEncoding = opt.contentEncoding, contentLanguage = opt.contentLanguage, contentType = opt.contentType, expires = opt.expires, track = opt.track;\n            prefix = this._prefix(opt);\n            final_key = prefix + key;\n            s3 = this._createNewS3Client(opt);\n            logger.debug('get ' + key + ' from ' + final_key);\n            params = {\n              Bucket: bucket,\n              Key: final_key\n            };\n            // See: https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#getObject-property\n            if (cacheControl) params.ResponseCacheControl = cacheControl;\n            if (contentDisposition) params.ResponseContentDisposition = contentDisposition;\n            if (contentEncoding) params.ResponseContentEncoding = contentEncoding;\n            if (contentLanguage) params.ResponseContentLanguage = contentLanguage;\n            if (contentType) params.ResponseContentType = contentType;\n            if (!(download === true)) return [3 /*break*/, 5];\n            getObjectCommand = new GetObjectCommand(params);\n            _b.label = 2;\n          case 2:\n            _b.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, s3.send(getObjectCommand)];\n          case 3:\n            response = _b.sent();\n            dispatchStorageEvent(track, 'download', {\n              method: 'get',\n              result: 'success'\n            }, {\n              fileSize: Number(response.Body['size'] || response.Body['length'])\n            }, \"Download success for \" + key);\n            return [2 /*return*/, response];\n          case 4:\n            error_1 = _b.sent();\n            dispatchStorageEvent(track, 'download', {\n              method: 'get',\n              result: 'failed'\n            }, null, \"Download failed with \" + error_1.message);\n            throw error_1;\n          case 5:\n            params.Expires = expires || 900; // Default is 15 mins as defined in V2 AWS SDK\n            _b.label = 6;\n          case 6:\n            _b.trys.push([6, 9,, 10]);\n            signer = new S3RequestPresigner(__assign({}, s3.config));\n            return [4 /*yield*/, createRequest(s3, new GetObjectCommand(params))];\n          case 7:\n            request = _b.sent();\n            _a = formatUrl;\n            return [4 /*yield*/, signer.presign(request, {\n              expiresIn: params.Expires\n            })];\n          case 8:\n            url = _a.apply(void 0, [_b.sent()]);\n            dispatchStorageEvent(track, 'getSignedUrl', {\n              method: 'get',\n              result: 'success'\n            }, null, \"Signed URL: \" + url);\n            return [2 /*return*/, url];\n          case 9:\n            error_2 = _b.sent();\n            logger.warn('get signed url error', error_2);\n            dispatchStorageEvent(track, 'getSignedUrl', {\n              method: 'get',\n              result: 'failed'\n            }, null, \"Could not get a signed URL for \" + key);\n            throw error_2;\n          case 10:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Put a file in S3 bucket specified to configure method\n   * @param {string} key - key of the object\n   * @param {Object} object - File to be put in Amazon S3 bucket\n   * @param {Object} [config] - { level : private|protected|public, contentType: MIME Types,\n   *  progressCallback: function }\n   * @return - promise resolves to object on success\n   */\n  AWSS3Provider.prototype.put = function (key, object, config) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, opt, bucket, track, progressCallback, contentType, contentDisposition, cacheControl, expires, metadata, tagging, acl, serverSideEncryption, SSECustomerAlgorithm, SSECustomerKey, SSECustomerKeyMD5, SSEKMSKeyId, type, prefix, final_key, params, emitter, uploader, response, error_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              return [2 /*return*/, Promise.reject('No credentials')];\n            }\n            opt = Object.assign({}, this._config, config);\n            bucket = opt.bucket, track = opt.track, progressCallback = opt.progressCallback;\n            contentType = opt.contentType, contentDisposition = opt.contentDisposition, cacheControl = opt.cacheControl, expires = opt.expires, metadata = opt.metadata, tagging = opt.tagging, acl = opt.acl;\n            serverSideEncryption = opt.serverSideEncryption, SSECustomerAlgorithm = opt.SSECustomerAlgorithm, SSECustomerKey = opt.SSECustomerKey, SSECustomerKeyMD5 = opt.SSECustomerKeyMD5, SSEKMSKeyId = opt.SSEKMSKeyId;\n            type = contentType ? contentType : 'binary/octet-stream';\n            prefix = this._prefix(opt);\n            final_key = prefix + key;\n            logger.debug('put ' + key + ' to ' + final_key);\n            params = {\n              Bucket: bucket,\n              Key: final_key,\n              Body: object,\n              ContentType: type\n            };\n            if (cacheControl) {\n              params.CacheControl = cacheControl;\n            }\n            if (contentDisposition) {\n              params.ContentDisposition = contentDisposition;\n            }\n            if (expires) {\n              params.Expires = expires;\n            }\n            if (metadata) {\n              params.Metadata = metadata;\n            }\n            if (tagging) {\n              params.Tagging = tagging;\n            }\n            if (serverSideEncryption) {\n              params.ServerSideEncryption = serverSideEncryption;\n              if (SSECustomerAlgorithm) {\n                params.SSECustomerAlgorithm = SSECustomerAlgorithm;\n              }\n              if (SSECustomerKey) {\n                params.SSECustomerKey = SSECustomerKey;\n              }\n              if (SSECustomerKeyMD5) {\n                params.SSECustomerKeyMD5 = SSECustomerKeyMD5;\n              }\n              if (SSEKMSKeyId) {\n                params.SSEKMSKeyId = SSEKMSKeyId;\n              }\n            }\n            emitter = new events.EventEmitter();\n            uploader = new AWSS3ProviderManagedUpload(params, opt, emitter);\n            if (acl) {\n              params.ACL = acl;\n            }\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n            emitter.on('sendProgress', function (progress) {\n              if (progressCallback) {\n                if (typeof progressCallback === 'function') {\n                  progressCallback(progress);\n                } else {\n                  logger.warn('progressCallback should be a function, not a ' + typeof progressCallback);\n                }\n              }\n            });\n            return [4 /*yield*/, uploader.upload()];\n          case 3:\n            response = _a.sent();\n            logger.debug('upload result', response);\n            dispatchStorageEvent(track, 'upload', {\n              method: 'put',\n              result: 'success'\n            }, null, \"Upload success for \" + key);\n            return [2 /*return*/, {\n              key: key\n            }];\n          case 4:\n            error_3 = _a.sent();\n            logger.warn('error uploading', error_3);\n            dispatchStorageEvent(track, 'upload', {\n              method: 'put',\n              result: 'failed'\n            }, null, \"Error uploading \" + key);\n            throw error_3;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Remove the object for specified key\n   * @param {string} key - key of the object\n   * @param {Object} [config] - { level : private|protected|public }\n   * @return - Promise resolves upon successful removal of the object\n   */\n  AWSS3Provider.prototype.remove = function (key, config) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, opt, bucket, track, prefix, final_key, s3, params, deleteObjectCommand, response, error_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              return [2 /*return*/, Promise.reject('No credentials')];\n            }\n            opt = Object.assign({}, this._config, config);\n            bucket = opt.bucket, track = opt.track;\n            prefix = this._prefix(opt);\n            final_key = prefix + key;\n            s3 = this._createNewS3Client(opt);\n            logger.debug('remove ' + key + ' from ' + final_key);\n            params = {\n              Bucket: bucket,\n              Key: final_key\n            };\n            deleteObjectCommand = new DeleteObjectCommand(params);\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, s3.send(deleteObjectCommand)];\n          case 3:\n            response = _a.sent();\n            dispatchStorageEvent(track, 'delete', {\n              method: 'remove',\n              result: 'success'\n            }, null, \"Deleted \" + key + \" successfully\");\n            return [2 /*return*/, response];\n          case 4:\n            error_4 = _a.sent();\n            dispatchStorageEvent(track, 'delete', {\n              method: 'remove',\n              result: 'failed'\n            }, null, \"Deletion of \" + key + \" failed with \" + error_4);\n            throw error_4;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * List bucket objects relative to the level and prefix specified\n   * @param {string} path - the path that contains objects\n   * @param {Object} [config] - { level : private|protected|public }\n   * @return - Promise resolves to list of keys for all objects in path\n   */\n  AWSS3Provider.prototype.list = function (path, config) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, opt, bucket, track, maxKeys, prefix, final_path, s3, params, listObjectsCommand, response, list, error_5;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              return [2 /*return*/, Promise.reject('No credentials')];\n            }\n            opt = Object.assign({}, this._config, config);\n            bucket = opt.bucket, track = opt.track, maxKeys = opt.maxKeys;\n            prefix = this._prefix(opt);\n            final_path = prefix + path;\n            s3 = this._createNewS3Client(opt);\n            logger.debug('list ' + path + ' from ' + final_path);\n            params = {\n              Bucket: bucket,\n              Prefix: final_path,\n              MaxKeys: maxKeys\n            };\n            listObjectsCommand = new ListObjectsCommand(params);\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n            return [4 /*yield*/, s3.send(listObjectsCommand)];\n          case 3:\n            response = _a.sent();\n            list = [];\n            if (response && response.Contents) {\n              list = response.Contents.map(function (item) {\n                return {\n                  key: item.Key.substr(prefix.length),\n                  eTag: item.ETag,\n                  lastModified: item.LastModified,\n                  size: item.Size\n                };\n              });\n            }\n            dispatchStorageEvent(track, 'list', {\n              method: 'list',\n              result: 'success'\n            }, null, list.length + \" items returned from list operation\");\n            logger.debug('list', list);\n            return [2 /*return*/, list];\n          case 4:\n            error_5 = _a.sent();\n            logger.warn('list error', error_5);\n            dispatchStorageEvent(track, 'list', {\n              method: 'list',\n              result: 'failed'\n            }, null, \"Listing items failed: \" + error_5.message);\n            throw error_5;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * @private\n   */\n  AWSS3Provider.prototype._ensureCredentials = function () {\n    var _this = this;\n    return Credentials.get().then(function (credentials) {\n      if (!credentials) return false;\n      var cred = Credentials.shear(credentials);\n      logger.debug('set credentials for storage', cred);\n      _this._config.credentials = cred;\n      return true;\n    }).catch(function (error) {\n      logger.warn('ensure credentials error', error);\n      return false;\n    });\n  };\n  /**\n   * @private\n   */\n  AWSS3Provider.prototype._prefix = function (config) {\n    var credentials = config.credentials,\n      level = config.level;\n    var customPrefix = config.customPrefix || {};\n    var identityId = config.identityId || credentials.identityId;\n    var privatePath = (customPrefix.private !== undefined ? customPrefix.private : 'private/') + identityId + '/';\n    var protectedPath = (customPrefix.protected !== undefined ? customPrefix.protected : 'protected/') + identityId + '/';\n    var publicPath = customPrefix.public !== undefined ? customPrefix.public : 'public/';\n    switch (level) {\n      case 'private':\n        return privatePath;\n      case 'protected':\n        return protectedPath;\n      default:\n        return publicPath;\n    }\n  };\n  /**\n   * @private creates an S3 client with new V3 aws sdk\n   */\n  AWSS3Provider.prototype._createNewS3Client = function (config, emitter) {\n    var region = config.region,\n      credentials = config.credentials,\n      cancelTokenSource = config.cancelTokenSource,\n      dangerouslyConnectToHttpEndpointForTesting = config.dangerouslyConnectToHttpEndpointForTesting;\n    var localTestingConfig = {};\n    if (dangerouslyConnectToHttpEndpointForTesting) {\n      localTestingConfig = {\n        endpoint: localTestingStorageEndpoint,\n        tls: false,\n        bucketEndpoint: false,\n        forcePathStyle: true\n      };\n    }\n    var s3client = new S3Client(__assign(__assign({\n      region: region,\n      credentials: credentials,\n      customUserAgent: getAmplifyUserAgent()\n    }, localTestingConfig), {\n      requestHandler: new AxiosHttpHandler({}, emitter, cancelTokenSource)\n    }));\n    return s3client;\n  };\n  AWSS3Provider.CATEGORY = 'Storage';\n  AWSS3Provider.PROVIDER_NAME = 'AWSS3';\n  return AWSS3Provider;\n}();\nexport { AWSS3Provider };\n/**\n * @deprecated use named import\n */\nexport default AWSS3Provider;","map":{"version":3,"names":["ConsoleLogger","Logger","Hub","Credentials","Parser","getAmplifyUserAgent","S3Client","GetObjectCommand","DeleteObjectCommand","ListObjectsCommand","formatUrl","createRequest","S3RequestPresigner","AxiosHttpHandler","AWSS3ProviderManagedUpload","events","logger","AMPLIFY_SYMBOL","Symbol","for","dispatchStorageEvent","track","event","attrs","metrics","message","data","dispatch","localTestingStorageEndpoint","AWSS3Provider","config","_config","debug","prototype","getCategory","CATEGORY","getProviderName","PROVIDER_NAME","configure","amplifyConfig","parseMobilehubConfig","Object","assign","Storage","bucket","get","key","_ensureCredentials","credentialsOK","_b","sent","Promise","reject","opt","download","cacheControl","contentDisposition","contentEncoding","contentLanguage","contentType","expires","prefix","_prefix","final_key","s3","_createNewS3Client","params","Bucket","Key","ResponseCacheControl","ResponseContentDisposition","ResponseContentEncoding","ResponseContentLanguage","ResponseContentType","getObjectCommand","send","response","method","result","fileSize","Number","Body","error_1","Expires","signer","__assign","request","_a","presign","expiresIn","url","apply","warn","error_2","put","object","progressCallback","metadata","tagging","acl","serverSideEncryption","SSECustomerAlgorithm","SSECustomerKey","SSECustomerKeyMD5","SSEKMSKeyId","type","ContentType","CacheControl","ContentDisposition","Metadata","Tagging","ServerSideEncryption","emitter","EventEmitter","uploader","ACL","on","progress","upload","error_3","remove","deleteObjectCommand","error_4","list","path","maxKeys","final_path","Prefix","MaxKeys","listObjectsCommand","Contents","map","item","substr","length","eTag","ETag","lastModified","LastModified","size","Size","error_5","_this","then","credentials","cred","shear","catch","error","level","customPrefix","identityId","privatePath","private","undefined","protectedPath","protected","publicPath","public","region","cancelTokenSource","dangerouslyConnectToHttpEndpointForTesting","localTestingConfig","endpoint","tls","bucketEndpoint","forcePathStyle","s3client","customUserAgent","requestHandler"],"sources":["/Users/ericli/node_modules/@aws-amplify/storage/src/providers/AWSS3Provider.ts"],"sourcesContent":["/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport {\n\tConsoleLogger as Logger,\n\tHub,\n\tCredentials,\n\tParser,\n\tgetAmplifyUserAgent,\n} from '@aws-amplify/core';\nimport {\n\tS3Client,\n\tGetObjectCommand,\n\tDeleteObjectCommand,\n\tListObjectsCommand,\n} from '@aws-sdk/client-s3';\nimport { formatUrl } from '@aws-sdk/util-format-url';\nimport { createRequest } from '@aws-sdk/util-create-request';\nimport { S3RequestPresigner } from '@aws-sdk/s3-request-presigner';\nimport { StorageOptions, StorageProvider } from '../types';\nimport { AxiosHttpHandler } from './axios-http-handler';\nimport { AWSS3ProviderManagedUpload } from './AWSS3ProviderManagedUpload';\nimport * as events from 'events';\n\nconst logger = new Logger('AWSS3Provider');\n\nconst AMPLIFY_SYMBOL = (typeof Symbol !== 'undefined' &&\ntypeof Symbol.for === 'function'\n\t? Symbol.for('amplify_default')\n\t: '@@amplify_default') as Symbol;\n\nconst dispatchStorageEvent = (\n\ttrack: boolean,\n\tevent: string,\n\tattrs: any,\n\tmetrics: any,\n\tmessage: string\n) => {\n\tif (track) {\n\t\tconst data = { attrs };\n\t\tif (metrics) {\n\t\t\tdata['metrics'] = metrics;\n\t\t}\n\t\tHub.dispatch(\n\t\t\t'storage',\n\t\t\t{\n\t\t\t\tevent,\n\t\t\t\tdata,\n\t\t\t\tmessage,\n\t\t\t},\n\t\t\t'Storage',\n\t\t\tAMPLIFY_SYMBOL\n\t\t);\n\t}\n};\n\nconst localTestingStorageEndpoint = 'http://localhost:20005';\n/**\n * Provide storage methods to use AWS S3\n */\nexport class AWSS3Provider implements StorageProvider {\n\tstatic CATEGORY = 'Storage';\n\tstatic PROVIDER_NAME = 'AWSS3';\n\t/**\n\t * @private\n\t */\n\tprivate _config;\n\n\t/**\n\t * Initialize Storage with AWS configurations\n\t * @param {Object} config - Configuration object for storage\n\t */\n\tconstructor(config?: StorageOptions) {\n\t\tthis._config = config ? config : {};\n\t\tlogger.debug('Storage Options', this._config);\n\t}\n\n\t/**\n\t * get the category of the plugin\n\t */\n\tpublic getCategory(): string {\n\t\treturn AWSS3Provider.CATEGORY;\n\t}\n\n\t/**\n\t * get provider name of the plugin\n\t */\n\tgetProviderName(): string {\n\t\treturn AWSS3Provider.PROVIDER_NAME;\n\t}\n\n\t/**\n\t * Configure Storage part with aws configuration\n\t * @param {Object} config - Configuration of the Storage\n\t * @return {Object} - Current configuration\n\t */\n\tpublic configure(config?): object {\n\t\tlogger.debug('configure Storage', config);\n\t\tif (!config) return this._config;\n\t\tconst amplifyConfig = Parser.parseMobilehubConfig(config);\n\t\tthis._config = Object.assign({}, this._config, amplifyConfig.Storage);\n\t\tif (!this._config.bucket) {\n\t\t\tlogger.debug('Do not have bucket yet');\n\t\t}\n\t\treturn this._config;\n\t}\n\n\t/**\n\t * Get a presigned URL of the file or the object data when download:true\n\t *\n\t * @param {string} key - key of the object\n\t * @param {Object} [config] - { level : private|protected|public, download: true|false }\n\t * @return - A promise resolves to Amazon S3 presigned URL on success\n\t */\n\tpublic async get(key: string, config?): Promise<string | Object> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\treturn Promise.reject('No credentials');\n\t\t}\n\n\t\tconst opt = Object.assign({}, this._config, config);\n\t\tconst {\n\t\t\tbucket,\n\t\t\tdownload,\n\t\t\tcacheControl,\n\t\t\tcontentDisposition,\n\t\t\tcontentEncoding,\n\t\t\tcontentLanguage,\n\t\t\tcontentType,\n\t\t\texpires,\n\t\t\ttrack,\n\t\t} = opt;\n\t\tconst prefix = this._prefix(opt);\n\t\tconst final_key = prefix + key;\n\t\tconst s3 = this._createNewS3Client(opt);\n\t\tlogger.debug('get ' + key + ' from ' + final_key);\n\n\t\tconst params: any = {\n\t\t\tBucket: bucket,\n\t\t\tKey: final_key,\n\t\t};\n\n\t\t// See: https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#getObject-property\n\t\tif (cacheControl) params.ResponseCacheControl = cacheControl;\n\t\tif (contentDisposition)\n\t\t\tparams.ResponseContentDisposition = contentDisposition;\n\t\tif (contentEncoding) params.ResponseContentEncoding = contentEncoding;\n\t\tif (contentLanguage) params.ResponseContentLanguage = contentLanguage;\n\t\tif (contentType) params.ResponseContentType = contentType;\n\n\t\tif (download === true) {\n\t\t\tconst getObjectCommand = new GetObjectCommand(params);\n\t\t\ttry {\n\t\t\t\tconst response = await s3.send(getObjectCommand);\n\t\t\t\tdispatchStorageEvent(\n\t\t\t\t\ttrack,\n\t\t\t\t\t'download',\n\t\t\t\t\t{ method: 'get', result: 'success' },\n\t\t\t\t\t{\n\t\t\t\t\t\tfileSize: Number(response.Body['size'] || response.Body['length']),\n\t\t\t\t\t},\n\t\t\t\t\t`Download success for ${key}`\n\t\t\t\t);\n\t\t\t\treturn response;\n\t\t\t} catch (error) {\n\t\t\t\tdispatchStorageEvent(\n\t\t\t\t\ttrack,\n\t\t\t\t\t'download',\n\t\t\t\t\t{\n\t\t\t\t\t\tmethod: 'get',\n\t\t\t\t\t\tresult: 'failed',\n\t\t\t\t\t},\n\t\t\t\t\tnull,\n\t\t\t\t\t`Download failed with ${error.message}`\n\t\t\t\t);\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\tparams.Expires = expires || 900; // Default is 15 mins as defined in V2 AWS SDK\n\n\t\ttry {\n\t\t\tconst signer = new S3RequestPresigner({ ...s3.config });\n\t\t\tconst request = await createRequest(s3, new GetObjectCommand(params));\n\t\t\tconst url = formatUrl(\n\t\t\t\t(await signer.presign(request, { expiresIn: params.Expires })) as any\n\t\t\t);\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'getSignedUrl',\n\t\t\t\t{ method: 'get', result: 'success' },\n\t\t\t\tnull,\n\t\t\t\t`Signed URL: ${url}`\n\t\t\t);\n\t\t\treturn url;\n\t\t} catch (error) {\n\t\t\tlogger.warn('get signed url error', error);\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'getSignedUrl',\n\t\t\t\t{ method: 'get', result: 'failed' },\n\t\t\t\tnull,\n\t\t\t\t`Could not get a signed URL for ${key}`\n\t\t\t);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Put a file in S3 bucket specified to configure method\n\t * @param {string} key - key of the object\n\t * @param {Object} object - File to be put in Amazon S3 bucket\n\t * @param {Object} [config] - { level : private|protected|public, contentType: MIME Types,\n\t *  progressCallback: function }\n\t * @return - promise resolves to object on success\n\t */\n\tpublic async put(key: string, object, config?): Promise<Object> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\treturn Promise.reject('No credentials');\n\t\t}\n\n\t\tconst opt = Object.assign({}, this._config, config);\n\t\tconst { bucket, track, progressCallback } = opt;\n\t\tconst {\n\t\t\tcontentType,\n\t\t\tcontentDisposition,\n\t\t\tcacheControl,\n\t\t\texpires,\n\t\t\tmetadata,\n\t\t\ttagging,\n\t\t\tacl,\n\t\t} = opt;\n\t\tconst {\n\t\t\tserverSideEncryption,\n\t\t\tSSECustomerAlgorithm,\n\t\t\tSSECustomerKey,\n\t\t\tSSECustomerKeyMD5,\n\t\t\tSSEKMSKeyId,\n\t\t} = opt;\n\t\tconst type = contentType ? contentType : 'binary/octet-stream';\n\n\t\tconst prefix = this._prefix(opt);\n\t\tconst final_key = prefix + key;\n\t\tlogger.debug('put ' + key + ' to ' + final_key);\n\n\t\tconst params: any = {\n\t\t\tBucket: bucket,\n\t\t\tKey: final_key,\n\t\t\tBody: object,\n\t\t\tContentType: type,\n\t\t};\n\t\tif (cacheControl) {\n\t\t\tparams.CacheControl = cacheControl;\n\t\t}\n\t\tif (contentDisposition) {\n\t\t\tparams.ContentDisposition = contentDisposition;\n\t\t}\n\t\tif (expires) {\n\t\t\tparams.Expires = expires;\n\t\t}\n\t\tif (metadata) {\n\t\t\tparams.Metadata = metadata;\n\t\t}\n\t\tif (tagging) {\n\t\t\tparams.Tagging = tagging;\n\t\t}\n\t\tif (serverSideEncryption) {\n\t\t\tparams.ServerSideEncryption = serverSideEncryption;\n\t\t\tif (SSECustomerAlgorithm) {\n\t\t\t\tparams.SSECustomerAlgorithm = SSECustomerAlgorithm;\n\t\t\t}\n\t\t\tif (SSECustomerKey) {\n\t\t\t\tparams.SSECustomerKey = SSECustomerKey;\n\t\t\t}\n\t\t\tif (SSECustomerKeyMD5) {\n\t\t\t\tparams.SSECustomerKeyMD5 = SSECustomerKeyMD5;\n\t\t\t}\n\t\t\tif (SSEKMSKeyId) {\n\t\t\t\tparams.SSEKMSKeyId = SSEKMSKeyId;\n\t\t\t}\n\t\t}\n\n\t\tconst emitter = new events.EventEmitter();\n\t\tconst uploader = new AWSS3ProviderManagedUpload(params, opt, emitter);\n\n\t\tif (acl) {\n\t\t\tparams.ACL = acl;\n\t\t}\n\n\t\ttry {\n\t\t\temitter.on('sendProgress', progress => {\n\t\t\t\tif (progressCallback) {\n\t\t\t\t\tif (typeof progressCallback === 'function') {\n\t\t\t\t\t\tprogressCallback(progress);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t\t'progressCallback should be a function, not a ' +\n\t\t\t\t\t\t\t\ttypeof progressCallback\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst response = await uploader.upload();\n\n\t\t\tlogger.debug('upload result', response);\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'upload',\n\t\t\t\t{ method: 'put', result: 'success' },\n\t\t\t\tnull,\n\t\t\t\t`Upload success for ${key}`\n\t\t\t);\n\t\t\treturn {\n\t\t\t\tkey,\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tlogger.warn('error uploading', error);\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'upload',\n\t\t\t\t{ method: 'put', result: 'failed' },\n\t\t\t\tnull,\n\t\t\t\t`Error uploading ${key}`\n\t\t\t);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * Remove the object for specified key\n\t * @param {string} key - key of the object\n\t * @param {Object} [config] - { level : private|protected|public }\n\t * @return - Promise resolves upon successful removal of the object\n\t */\n\tpublic async remove(key: string, config?): Promise<any> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\treturn Promise.reject('No credentials');\n\t\t}\n\n\t\tconst opt = Object.assign({}, this._config, config);\n\t\tconst { bucket, track } = opt;\n\n\t\tconst prefix = this._prefix(opt);\n\t\tconst final_key = prefix + key;\n\t\tconst s3 = this._createNewS3Client(opt);\n\t\tlogger.debug('remove ' + key + ' from ' + final_key);\n\n\t\tconst params = {\n\t\t\tBucket: bucket,\n\t\t\tKey: final_key,\n\t\t};\n\n\t\tconst deleteObjectCommand = new DeleteObjectCommand(params);\n\n\t\ttry {\n\t\t\tconst response = await s3.send(deleteObjectCommand);\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'delete',\n\t\t\t\t{ method: 'remove', result: 'success' },\n\t\t\t\tnull,\n\t\t\t\t`Deleted ${key} successfully`\n\t\t\t);\n\t\t\treturn response;\n\t\t} catch (error) {\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'delete',\n\t\t\t\t{ method: 'remove', result: 'failed' },\n\t\t\t\tnull,\n\t\t\t\t`Deletion of ${key} failed with ${error}`\n\t\t\t);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * List bucket objects relative to the level and prefix specified\n\t * @param {string} path - the path that contains objects\n\t * @param {Object} [config] - { level : private|protected|public }\n\t * @return - Promise resolves to list of keys for all objects in path\n\t */\n\tpublic async list(path, config?): Promise<any> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\treturn Promise.reject('No credentials');\n\t\t}\n\n\t\tconst opt = Object.assign({}, this._config, config);\n\t\tconst { bucket, track, maxKeys } = opt;\n\n\t\tconst prefix = this._prefix(opt);\n\t\tconst final_path = prefix + path;\n\t\tconst s3 = this._createNewS3Client(opt);\n\t\tlogger.debug('list ' + path + ' from ' + final_path);\n\n\t\tconst params = {\n\t\t\tBucket: bucket,\n\t\t\tPrefix: final_path,\n\t\t\tMaxKeys: maxKeys,\n\t\t};\n\n\t\tconst listObjectsCommand = new ListObjectsCommand(params);\n\n\t\ttry {\n\t\t\tconst response = await s3.send(listObjectsCommand);\n\t\t\tlet list = [];\n\t\t\tif (response && response.Contents) {\n\t\t\t\tlist = response.Contents.map(item => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tkey: item.Key.substr(prefix.length),\n\t\t\t\t\t\teTag: item.ETag,\n\t\t\t\t\t\tlastModified: item.LastModified,\n\t\t\t\t\t\tsize: item.Size,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t}\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'list',\n\t\t\t\t{ method: 'list', result: 'success' },\n\t\t\t\tnull,\n\t\t\t\t`${list.length} items returned from list operation`\n\t\t\t);\n\t\t\tlogger.debug('list', list);\n\t\t\treturn list;\n\t\t} catch (error) {\n\t\t\tlogger.warn('list error', error);\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'list',\n\t\t\t\t{ method: 'list', result: 'failed' },\n\t\t\t\tnull,\n\t\t\t\t`Listing items failed: ${error.message}`\n\t\t\t);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_ensureCredentials() {\n\t\treturn Credentials.get()\n\t\t\t.then(credentials => {\n\t\t\t\tif (!credentials) return false;\n\t\t\t\tconst cred = Credentials.shear(credentials);\n\t\t\t\tlogger.debug('set credentials for storage', cred);\n\t\t\t\tthis._config.credentials = cred;\n\n\t\t\t\treturn true;\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tlogger.warn('ensure credentials error', error);\n\t\t\t\treturn false;\n\t\t\t});\n\t}\n\n\t/**\n\t * @private\n\t */\n\tprivate _prefix(config) {\n\t\tconst { credentials, level } = config;\n\n\t\tconst customPrefix = config.customPrefix || {};\n\t\tconst identityId = config.identityId || credentials.identityId;\n\t\tconst privatePath =\n\t\t\t(customPrefix.private !== undefined ? customPrefix.private : 'private/') +\n\t\t\tidentityId +\n\t\t\t'/';\n\t\tconst protectedPath =\n\t\t\t(customPrefix.protected !== undefined\n\t\t\t\t? customPrefix.protected\n\t\t\t\t: 'protected/') +\n\t\t\tidentityId +\n\t\t\t'/';\n\t\tconst publicPath =\n\t\t\tcustomPrefix.public !== undefined ? customPrefix.public : 'public/';\n\n\t\tswitch (level) {\n\t\t\tcase 'private':\n\t\t\t\treturn privatePath;\n\t\t\tcase 'protected':\n\t\t\t\treturn protectedPath;\n\t\t\tdefault:\n\t\t\t\treturn publicPath;\n\t\t}\n\t}\n\n\t/**\n\t * @private creates an S3 client with new V3 aws sdk\n\t */\n\tprivate _createNewS3Client(config, emitter?) {\n\t\tconst {\n\t\t\tregion,\n\t\t\tcredentials,\n\t\t\tcancelTokenSource,\n\t\t\tdangerouslyConnectToHttpEndpointForTesting,\n\t\t} = config;\n\t\tlet localTestingConfig = {};\n\n\t\tif (dangerouslyConnectToHttpEndpointForTesting) {\n\t\t\tlocalTestingConfig = {\n\t\t\t\tendpoint: localTestingStorageEndpoint,\n\t\t\t\ttls: false,\n\t\t\t\tbucketEndpoint: false,\n\t\t\t\tforcePathStyle: true,\n\t\t\t};\n\t\t}\n\n\t\tconst s3client = new S3Client({\n\t\t\tregion,\n\t\t\tcredentials,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t\t...localTestingConfig,\n\t\t\trequestHandler: new AxiosHttpHandler({}, emitter, cancelTokenSource),\n\t\t});\n\t\treturn s3client;\n\t}\n}\n\n/**\n * @deprecated use named import\n */\nexport default AWSS3Provider;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;AAYA,SACCA,aAAa,IAAIC,MAAM,EACvBC,GAAG,EACHC,WAAW,EACXC,MAAM,EACNC,mBAAmB,QACb,mBAAmB;AAC1B,SACCC,QAAQ,EACRC,gBAAgB,EAChBC,mBAAmB,EACnBC,kBAAkB,QACZ,oBAAoB;AAC3B,SAASC,SAAS,QAAQ,0BAA0B;AACpD,SAASC,aAAa,QAAQ,8BAA8B;AAC5D,SAASC,kBAAkB,QAAQ,+BAA+B;AAElE,SAASC,gBAAgB,QAAQ,sBAAsB;AACvD,SAASC,0BAA0B,QAAQ,8BAA8B;AACzE,OAAO,KAAKC,MAAM,MAAM,QAAQ;AAEhC,IAAMC,MAAM,GAAG,IAAIf,MAAM,CAAC,eAAe,CAAC;AAE1C,IAAMgB,cAAc,GAAI,OAAOC,MAAM,KAAK,WAAW,IACrD,OAAOA,MAAM,CAACC,GAAG,KAAK,UAAU,GAC7BD,MAAM,CAACC,GAAG,CAAC,iBAAiB,CAAC,GAC7B,mBAA8B;AAEjC,IAAMC,oBAAoB,GAAG,SAAAA,CAC5BC,KAAc,EACdC,KAAa,EACbC,KAAU,EACVC,OAAY,EACZC,OAAe;EAEf,IAAIJ,KAAK,EAAE;IACV,IAAMK,IAAI,GAAG;MAAEH,KAAK,EAAAA;IAAA,CAAE;IACtB,IAAIC,OAAO,EAAE;MACZE,IAAI,CAAC,SAAS,CAAC,GAAGF,OAAO;;IAE1BtB,GAAG,CAACyB,QAAQ,CACX,SAAS,EACT;MACCL,KAAK,EAAAA,KAAA;MACLI,IAAI,EAAAA,IAAA;MACJD,OAAO,EAAAA;KACP,EACD,SAAS,EACTR,cAAc,CACd;;AAEH,CAAC;AAED,IAAMW,2BAA2B,GAAG,wBAAwB;AAC5D;;;AAGA,IAAAC,aAAA;EAQC;;;;EAIA,SAAAA,cAAYC,MAAuB;IAClC,IAAI,CAACC,OAAO,GAAGD,MAAM,GAAGA,MAAM,GAAG,EAAE;IACnCd,MAAM,CAACgB,KAAK,CAAC,iBAAiB,EAAE,IAAI,CAACD,OAAO,CAAC;EAC9C;EAEA;;;EAGOF,aAAA,CAAAI,SAAA,CAAAC,WAAW,GAAlB;IACC,OAAOL,aAAa,CAACM,QAAQ;EAC9B,CAAC;EAED;;;EAGAN,aAAA,CAAAI,SAAA,CAAAG,eAAe,GAAf;IACC,OAAOP,aAAa,CAACQ,aAAa;EACnC,CAAC;EAED;;;;;EAKOR,aAAA,CAAAI,SAAA,CAAAK,SAAS,GAAhB,UAAiBR,MAAO;IACvBd,MAAM,CAACgB,KAAK,CAAC,mBAAmB,EAAEF,MAAM,CAAC;IACzC,IAAI,CAACA,MAAM,EAAE,OAAO,IAAI,CAACC,OAAO;IAChC,IAAMQ,aAAa,GAAGnC,MAAM,CAACoC,oBAAoB,CAACV,MAAM,CAAC;IACzD,IAAI,CAACC,OAAO,GAAGU,MAAM,CAACC,MAAM,CAAC,EAAE,EAAE,IAAI,CAACX,OAAO,EAAEQ,aAAa,CAACI,OAAO,CAAC;IACrE,IAAI,CAAC,IAAI,CAACZ,OAAO,CAACa,MAAM,EAAE;MACzB5B,MAAM,CAACgB,KAAK,CAAC,wBAAwB,CAAC;;IAEvC,OAAO,IAAI,CAACD,OAAO;EACpB,CAAC;EAED;;;;;;;EAOaF,aAAA,CAAAI,SAAA,CAAAY,GAAG,GAAhB,UAAiBC,GAAW,EAAEhB,MAAO;;;;;;YACd,qBAAM,IAAI,CAACiB,kBAAkB,EAAE;;YAA/CC,aAAa,GAAGC,EAAA,CAAAC,IAAA,EAA+B;YACrD,IAAI,CAACF,aAAa,EAAE;cACnB,sBAAOG,OAAO,CAACC,MAAM,CAAC,gBAAgB,CAAC;;YAGlCC,GAAG,GAAGZ,MAAM,CAACC,MAAM,CAAC,EAAE,EAAE,IAAI,CAACX,OAAO,EAAED,MAAM,CAAC;YAElDc,MAAM,GASHS,GAAG,CAAAT,MATA,EACNU,QAAQ,GAQLD,GAAG,CAAAC,QARE,EACRC,YAAY,GAOTF,GAAG,CAAAE,YAPM,EACZC,kBAAkB,GAMfH,GAAG,CAAAG,kBANY,EAClBC,eAAe,GAKZJ,GAAG,CAAAI,eALS,EACfC,eAAe,GAIZL,GAAG,CAAAK,eAJS,EACfC,WAAW,GAGRN,GAAG,CAAAM,WAHK,EACXC,OAAO,GAEJP,GAAG,CAAAO,OAFC,EACPvC,KAAK,GACFgC,GAAG,CAAAhC,KADD;YAEAwC,MAAM,GAAG,IAAI,CAACC,OAAO,CAACT,GAAG,CAAC;YAC1BU,SAAS,GAAGF,MAAM,GAAGf,GAAG;YACxBkB,EAAE,GAAG,IAAI,CAACC,kBAAkB,CAACZ,GAAG,CAAC;YACvCrC,MAAM,CAACgB,KAAK,CAAC,MAAM,GAAGc,GAAG,GAAG,QAAQ,GAAGiB,SAAS,CAAC;YAE3CG,MAAM,GAAQ;cACnBC,MAAM,EAAEvB,MAAM;cACdwB,GAAG,EAAEL;aACL;YAED;YACA,IAAIR,YAAY,EAAEW,MAAM,CAACG,oBAAoB,GAAGd,YAAY;YAC5D,IAAIC,kBAAkB,EACrBU,MAAM,CAACI,0BAA0B,GAAGd,kBAAkB;YACvD,IAAIC,eAAe,EAAES,MAAM,CAACK,uBAAuB,GAAGd,eAAe;YACrE,IAAIC,eAAe,EAAEQ,MAAM,CAACM,uBAAuB,GAAGd,eAAe;YACrE,IAAIC,WAAW,EAAEO,MAAM,CAACO,mBAAmB,GAAGd,WAAW;kBAErDL,QAAQ,KAAK,IAAI,GAAjB;YACGoB,gBAAgB,GAAG,IAAInE,gBAAgB,CAAC2D,MAAM,CAAC;;;;YAEnC,qBAAMF,EAAE,CAACW,IAAI,CAACD,gBAAgB,CAAC;;YAA1CE,QAAQ,GAAG3B,EAAA,CAAAC,IAAA,EAA+B;YAChD9B,oBAAoB,CACnBC,KAAK,EACL,UAAU,EACV;cAAEwD,MAAM,EAAE,KAAK;cAAEC,MAAM,EAAE;YAAS,CAAE,EACpC;cACCC,QAAQ,EAAEC,MAAM,CAACJ,QAAQ,CAACK,IAAI,CAAC,MAAM,CAAC,IAAIL,QAAQ,CAACK,IAAI,CAAC,QAAQ,CAAC;aACjE,EACD,0BAAwBnC,GAAK,CAC7B;YACD,sBAAO8B,QAAQ;;;YAEfxD,oBAAoB,CACnBC,KAAK,EACL,UAAU,EACV;cACCwD,MAAM,EAAE,KAAK;cACbC,MAAM,EAAE;aACR,EACD,IAAI,EACJ,0BAAwBI,OAAK,CAACzD,OAAS,CACvC;YACD,MAAMyD,OAAK;;YAIbhB,MAAM,CAACiB,OAAO,GAAGvB,OAAO,IAAI,GAAG,CAAC,CAAC;;;;YAG1BwB,MAAM,GAAG,IAAIxE,kBAAkB,CAAAyE,QAAA,KAAMrB,EAAE,CAAClC,MAAM,EAAG;YACvC,qBAAMnB,aAAa,CAACqD,EAAE,EAAE,IAAIzD,gBAAgB,CAAC2D,MAAM,CAAC,CAAC;;YAA/DoB,OAAO,GAAGrC,EAAA,CAAAC,IAAA,EAAqD;YACzDqC,EAAA,GAAA7E,SAAS;YACnB,qBAAM0E,MAAM,CAACI,OAAO,CAACF,OAAO,EAAE;cAAEG,SAAS,EAAEvB,MAAM,CAACiB;YAAO,CAAE,CAAC;;YADxDO,GAAG,GAAGH,EAAA,CAAAI,KAAA,UACV1C,EAAA,CAAAC,IAAA,EAA4D,CAAQ,CACrE;YACD9B,oBAAoB,CACnBC,KAAK,EACL,cAAc,EACd;cAAEwD,MAAM,EAAE,KAAK;cAAEC,MAAM,EAAE;YAAS,CAAE,EACpC,IAAI,EACJ,iBAAeY,GAAK,CACpB;YACD,sBAAOA,GAAG;;;YAEV1E,MAAM,CAAC4E,IAAI,CAAC,sBAAsB,EAAEC,OAAK,CAAC;YAC1CzE,oBAAoB,CACnBC,KAAK,EACL,cAAc,EACd;cAAEwD,MAAM,EAAE,KAAK;cAAEC,MAAM,EAAE;YAAQ,CAAE,EACnC,IAAI,EACJ,oCAAkChC,GAAK,CACvC;YACD,MAAM+C,OAAK;;;;;;GAEZ;EAED;;;;;;;;EAQahE,aAAA,CAAAI,SAAA,CAAA6D,GAAG,GAAhB,UAAiBhD,GAAW,EAAEiD,MAAM,EAAEjE,MAAO;;;;;;YACtB,qBAAM,IAAI,CAACiB,kBAAkB,EAAE;;YAA/CC,aAAa,GAAGuC,EAAA,CAAArC,IAAA,EAA+B;YACrD,IAAI,CAACF,aAAa,EAAE;cACnB,sBAAOG,OAAO,CAACC,MAAM,CAAC,gBAAgB,CAAC;;YAGlCC,GAAG,GAAGZ,MAAM,CAACC,MAAM,CAAC,EAAE,EAAE,IAAI,CAACX,OAAO,EAAED,MAAM,CAAC;YAC3Cc,MAAM,GAA8BS,GAAG,CAAAT,MAAjC,EAAEvB,KAAK,GAAuBgC,GAAG,CAAAhC,KAA1B,EAAE2E,gBAAgB,GAAK3C,GAAG,CAAA2C,gBAAR;YAEtCrC,WAAW,GAORN,GAAG,CAAAM,WAPK,EACXH,kBAAkB,GAMfH,GAAG,CAAAG,kBANY,EAClBD,YAAY,GAKTF,GAAG,CAAAE,YALM,EACZK,OAAO,GAIJP,GAAG,CAAAO,OAJC,EACPqC,QAAQ,GAGL5C,GAAG,CAAA4C,QAHE,EACRC,OAAO,GAEJ7C,GAAG,CAAA6C,OAFC,EACPC,GAAG,GACA9C,GAAG,CAAA8C,GADH;YAGHC,oBAAoB,GAKjB/C,GAAG,CAAA+C,oBALc,EACpBC,oBAAoB,GAIjBhD,GAAG,CAAAgD,oBAJc,EACpBC,cAAc,GAGXjD,GAAG,CAAAiD,cAHQ,EACdC,iBAAiB,GAEdlD,GAAG,CAAAkD,iBAFW,EACjBC,WAAW,GACRnD,GAAG,CAAAmD,WADK;YAENC,IAAI,GAAG9C,WAAW,GAAGA,WAAW,GAAG,qBAAqB;YAExDE,MAAM,GAAG,IAAI,CAACC,OAAO,CAACT,GAAG,CAAC;YAC1BU,SAAS,GAAGF,MAAM,GAAGf,GAAG;YAC9B9B,MAAM,CAACgB,KAAK,CAAC,MAAM,GAAGc,GAAG,GAAG,MAAM,GAAGiB,SAAS,CAAC;YAEzCG,MAAM,GAAQ;cACnBC,MAAM,EAAEvB,MAAM;cACdwB,GAAG,EAAEL,SAAS;cACdkB,IAAI,EAAEc,MAAM;cACZW,WAAW,EAAED;aACb;YACD,IAAIlD,YAAY,EAAE;cACjBW,MAAM,CAACyC,YAAY,GAAGpD,YAAY;;YAEnC,IAAIC,kBAAkB,EAAE;cACvBU,MAAM,CAAC0C,kBAAkB,GAAGpD,kBAAkB;;YAE/C,IAAII,OAAO,EAAE;cACZM,MAAM,CAACiB,OAAO,GAAGvB,OAAO;;YAEzB,IAAIqC,QAAQ,EAAE;cACb/B,MAAM,CAAC2C,QAAQ,GAAGZ,QAAQ;;YAE3B,IAAIC,OAAO,EAAE;cACZhC,MAAM,CAAC4C,OAAO,GAAGZ,OAAO;;YAEzB,IAAIE,oBAAoB,EAAE;cACzBlC,MAAM,CAAC6C,oBAAoB,GAAGX,oBAAoB;cAClD,IAAIC,oBAAoB,EAAE;gBACzBnC,MAAM,CAACmC,oBAAoB,GAAGA,oBAAoB;;cAEnD,IAAIC,cAAc,EAAE;gBACnBpC,MAAM,CAACoC,cAAc,GAAGA,cAAc;;cAEvC,IAAIC,iBAAiB,EAAE;gBACtBrC,MAAM,CAACqC,iBAAiB,GAAGA,iBAAiB;;cAE7C,IAAIC,WAAW,EAAE;gBAChBtC,MAAM,CAACsC,WAAW,GAAGA,WAAW;;;YAI5BQ,OAAO,GAAG,IAAIjG,MAAM,CAACkG,YAAY,EAAE;YACnCC,QAAQ,GAAG,IAAIpG,0BAA0B,CAACoD,MAAM,EAAEb,GAAG,EAAE2D,OAAO,CAAC;YAErE,IAAIb,GAAG,EAAE;cACRjC,MAAM,CAACiD,GAAG,GAAGhB,GAAG;;;;;YAIhBa,OAAO,CAACI,EAAE,CAAC,cAAc,EAAE,UAAAC,QAAQ;cAClC,IAAIrB,gBAAgB,EAAE;gBACrB,IAAI,OAAOA,gBAAgB,KAAK,UAAU,EAAE;kBAC3CA,gBAAgB,CAACqB,QAAQ,CAAC;iBAC1B,MAAM;kBACNrG,MAAM,CAAC4E,IAAI,CACV,+CAA+C,GAC9C,OAAOI,gBAAgB,CACxB;;;YAGJ,CAAC,CAAC;YAEe,qBAAMkB,QAAQ,CAACI,MAAM,EAAE;;YAAlC1C,QAAQ,GAAGW,EAAA,CAAArC,IAAA,EAAuB;YAExClC,MAAM,CAACgB,KAAK,CAAC,eAAe,EAAE4C,QAAQ,CAAC;YACvCxD,oBAAoB,CACnBC,KAAK,EACL,QAAQ,EACR;cAAEwD,MAAM,EAAE,KAAK;cAAEC,MAAM,EAAE;YAAS,CAAE,EACpC,IAAI,EACJ,wBAAsBhC,GAAK,CAC3B;YACD,sBAAO;cACNA,GAAG,EAAAA;aACH;;;YAED9B,MAAM,CAAC4E,IAAI,CAAC,iBAAiB,EAAE2B,OAAK,CAAC;YACrCnG,oBAAoB,CACnBC,KAAK,EACL,QAAQ,EACR;cAAEwD,MAAM,EAAE,KAAK;cAAEC,MAAM,EAAE;YAAQ,CAAE,EACnC,IAAI,EACJ,qBAAmBhC,GAAK,CACxB;YACD,MAAMyE,OAAK;;;;;;GAEZ;EAED;;;;;;EAMa1F,aAAA,CAAAI,SAAA,CAAAuF,MAAM,GAAnB,UAAoB1E,GAAW,EAAEhB,MAAO;;;;;;YACjB,qBAAM,IAAI,CAACiB,kBAAkB,EAAE;;YAA/CC,aAAa,GAAGuC,EAAA,CAAArC,IAAA,EAA+B;YACrD,IAAI,CAACF,aAAa,EAAE;cACnB,sBAAOG,OAAO,CAACC,MAAM,CAAC,gBAAgB,CAAC;;YAGlCC,GAAG,GAAGZ,MAAM,CAACC,MAAM,CAAC,EAAE,EAAE,IAAI,CAACX,OAAO,EAAED,MAAM,CAAC;YAC3Cc,MAAM,GAAYS,GAAG,CAAAT,MAAf,EAAEvB,KAAK,GAAKgC,GAAG,CAAAhC,KAAR;YAEfwC,MAAM,GAAG,IAAI,CAACC,OAAO,CAACT,GAAG,CAAC;YAC1BU,SAAS,GAAGF,MAAM,GAAGf,GAAG;YACxBkB,EAAE,GAAG,IAAI,CAACC,kBAAkB,CAACZ,GAAG,CAAC;YACvCrC,MAAM,CAACgB,KAAK,CAAC,SAAS,GAAGc,GAAG,GAAG,QAAQ,GAAGiB,SAAS,CAAC;YAE9CG,MAAM,GAAG;cACdC,MAAM,EAAEvB,MAAM;cACdwB,GAAG,EAAEL;aACL;YAEK0D,mBAAmB,GAAG,IAAIjH,mBAAmB,CAAC0D,MAAM,CAAC;;;;YAGzC,qBAAMF,EAAE,CAACW,IAAI,CAAC8C,mBAAmB,CAAC;;YAA7C7C,QAAQ,GAAGW,EAAA,CAAArC,IAAA,EAAkC;YACnD9B,oBAAoB,CACnBC,KAAK,EACL,QAAQ,EACR;cAAEwD,MAAM,EAAE,QAAQ;cAAEC,MAAM,EAAE;YAAS,CAAE,EACvC,IAAI,EACJ,aAAWhC,GAAG,kBAAe,CAC7B;YACD,sBAAO8B,QAAQ;;;YAEfxD,oBAAoB,CACnBC,KAAK,EACL,QAAQ,EACR;cAAEwD,MAAM,EAAE,QAAQ;cAAEC,MAAM,EAAE;YAAQ,CAAE,EACtC,IAAI,EACJ,iBAAehC,GAAG,qBAAgB4E,OAAO,CACzC;YACD,MAAMA,OAAK;;;;;;GAEZ;EAED;;;;;;EAMa7F,aAAA,CAAAI,SAAA,CAAA0F,IAAI,GAAjB,UAAkBC,IAAI,EAAE9F,MAAO;;;;;;YACR,qBAAM,IAAI,CAACiB,kBAAkB,EAAE;;YAA/CC,aAAa,GAAGuC,EAAA,CAAArC,IAAA,EAA+B;YACrD,IAAI,CAACF,aAAa,EAAE;cACnB,sBAAOG,OAAO,CAACC,MAAM,CAAC,gBAAgB,CAAC;;YAGlCC,GAAG,GAAGZ,MAAM,CAACC,MAAM,CAAC,EAAE,EAAE,IAAI,CAACX,OAAO,EAAED,MAAM,CAAC;YAC3Cc,MAAM,GAAqBS,GAAG,CAAAT,MAAxB,EAAEvB,KAAK,GAAcgC,GAAG,CAAAhC,KAAjB,EAAEwG,OAAO,GAAKxE,GAAG,CAAAwE,OAAR;YAExBhE,MAAM,GAAG,IAAI,CAACC,OAAO,CAACT,GAAG,CAAC;YAC1ByE,UAAU,GAAGjE,MAAM,GAAG+D,IAAI;YAC1B5D,EAAE,GAAG,IAAI,CAACC,kBAAkB,CAACZ,GAAG,CAAC;YACvCrC,MAAM,CAACgB,KAAK,CAAC,OAAO,GAAG4F,IAAI,GAAG,QAAQ,GAAGE,UAAU,CAAC;YAE9C5D,MAAM,GAAG;cACdC,MAAM,EAAEvB,MAAM;cACdmF,MAAM,EAAED,UAAU;cAClBE,OAAO,EAAEH;aACT;YAEKI,kBAAkB,GAAG,IAAIxH,kBAAkB,CAACyD,MAAM,CAAC;;;;YAGvC,qBAAMF,EAAE,CAACW,IAAI,CAACsD,kBAAkB,CAAC;;YAA5CrD,QAAQ,GAAGW,EAAA,CAAArC,IAAA,EAAiC;YAC9CyE,IAAI,GAAG,EAAE;YACb,IAAI/C,QAAQ,IAAIA,QAAQ,CAACsD,QAAQ,EAAE;cAClCP,IAAI,GAAG/C,QAAQ,CAACsD,QAAQ,CAACC,GAAG,CAAC,UAAAC,IAAI;gBAChC,OAAO;kBACNtF,GAAG,EAAEsF,IAAI,CAAChE,GAAG,CAACiE,MAAM,CAACxE,MAAM,CAACyE,MAAM,CAAC;kBACnCC,IAAI,EAAEH,IAAI,CAACI,IAAI;kBACfC,YAAY,EAAEL,IAAI,CAACM,YAAY;kBAC/BC,IAAI,EAAEP,IAAI,CAACQ;iBACX;cACF,CAAC,CAAC;;YAEHxH,oBAAoB,CACnBC,KAAK,EACL,MAAM,EACN;cAAEwD,MAAM,EAAE,MAAM;cAAEC,MAAM,EAAE;YAAS,CAAE,EACrC,IAAI,EACD6C,IAAI,CAACW,MAAM,wCAAqC,CACnD;YACDtH,MAAM,CAACgB,KAAK,CAAC,MAAM,EAAE2F,IAAI,CAAC;YAC1B,sBAAOA,IAAI;;;YAEX3G,MAAM,CAAC4E,IAAI,CAAC,YAAY,EAAEiD,OAAK,CAAC;YAChCzH,oBAAoB,CACnBC,KAAK,EACL,MAAM,EACN;cAAEwD,MAAM,EAAE,MAAM;cAAEC,MAAM,EAAE;YAAQ,CAAE,EACpC,IAAI,EACJ,2BAAyB+D,OAAK,CAACpH,OAAS,CACxC;YACD,MAAMoH,OAAK;;;;;;GAEZ;EAED;;;EAGAhH,aAAA,CAAAI,SAAA,CAAAc,kBAAkB,GAAlB;IAAA,IAAA+F,KAAA;IACC,OAAO3I,WAAW,CAAC0C,GAAG,EAAE,CACtBkG,IAAI,CAAC,UAAAC,WAAW;MAChB,IAAI,CAACA,WAAW,EAAE,OAAO,KAAK;MAC9B,IAAMC,IAAI,GAAG9I,WAAW,CAAC+I,KAAK,CAACF,WAAW,CAAC;MAC3ChI,MAAM,CAACgB,KAAK,CAAC,6BAA6B,EAAEiH,IAAI,CAAC;MACjDH,KAAI,CAAC/G,OAAO,CAACiH,WAAW,GAAGC,IAAI;MAE/B,OAAO,IAAI;IACZ,CAAC,CAAC,CACDE,KAAK,CAAC,UAAAC,KAAK;MACXpI,MAAM,CAAC4E,IAAI,CAAC,0BAA0B,EAAEwD,KAAK,CAAC;MAC9C,OAAO,KAAK;IACb,CAAC,CAAC;EACJ,CAAC;EAED;;;EAGQvH,aAAA,CAAAI,SAAA,CAAA6B,OAAO,GAAf,UAAgBhC,MAAM;IACb,IAAAkH,WAAA,GAAAlH,MAAA,CAAAkH,WAAW;MAAEK,KAAA,GAAAvH,MAAA,CAAAuH,KAAK;IAE1B,IAAMC,YAAY,GAAGxH,MAAM,CAACwH,YAAY,IAAI,EAAE;IAC9C,IAAMC,UAAU,GAAGzH,MAAM,CAACyH,UAAU,IAAIP,WAAW,CAACO,UAAU;IAC9D,IAAMC,WAAW,GAChB,CAACF,YAAY,CAACG,OAAO,KAAKC,SAAS,GAAGJ,YAAY,CAACG,OAAO,GAAG,UAAU,IACvEF,UAAU,GACV,GAAG;IACJ,IAAMI,aAAa,GAClB,CAACL,YAAY,CAACM,SAAS,KAAKF,SAAS,GAClCJ,YAAY,CAACM,SAAS,GACtB,YAAY,IACfL,UAAU,GACV,GAAG;IACJ,IAAMM,UAAU,GACfP,YAAY,CAACQ,MAAM,KAAKJ,SAAS,GAAGJ,YAAY,CAACQ,MAAM,GAAG,SAAS;IAEpE,QAAQT,KAAK;MACZ,KAAK,SAAS;QACb,OAAOG,WAAW;MACnB,KAAK,WAAW;QACf,OAAOG,aAAa;MACrB;QACC,OAAOE,UAAU;IAAC;EAErB,CAAC;EAED;;;EAGQhI,aAAA,CAAAI,SAAA,CAAAgC,kBAAkB,GAA1B,UAA2BnC,MAAM,EAAEkF,OAAQ;IAEzC,IAAA+C,MAAA,GAAAjI,MAAA,CAAAiI,MAAM;MACNf,WAAA,GAAAlH,MAAA,CAAAkH,WAAW;MACXgB,iBAAA,GAAAlI,MAAA,CAAAkI,iBAAiB;MACjBC,0CAAA,GAAAnI,MAAA,CAAAmI,0CAA0C;IAE3C,IAAIC,kBAAkB,GAAG,EAAE;IAE3B,IAAID,0CAA0C,EAAE;MAC/CC,kBAAkB,GAAG;QACpBC,QAAQ,EAAEvI,2BAA2B;QACrCwI,GAAG,EAAE,KAAK;QACVC,cAAc,EAAE,KAAK;QACrBC,cAAc,EAAE;OAChB;;IAGF,IAAMC,QAAQ,GAAG,IAAIjK,QAAQ,CAAA+E,QAAA,CAAAA,QAAA;MAC5B0E,MAAM,EAAAA,MAAA;MACNf,WAAW,EAAAA,WAAA;MACXwB,eAAe,EAAEnK,mBAAmB;IAAE,GACnC6J,kBAAkB;MACrBO,cAAc,EAAE,IAAI5J,gBAAgB,CAAC,EAAE,EAAEmG,OAAO,EAAEgD,iBAAiB;IAAC,GACnE;IACF,OAAOO,QAAQ;EAChB,CAAC;EA5cM1I,aAAA,CAAAM,QAAQ,GAAG,SAAS;EACpBN,aAAA,CAAAQ,aAAa,GAAG,OAAO;EA4c/B,OAAAR,aAAC;CAAA,EA9cD;SAAaA,aAAa;AAgd1B;;;AAGA,eAAeA,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}