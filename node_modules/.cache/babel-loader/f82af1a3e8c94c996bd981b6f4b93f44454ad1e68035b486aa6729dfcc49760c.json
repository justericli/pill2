{"ast":null,"code":"import { EventStreamCodec } from \"@aws-sdk/eventstream-codec\";\nimport { getChunkedStream } from \"./getChunkedStream\";\nimport { getUnmarshalledStream } from \"./getUnmarshalledStream\";\nexport class EventStreamMarshaller {\n  constructor(_ref) {\n    let {\n      utf8Encoder,\n      utf8Decoder\n    } = _ref;\n    this.eventStreamCodec = new EventStreamCodec(utf8Encoder, utf8Decoder);\n    this.utfEncoder = utf8Encoder;\n  }\n  deserialize(body, deserializer) {\n    const chunkedStream = getChunkedStream(body);\n    const unmarshalledStream = getUnmarshalledStream(chunkedStream, {\n      eventStreamCodec: this.eventStreamCodec,\n      deserializer,\n      toUtf8: this.utfEncoder\n    });\n    return unmarshalledStream;\n  }\n  serialize(input, serializer) {\n    const self = this;\n    const serializedIterator = async function* () {\n      for await (const chunk of input) {\n        const payloadBuf = self.eventStreamCodec.encode(serializer(chunk));\n        yield payloadBuf;\n      }\n      yield new Uint8Array(0);\n    };\n    return {\n      [Symbol.asyncIterator]: serializedIterator\n    };\n  }\n}","map":{"version":3,"names":["EventStreamCodec","getChunkedStream","getUnmarshalledStream","EventStreamMarshaller","constructor","_ref","utf8Encoder","utf8Decoder","eventStreamCodec","utfEncoder","deserialize","body","deserializer","chunkedStream","unmarshalledStream","toUtf8","serialize","input","serializer","self","serializedIterator","chunk","payloadBuf","encode","Uint8Array","Symbol","asyncIterator"],"sources":["/Users/ericli/Desktop/pill2/node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/eventstream-serde-universal/dist-es/EventStreamMarshaller.js"],"sourcesContent":["import { EventStreamCodec } from \"@aws-sdk/eventstream-codec\";\nimport { getChunkedStream } from \"./getChunkedStream\";\nimport { getUnmarshalledStream } from \"./getUnmarshalledStream\";\nexport class EventStreamMarshaller {\n    constructor({ utf8Encoder, utf8Decoder }) {\n        this.eventStreamCodec = new EventStreamCodec(utf8Encoder, utf8Decoder);\n        this.utfEncoder = utf8Encoder;\n    }\n    deserialize(body, deserializer) {\n        const chunkedStream = getChunkedStream(body);\n        const unmarshalledStream = getUnmarshalledStream(chunkedStream, {\n            eventStreamCodec: this.eventStreamCodec,\n            deserializer,\n            toUtf8: this.utfEncoder,\n        });\n        return unmarshalledStream;\n    }\n    serialize(input, serializer) {\n        const self = this;\n        const serializedIterator = async function* () {\n            for await (const chunk of input) {\n                const payloadBuf = self.eventStreamCodec.encode(serializer(chunk));\n                yield payloadBuf;\n            }\n            yield new Uint8Array(0);\n        };\n        return {\n            [Symbol.asyncIterator]: serializedIterator,\n        };\n    }\n}\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,4BAA4B;AAC7D,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,qBAAqB,QAAQ,yBAAyB;AAC/D,OAAO,MAAMC,qBAAqB,CAAC;EAC/BC,WAAWA,CAAAC,IAAA,EAA+B;IAAA,IAA9B;MAAEC,WAAW;MAAEC;IAAY,CAAC,GAAAF,IAAA;IACpC,IAAI,CAACG,gBAAgB,GAAG,IAAIR,gBAAgB,CAACM,WAAW,EAAEC,WAAW,CAAC;IACtE,IAAI,CAACE,UAAU,GAAGH,WAAW;EACjC;EACAI,WAAWA,CAACC,IAAI,EAAEC,YAAY,EAAE;IAC5B,MAAMC,aAAa,GAAGZ,gBAAgB,CAACU,IAAI,CAAC;IAC5C,MAAMG,kBAAkB,GAAGZ,qBAAqB,CAACW,aAAa,EAAE;MAC5DL,gBAAgB,EAAE,IAAI,CAACA,gBAAgB;MACvCI,YAAY;MACZG,MAAM,EAAE,IAAI,CAACN;IACjB,CAAC,CAAC;IACF,OAAOK,kBAAkB;EAC7B;EACAE,SAASA,CAACC,KAAK,EAAEC,UAAU,EAAE;IACzB,MAAMC,IAAI,GAAG,IAAI;IACjB,MAAMC,kBAAkB,GAAG,gBAAAA,CAAA,EAAmB;MAC1C,WAAW,MAAMC,KAAK,IAAIJ,KAAK,EAAE;QAC7B,MAAMK,UAAU,GAAGH,IAAI,CAACX,gBAAgB,CAACe,MAAM,CAACL,UAAU,CAACG,KAAK,CAAC,CAAC;QAClE,MAAMC,UAAU;MACpB;MACA,MAAM,IAAIE,UAAU,CAAC,CAAC,CAAC;IAC3B,CAAC;IACD,OAAO;MACH,CAACC,MAAM,CAACC,aAAa,GAAGN;IAC5B,CAAC;EACL;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}