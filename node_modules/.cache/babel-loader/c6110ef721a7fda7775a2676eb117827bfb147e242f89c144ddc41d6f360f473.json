{"ast":null,"code":"import { __asyncValues, __awaiter, __generator, __read, __spread, __values } from \"tslib\";\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport * as idb from 'idb';\nimport { ModelPredicateCreator } from '../../predicates';\nimport { isPredicateObj, isPredicateGroup, OpType, QueryOne } from '../../types';\nimport { getIndex, getIndexFromAssociation, isModelConstructor, isPrivateMode, traverseModel, validatePredicate, inMemoryPagination, keysEqual, getStorename, getIndexKeys, extractPrimaryKeyValues, isSafariCompatabilityMode } from '../../util';\nvar logger = new Logger('DataStore');\nvar DB_NAME = 'amplify-datastore';\nvar IndexedDBAdapter = /** @class */function () {\n  function IndexedDBAdapter() {\n    var _this = this;\n    this.dbName = DB_NAME;\n    this.safariCompatabilityMode = false;\n    /**\n     * Checks the given path against the browser's IndexedDB implementation for\n     * necessary compatibility transformations, applying those transforms if needed.\n     *\n     * @param `keyArr` strings to compatibilize for browser-indexeddb index operations\n     * @returns An array or string, depending on and given key,\n     * that is ensured to be compatible with the IndexedDB implementation's nuances.\n     */\n    this.canonicalKeyPath = function (keyArr) {\n      if (_this.safariCompatabilityMode) {\n        return keyArr.length > 1 ? keyArr : keyArr[0];\n      }\n      return keyArr;\n    };\n  }\n  IndexedDBAdapter.prototype.getStorenameForModel = function (modelConstructor) {\n    var namespace = this.namespaceResolver(modelConstructor);\n    var modelName = modelConstructor.name;\n    return getStorename(namespace, modelName);\n  };\n  // Retrieves primary key values from a model\n  IndexedDBAdapter.prototype.getIndexKeyValuesFromModel = function (model) {\n    var modelConstructor = Object.getPrototypeOf(model).constructor;\n    var namespaceName = this.namespaceResolver(modelConstructor);\n    var keys = getIndexKeys(this.schema.namespaces[namespaceName], modelConstructor.name);\n    return extractPrimaryKeyValues(model, keys);\n  };\n  IndexedDBAdapter.prototype.checkPrivate = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var isPrivate;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, isPrivateMode().then(function (isPrivate) {\n              return isPrivate;\n            })];\n          case 1:\n            isPrivate = _a.sent();\n            if (isPrivate) {\n              logger.error(\"IndexedDB not supported in this browser's private mode\");\n              return [2 /*return*/, Promise.reject(\"IndexedDB not supported in this browser's private mode\")];\n            } else {\n              return [2 /*return*/, Promise.resolve()];\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Whether the browser's implementation of IndexedDB is coercing single-field\n   * indexes to a scalar key.\n   *\n   * If this returns `true`, we need to treat indexes containing a single field\n   * as scalars.\n   *\n   * See PR description for reference:\n   * https://github.com/aws-amplify/amplify-js/pull/10527\n   */\n  IndexedDBAdapter.prototype.setSafariCompatabilityMode = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this;\n            return [4 /*yield*/, isSafariCompatabilityMode()];\n          case 1:\n            _a.safariCompatabilityMode = _b.sent();\n            if (this.safariCompatabilityMode === true) {\n              logger.debug('IndexedDB Adapter is running in Safari Compatability Mode');\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.getNamespaceAndModelFromStorename = function (storeName) {\n    var _a = __read(storeName.split('_')),\n      namespaceName = _a[0],\n      modelNameArr = _a.slice(1);\n    return {\n      namespaceName: namespaceName,\n      modelName: modelNameArr.join('_')\n    };\n  };\n  IndexedDBAdapter.prototype.setUp = function (theSchema, namespaceResolver, modelInstanceCreator, getModelConstructorByModelName, sessionId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var VERSION, _a, error_1;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _b.sent();\n            return [4 /*yield*/, this.setSafariCompatabilityMode()];\n          case 2:\n            _b.sent();\n            if (!!this.initPromise) return [3 /*break*/, 3];\n            this.initPromise = new Promise(function (res, rej) {\n              _this.resolve = res;\n              _this.reject = rej;\n            });\n            return [3 /*break*/, 5];\n          case 3:\n            return [4 /*yield*/, this.initPromise];\n          case 4:\n            _b.sent();\n            _b.label = 5;\n          case 5:\n            if (sessionId) {\n              this.dbName = DB_NAME + \"-\" + sessionId;\n            }\n            this.schema = theSchema;\n            this.namespaceResolver = namespaceResolver;\n            this.modelInstanceCreator = modelInstanceCreator;\n            this.getModelConstructorByModelName = getModelConstructorByModelName;\n            _b.label = 6;\n          case 6:\n            _b.trys.push([6, 9,, 10]);\n            if (!!this.db) return [3 /*break*/, 8];\n            VERSION = 3;\n            _a = this;\n            return [4 /*yield*/, idb.openDB(this.dbName, VERSION, {\n              upgrade: function (db, oldVersion, newVersion, txn) {\n                return __awaiter(_this, void 0, void 0, function () {\n                  var _a, _b, storeName, origStore, tmpName, _c, namespaceName, modelName, modelInCurrentSchema, newStore, cursor, count, e_1_1, error_2;\n                  var e_1, _d;\n                  var _this = this;\n                  return __generator(this, function (_e) {\n                    switch (_e.label) {\n                      case 0:\n                        if (oldVersion === 0) {\n                          Object.keys(theSchema.namespaces).forEach(function (namespaceName) {\n                            var namespace = theSchema.namespaces[namespaceName];\n                            Object.keys(namespace.models).forEach(function (modelName) {\n                              var storeName = getStorename(namespaceName, modelName);\n                              _this.createObjectStoreForModel(db, namespaceName, storeName, modelName);\n                            });\n                          });\n                          return [2 /*return*/];\n                        }\n\n                        if (!((oldVersion === 1 || oldVersion === 2) && newVersion === 3)) return [3 /*break*/, 16];\n                        _e.label = 1;\n                      case 1:\n                        _e.trys.push([1, 14,, 15]);\n                        _e.label = 2;\n                      case 2:\n                        _e.trys.push([2, 11, 12, 13]);\n                        _a = __values(txn.objectStoreNames), _b = _a.next();\n                        _e.label = 3;\n                      case 3:\n                        if (!!_b.done) return [3 /*break*/, 10];\n                        storeName = _b.value;\n                        origStore = txn.objectStore(storeName);\n                        tmpName = \"tmp_\" + storeName;\n                        origStore.name = tmpName;\n                        _c = this.getNamespaceAndModelFromStorename(storeName), namespaceName = _c.namespaceName, modelName = _c.modelName;\n                        modelInCurrentSchema = modelName in this.schema.namespaces[namespaceName].models;\n                        if (!modelInCurrentSchema) {\n                          // delete original\n                          db.deleteObjectStore(tmpName);\n                          return [3 /*break*/, 9];\n                        }\n                        newStore = this.createObjectStoreForModel(db, namespaceName, storeName, modelName);\n                        return [4 /*yield*/, origStore.openCursor()];\n                      case 4:\n                        cursor = _e.sent();\n                        count = 0;\n                        _e.label = 5;\n                      case 5:\n                        if (!(cursor && cursor.value)) return [3 /*break*/, 8];\n                        // we don't pass key, since they are all new entries in the new store\n                        return [4 /*yield*/, newStore.put(cursor.value)];\n                      case 6:\n                        // we don't pass key, since they are all new entries in the new store\n                        _e.sent();\n                        return [4 /*yield*/, cursor.continue()];\n                      case 7:\n                        cursor = _e.sent();\n                        count++;\n                        return [3 /*break*/, 5];\n                      case 8:\n                        // delete original\n                        db.deleteObjectStore(tmpName);\n                        logger.debug(count + \" \" + storeName + \" records migrated\");\n                        _e.label = 9;\n                      case 9:\n                        _b = _a.next();\n                        return [3 /*break*/, 3];\n                      case 10:\n                        return [3 /*break*/, 13];\n                      case 11:\n                        e_1_1 = _e.sent();\n                        e_1 = {\n                          error: e_1_1\n                        };\n                        return [3 /*break*/, 13];\n                      case 12:\n                        try {\n                          if (_b && !_b.done && (_d = _a.return)) _d.call(_a);\n                        } finally {\n                          if (e_1) throw e_1.error;\n                        }\n                        return [7 /*endfinally*/];\n                      case 13:\n                        // add new models created after IndexedDB, but before migration\n                        // this case may happen when a user has not opened an app for\n                        // some time and a new model is added during that time\n                        Object.keys(theSchema.namespaces).forEach(function (namespaceName) {\n                          var namespace = theSchema.namespaces[namespaceName];\n                          var objectStoreNames = new Set(txn.objectStoreNames);\n                          Object.keys(namespace.models).map(function (modelName) {\n                            return [modelName, getStorename(namespaceName, modelName)];\n                          }).filter(function (_a) {\n                            var _b = __read(_a, 2),\n                              storeName = _b[1];\n                            return !objectStoreNames.has(storeName);\n                          }).forEach(function (_a) {\n                            var _b = __read(_a, 2),\n                              modelName = _b[0],\n                              storeName = _b[1];\n                            _this.createObjectStoreForModel(db, namespaceName, storeName, modelName);\n                          });\n                        });\n                        return [3 /*break*/, 15];\n                      case 14:\n                        error_2 = _e.sent();\n                        logger.error('Error migrating IndexedDB data', error_2);\n                        txn.abort();\n                        throw error_2;\n                      case 15:\n                        return [2 /*return*/];\n                      case 16:\n                        return [2 /*return*/];\n                    }\n                  });\n                });\n              }\n            })];\n\n          case 7:\n            _a.db = _b.sent();\n            this.resolve();\n            _b.label = 8;\n          case 8:\n            return [3 /*break*/, 10];\n          case 9:\n            error_1 = _b.sent();\n            this.reject(error_1);\n            return [3 /*break*/, 10];\n          case 10:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype._get = function (storeOrStoreName, keyArr) {\n    return __awaiter(this, void 0, void 0, function () {\n      var index, storeName, store, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (typeof storeOrStoreName === 'string') {\n              storeName = storeOrStoreName;\n              index = this.db.transaction(storeName, 'readonly').store.index('byPk');\n            } else {\n              store = storeOrStoreName;\n              index = store.index('byPk');\n            }\n            return [4 /*yield*/, index.get(this.canonicalKeyPath(keyArr))];\n          case 1:\n            result = _a.sent();\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.save = function (model, condition) {\n    var e_2, _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var modelConstructor, storeName, namespaceName, connectedModels, set, connectionStoreNames, tx, store, keyValues, fromDB, predicates, _b, predicateObjs, type, isValid, msg, result, connectionStoreNames_1, connectionStoreNames_1_1, resItem, storeName_1, item, instance, keys, store_1, itemKeyValues, fromDB_1, opType, modelKeyValues, key, e_2_1;\n      var _this = this;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _c.sent();\n            modelConstructor = Object.getPrototypeOf(model).constructor;\n            storeName = this.getStorenameForModel(modelConstructor);\n            namespaceName = this.namespaceResolver(modelConstructor);\n            connectedModels = traverseModel(modelConstructor.name, model, this.schema.namespaces[namespaceName], this.modelInstanceCreator, this.getModelConstructorByModelName);\n            set = new Set();\n            connectionStoreNames = Object.values(connectedModels).map(function (_a) {\n              var modelName = _a.modelName,\n                item = _a.item,\n                instance = _a.instance;\n              var storeName = getStorename(namespaceName, modelName);\n              set.add(storeName);\n              var keys = getIndexKeys(_this.schema.namespaces[namespaceName], modelName);\n              return {\n                storeName: storeName,\n                item: item,\n                instance: instance,\n                keys: keys\n              };\n            });\n            tx = this.db.transaction(__spread([storeName], Array.from(set.values())), 'readwrite');\n            store = tx.objectStore(storeName);\n            keyValues = this.getIndexKeyValuesFromModel(model);\n            return [4 /*yield*/, this._get(store, keyValues)];\n          case 2:\n            fromDB = _c.sent();\n            if (condition && fromDB) {\n              predicates = ModelPredicateCreator.getPredicates(condition);\n              _b = predicates || {}, predicateObjs = _b.predicates, type = _b.type;\n              isValid = validatePredicate(fromDB, type, predicateObjs);\n              if (!isValid) {\n                msg = 'Conditional update failed';\n                logger.error(msg, {\n                  model: fromDB,\n                  condition: predicateObjs\n                });\n                throw new Error(msg);\n              }\n            }\n            result = [];\n            _c.label = 3;\n          case 3:\n            _c.trys.push([3, 11, 12, 17]);\n            connectionStoreNames_1 = __asyncValues(connectionStoreNames);\n            _c.label = 4;\n          case 4:\n            return [4 /*yield*/, connectionStoreNames_1.next()];\n          case 5:\n            if (!(connectionStoreNames_1_1 = _c.sent(), !connectionStoreNames_1_1.done)) return [3 /*break*/, 10];\n            resItem = connectionStoreNames_1_1.value;\n            storeName_1 = resItem.storeName, item = resItem.item, instance = resItem.instance, keys = resItem.keys;\n            store_1 = tx.objectStore(storeName_1);\n            itemKeyValues = keys.map(function (key) {\n              var value = item[key];\n              return value;\n            });\n            return [4 /*yield*/, this._get(store_1, itemKeyValues)];\n          case 6:\n            fromDB_1 = _c.sent();\n            opType = fromDB_1 === undefined ? OpType.INSERT : OpType.UPDATE;\n            modelKeyValues = this.getIndexKeyValuesFromModel(model);\n            if (!(keysEqual(itemKeyValues, modelKeyValues) || opType === OpType.INSERT)) return [3 /*break*/, 9];\n            return [4 /*yield*/, store_1.index('byPk').getKey(this.canonicalKeyPath(itemKeyValues))];\n          case 7:\n            key = _c.sent();\n            return [4 /*yield*/, store_1.put(item, key)];\n          case 8:\n            _c.sent();\n            result.push([instance, opType]);\n            _c.label = 9;\n          case 9:\n            return [3 /*break*/, 4];\n          case 10:\n            return [3 /*break*/, 17];\n          case 11:\n            e_2_1 = _c.sent();\n            e_2 = {\n              error: e_2_1\n            };\n            return [3 /*break*/, 17];\n          case 12:\n            _c.trys.push([12,, 15, 16]);\n            if (!(connectionStoreNames_1_1 && !connectionStoreNames_1_1.done && (_a = connectionStoreNames_1.return))) return [3 /*break*/, 14];\n            return [4 /*yield*/, _a.call(connectionStoreNames_1)];\n          case 13:\n            _c.sent();\n            _c.label = 14;\n          case 14:\n            return [3 /*break*/, 16];\n          case 15:\n            if (e_2) throw e_2.error;\n            return [7 /*endfinally*/];\n          case 16:\n            return [7 /*endfinally*/];\n          case 17:\n            return [4 /*yield*/, tx.done];\n          case 18:\n            _c.sent();\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.load = function (namespaceName, srcModelName, records) {\n    return __awaiter(this, void 0, void 0, function () {\n      var namespace, relations, connectionStoreNames, modelConstructor;\n      var _this = this;\n      return __generator(this, function (_a) {\n        namespace = this.schema.namespaces[namespaceName];\n        relations = namespace.relationships[srcModelName].relationTypes;\n        connectionStoreNames = relations.map(function (_a) {\n          var modelName = _a.modelName;\n          return getStorename(namespaceName, modelName);\n        });\n        modelConstructor = this.getModelConstructorByModelName(namespaceName, srcModelName);\n        if (connectionStoreNames.length === 0) {\n          return [2 /*return*/, records.map(function (record) {\n            return _this.modelInstanceCreator(modelConstructor, record);\n          })];\n        }\n        return [2 /*return*/, records.map(function (record) {\n          return _this.modelInstanceCreator(modelConstructor, record);\n        })];\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.query = function (modelConstructor, predicate, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      var storeName, namespaceName, predicates, keyPath, queryByKey, hasSort, hasPagination, records;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _a.sent();\n            storeName = this.getStorenameForModel(modelConstructor);\n            namespaceName = this.namespaceResolver(modelConstructor);\n            predicates = predicate && ModelPredicateCreator.getPredicates(predicate);\n            keyPath = getIndexKeys(this.schema.namespaces[namespaceName], modelConstructor.name);\n            queryByKey = predicates && this.keyValueFromPredicate(predicates, keyPath);\n            hasSort = pagination && pagination.sort;\n            hasPagination = pagination && pagination.limit;\n            return [4 /*yield*/, function () {\n              return __awaiter(_this, void 0, void 0, function () {\n                var record, filtered, all;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      if (!queryByKey) return [3 /*break*/, 2];\n                      return [4 /*yield*/, this.getByKey(storeName, queryByKey)];\n                    case 1:\n                      record = _a.sent();\n                      return [2 /*return*/, record ? [record] : []];\n                    case 2:\n                      if (!predicates) return [3 /*break*/, 4];\n                      return [4 /*yield*/, this.filterOnPredicate(storeName, predicates)];\n                    case 3:\n                      filtered = _a.sent();\n                      return [2 /*return*/, this.inMemoryPagination(filtered, pagination)];\n                    case 4:\n                      if (!hasSort) return [3 /*break*/, 6];\n                      return [4 /*yield*/, this.getAll(storeName)];\n                    case 5:\n                      all = _a.sent();\n                      return [2 /*return*/, this.inMemoryPagination(all, pagination)];\n                    case 6:\n                      if (hasPagination) {\n                        return [2 /*return*/, this.enginePagination(storeName, pagination)];\n                      }\n                      return [2 /*return*/, this.getAll(storeName)];\n                  }\n                });\n              });\n            }()];\n          case 2:\n            records = _a.sent();\n            return [4 /*yield*/, this.load(namespaceName, modelConstructor.name, records)];\n          case 3:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.getByKey = function (storeName, keyValue) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._get(storeName, keyValue)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.getAll = function (storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.db.getAll(storeName)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.keyValueFromPredicate = function (predicates, keyPath) {\n    var e_3, _a;\n    var predicateObjs = predicates.predicates;\n    if (predicateObjs.length !== keyPath.length) {\n      return;\n    }\n    var keyValues = [];\n    var _loop_1 = function (key) {\n      var predicateObj = predicateObjs.find(function (p) {\n        return isPredicateObj(p) && p.field === key && p.operator === 'eq';\n      });\n      predicateObj && keyValues.push(predicateObj.operand);\n    };\n    try {\n      for (var keyPath_1 = __values(keyPath), keyPath_1_1 = keyPath_1.next(); !keyPath_1_1.done; keyPath_1_1 = keyPath_1.next()) {\n        var key = keyPath_1_1.value;\n        _loop_1(key);\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (keyPath_1_1 && !keyPath_1_1.done && (_a = keyPath_1.return)) _a.call(keyPath_1);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n    return keyValues.length === keyPath.length ? keyValues : undefined;\n  };\n  IndexedDBAdapter.prototype.matchingIndex = function (storeName, fieldName, transaction) {\n    var e_4, _a;\n    var store = transaction.objectStore(storeName);\n    try {\n      for (var _b = __values(store.indexNames), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var name_1 = _c.value;\n        var idx = store.index(name_1);\n        if (idx.keyPath === fieldName) {\n          return idx;\n        }\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n  };\n  IndexedDBAdapter.prototype.filterOnPredicate = function (storeName, predicates) {\n    return __awaiter(this, void 0, void 0, function () {\n      var predicateObjs, type, candidateResults, fieldPredicates, txn, predicateIndexes, actualPredicateIndexes, predicateIndex, distinctResults, predicateIndexes_1, predicateIndexes_1_1, predicateIndex, resultGroup, resultGroup_1, resultGroup_1_1, item, e_5_1, filtered;\n      var e_5, _a, e_6, _b;\n      var _this = this;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            predicateObjs = predicates.predicates, type = predicates.type;\n            // the predicate objects we care about tend to be nested at least\n            // one level down: `{and: {or: {and: { <the predicates we want> }}}}`\n            // so, we unpack and/or groups until we find a group with more than 1\n            // child OR a child that is not a group (and is therefore a predicate \"object\").\n            while (predicateObjs.length === 1 && isPredicateGroup(predicateObjs[0])) {\n              type = predicateObjs[0].type;\n              predicateObjs = predicateObjs[0].predicates;\n            }\n            fieldPredicates = predicateObjs.filter(function (p) {\n              return isPredicateObj(p);\n            });\n            txn = this.db.transaction(storeName);\n            predicateIndexes = fieldPredicates.map(function (p) {\n              return {\n                predicate: p,\n                index: _this.matchingIndex(storeName, String(p.field), txn)\n              };\n            });\n            // Explicitly wait for txns from index queries to complete before proceding.\n            // This helps ensure IndexedDB is in a stable, ready state. Else, subseqeuent\n            // qeuries can sometimes appear to deadlock (at least in FakeIndexedDB).\n            return [4 /*yield*/, txn.done];\n          case 1:\n            // Explicitly wait for txns from index queries to complete before proceding.\n            // This helps ensure IndexedDB is in a stable, ready state. Else, subseqeuent\n            // qeuries can sometimes appear to deadlock (at least in FakeIndexedDB).\n            _c.sent();\n            if (!(type === 'and')) return [3 /*break*/, 6];\n            actualPredicateIndexes = predicateIndexes.filter(function (i) {\n              return i.index && i.predicate.operator === 'eq';\n            });\n            if (!(actualPredicateIndexes.length > 0)) return [3 /*break*/, 3];\n            predicateIndex = actualPredicateIndexes[0];\n            return [4 /*yield*/, predicateIndex.index.getAll(predicateIndex.predicate.operand)];\n          case 2:\n            candidateResults = _c.sent();\n            return [3 /*break*/, 5];\n          case 3:\n            return [4 /*yield*/, this.getAll(storeName)];\n          case 4:\n            // no usable indexes\n            candidateResults = _c.sent();\n            _c.label = 5;\n          case 5:\n            return [3 /*break*/, 20];\n          case 6:\n            if (!(type === 'or')) return [3 /*break*/, 18];\n            if (!(predicateIndexes.length > 0 && predicateIndexes.every(function (i) {\n              return i.index && i.predicate.operator === 'eq';\n            }))) return [3 /*break*/, 15];\n            distinctResults = new Map();\n            _c.label = 7;\n          case 7:\n            _c.trys.push([7, 12, 13, 14]);\n            predicateIndexes_1 = __values(predicateIndexes), predicateIndexes_1_1 = predicateIndexes_1.next();\n            _c.label = 8;\n          case 8:\n            if (!!predicateIndexes_1_1.done) return [3 /*break*/, 11];\n            predicateIndex = predicateIndexes_1_1.value;\n            return [4 /*yield*/, predicateIndex.index.getAll(predicateIndex.predicate.operand)];\n          case 9:\n            resultGroup = _c.sent();\n            try {\n              for (resultGroup_1 = (e_6 = void 0, __values(resultGroup)), resultGroup_1_1 = resultGroup_1.next(); !resultGroup_1_1.done; resultGroup_1_1 = resultGroup_1.next()) {\n                item = resultGroup_1_1.value;\n                // TODO: custom PK\n                distinctResults.set(item.id, item);\n              }\n            } catch (e_6_1) {\n              e_6 = {\n                error: e_6_1\n              };\n            } finally {\n              try {\n                if (resultGroup_1_1 && !resultGroup_1_1.done && (_b = resultGroup_1.return)) _b.call(resultGroup_1);\n              } finally {\n                if (e_6) throw e_6.error;\n              }\n            }\n            _c.label = 10;\n          case 10:\n            predicateIndexes_1_1 = predicateIndexes_1.next();\n            return [3 /*break*/, 8];\n          case 11:\n            return [3 /*break*/, 14];\n          case 12:\n            e_5_1 = _c.sent();\n            e_5 = {\n              error: e_5_1\n            };\n            return [3 /*break*/, 14];\n          case 13:\n            try {\n              if (predicateIndexes_1_1 && !predicateIndexes_1_1.done && (_a = predicateIndexes_1.return)) _a.call(predicateIndexes_1);\n            } finally {\n              if (e_5) throw e_5.error;\n            }\n            return [7 /*endfinally*/];\n          case 14:\n            // we could conceivably check for special conditions and return early here.\n            // but, this is simpler and has not yet had a measurable performance impact.\n            candidateResults = Array.from(distinctResults.values());\n            return [3 /*break*/, 17];\n          case 15:\n            return [4 /*yield*/, this.getAll(storeName)];\n          case 16:\n            // either no usable indexes or not all conditions can use one.\n            candidateResults = _c.sent();\n            _c.label = 17;\n          case 17:\n            return [3 /*break*/, 20];\n          case 18:\n            return [4 /*yield*/, this.getAll(storeName)];\n          case 19:\n            // nothing intelligent we can do with `not` groups unless or until we start\n            // smashing comparison operators against indexes -- at which point we could\n            // perform some reversal here.\n            candidateResults = _c.sent();\n            _c.label = 20;\n          case 20:\n            filtered = predicateObjs ? candidateResults.filter(function (m) {\n              return validatePredicate(m, type, predicateObjs);\n            }) : candidateResults;\n            return [2 /*return*/, filtered];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.inMemoryPagination = function (records, pagination) {\n    return inMemoryPagination(records, pagination);\n  };\n  IndexedDBAdapter.prototype.enginePagination = function (storeName, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, _a, page, _b, limit, initialRecord, cursor, pageResults, hasLimit;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (!pagination) return [3 /*break*/, 7];\n            _a = pagination.page, page = _a === void 0 ? 0 : _a, _b = pagination.limit, limit = _b === void 0 ? 0 : _b;\n            initialRecord = Math.max(0, page * limit) || 0;\n            return [4 /*yield*/, this.db.transaction(storeName).objectStore(storeName).openCursor()];\n          case 1:\n            cursor = _c.sent();\n            if (!(cursor && initialRecord > 0)) return [3 /*break*/, 3];\n            return [4 /*yield*/, cursor.advance(initialRecord)];\n          case 2:\n            _c.sent();\n            _c.label = 3;\n          case 3:\n            pageResults = [];\n            hasLimit = typeof limit === 'number' && limit > 0;\n            _c.label = 4;\n          case 4:\n            if (!(cursor && cursor.value)) return [3 /*break*/, 6];\n            pageResults.push(cursor.value);\n            if (hasLimit && pageResults.length === limit) {\n              return [3 /*break*/, 6];\n            }\n            return [4 /*yield*/, cursor.continue()];\n          case 5:\n            cursor = _c.sent();\n            return [3 /*break*/, 4];\n          case 6:\n            result = pageResults;\n            return [3 /*break*/, 9];\n          case 7:\n            return [4 /*yield*/, this.db.getAll(storeName)];\n          case 8:\n            result = _c.sent();\n            _c.label = 9;\n          case 9:\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.queryOne = function (modelConstructor, firstOrLast) {\n    if (firstOrLast === void 0) {\n      firstOrLast = QueryOne.FIRST;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var storeName, cursor, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _a.sent();\n            storeName = this.getStorenameForModel(modelConstructor);\n            return [4 /*yield*/, this.db.transaction([storeName], 'readonly').objectStore(storeName).openCursor(undefined, firstOrLast === QueryOne.FIRST ? 'next' : 'prev')];\n          case 2:\n            cursor = _a.sent();\n            result = cursor ? cursor.value : undefined;\n            return [2 /*return*/, result && this.modelInstanceCreator(modelConstructor, result)];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.delete = function (modelOrModelConstructor, condition) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deleteQueue, modelConstructor, nameSpace, storeName, models, relations, deletedModels, deletedModels, model, modelConstructor, namespaceName, storeName, tx, store, keyValues, fromDB, msg, predicates, _a, predicateObjs, type, isValid, msg, relations, relations, deletedModels;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _b.sent();\n            deleteQueue = [];\n            if (!isModelConstructor(modelOrModelConstructor)) return [3 /*break*/, 9];\n            modelConstructor = modelOrModelConstructor;\n            nameSpace = this.namespaceResolver(modelConstructor);\n            storeName = this.getStorenameForModel(modelConstructor);\n            return [4 /*yield*/, this.query(modelConstructor, condition)];\n          case 2:\n            models = _b.sent();\n            relations = this.schema.namespaces[nameSpace].relationships[modelConstructor.name].relationTypes;\n            if (!(condition !== undefined)) return [3 /*break*/, 5];\n            return [4 /*yield*/, this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n          case 3:\n            _b.sent();\n            return [4 /*yield*/, this.deleteItem(deleteQueue)];\n          case 4:\n            _b.sent();\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2 /*return*/, [models, deletedModels]];\n          case 5:\n            return [4 /*yield*/, this.deleteTraverse(relations, models, modelConstructor.name, nameSpace, deleteQueue)];\n          case 6:\n            _b.sent();\n            // Delete all\n            return [4 /*yield*/, this.db.transaction([storeName], 'readwrite').objectStore(storeName).clear()];\n          case 7:\n            // Delete all\n            _b.sent();\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2 /*return*/, [models, deletedModels]];\n          case 8:\n            return [3 /*break*/, 17];\n          case 9:\n            model = modelOrModelConstructor;\n            modelConstructor = Object.getPrototypeOf(model).constructor;\n            namespaceName = this.namespaceResolver(modelConstructor);\n            storeName = this.getStorenameForModel(modelConstructor);\n            if (!condition) return [3 /*break*/, 13];\n            tx = this.db.transaction([storeName], 'readwrite');\n            store = tx.objectStore(storeName);\n            keyValues = this.getIndexKeyValuesFromModel(model);\n            return [4 /*yield*/, this._get(store, keyValues)];\n          case 10:\n            fromDB = _b.sent();\n            if (fromDB === undefined) {\n              msg = 'Model instance not found in storage';\n              logger.warn(msg, {\n                model: model\n              });\n              return [2 /*return*/, [[model], []]];\n            }\n            predicates = ModelPredicateCreator.getPredicates(condition);\n            _a = predicates, predicateObjs = _a.predicates, type = _a.type;\n            isValid = validatePredicate(fromDB, type, predicateObjs);\n            if (!isValid) {\n              msg = 'Conditional update failed';\n              logger.error(msg, {\n                model: fromDB,\n                condition: predicateObjs\n              });\n              throw new Error(msg);\n            }\n            return [4 /*yield*/, tx.done];\n          case 11:\n            _b.sent();\n            relations = this.schema.namespaces[namespaceName].relationships[modelConstructor.name].relationTypes;\n            return [4 /*yield*/, this.deleteTraverse(relations, [model], modelConstructor.name, namespaceName, deleteQueue)];\n          case 12:\n            _b.sent();\n            return [3 /*break*/, 15];\n          case 13:\n            relations = this.schema.namespaces[namespaceName].relationships[modelConstructor.name].relationTypes;\n            return [4 /*yield*/, this.deleteTraverse(relations, [model], modelConstructor.name, namespaceName, deleteQueue)];\n          case 14:\n            _b.sent();\n            _b.label = 15;\n          case 15:\n            return [4 /*yield*/, this.deleteItem(deleteQueue)];\n          case 16:\n            _b.sent();\n            deletedModels = deleteQueue.reduce(function (acc, _a) {\n              var items = _a.items;\n              return acc.concat(items);\n            }, []);\n            return [2 /*return*/, [[model], deletedModels]];\n          case 17:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.deleteItem = function (deleteQueue) {\n    var e_7, _a, e_8, _b;\n    return __awaiter(this, void 0, void 0, function () {\n      var connectionStoreNames, tx, _c, _d, deleteItem, storeName, items, store, items_1, items_1_1, item, key, keyValues, itemKey, e_8_1, e_7_1;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            connectionStoreNames = deleteQueue.map(function (_a) {\n              var storeName = _a.storeName;\n              return storeName;\n            });\n            tx = this.db.transaction(__spread(connectionStoreNames), 'readwrite');\n            _e.label = 1;\n          case 1:\n            _e.trys.push([1, 22, 23, 28]);\n            _c = __asyncValues(deleteQueue);\n            _e.label = 2;\n          case 2:\n            return [4 /*yield*/, _c.next()];\n          case 3:\n            if (!(_d = _e.sent(), !_d.done)) return [3 /*break*/, 21];\n            deleteItem = _d.value;\n            storeName = deleteItem.storeName, items = deleteItem.items;\n            store = tx.objectStore(storeName);\n            _e.label = 4;\n          case 4:\n            _e.trys.push([4, 14, 15, 20]);\n            items_1 = __asyncValues(items);\n            _e.label = 5;\n          case 5:\n            return [4 /*yield*/, items_1.next()];\n          case 6:\n            if (!(items_1_1 = _e.sent(), !items_1_1.done)) return [3 /*break*/, 13];\n            item = items_1_1.value;\n            if (!item) return [3 /*break*/, 12];\n            key = void 0;\n            if (!(typeof item === 'object')) return [3 /*break*/, 8];\n            keyValues = this.getIndexKeyValuesFromModel(item);\n            return [4 /*yield*/, store.index('byPk').getKey(this.canonicalKeyPath(keyValues))];\n          case 7:\n            key = _e.sent();\n            return [3 /*break*/, 10];\n          case 8:\n            itemKey = item.toString();\n            return [4 /*yield*/, store.index('byPk').getKey(itemKey)];\n          case 9:\n            key = _e.sent();\n            _e.label = 10;\n          case 10:\n            if (!(key !== undefined)) return [3 /*break*/, 12];\n            return [4 /*yield*/, store.delete(key)];\n          case 11:\n            _e.sent();\n            _e.label = 12;\n          case 12:\n            return [3 /*break*/, 5];\n          case 13:\n            return [3 /*break*/, 20];\n          case 14:\n            e_8_1 = _e.sent();\n            e_8 = {\n              error: e_8_1\n            };\n            return [3 /*break*/, 20];\n          case 15:\n            _e.trys.push([15,, 18, 19]);\n            if (!(items_1_1 && !items_1_1.done && (_b = items_1.return))) return [3 /*break*/, 17];\n            return [4 /*yield*/, _b.call(items_1)];\n          case 16:\n            _e.sent();\n            _e.label = 17;\n          case 17:\n            return [3 /*break*/, 19];\n          case 18:\n            if (e_8) throw e_8.error;\n            return [7 /*endfinally*/];\n          case 19:\n            return [7 /*endfinally*/];\n          case 20:\n            return [3 /*break*/, 2];\n          case 21:\n            return [3 /*break*/, 28];\n          case 22:\n            e_7_1 = _e.sent();\n            e_7 = {\n              error: e_7_1\n            };\n            return [3 /*break*/, 28];\n          case 23:\n            _e.trys.push([23,, 26, 27]);\n            if (!(_d && !_d.done && (_a = _c.return))) return [3 /*break*/, 25];\n            return [4 /*yield*/, _a.call(_c)];\n          case 24:\n            _e.sent();\n            _e.label = 25;\n          case 25:\n            return [3 /*break*/, 27];\n          case 26:\n            if (e_7) throw e_7.error;\n            return [7 /*endfinally*/];\n          case 27:\n            return [7 /*endfinally*/];\n          case 28:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.deleteTraverse = function (relations, models, srcModel, nameSpace, deleteQueue) {\n    var relations_1, relations_1_1, models_1, models_1_1, models_2, models_2_1;\n    var e_9, _a, e_10, _b, e_11, _c;\n    return __awaiter(this, void 0, void 0, function () {\n      var rel, relationType, modelName, targetName, targetNames, associatedWith, storeName, _d, model, hasOneIndex, values, recordToDelete, index, values, value, recordToDelete, e_10_1, model, index, keyValues, childrenArray, e_11_1, e_9_1;\n      var _this = this;\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            _e.trys.push([0, 38, 39, 44]);\n            relations_1 = __asyncValues(relations);\n            _e.label = 1;\n          case 1:\n            return [4 /*yield*/, relations_1.next()];\n          case 2:\n            if (!(relations_1_1 = _e.sent(), !relations_1_1.done)) return [3 /*break*/, 37];\n            rel = relations_1_1.value;\n            relationType = rel.relationType, modelName = rel.modelName, targetName = rel.targetName, targetNames = rel.targetNames, associatedWith = rel.associatedWith;\n            storeName = getStorename(nameSpace, modelName);\n            _d = relationType;\n            switch (_d) {\n              case 'HAS_ONE':\n                return [3 /*break*/, 3];\n              case 'HAS_MANY':\n                return [3 /*break*/, 20];\n              case 'BELONGS_TO':\n                return [3 /*break*/, 34];\n            }\n            return [3 /*break*/, 35];\n          case 3:\n            _e.trys.push([3, 13, 14, 19]);\n            models_1 = __asyncValues(models);\n            _e.label = 4;\n          case 4:\n            return [4 /*yield*/, models_1.next()];\n          case 5:\n            if (!(models_1_1 = _e.sent(), !models_1_1.done)) return [3 /*break*/, 12];\n            model = models_1_1.value;\n            hasOneIndex = 'byPk';\n            if (!(targetNames === null || targetNames === void 0 ? void 0 : targetNames.length)) return [3 /*break*/, 8];\n            values = targetNames.filter(function (targetName) {\n              var _a;\n              return (_a = model[targetName]) !== null && _a !== void 0 ? _a : false;\n            }).map(function (targetName) {\n              return model[targetName];\n            });\n            if (values.length === 0) return [3 /*break*/, 12];\n            return [4 /*yield*/, this.db.transaction(storeName, 'readwrite').objectStore(storeName).index(hasOneIndex).get(this.canonicalKeyPath(values))];\n          case 6:\n            recordToDelete = _e.sent();\n            return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, recordToDelete ? [recordToDelete] : [], modelName, nameSpace, deleteQueue)];\n          case 7:\n            _e.sent();\n            return [3 /*break*/, 12];\n          case 8:\n            index = void 0;\n            values = void 0;\n            if (targetName && targetName in model) {\n              index = hasOneIndex;\n              value = model[targetName];\n              if (value === null) return [3 /*break*/, 12];\n              values = [value];\n            } else {\n              // backwards compatability for older versions of codegen that did not emit targetName for HAS_ONE relations\n              // TODO: can we deprecate this? it's been ~2 years since codegen started including targetName for HAS_ONE\n              // If we deprecate, we'll need to re-gen the MIPR in __tests__/schema.ts > newSchema\n              // otherwise some unit tests will fail\n              index = getIndex(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, srcModel);\n              values = this.getIndexKeyValuesFromModel(model);\n            }\n            if (!values || !index) return [3 /*break*/, 12];\n            return [4 /*yield*/, this.db.transaction(storeName, 'readwrite').objectStore(storeName).index(index).get(this.canonicalKeyPath(values))];\n          case 9:\n            recordToDelete = _e.sent();\n            return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, recordToDelete ? [recordToDelete] : [], modelName, nameSpace, deleteQueue)];\n          case 10:\n            _e.sent();\n            _e.label = 11;\n          case 11:\n            return [3 /*break*/, 4];\n          case 12:\n            return [3 /*break*/, 19];\n          case 13:\n            e_10_1 = _e.sent();\n            e_10 = {\n              error: e_10_1\n            };\n            return [3 /*break*/, 19];\n          case 14:\n            _e.trys.push([14,, 17, 18]);\n            if (!(models_1_1 && !models_1_1.done && (_b = models_1.return))) return [3 /*break*/, 16];\n            return [4 /*yield*/, _b.call(models_1)];\n          case 15:\n            _e.sent();\n            _e.label = 16;\n          case 16:\n            return [3 /*break*/, 18];\n          case 17:\n            if (e_10) throw e_10.error;\n            return [7 /*endfinally*/];\n          case 18:\n            return [7 /*endfinally*/];\n          case 19:\n            return [3 /*break*/, 36];\n          case 20:\n            _e.trys.push([20, 27, 28, 33]);\n            models_2 = __asyncValues(models);\n            _e.label = 21;\n          case 21:\n            return [4 /*yield*/, models_2.next()];\n          case 22:\n            if (!(models_2_1 = _e.sent(), !models_2_1.done)) return [3 /*break*/, 26];\n            model = models_2_1.value;\n            index =\n            // explicit bi-directional @hasMany and @manyToMany\n            getIndex(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, srcModel) ||\n            // uni and/or implicit @hasMany\n            getIndexFromAssociation(this.schema.namespaces[nameSpace].relationships[modelName].indexes, associatedWith);\n            keyValues = this.getIndexKeyValuesFromModel(model);\n            return [4 /*yield*/, this.db.transaction(storeName, 'readwrite').objectStore(storeName).index(index).getAll(this.canonicalKeyPath(keyValues))];\n          case 23:\n            childrenArray = _e.sent();\n            return [4 /*yield*/, this.deleteTraverse(this.schema.namespaces[nameSpace].relationships[modelName].relationTypes, childrenArray, modelName, nameSpace, deleteQueue)];\n          case 24:\n            _e.sent();\n            _e.label = 25;\n          case 25:\n            return [3 /*break*/, 21];\n          case 26:\n            return [3 /*break*/, 33];\n          case 27:\n            e_11_1 = _e.sent();\n            e_11 = {\n              error: e_11_1\n            };\n            return [3 /*break*/, 33];\n          case 28:\n            _e.trys.push([28,, 31, 32]);\n            if (!(models_2_1 && !models_2_1.done && (_c = models_2.return))) return [3 /*break*/, 30];\n            return [4 /*yield*/, _c.call(models_2)];\n          case 29:\n            _e.sent();\n            _e.label = 30;\n          case 30:\n            return [3 /*break*/, 32];\n          case 31:\n            if (e_11) throw e_11.error;\n            return [7 /*endfinally*/];\n          case 32:\n            return [7 /*endfinally*/];\n          case 33:\n            return [3 /*break*/, 36];\n          case 34:\n            // Intentionally blank\n            return [3 /*break*/, 36];\n          case 35:\n            throw new Error(\"Invalid relation type \" + relationType);\n          case 36:\n            return [3 /*break*/, 1];\n          case 37:\n            return [3 /*break*/, 44];\n          case 38:\n            e_9_1 = _e.sent();\n            e_9 = {\n              error: e_9_1\n            };\n            return [3 /*break*/, 44];\n          case 39:\n            _e.trys.push([39,, 42, 43]);\n            if (!(relations_1_1 && !relations_1_1.done && (_a = relations_1.return))) return [3 /*break*/, 41];\n            return [4 /*yield*/, _a.call(relations_1)];\n          case 40:\n            _e.sent();\n            _e.label = 41;\n          case 41:\n            return [3 /*break*/, 43];\n          case 42:\n            if (e_9) throw e_9.error;\n            return [7 /*endfinally*/];\n          case 43:\n            return [7 /*endfinally*/];\n          case 44:\n            deleteQueue.push({\n              storeName: getStorename(nameSpace, srcModel),\n              items: models.map(function (record) {\n                return _this.modelInstanceCreator(_this.getModelConstructorByModelName(nameSpace, srcModel), record);\n              })\n            });\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.clear = function () {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _b.sent();\n            (_a = this.db) === null || _a === void 0 ? void 0 : _a.close();\n            return [4 /*yield*/, idb.deleteDB(this.dbName)];\n          case 2:\n            _b.sent();\n            this.db = undefined;\n            this.initPromise = undefined;\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  IndexedDBAdapter.prototype.batchSave = function (modelConstructor, items) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, storeName, txn, store, _loop_2, this_1, items_2, items_2_1, item, e_12_1;\n      var e_12, _a;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (items.length === 0) {\n              return [2 /*return*/, []];\n            }\n            return [4 /*yield*/, this.checkPrivate()];\n          case 1:\n            _b.sent();\n            result = [];\n            storeName = this.getStorenameForModel(modelConstructor);\n            txn = this.db.transaction(storeName, 'readwrite');\n            store = txn.store;\n            _loop_2 = function (item) {\n              var namespaceName, modelName, model, connectedModels, keyValues, _deleted, index, key, instance;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    namespaceName = this_1.namespaceResolver(modelConstructor);\n                    modelName = modelConstructor.name;\n                    model = this_1.modelInstanceCreator(modelConstructor, item);\n                    connectedModels = traverseModel(modelName, model, this_1.schema.namespaces[namespaceName], this_1.modelInstanceCreator, this_1.getModelConstructorByModelName);\n                    keyValues = this_1.getIndexKeyValuesFromModel(model);\n                    _deleted = item._deleted;\n                    index = store.index('byPk');\n                    return [4 /*yield*/, index.getKey(this_1.canonicalKeyPath(keyValues))];\n                  case 1:\n                    key = _a.sent();\n                    if (!!_deleted) return [3 /*break*/, 3];\n                    instance = connectedModels.find(function (_a) {\n                      var instance = _a.instance;\n                      var instanceKeyValues = _this.getIndexKeyValuesFromModel(instance);\n                      return keysEqual(instanceKeyValues, keyValues);\n                    }).instance;\n                    result.push([instance, key ? OpType.UPDATE : OpType.INSERT]);\n                    return [4 /*yield*/, store.put(instance, key)];\n                  case 2:\n                    _a.sent();\n                    return [3 /*break*/, 5];\n                  case 3:\n                    result.push([item, OpType.DELETE]);\n                    if (!key) return [3 /*break*/, 5];\n                    return [4 /*yield*/, store.delete(key)];\n                  case 4:\n                    _a.sent();\n                    _a.label = 5;\n                  case 5:\n                    return [2 /*return*/];\n                }\n              });\n            };\n\n            this_1 = this;\n            _b.label = 2;\n          case 2:\n            _b.trys.push([2, 7, 8, 9]);\n            items_2 = __values(items), items_2_1 = items_2.next();\n            _b.label = 3;\n          case 3:\n            if (!!items_2_1.done) return [3 /*break*/, 6];\n            item = items_2_1.value;\n            return [5 /*yield**/, _loop_2(item)];\n          case 4:\n            _b.sent();\n            _b.label = 5;\n          case 5:\n            items_2_1 = items_2.next();\n            return [3 /*break*/, 3];\n          case 6:\n            return [3 /*break*/, 9];\n          case 7:\n            e_12_1 = _b.sent();\n            e_12 = {\n              error: e_12_1\n            };\n            return [3 /*break*/, 9];\n          case 8:\n            try {\n              if (items_2_1 && !items_2_1.done && (_a = items_2.return)) _a.call(items_2);\n            } finally {\n              if (e_12) throw e_12.error;\n            }\n            return [7 /*endfinally*/];\n          case 9:\n            return [4 /*yield*/, txn.done];\n          case 10:\n            _b.sent();\n            return [2 /*return*/, result];\n        }\n      });\n    });\n  };\n  IndexedDBAdapter.prototype.createObjectStoreForModel = function (db, namespaceName, storeName, modelName) {\n    var store = db.createObjectStore(storeName, {\n      autoIncrement: true\n    });\n    var indexes = this.schema.namespaces[namespaceName].relationships[modelName].indexes;\n    indexes.forEach(function (_a) {\n      var _b = __read(_a, 3),\n        idxName = _b[0],\n        keyPath = _b[1],\n        options = _b[2];\n      store.createIndex(idxName, keyPath, options);\n    });\n    return store;\n  };\n  return IndexedDBAdapter;\n}();\nexport default new IndexedDBAdapter();","map":{"version":3,"names":["ConsoleLogger","Logger","idb","ModelPredicateCreator","isPredicateObj","isPredicateGroup","OpType","QueryOne","getIndex","getIndexFromAssociation","isModelConstructor","isPrivateMode","traverseModel","validatePredicate","inMemoryPagination","keysEqual","getStorename","getIndexKeys","extractPrimaryKeyValues","isSafariCompatabilityMode","logger","DB_NAME","IndexedDBAdapter","_this","dbName","safariCompatabilityMode","canonicalKeyPath","keyArr","length","prototype","getStorenameForModel","modelConstructor","namespace","namespaceResolver","modelName","name","getIndexKeyValuesFromModel","model","Object","getPrototypeOf","constructor","namespaceName","keys","schema","namespaces","checkPrivate","then","isPrivate","_a","sent","error","Promise","reject","resolve","setSafariCompatabilityMode","_b","debug","getNamespaceAndModelFromStorename","storeName","__read","split","modelNameArr","slice","join","setUp","theSchema","modelInstanceCreator","getModelConstructorByModelName","sessionId","initPromise","res","rej","db","VERSION","openDB","upgrade","oldVersion","newVersion","txn","__awaiter","forEach","models","createObjectStoreForModel","__values","objectStoreNames","next","value","origStore","objectStore","tmpName","_c","modelInCurrentSchema","deleteObjectStore","newStore","openCursor","cursor","_e","count","put","continue","Set","map","filter","has","error_2","abort","error_1","_get","storeOrStoreName","index","transaction","store","get","result","save","condition","connectedModels","set","connectionStoreNames","values","item","instance","add","tx","__spread","Array","from","keyValues","fromDB","predicates","getPredicates","predicateObjs","type","isValid","msg","Error","connectionStoreNames_1","__asyncValues","resItem","connectionStoreNames_1_1","storeName_1","store_1","itemKeyValues","key","fromDB_1","opType","undefined","INSERT","UPDATE","modelKeyValues","getKey","push","done","load","srcModelName","records","relations","relationships","relationTypes","record","query","predicate","pagination","keyPath","queryByKey","keyValueFromPredicate","hasSort","sort","hasPagination","limit","getByKey","filterOnPredicate","filtered","getAll","all","enginePagination","keyValue","predicateObj","find","p","field","operator","operand","keyPath_1","keyPath_1_1","matchingIndex","fieldName","indexNames","name_1","idx","fieldPredicates","predicateIndexes","String","actualPredicateIndexes","i","predicateIndex","candidateResults","every","distinctResults","Map","predicateIndexes_1","predicateIndexes_1_1","resultGroup","resultGroup_1","e_6","resultGroup_1_1","id","m","page","initialRecord","Math","max","advance","pageResults","hasLimit","queryOne","firstOrLast","FIRST","delete","modelOrModelConstructor","deleteQueue","nameSpace","deleteTraverse","deleteItem","deletedModels","reduce","acc","items","concat","clear","warn","_d","items_1","items_1_1","itemKey","toString","srcModel","relations_1","rel","relations_1_1","relationType","targetName","targetNames","associatedWith","models_1","models_1_1","hasOneIndex","recordToDelete","models_2","models_2_1","indexes","childrenArray","close","deleteDB","batchSave","this_1","_deleted","instanceKeyValues","DELETE","items_2","items_2_1","createObjectStore","autoIncrement","idxName","options","createIndex"],"sources":["/Users/ericli/node_modules/@aws-amplify/datastore/src/storage/adapter/IndexedDBAdapter.ts"],"sourcesContent":["import { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport * as idb from 'idb';\nimport { ModelInstanceCreator } from '../../datastore/datastore';\nimport { ModelPredicateCreator } from '../../predicates';\nimport {\n\tInternalSchema,\n\tisPredicateObj,\n\tisPredicateGroup,\n\tModelInstanceMetadata,\n\tModelPredicate,\n\tNamespaceResolver,\n\tOpType,\n\tPaginationInput,\n\tPersistentModel,\n\tPersistentModelConstructor,\n\tPredicateObject,\n\tPredicatesGroup,\n\tQueryOne,\n\tRelationType,\n} from '../../types';\nimport {\n\tgetIndex,\n\tgetIndexFromAssociation,\n\tisModelConstructor,\n\tisPrivateMode,\n\ttraverseModel,\n\tvalidatePredicate,\n\tinMemoryPagination,\n\tNAMESPACES,\n\tkeysEqual,\n\tgetStorename,\n\tgetIndexKeys,\n\textractPrimaryKeyValues,\n\tisSafariCompatabilityMode,\n} from '../../util';\nimport { Adapter } from './index';\n\nconst logger = new Logger('DataStore');\n\nconst DB_NAME = 'amplify-datastore';\nclass IndexedDBAdapter implements Adapter {\n\tprivate schema!: InternalSchema;\n\tprivate namespaceResolver!: NamespaceResolver;\n\tprivate modelInstanceCreator!: ModelInstanceCreator;\n\tprivate getModelConstructorByModelName?: (\n\t\tnamsespaceName: NAMESPACES,\n\t\tmodelName: string\n\t) => PersistentModelConstructor<any>;\n\tprivate db!: idb.IDBPDatabase;\n\tprivate initPromise!: Promise<void>;\n\tprivate resolve!: (value?: any) => void;\n\tprivate reject!: (value?: any) => void;\n\tprivate dbName: string = DB_NAME;\n\tprivate safariCompatabilityMode: boolean = false;\n\n\tprivate getStorenameForModel(\n\t\tmodelConstructor: PersistentModelConstructor<any>\n\t) {\n\t\tconst namespace = this.namespaceResolver(modelConstructor);\n\t\tconst { name: modelName } = modelConstructor;\n\n\t\treturn getStorename(namespace, modelName);\n\t}\n\n\t// Retrieves primary key values from a model\n\tprivate getIndexKeyValuesFromModel<T extends PersistentModel>(\n\t\tmodel: T\n\t): string[] {\n\t\tconst modelConstructor = Object.getPrototypeOf(model)\n\t\t\t.constructor as PersistentModelConstructor<T>;\n\t\tconst namespaceName = this.namespaceResolver(modelConstructor);\n\n\t\tconst keys = getIndexKeys(\n\t\t\tthis.schema.namespaces[namespaceName],\n\t\t\tmodelConstructor.name\n\t\t);\n\n\t\treturn extractPrimaryKeyValues(model, keys);\n\t}\n\n\tprivate async checkPrivate() {\n\t\tconst isPrivate = await isPrivateMode().then(isPrivate => {\n\t\t\treturn isPrivate;\n\t\t});\n\t\tif (isPrivate) {\n\t\t\tlogger.error(\"IndexedDB not supported in this browser's private mode\");\n\t\t\treturn Promise.reject(\n\t\t\t\t\"IndexedDB not supported in this browser's private mode\"\n\t\t\t);\n\t\t} else {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t}\n\n\t/**\n\t * Whether the browser's implementation of IndexedDB is coercing single-field\n\t * indexes to a scalar key.\n\t *\n\t * If this returns `true`, we need to treat indexes containing a single field\n\t * as scalars.\n\t *\n\t * See PR description for reference:\n\t * https://github.com/aws-amplify/amplify-js/pull/10527\n\t */\n\tprivate async setSafariCompatabilityMode() {\n\t\tthis.safariCompatabilityMode = await isSafariCompatabilityMode();\n\n\t\tif (this.safariCompatabilityMode === true) {\n\t\t\tlogger.debug('IndexedDB Adapter is running in Safari Compatability Mode');\n\t\t}\n\t}\n\n\tprivate getNamespaceAndModelFromStorename(storeName: string) {\n\t\tconst [namespaceName, ...modelNameArr] = storeName.split('_');\n\t\treturn {\n\t\t\tnamespaceName,\n\t\t\tmodelName: modelNameArr.join('_'),\n\t\t};\n\t}\n\n\tasync setUp(\n\t\ttheSchema: InternalSchema,\n\t\tnamespaceResolver: NamespaceResolver,\n\t\tmodelInstanceCreator: ModelInstanceCreator,\n\t\tgetModelConstructorByModelName: (\n\t\t\tnamsespaceName: NAMESPACES,\n\t\t\tmodelName: string\n\t\t) => PersistentModelConstructor<any>,\n\t\tsessionId?: string\n\t) {\n\t\tawait this.checkPrivate();\n\t\tawait this.setSafariCompatabilityMode();\n\n\t\tif (!this.initPromise) {\n\t\t\tthis.initPromise = new Promise((res, rej) => {\n\t\t\t\tthis.resolve = res;\n\t\t\t\tthis.reject = rej;\n\t\t\t});\n\t\t} else {\n\t\t\tawait this.initPromise;\n\t\t}\n\t\tif (sessionId) {\n\t\t\tthis.dbName = `${DB_NAME}-${sessionId}`;\n\t\t}\n\t\tthis.schema = theSchema;\n\t\tthis.namespaceResolver = namespaceResolver;\n\t\tthis.modelInstanceCreator = modelInstanceCreator;\n\t\tthis.getModelConstructorByModelName = getModelConstructorByModelName;\n\n\t\ttry {\n\t\t\tif (!this.db) {\n\t\t\t\tconst VERSION = 3;\n\t\t\t\tthis.db = await idb.openDB(this.dbName, VERSION, {\n\t\t\t\t\tupgrade: async (db, oldVersion, newVersion, txn) => {\n\t\t\t\t\t\tif (oldVersion === 0) {\n\t\t\t\t\t\t\tObject.keys(theSchema.namespaces).forEach(namespaceName => {\n\t\t\t\t\t\t\t\tconst namespace = theSchema.namespaces[namespaceName];\n\n\t\t\t\t\t\t\t\tObject.keys(namespace.models).forEach(modelName => {\n\t\t\t\t\t\t\t\t\tconst storeName = getStorename(namespaceName, modelName);\n\t\t\t\t\t\t\t\t\tthis.createObjectStoreForModel(\n\t\t\t\t\t\t\t\t\t\tdb,\n\t\t\t\t\t\t\t\t\t\tnamespaceName,\n\t\t\t\t\t\t\t\t\t\tstoreName,\n\t\t\t\t\t\t\t\t\t\tmodelName\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ((oldVersion === 1 || oldVersion === 2) && newVersion === 3) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tfor (const storeName of txn.objectStoreNames) {\n\t\t\t\t\t\t\t\t\tconst origStore = txn.objectStore(storeName);\n\n\t\t\t\t\t\t\t\t\t// rename original store\n\t\t\t\t\t\t\t\t\tconst tmpName = `tmp_${storeName}`;\n\t\t\t\t\t\t\t\t\torigStore.name = tmpName;\n\n\t\t\t\t\t\t\t\t\tconst { namespaceName, modelName } =\n\t\t\t\t\t\t\t\t\t\tthis.getNamespaceAndModelFromStorename(storeName);\n\n\t\t\t\t\t\t\t\t\tconst modelInCurrentSchema =\n\t\t\t\t\t\t\t\t\t\tmodelName in this.schema.namespaces[namespaceName].models;\n\n\t\t\t\t\t\t\t\t\tif (!modelInCurrentSchema) {\n\t\t\t\t\t\t\t\t\t\t// delete original\n\t\t\t\t\t\t\t\t\t\tdb.deleteObjectStore(tmpName);\n\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tconst newStore = this.createObjectStoreForModel(\n\t\t\t\t\t\t\t\t\t\tdb,\n\t\t\t\t\t\t\t\t\t\tnamespaceName,\n\t\t\t\t\t\t\t\t\t\tstoreName,\n\t\t\t\t\t\t\t\t\t\tmodelName\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\tlet cursor = await origStore.openCursor();\n\t\t\t\t\t\t\t\t\tlet count = 0;\n\n\t\t\t\t\t\t\t\t\t// Copy data from original to new\n\t\t\t\t\t\t\t\t\twhile (cursor && cursor.value) {\n\t\t\t\t\t\t\t\t\t\t// we don't pass key, since they are all new entries in the new store\n\t\t\t\t\t\t\t\t\t\tawait newStore.put(cursor.value);\n\n\t\t\t\t\t\t\t\t\t\tcursor = await cursor.continue();\n\t\t\t\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// delete original\n\t\t\t\t\t\t\t\t\tdb.deleteObjectStore(tmpName);\n\n\t\t\t\t\t\t\t\t\tlogger.debug(`${count} ${storeName} records migrated`);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// add new models created after IndexedDB, but before migration\n\t\t\t\t\t\t\t\t// this case may happen when a user has not opened an app for\n\t\t\t\t\t\t\t\t// some time and a new model is added during that time\n\t\t\t\t\t\t\t\tObject.keys(theSchema.namespaces).forEach(namespaceName => {\n\t\t\t\t\t\t\t\t\tconst namespace = theSchema.namespaces[namespaceName];\n\t\t\t\t\t\t\t\t\tconst objectStoreNames = new Set(txn.objectStoreNames);\n\n\t\t\t\t\t\t\t\t\tObject.keys(namespace.models)\n\t\t\t\t\t\t\t\t\t\t.map(modelName => {\n\t\t\t\t\t\t\t\t\t\t\treturn [\n\t\t\t\t\t\t\t\t\t\t\t\tmodelName,\n\t\t\t\t\t\t\t\t\t\t\t\tgetStorename(namespaceName, modelName),\n\t\t\t\t\t\t\t\t\t\t\t];\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t.filter(([, storeName]) => !objectStoreNames.has(storeName))\n\t\t\t\t\t\t\t\t\t\t.forEach(([modelName, storeName]) => {\n\t\t\t\t\t\t\t\t\t\t\tthis.createObjectStoreForModel(\n\t\t\t\t\t\t\t\t\t\t\t\tdb,\n\t\t\t\t\t\t\t\t\t\t\t\tnamespaceName,\n\t\t\t\t\t\t\t\t\t\t\t\tstoreName,\n\t\t\t\t\t\t\t\t\t\t\t\tmodelName\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\tlogger.error('Error migrating IndexedDB data', error);\n\t\t\t\t\t\t\t\ttxn.abort();\n\t\t\t\t\t\t\t\tthrow error;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tthis.resolve();\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.reject(error);\n\t\t}\n\t}\n\n\tprivate async _get<T>(\n\t\tstoreOrStoreName: idb.IDBPObjectStore | string,\n\t\tkeyArr: string[]\n\t): Promise<T> {\n\t\tlet index: idb.IDBPIndex;\n\n\t\tif (typeof storeOrStoreName === 'string') {\n\t\t\tconst storeName = storeOrStoreName;\n\t\t\tindex = this.db.transaction(storeName, 'readonly').store.index('byPk');\n\t\t} else {\n\t\t\tconst store = storeOrStoreName;\n\t\t\tindex = store.index('byPk');\n\t\t}\n\n\t\tconst result = await index.get(this.canonicalKeyPath(keyArr));\n\n\t\treturn result;\n\t}\n\n\tasync save<T extends PersistentModel>(\n\t\tmodel: T,\n\t\tcondition?: ModelPredicate<T>\n\t): Promise<[T, OpType.INSERT | OpType.UPDATE][]> {\n\t\tawait this.checkPrivate();\n\t\tconst modelConstructor = Object.getPrototypeOf(model)\n\t\t\t.constructor as PersistentModelConstructor<T>;\n\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\t\tconst namespaceName = this.namespaceResolver(modelConstructor);\n\n\t\tconst connectedModels = traverseModel(\n\t\t\tmodelConstructor.name,\n\t\t\tmodel,\n\t\t\tthis.schema.namespaces[namespaceName],\n\t\t\tthis.modelInstanceCreator,\n\t\t\tthis.getModelConstructorByModelName!\n\t\t);\n\n\t\tconst set = new Set<string>();\n\t\tconst connectionStoreNames = Object.values(connectedModels).map(\n\t\t\t({ modelName, item, instance }) => {\n\t\t\t\tconst storeName = getStorename(namespaceName, modelName);\n\t\t\t\tset.add(storeName);\n\t\t\t\tconst keys = getIndexKeys(\n\t\t\t\t\tthis.schema.namespaces[namespaceName],\n\t\t\t\t\tmodelName\n\t\t\t\t);\n\t\t\t\treturn { storeName, item, instance, keys };\n\t\t\t}\n\t\t);\n\n\t\tconst tx = this.db.transaction(\n\t\t\t[storeName, ...Array.from(set.values())],\n\t\t\t'readwrite'\n\t\t);\n\t\tconst store = tx.objectStore(storeName);\n\n\t\tconst keyValues = this.getIndexKeyValuesFromModel(model);\n\n\t\tconst fromDB = await this._get(store, keyValues);\n\n\t\tif (condition && fromDB) {\n\t\t\tconst predicates = ModelPredicateCreator.getPredicates(condition);\n\t\t\tconst { predicates: predicateObjs, type } = predicates || {};\n\n\t\t\tconst isValid = validatePredicate(\n\t\t\t\tfromDB as any,\n\t\t\t\ttype as any,\n\t\t\t\tpredicateObjs as any\n\t\t\t);\n\n\t\t\tif (!isValid) {\n\t\t\t\tconst msg = 'Conditional update failed';\n\t\t\t\tlogger.error(msg, { model: fromDB, condition: predicateObjs });\n\n\t\t\t\tthrow new Error(msg);\n\t\t\t}\n\t\t}\n\n\t\tconst result: [T, OpType.INSERT | OpType.UPDATE][] = [];\n\t\tfor await (const resItem of connectionStoreNames) {\n\t\t\tconst { storeName, item, instance, keys } = resItem;\n\t\t\tconst store = tx.objectStore(storeName);\n\n\t\t\tconst itemKeyValues = keys.map(key => {\n\t\t\t\tconst value = item[key];\n\t\t\t\treturn value;\n\t\t\t});\n\n\t\t\tconst fromDB = <T>await this._get(store, itemKeyValues);\n\t\t\tconst opType: OpType =\n\t\t\t\tfromDB === undefined ? OpType.INSERT : OpType.UPDATE;\n\n\t\t\tconst modelKeyValues = this.getIndexKeyValuesFromModel(model);\n\n\t\t\t// Even if the parent is an INSERT, the child might not be, so we need to get its key\n\t\t\tif (\n\t\t\t\tkeysEqual(itemKeyValues, modelKeyValues) ||\n\t\t\t\topType === OpType.INSERT\n\t\t\t) {\n\t\t\t\tconst key = await store\n\t\t\t\t\t.index('byPk')\n\t\t\t\t\t.getKey(this.canonicalKeyPath(itemKeyValues));\n\t\t\t\tawait store.put(item, key);\n\t\t\t\tresult.push([instance, opType]);\n\t\t\t}\n\t\t}\n\n\t\tawait tx.done;\n\n\t\treturn result;\n\t}\n\n\tprivate async load<T>(\n\t\tnamespaceName: NAMESPACES,\n\t\tsrcModelName: string,\n\t\trecords: T[]\n\t): Promise<T[]> {\n\t\tconst namespace = this.schema.namespaces[namespaceName];\n\t\tconst relations = namespace.relationships![srcModelName].relationTypes;\n\t\tconst connectionStoreNames = relations.map(({ modelName }) => {\n\t\t\treturn getStorename(namespaceName, modelName);\n\t\t});\n\t\tconst modelConstructor = this.getModelConstructorByModelName!(\n\t\t\tnamespaceName,\n\t\t\tsrcModelName\n\t\t);\n\n\t\tif (connectionStoreNames.length === 0) {\n\t\t\treturn records.map(record =>\n\t\t\t\tthis.modelInstanceCreator(modelConstructor, record)\n\t\t\t);\n\t\t}\n\n\t\treturn records.map(record =>\n\t\t\tthis.modelInstanceCreator(modelConstructor, record)\n\t\t);\n\t}\n\n\tasync query<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\tpredicate?: ModelPredicate<T>,\n\t\tpagination?: PaginationInput<T>\n\t): Promise<T[]> {\n\t\tawait this.checkPrivate();\n\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\t\tconst namespaceName = this.namespaceResolver(\n\t\t\tmodelConstructor\n\t\t) as NAMESPACES;\n\n\t\tconst predicates =\n\t\t\tpredicate && ModelPredicateCreator.getPredicates(predicate);\n\t\tconst keyPath = getIndexKeys(\n\t\t\tthis.schema.namespaces[namespaceName],\n\t\t\tmodelConstructor.name\n\t\t);\n\t\tconst queryByKey =\n\t\t\tpredicates && this.keyValueFromPredicate(predicates, keyPath);\n\n\t\tconst hasSort = pagination && pagination.sort;\n\t\tconst hasPagination = pagination && pagination.limit;\n\n\t\tconst records: T[] = (await (async () => {\n\t\t\tif (queryByKey) {\n\t\t\t\tconst record = await this.getByKey(storeName, queryByKey);\n\t\t\t\treturn record ? [record] : [];\n\t\t\t}\n\n\t\t\tif (predicates) {\n\t\t\t\tconst filtered = await this.filterOnPredicate(storeName, predicates);\n\t\t\t\treturn this.inMemoryPagination(filtered, pagination);\n\t\t\t}\n\n\t\t\tif (hasSort) {\n\t\t\t\tconst all = await this.getAll(storeName);\n\t\t\t\treturn this.inMemoryPagination(all, pagination);\n\t\t\t}\n\n\t\t\tif (hasPagination) {\n\t\t\t\treturn this.enginePagination(storeName, pagination);\n\t\t\t}\n\n\t\t\treturn this.getAll(storeName);\n\t\t})()) as T[];\n\n\t\treturn await this.load(namespaceName, modelConstructor.name, records);\n\t}\n\n\tprivate async getByKey<T extends PersistentModel>(\n\t\tstoreName: string,\n\t\tkeyValue: string[]\n\t): Promise<T> {\n\t\treturn <T>await this._get(storeName, keyValue);\n\t}\n\n\tprivate async getAll<T extends PersistentModel>(\n\t\tstoreName: string\n\t): Promise<T[]> {\n\t\treturn await this.db.getAll(storeName);\n\t}\n\n\tprivate keyValueFromPredicate<T extends PersistentModel>(\n\t\tpredicates: PredicatesGroup<T>,\n\t\tkeyPath: string[]\n\t): string[] | undefined {\n\t\tconst { predicates: predicateObjs } = predicates;\n\n\t\tif (predicateObjs.length !== keyPath.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst keyValues = [] as any[];\n\n\t\tfor (const key of keyPath) {\n\t\t\tconst predicateObj = predicateObjs.find(\n\t\t\t\tp => isPredicateObj(p) && p.field === key && p.operator === 'eq'\n\t\t\t) as PredicateObject<T>;\n\n\t\t\tpredicateObj && keyValues.push(predicateObj.operand);\n\t\t}\n\n\t\treturn keyValues.length === keyPath.length ? keyValues : undefined;\n\t}\n\n\tprivate matchingIndex(\n\t\tstoreName: string,\n\t\tfieldName: string,\n\t\ttransaction: idb.IDBPTransaction<unknown, [string]>\n\t) {\n\t\tconst store = transaction.objectStore(storeName);\n\t\tfor (const name of store.indexNames) {\n\t\t\tconst idx = store.index(name);\n\t\t\tif (idx.keyPath === fieldName) {\n\t\t\t\treturn idx;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async filterOnPredicate<T extends PersistentModel>(\n\t\tstoreName: string,\n\t\tpredicates: PredicatesGroup<T>\n\t) {\n\t\tlet { predicates: predicateObjs, type } = predicates;\n\n\t\t// the predicate objects we care about tend to be nested at least\n\t\t// one level down: `{and: {or: {and: { <the predicates we want> }}}}`\n\t\t// so, we unpack and/or groups until we find a group with more than 1\n\t\t// child OR a child that is not a group (and is therefore a predicate \"object\").\n\t\twhile (predicateObjs.length === 1 && isPredicateGroup(predicateObjs[0])) {\n\t\t\ttype = (predicateObjs[0] as PredicatesGroup<T>).type;\n\t\t\tpredicateObjs = (predicateObjs[0] as PredicatesGroup<T>).predicates;\n\t\t}\n\n\t\t// where we'll accumulate candidate results, which will be filtered at the end.\n\t\tlet candidateResults: T[];\n\n\t\t// AFAIK, this will always be a homogenous group of predicate objects at this point.\n\t\t// but, if that ever changes, this pulls out just the predicates from the list that\n\t\t// are field-level predicate objects we can potentially smash against an index.\n\t\tconst fieldPredicates = predicateObjs.filter(p =>\n\t\t\tisPredicateObj(p)\n\t\t) as PredicateObject<T>[];\n\n\t\t// several sub-queries could occur here. explicitly start a txn here to avoid\n\t\t// opening/closing multiple txns.\n\t\tconst txn = this.db.transaction(storeName);\n\n\t\t// our potential indexes or lacks thereof.\n\t\tconst predicateIndexes = fieldPredicates.map(p => {\n\t\t\treturn {\n\t\t\t\tpredicate: p,\n\t\t\t\tindex: this.matchingIndex(storeName, String(p.field), txn),\n\t\t\t};\n\t\t});\n\n\t\t// Explicitly wait for txns from index queries to complete before proceding.\n\t\t// This helps ensure IndexedDB is in a stable, ready state. Else, subseqeuent\n\t\t// qeuries can sometimes appear to deadlock (at least in FakeIndexedDB).\n\t\tawait txn.done;\n\n\t\t// semi-naive implementation:\n\t\tif (type === 'and') {\n\t\t\t// each condition must be satsified, we can form a base set with any\n\t\t\t// ONE of those conditions and then filter.\n\t\t\tconst actualPredicateIndexes = predicateIndexes.filter(\n\t\t\t\ti => i.index && i.predicate.operator === 'eq'\n\t\t\t);\n\n\t\t\tif (actualPredicateIndexes.length > 0) {\n\t\t\t\tconst predicateIndex = actualPredicateIndexes[0];\n\t\t\t\tcandidateResults = <T[]>(\n\t\t\t\t\tawait predicateIndex.index!.getAll(predicateIndex.predicate.operand)\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t// no usable indexes\n\t\t\t\tcandidateResults = <T[]>await this.getAll(storeName);\n\t\t\t}\n\t\t} else if (type === 'or') {\n\t\t\t// NOTE: each condition implies a potentially distinct set. we only benefit\n\t\t\t// from using indexes here if EVERY condition uses an index. if any one\n\t\t\t// index requires a table scan, we gain nothing from the indexes.\n\t\t\t// NOTE: results must be DISTINCT-ified if we leverage indexes.\n\t\t\tif (\n\t\t\t\tpredicateIndexes.length > 0 &&\n\t\t\t\tpredicateIndexes.every(i => i.index && i.predicate.operator === 'eq')\n\t\t\t) {\n\t\t\t\tconst distinctResults = new Map<string, T>();\n\t\t\t\tfor (const predicateIndex of predicateIndexes) {\n\t\t\t\t\tconst resultGroup = <T[]>(\n\t\t\t\t\t\tawait predicateIndex.index!.getAll(predicateIndex.predicate.operand)\n\t\t\t\t\t);\n\t\t\t\t\tfor (const item of resultGroup) {\n\t\t\t\t\t\t// TODO: custom PK\n\t\t\t\t\t\tdistinctResults.set(item.id, item);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// we could conceivably check for special conditions and return early here.\n\t\t\t\t// but, this is simpler and has not yet had a measurable performance impact.\n\t\t\t\tcandidateResults = Array.from(distinctResults.values());\n\t\t\t} else {\n\t\t\t\t// either no usable indexes or not all conditions can use one.\n\t\t\t\tcandidateResults = <T[]>await this.getAll(storeName);\n\t\t\t}\n\t\t} else {\n\t\t\t// nothing intelligent we can do with `not` groups unless or until we start\n\t\t\t// smashing comparison operators against indexes -- at which point we could\n\t\t\t// perform some reversal here.\n\t\t\tcandidateResults = <T[]>await this.getAll(storeName);\n\t\t}\n\n\t\tconst filtered = predicateObjs\n\t\t\t? candidateResults.filter(m => validatePredicate(m, type, predicateObjs))\n\t\t\t: candidateResults;\n\n\t\treturn filtered;\n\t}\n\n\tprivate inMemoryPagination<T extends PersistentModel>(\n\t\trecords: T[],\n\t\tpagination?: PaginationInput<T>\n\t): T[] {\n\t\treturn inMemoryPagination(records, pagination);\n\t}\n\n\tprivate async enginePagination<T extends PersistentModel>(\n\t\tstoreName: string,\n\t\tpagination?: PaginationInput<T>\n\t): Promise<T[]> {\n\t\tlet result: T[];\n\n\t\tif (pagination) {\n\t\t\tconst { page = 0, limit = 0 } = pagination;\n\t\t\tconst initialRecord = Math.max(0, page * limit) || 0;\n\n\t\t\tlet cursor = await this.db\n\t\t\t\t.transaction(storeName)\n\t\t\t\t.objectStore(storeName)\n\t\t\t\t.openCursor();\n\n\t\t\tif (cursor && initialRecord > 0) {\n\t\t\t\tawait cursor.advance(initialRecord);\n\t\t\t}\n\n\t\t\tconst pageResults: T[] = [];\n\t\t\tconst hasLimit = typeof limit === 'number' && limit > 0;\n\n\t\t\twhile (cursor && cursor.value) {\n\t\t\t\tpageResults.push(cursor.value);\n\n\t\t\t\tif (hasLimit && pageResults.length === limit) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tcursor = await cursor.continue();\n\t\t\t}\n\n\t\t\tresult = pageResults;\n\t\t} else {\n\t\t\tresult = <T[]>await this.db.getAll(storeName);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tasync queryOne<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<T>,\n\t\tfirstOrLast: QueryOne = QueryOne.FIRST\n\t): Promise<T | undefined> {\n\t\tawait this.checkPrivate();\n\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\n\t\tconst cursor = await this.db\n\t\t\t.transaction([storeName], 'readonly')\n\t\t\t.objectStore(storeName)\n\t\t\t.openCursor(undefined, firstOrLast === QueryOne.FIRST ? 'next' : 'prev');\n\n\t\tconst result = cursor ? <T>cursor.value : undefined;\n\n\t\treturn result && this.modelInstanceCreator(modelConstructor, result);\n\t}\n\n\tasync delete<T extends PersistentModel>(\n\t\tmodelOrModelConstructor: T | PersistentModelConstructor<T>,\n\t\tcondition?: ModelPredicate<T>\n\t): Promise<[T[], T[]]> {\n\t\tawait this.checkPrivate();\n\t\tconst deleteQueue: { storeName: string; items: T[] }[] = [];\n\n\t\tif (isModelConstructor(modelOrModelConstructor)) {\n\t\t\tconst modelConstructor =\n\t\t\t\tmodelOrModelConstructor as PersistentModelConstructor<T>;\n\t\t\tconst nameSpace = this.namespaceResolver(modelConstructor) as NAMESPACES;\n\n\t\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\n\t\t\tconst models = await this.query(modelConstructor, condition);\n\t\t\tconst relations =\n\t\t\t\tthis.schema.namespaces![nameSpace].relationships![modelConstructor.name]\n\t\t\t\t\t.relationTypes;\n\n\t\t\tif (condition !== undefined) {\n\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\trelations,\n\t\t\t\t\tmodels,\n\t\t\t\t\tmodelConstructor.name,\n\t\t\t\t\tnameSpace,\n\t\t\t\t\tdeleteQueue\n\t\t\t\t);\n\n\t\t\t\tawait this.deleteItem(deleteQueue);\n\n\t\t\t\tconst deletedModels = deleteQueue.reduce(\n\t\t\t\t\t(acc, { items }) => acc.concat(items),\n\t\t\t\t\t<T[]>[]\n\t\t\t\t);\n\n\t\t\t\treturn [models, deletedModels];\n\t\t\t} else {\n\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\trelations,\n\t\t\t\t\tmodels,\n\t\t\t\t\tmodelConstructor.name,\n\t\t\t\t\tnameSpace,\n\t\t\t\t\tdeleteQueue\n\t\t\t\t);\n\n\t\t\t\t// Delete all\n\t\t\t\tawait this.db\n\t\t\t\t\t.transaction([storeName], 'readwrite')\n\t\t\t\t\t.objectStore(storeName)\n\t\t\t\t\t.clear();\n\n\t\t\t\tconst deletedModels = deleteQueue.reduce(\n\t\t\t\t\t(acc, { items }) => acc.concat(items),\n\t\t\t\t\t<T[]>[]\n\t\t\t\t);\n\n\t\t\t\treturn [models, deletedModels];\n\t\t\t}\n\t\t} else {\n\t\t\tconst model = modelOrModelConstructor as T;\n\n\t\t\tconst modelConstructor = Object.getPrototypeOf(model)\n\t\t\t\t.constructor as PersistentModelConstructor<T>;\n\t\t\tconst namespaceName = this.namespaceResolver(\n\t\t\t\tmodelConstructor\n\t\t\t) as NAMESPACES;\n\n\t\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\n\t\t\tif (condition) {\n\t\t\t\tconst tx = this.db.transaction([storeName], 'readwrite');\n\t\t\t\tconst store = tx.objectStore(storeName);\n\t\t\t\tconst keyValues = this.getIndexKeyValuesFromModel(model);\n\n\t\t\t\tconst fromDB = await this._get(store, keyValues);\n\n\t\t\t\tif (fromDB === undefined) {\n\t\t\t\t\tconst msg = 'Model instance not found in storage';\n\t\t\t\t\tlogger.warn(msg, { model });\n\n\t\t\t\t\treturn [[model], []];\n\t\t\t\t}\n\n\t\t\t\tconst predicates = ModelPredicateCreator.getPredicates(condition);\n\t\t\t\tconst { predicates: predicateObjs, type } =\n\t\t\t\t\tpredicates as PredicatesGroup<T>;\n\n\t\t\t\tconst isValid = validatePredicate(fromDB as T, type, predicateObjs);\n\n\t\t\t\tif (!isValid) {\n\t\t\t\t\tconst msg = 'Conditional update failed';\n\t\t\t\t\tlogger.error(msg, { model: fromDB, condition: predicateObjs });\n\n\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t}\n\t\t\t\tawait tx.done;\n\n\t\t\t\tconst relations =\n\t\t\t\t\tthis.schema.namespaces[namespaceName].relationships![\n\t\t\t\t\t\tmodelConstructor.name\n\t\t\t\t\t].relationTypes;\n\n\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\trelations,\n\t\t\t\t\t[model],\n\t\t\t\t\tmodelConstructor.name,\n\t\t\t\t\tnamespaceName,\n\t\t\t\t\tdeleteQueue\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst relations =\n\t\t\t\t\tthis.schema.namespaces[namespaceName].relationships![\n\t\t\t\t\t\tmodelConstructor.name\n\t\t\t\t\t].relationTypes;\n\n\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\trelations,\n\t\t\t\t\t[model],\n\t\t\t\t\tmodelConstructor.name,\n\t\t\t\t\tnamespaceName,\n\t\t\t\t\tdeleteQueue\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tawait this.deleteItem(deleteQueue);\n\n\t\t\tconst deletedModels = deleteQueue.reduce(\n\t\t\t\t(acc, { items }) => acc.concat(items),\n\t\t\t\t<T[]>[]\n\t\t\t);\n\n\t\t\treturn [[model], deletedModels];\n\t\t}\n\t}\n\n\tprivate async deleteItem<T extends PersistentModel>(\n\t\tdeleteQueue?: {\n\t\t\tstoreName: string;\n\t\t\titems: T[] | IDBValidKey[];\n\t\t}[]\n\t) {\n\t\tconst connectionStoreNames = deleteQueue!.map(({ storeName }) => {\n\t\t\treturn storeName;\n\t\t});\n\n\t\tconst tx = this.db.transaction([...connectionStoreNames], 'readwrite');\n\t\tfor await (const deleteItem of deleteQueue!) {\n\t\t\tconst { storeName, items } = deleteItem;\n\t\t\tconst store = tx.objectStore(storeName);\n\n\t\t\tfor await (const item of items) {\n\t\t\t\tif (item) {\n\t\t\t\t\tlet key: IDBValidKey | undefined;\n\n\t\t\t\t\tif (typeof item === 'object') {\n\t\t\t\t\t\tconst keyValues = this.getIndexKeyValuesFromModel(item as T);\n\t\t\t\t\t\tkey = await store\n\t\t\t\t\t\t\t.index('byPk')\n\t\t\t\t\t\t\t.getKey(this.canonicalKeyPath(keyValues));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst itemKey = item.toString();\n\t\t\t\t\t\tkey = await store.index('byPk').getKey(itemKey);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (key !== undefined) {\n\t\t\t\t\t\tawait store.delete(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async deleteTraverse<T extends PersistentModel>(\n\t\trelations: RelationType[],\n\t\tmodels: T[],\n\t\tsrcModel: string,\n\t\tnameSpace: NAMESPACES,\n\t\tdeleteQueue: { storeName: string; items: T[] }[]\n\t): Promise<void> {\n\t\tfor await (const rel of relations) {\n\t\t\tconst {\n\t\t\t\trelationType,\n\t\t\t\tmodelName,\n\t\t\t\ttargetName,\n\t\t\t\ttargetNames,\n\t\t\t\tassociatedWith,\n\t\t\t} = rel;\n\n\t\t\tconst storeName = getStorename(nameSpace, modelName);\n\n\t\t\tswitch (relationType) {\n\t\t\t\tcase 'HAS_ONE':\n\t\t\t\t\tfor await (const model of models) {\n\t\t\t\t\t\tconst hasOneIndex = 'byPk';\n\n\t\t\t\t\t\tif (targetNames?.length) {\n\t\t\t\t\t\t\t// CPK codegen\n\t\t\t\t\t\t\tconst values = targetNames\n\t\t\t\t\t\t\t\t.filter(targetName => model[targetName] ?? false)\n\t\t\t\t\t\t\t\t.map(targetName => model[targetName]);\n\n\t\t\t\t\t\t\tif (values.length === 0) break;\n\n\t\t\t\t\t\t\tconst recordToDelete = <T>(\n\t\t\t\t\t\t\t\tawait this.db\n\t\t\t\t\t\t\t\t\t.transaction(storeName, 'readwrite')\n\t\t\t\t\t\t\t\t\t.objectStore(storeName)\n\t\t\t\t\t\t\t\t\t.index(hasOneIndex)\n\t\t\t\t\t\t\t\t\t.get(this.canonicalKeyPath(values))\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships![modelName]\n\t\t\t\t\t\t\t\t\t.relationTypes,\n\t\t\t\t\t\t\t\trecordToDelete ? [recordToDelete] : [],\n\t\t\t\t\t\t\t\tmodelName,\n\t\t\t\t\t\t\t\tnameSpace,\n\t\t\t\t\t\t\t\tdeleteQueue\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// PRE-CPK codegen\n\t\t\t\t\t\t\tlet index;\n\t\t\t\t\t\t\tlet values: string[];\n\n\t\t\t\t\t\t\tif (targetName && targetName in model) {\n\t\t\t\t\t\t\t\tindex = hasOneIndex;\n\t\t\t\t\t\t\t\tconst value = model[targetName];\n\t\t\t\t\t\t\t\tif (value === null) break;\n\t\t\t\t\t\t\t\tvalues = [value];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// backwards compatability for older versions of codegen that did not emit targetName for HAS_ONE relations\n\t\t\t\t\t\t\t\t// TODO: can we deprecate this? it's been ~2 years since codegen started including targetName for HAS_ONE\n\t\t\t\t\t\t\t\t// If we deprecate, we'll need to re-gen the MIPR in __tests__/schema.ts > newSchema\n\t\t\t\t\t\t\t\t// otherwise some unit tests will fail\n\t\t\t\t\t\t\t\tindex = getIndex(\n\t\t\t\t\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships![modelName]\n\t\t\t\t\t\t\t\t\t\t.relationTypes,\n\t\t\t\t\t\t\t\t\tsrcModel\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tvalues = this.getIndexKeyValuesFromModel(model);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (!values || !index) break;\n\n\t\t\t\t\t\t\tconst recordToDelete = <T>(\n\t\t\t\t\t\t\t\tawait this.db\n\t\t\t\t\t\t\t\t\t.transaction(storeName, 'readwrite')\n\t\t\t\t\t\t\t\t\t.objectStore(storeName)\n\t\t\t\t\t\t\t\t\t.index(index)\n\t\t\t\t\t\t\t\t\t.get(this.canonicalKeyPath(values))\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships![modelName]\n\t\t\t\t\t\t\t\t\t.relationTypes,\n\t\t\t\t\t\t\t\trecordToDelete ? [recordToDelete] : [],\n\t\t\t\t\t\t\t\tmodelName,\n\t\t\t\t\t\t\t\tnameSpace,\n\t\t\t\t\t\t\t\tdeleteQueue\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'HAS_MANY':\n\t\t\t\t\tfor await (const model of models) {\n\t\t\t\t\t\tconst index =\n\t\t\t\t\t\t\t// explicit bi-directional @hasMany and @manyToMany\n\t\t\t\t\t\t\tgetIndex(\n\t\t\t\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships![modelName]\n\t\t\t\t\t\t\t\t\t.relationTypes,\n\t\t\t\t\t\t\t\tsrcModel\n\t\t\t\t\t\t\t) ||\n\t\t\t\t\t\t\t// uni and/or implicit @hasMany\n\t\t\t\t\t\t\tgetIndexFromAssociation(\n\t\t\t\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships![modelName]\n\t\t\t\t\t\t\t\t\t.indexes,\n\t\t\t\t\t\t\t\tassociatedWith!\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tconst keyValues = this.getIndexKeyValuesFromModel(model);\n\n\t\t\t\t\t\tconst childrenArray = await this.db\n\t\t\t\t\t\t\t.transaction(storeName, 'readwrite')\n\t\t\t\t\t\t\t.objectStore(storeName)\n\t\t\t\t\t\t\t.index(index as string)\n\t\t\t\t\t\t\t.getAll(this.canonicalKeyPath(keyValues));\n\n\t\t\t\t\t\tawait this.deleteTraverse(\n\t\t\t\t\t\t\tthis.schema.namespaces[nameSpace].relationships![modelName]\n\t\t\t\t\t\t\t\t.relationTypes,\n\t\t\t\t\t\t\tchildrenArray,\n\t\t\t\t\t\t\tmodelName,\n\t\t\t\t\t\t\tnameSpace,\n\t\t\t\t\t\t\tdeleteQueue\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'BELONGS_TO':\n\t\t\t\t\t// Intentionally blank\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Invalid relation type ${relationType}`);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tdeleteQueue.push({\n\t\t\tstoreName: getStorename(nameSpace, srcModel),\n\t\t\titems: models.map(record =>\n\t\t\t\tthis.modelInstanceCreator(\n\t\t\t\t\tthis.getModelConstructorByModelName!(nameSpace, srcModel),\n\t\t\t\t\trecord\n\t\t\t\t)\n\t\t\t),\n\t\t});\n\t}\n\n\tasync clear(): Promise<void> {\n\t\tawait this.checkPrivate();\n\n\t\tthis.db?.close();\n\n\t\tawait idb.deleteDB(this.dbName);\n\n\t\tthis.db = undefined!;\n\t\tthis.initPromise = undefined!;\n\t}\n\n\tasync batchSave<T extends PersistentModel>(\n\t\tmodelConstructor: PersistentModelConstructor<any>,\n\t\titems: ModelInstanceMetadata[]\n\t): Promise<[T, OpType][]> {\n\t\tif (items.length === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\tawait this.checkPrivate();\n\n\t\tconst result: [T, OpType][] = [];\n\n\t\tconst storeName = this.getStorenameForModel(modelConstructor);\n\n\t\tconst txn = this.db.transaction(storeName, 'readwrite');\n\t\tconst store = txn.store;\n\n\t\tfor (const item of items) {\n\t\t\tconst namespaceName = this.namespaceResolver(modelConstructor);\n\t\t\tconst modelName = modelConstructor.name;\n\t\t\tconst model = this.modelInstanceCreator(modelConstructor, item);\n\n\t\t\tconst connectedModels = traverseModel(\n\t\t\t\tmodelName,\n\t\t\t\tmodel,\n\t\t\t\tthis.schema.namespaces[namespaceName],\n\t\t\t\tthis.modelInstanceCreator,\n\t\t\t\tthis.getModelConstructorByModelName!\n\t\t\t);\n\n\t\t\tconst keyValues = this.getIndexKeyValuesFromModel(model);\n\t\t\tconst { _deleted } = item;\n\n\t\t\tconst index = store.index('byPk');\n\n\t\t\tconst key = await index.getKey(this.canonicalKeyPath(keyValues));\n\n\t\t\tif (!_deleted) {\n\t\t\t\tconst { instance } = connectedModels.find(({ instance }) => {\n\t\t\t\t\tconst instanceKeyValues = this.getIndexKeyValuesFromModel(instance);\n\t\t\t\t\treturn keysEqual(instanceKeyValues, keyValues);\n\t\t\t\t})!;\n\n\t\t\t\tresult.push([\n\t\t\t\t\t<T>(<unknown>instance),\n\t\t\t\t\tkey ? OpType.UPDATE : OpType.INSERT,\n\t\t\t\t]);\n\t\t\t\tawait store.put(instance, key);\n\t\t\t} else {\n\t\t\t\tresult.push([<T>(<unknown>item), OpType.DELETE]);\n\n\t\t\t\tif (key) {\n\t\t\t\t\tawait store.delete(key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tawait txn.done;\n\n\t\treturn result;\n\t}\n\n\tprivate createObjectStoreForModel(\n\t\tdb: idb.IDBPDatabase,\n\t\tnamespaceName: string,\n\t\tstoreName: string,\n\t\tmodelName: string\n\t) {\n\t\tconst store = db.createObjectStore(storeName, {\n\t\t\tautoIncrement: true,\n\t\t});\n\n\t\tconst { indexes } =\n\t\t\tthis.schema.namespaces[namespaceName].relationships![modelName];\n\n\t\tindexes.forEach(([idxName, keyPath, options]) => {\n\t\t\tstore.createIndex(idxName, keyPath, options);\n\t\t});\n\n\t\treturn store;\n\t}\n\n\t/**\n\t * Checks the given path against the browser's IndexedDB implementation for\n\t * necessary compatibility transformations, applying those transforms if needed.\n\t *\n\t * @param `keyArr` strings to compatibilize for browser-indexeddb index operations\n\t * @returns An array or string, depending on and given key,\n\t * that is ensured to be compatible with the IndexedDB implementation's nuances.\n\t */\n\tprivate canonicalKeyPath = (keyArr: string[]) => {\n\t\tif (this.safariCompatabilityMode) {\n\t\t\treturn keyArr.length > 1 ? keyArr : keyArr[0];\n\t\t}\n\t\treturn keyArr;\n\t};\n}\n\nexport default new IndexedDBAdapter();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}