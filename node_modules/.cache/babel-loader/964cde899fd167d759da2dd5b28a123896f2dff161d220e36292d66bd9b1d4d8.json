{"ast":null,"code":"import { __values } from \"tslib\";\nimport { HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { buildQueryString } from \"@aws-sdk/querystring-builder\";\nimport { requestTimeout } from \"./request-timeout\";\nvar FetchHttpHandler = /** @class */function () {\n  function FetchHttpHandler(httpOptions) {\n    if (httpOptions === void 0) {\n      httpOptions = {};\n    }\n    this.httpOptions = httpOptions;\n  }\n  FetchHttpHandler.prototype.destroy = function () {\n    // Do nothing. TLS and HTTP/2 connection pooling is handled by the\n    // browser.\n  };\n  FetchHttpHandler.prototype.handle = function (request, options) {\n    var abortSignal = options === null || options === void 0 ? void 0 : options.abortSignal;\n    var requestTimeoutInMs = this.httpOptions.requestTimeout;\n    // if the request was already aborted, prevent doing extra work\n    if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {\n      var abortError = new Error(\"Request aborted\");\n      abortError.name = \"AbortError\";\n      return Promise.reject(abortError);\n    }\n    var path = request.path;\n    if (request.query) {\n      var queryString = buildQueryString(request.query);\n      if (queryString) {\n        path += \"?\" + queryString;\n      }\n    }\n    var port = request.port;\n    var url = request.protocol + \"//\" + request.hostname + (port ? \":\" + port : \"\") + path;\n    var requestOptions = {\n      body: request.body,\n      headers: new Headers(request.headers),\n      method: request.method\n    };\n    // some browsers support abort signal\n    if (typeof AbortController !== \"undefined\") {\n      requestOptions[\"signal\"] = abortSignal;\n    }\n    var fetchRequest = new Request(url, requestOptions);\n    var raceOfPromises = [fetch(fetchRequest).then(function (response) {\n      var e_1, _a;\n      var fetchHeaders = response.headers;\n      var transformedHeaders = {};\n      try {\n        for (var _b = __values(fetchHeaders.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var pair = _c.value;\n          transformedHeaders[pair[0]] = pair[1];\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      var hasReadableStream = response.body !== undefined;\n      // Return the response with buffered body\n      if (!hasReadableStream) {\n        return response.blob().then(function (body) {\n          return {\n            response: new HttpResponse({\n              headers: transformedHeaders,\n              statusCode: response.status,\n              body: body\n            })\n          };\n        });\n      }\n      // Return the response with streaming body\n      return {\n        response: new HttpResponse({\n          headers: transformedHeaders,\n          statusCode: response.status,\n          body: response.body\n        })\n      };\n    }), requestTimeout(requestTimeoutInMs)];\n    if (abortSignal) {\n      raceOfPromises.push(new Promise(function (resolve, reject) {\n        abortSignal.onabort = function () {\n          var abortError = new Error(\"Request aborted\");\n          abortError.name = \"AbortError\";\n          reject(abortError);\n        };\n      }));\n    }\n    return Promise.race(raceOfPromises);\n  };\n  return FetchHttpHandler;\n}();\nexport { FetchHttpHandler };","map":{"version":3,"names":["HttpResponse","buildQueryString","requestTimeout","FetchHttpHandler","httpOptions","prototype","destroy","handle","request","options","abortSignal","requestTimeoutInMs","aborted","abortError","Error","name","Promise","reject","path","query","queryString","port","url","protocol","hostname","requestOptions","body","headers","Headers","method","AbortController","fetchRequest","Request","raceOfPromises","fetch","then","response","fetchHeaders","transformedHeaders","_b","__values","entries","_c","next","done","pair","value","hasReadableStream","undefined","blob","statusCode","status","push","resolve","onabort","race"],"sources":["/Users/ericli/node_modules/@aws-amplify/analytics/node_modules/@aws-sdk/fetch-http-handler/src/fetch-http-handler.ts"],"sourcesContent":["import { HttpHandler, HttpRequest, HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { buildQueryString } from \"@aws-sdk/querystring-builder\";\nimport { HeaderBag, HttpHandlerOptions } from \"@aws-sdk/types\";\n\nimport { requestTimeout } from \"./request-timeout\";\n\ndeclare let AbortController: any;\n\n/**\n * Represents the http options that can be passed to a browser http client.\n */\nexport interface BrowserHttpOptions {\n  /**\n   * The number of milliseconds a request can take before being automatically\n   * terminated.\n   */\n  requestTimeout?: number;\n}\n\nexport class FetchHttpHandler implements HttpHandler {\n  constructor(private readonly httpOptions: BrowserHttpOptions = {}) {}\n\n  destroy(): void {\n    // Do nothing. TLS and HTTP/2 connection pooling is handled by the\n    // browser.\n  }\n\n  handle(request: HttpRequest, options: HttpHandlerOptions): Promise<{ response: HttpResponse }> {\n    const abortSignal = options?.abortSignal;\n    const requestTimeoutInMs = this.httpOptions.requestTimeout;\n\n    // if the request was already aborted, prevent doing extra work\n    if (abortSignal?.aborted) {\n      const abortError = new Error(\"Request aborted\");\n      abortError.name = \"AbortError\";\n      return Promise.reject(abortError);\n    }\n\n    let path = request.path;\n    if (request.query) {\n      const queryString = buildQueryString(request.query);\n      if (queryString) {\n        path += `?${queryString}`;\n      }\n    }\n\n    const port = request.port;\n    const url = `${request.protocol}//${request.hostname}${port ? `:${port}` : \"\"}${path}`;\n    const requestOptions: RequestInit = {\n      body: request.body,\n      headers: new Headers(request.headers),\n      method: request.method,\n    };\n\n    // some browsers support abort signal\n    if (typeof AbortController !== \"undefined\") {\n      (requestOptions as any)[\"signal\"] = abortSignal;\n    }\n\n    const fetchRequest = new Request(url, requestOptions);\n    const raceOfPromises = [\n      fetch(fetchRequest).then((response) => {\n        const fetchHeaders: any = response.headers;\n        const transformedHeaders: HeaderBag = {};\n\n        for (const pair of <Array<string[]>>fetchHeaders.entries()) {\n          transformedHeaders[pair[0]] = pair[1];\n        }\n\n        const hasReadableStream = response.body !== undefined;\n\n        // Return the response with buffered body\n        if (!hasReadableStream) {\n          return response.blob().then((body) => ({\n            response: new HttpResponse({\n              headers: transformedHeaders,\n              statusCode: response.status,\n              body,\n            }),\n          }));\n        }\n        // Return the response with streaming body\n        return {\n          response: new HttpResponse({\n            headers: transformedHeaders,\n            statusCode: response.status,\n            body: response.body,\n          }),\n        };\n      }),\n      requestTimeout(requestTimeoutInMs),\n    ];\n    if (abortSignal) {\n      raceOfPromises.push(\n        new Promise<never>((resolve, reject) => {\n          abortSignal.onabort = () => {\n            const abortError = new Error(\"Request aborted\");\n            abortError.name = \"AbortError\";\n            reject(abortError);\n          };\n        })\n      );\n    }\n    return Promise.race(raceOfPromises);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}