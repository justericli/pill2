{"ast":null,"code":"import { __awaiter, __generator, __rest } from \"tslib\";\nexport var loggerMiddleware = function () {\n  return function (next, context) {\n    return function (args) {\n      return __awaiter(void 0, void 0, void 0, function () {\n        var logger, inputFilterSensitiveLog, outputFilterSensitiveLog, response, _a, $metadata, outputWithoutMetadata;\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              logger = context.logger, inputFilterSensitiveLog = context.inputFilterSensitiveLog, outputFilterSensitiveLog = context.outputFilterSensitiveLog;\n              return [4 /*yield*/, next(args)];\n            case 1:\n              response = _b.sent();\n              if (!logger) {\n                return [2 /*return*/, response];\n              }\n              _a = response.output, $metadata = _a.$metadata, outputWithoutMetadata = __rest(_a, [\"$metadata\"]);\n              if (typeof logger.debug === \"function\") {\n                logger.debug({\n                  httpRequest: args.request\n                });\n                logger.debug({\n                  httpResponse: response.response\n                });\n              }\n              if (typeof logger.info === \"function\") {\n                logger.info({\n                  $metadata: $metadata,\n                  input: inputFilterSensitiveLog(args.input),\n                  output: outputFilterSensitiveLog(outputWithoutMetadata)\n                });\n              }\n              return [2 /*return*/, response];\n          }\n        });\n      });\n    };\n  };\n};\nexport var loggerMiddlewareOptions = {\n  name: \"loggerMiddleware\",\n  tags: [\"LOGGER\"],\n  step: \"finalizeRequest\"\n};\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport var getLoggerPlugin = function (options) {\n  return {\n    applyToStack: function (clientStack) {\n      clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);\n    }\n  };\n};","map":{"version":3,"names":["loggerMiddleware","next","context","args","__awaiter","logger","inputFilterSensitiveLog","outputFilterSensitiveLog","response","_b","sent","_a","output","$metadata","outputWithoutMetadata","__rest","debug","httpRequest","request","httpResponse","info","input","loggerMiddlewareOptions","name","tags","step","getLoggerPlugin","options","applyToStack","clientStack","add"],"sources":["/Users/ericli/node_modules/@aws-amplify/analytics/node_modules/@aws-sdk/middleware-logger/src/loggerMiddleware.ts"],"sourcesContent":["import {\n  AbsoluteLocation,\n  FinalizeHandler,\n  FinalizeHandlerArguments,\n  FinalizeHandlerOutput,\n  FinalizeRequestHandlerOptions,\n  HandlerExecutionContext,\n  MetadataBearer,\n  Pluggable,\n} from \"@aws-sdk/types\";\n\nimport { LoggerResolvedConfig } from \"./configurations\";\n\nexport const loggerMiddleware = () => <Output extends MetadataBearer = MetadataBearer>(\n  next: FinalizeHandler<any, Output>,\n  context: HandlerExecutionContext\n): FinalizeHandler<any, Output> => async (\n  args: FinalizeHandlerArguments<any>\n): Promise<FinalizeHandlerOutput<Output>> => {\n  const { logger, inputFilterSensitiveLog, outputFilterSensitiveLog } = context;\n\n  const response = await next(args);\n\n  if (!logger) {\n    return response;\n  }\n\n  const {\n    output: { $metadata, ...outputWithoutMetadata },\n  } = response;\n\n  if (typeof logger.debug === \"function\") {\n    logger.debug({\n      httpRequest: args.request,\n    });\n    logger.debug({\n      httpResponse: response.response,\n    });\n  }\n\n  if (typeof logger.info === \"function\") {\n    logger.info({\n      $metadata,\n      input: inputFilterSensitiveLog(args.input),\n      output: outputFilterSensitiveLog(outputWithoutMetadata),\n    });\n  }\n\n  return response;\n};\n\nexport const loggerMiddlewareOptions: FinalizeRequestHandlerOptions & AbsoluteLocation = {\n  name: \"loggerMiddleware\",\n  tags: [\"LOGGER\"],\n  step: \"finalizeRequest\",\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport const getLoggerPlugin = (options: LoggerResolvedConfig): Pluggable<any, any> => ({\n  applyToStack: (clientStack) => {\n    clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);\n  },\n});\n"],"mappings":";AAaA,OAAO,IAAMA,gBAAgB,GAAG,SAAAA,CAAA;EAAM,iBACpCC,IAAkC,EAClCC,OAAgC;IACC,iBACjCC,IAAmC;MAAA,OAAAC,SAAA;;;;;cAE3BC,MAAM,GAAwDH,OAAO,CAAAG,MAA/D,EAAEC,uBAAuB,GAA+BJ,OAAO,CAAAI,uBAAtC,EAAEC,wBAAwB,GAAKL,OAAO,CAAAK,wBAAZ;cAEhD,qBAAMN,IAAI,CAACE,IAAI,CAAC;;cAA3BK,QAAQ,GAAGC,EAAA,CAAAC,IAAA,EAAgB;cAEjC,IAAI,CAACL,MAAM,EAAE;gBACX,sBAAOG,QAAQ;;cAIfG,EAAA,GACEH,QAAQ,CAAAI,MADqC,EAArCC,SAAS,GAAAF,EAAA,CAAAE,SAAA,EAAKC,qBAAqB,GAAAC,MAAA,CAAAJ,EAAA,EAArC,aAAuC,CAAF;cAG/C,IAAI,OAAON,MAAM,CAACW,KAAK,KAAK,UAAU,EAAE;gBACtCX,MAAM,CAACW,KAAK,CAAC;kBACXC,WAAW,EAAEd,IAAI,CAACe;iBACnB,CAAC;gBACFb,MAAM,CAACW,KAAK,CAAC;kBACXG,YAAY,EAAEX,QAAQ,CAACA;iBACxB,CAAC;;cAGJ,IAAI,OAAOH,MAAM,CAACe,IAAI,KAAK,UAAU,EAAE;gBACrCf,MAAM,CAACe,IAAI,CAAC;kBACVP,SAAS,EAAAA,SAAA;kBACTQ,KAAK,EAAEf,uBAAuB,CAACH,IAAI,CAACkB,KAAK,CAAC;kBAC1CT,MAAM,EAAEL,wBAAwB,CAACO,qBAAqB;iBACvD,CAAC;;cAGJ,sBAAON,QAAQ;UAAC;;;KACjB;EAjCkC,CAiClC;AApCqC,CAoCrC;AAED,OAAO,IAAMc,uBAAuB,GAAqD;EACvFC,IAAI,EAAE,kBAAkB;EACxBC,IAAI,EAAE,CAAC,QAAQ,CAAC;EAChBC,IAAI,EAAE;CACP;AAED;AACA,OAAO,IAAMC,eAAe,GAAG,SAAAA,CAACC,OAA6B;EAA0B,OAAC;IACtFC,YAAY,EAAE,SAAAA,CAACC,WAAW;MACxBA,WAAW,CAACC,GAAG,CAAC9B,gBAAgB,EAAE,EAAEsB,uBAAuB,CAAC;IAC9D;GACD;AAJsF,CAIrF"},"metadata":{},"sourceType":"module","externalDependencies":[]}