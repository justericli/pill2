{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n  return ar;\n};\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { PutEventsCommand } from '@aws-sdk/client-pinpoint';\nimport { isAppInForeground } from '../utils/AppUtils';\nvar logger = new Logger('EventsBuffer');\nvar RETRYABLE_CODES = [429, 500];\nvar ACCEPTED_CODES = [202];\nvar EventsBuffer = /** @class */function () {\n  function EventsBuffer(client, config) {\n    this._pause = false;\n    this._flush = false;\n    logger.debug('Instantiating buffer with config:', config);\n    this._buffer = [];\n    this._client = client;\n    this._config = config;\n    this._sendBatch = this._sendBatch.bind(this);\n    this._startLoop();\n  }\n  EventsBuffer.prototype.push = function (event) {\n    var _a;\n    if (this._buffer > this._config.bufferSize) {\n      logger.debug('Exceeded analytics events buffer size');\n      return event.handlers.reject(new Error('Exceeded the size of analytics events buffer'));\n    }\n    var eventId = event.params.event.eventId;\n    var bufferElement = (_a = {}, _a[eventId] = event, _a);\n    this._buffer.push(bufferElement);\n  };\n  EventsBuffer.prototype.pause = function () {\n    this._pause = true;\n  };\n  EventsBuffer.prototype.resume = function () {\n    this._pause = false;\n  };\n  EventsBuffer.prototype.updateClient = function (client) {\n    this._client = client;\n  };\n  EventsBuffer.prototype.flush = function () {\n    this._flush = true;\n  };\n  EventsBuffer.prototype._startLoop = function () {\n    if (this._interval) {\n      clearInterval(this._interval);\n    }\n    var flushInterval = this._config.flushInterval;\n    this._interval = setInterval(this._sendBatch, flushInterval);\n  };\n  EventsBuffer.prototype._sendBatch = function () {\n    var bufferLength = this._buffer.length;\n    if (this._flush && !bufferLength) {\n      clearInterval(this._interval);\n    }\n    // Do not send the batch of events if\n    // the Buffer is paused or is empty or the App is not in the foreground\n    // Apps should be in the foreground since\n    // the OS may restrict access to the network in the background\n    if (this._pause || !bufferLength || !isAppInForeground()) {\n      return;\n    }\n    var flushSize = this._config.flushSize;\n    var batchSize = Math.min(flushSize, bufferLength);\n    var bufferSubset = this._buffer.splice(0, batchSize);\n    this._putEvents(bufferSubset);\n  };\n  EventsBuffer.prototype._putEvents = function (buffer) {\n    return __awaiter(this, void 0, void 0, function () {\n      var eventMap, batchEventParams, command, data, err_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            eventMap = this._bufferToMap(buffer);\n            batchEventParams = this._generateBatchEventParams(eventMap);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            command = new PutEventsCommand(batchEventParams);\n            return [4 /*yield*/, this._client.send(command)];\n          case 2:\n            data = _a.sent();\n            this._processPutEventsSuccessResponse(data, eventMap);\n            return [3 /*break*/, 4];\n          case 3:\n            err_1 = _a.sent();\n            return [2 /*return*/, this._handlePutEventsFailure(err_1, eventMap)];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  EventsBuffer.prototype._generateBatchEventParams = function (eventMap) {\n    var batchEventParams = {\n      ApplicationId: '',\n      EventsRequest: {\n        BatchItem: {}\n      }\n    };\n    Object.values(eventMap).forEach(function (item) {\n      var params = item.params;\n      var event = params.event,\n        timestamp = params.timestamp,\n        config = params.config;\n      var name = event.name,\n        attributes = event.attributes,\n        metrics = event.metrics,\n        eventId = event.eventId,\n        session = event.session;\n      var appId = config.appId,\n        endpointId = config.endpointId;\n      var batchItem = batchEventParams.EventsRequest.BatchItem;\n      batchEventParams.ApplicationId = batchEventParams.ApplicationId || appId;\n      if (!batchItem[endpointId]) {\n        batchItem[endpointId] = {\n          Endpoint: {},\n          Events: {}\n        };\n      }\n      batchItem[endpointId].Events[eventId] = {\n        EventType: name,\n        Timestamp: new Date(timestamp).toISOString(),\n        Attributes: attributes,\n        Metrics: metrics,\n        Session: session\n      };\n    });\n    return batchEventParams;\n  };\n  EventsBuffer.prototype._handlePutEventsFailure = function (err, eventMap) {\n    logger.debug('_putEvents Failed: ', err);\n    var statusCode = err.$metadata && err.$metadata.httpStatusCode;\n    if (RETRYABLE_CODES.includes(statusCode)) {\n      var retryableEvents = Object.values(eventMap);\n      this._retry(retryableEvents);\n      return;\n    }\n  };\n  EventsBuffer.prototype._processPutEventsSuccessResponse = function (data, eventMap) {\n    var Results = data.EventsResponse.Results;\n    var retryableEvents = [];\n    Object.entries(Results).forEach(function (_a) {\n      var _b = __read(_a, 2),\n        endpointId = _b[0],\n        endpointValues = _b[1];\n      var responses = endpointValues.EventsItemResponse;\n      Object.entries(responses).forEach(function (_a) {\n        var _b, _c;\n        var _d = __read(_a, 2),\n          eventId = _d[0],\n          _e = _d[1],\n          StatusCode = _e.StatusCode,\n          Message = _e.Message;\n        var eventObject = eventMap[eventId];\n        // manually crafting handlers response to keep API consistant\n        var response = {\n          EventsResponse: {\n            Results: (_b = {}, _b[endpointId] = {\n              EventsItemResponse: (_c = {}, _c[eventId] = {\n                StatusCode: StatusCode,\n                Message: Message\n              }, _c)\n            }, _b)\n          }\n        };\n        if (ACCEPTED_CODES.includes(StatusCode)) {\n          eventObject.handlers.resolve(response);\n          return;\n        }\n        if (RETRYABLE_CODES.includes(StatusCode)) {\n          retryableEvents.push(eventObject);\n          return;\n        }\n        var name = eventObject.params.event.name;\n        logger.error(\"event \" + eventId + \" : \" + name + \" failed with error: \" + Message);\n        return eventObject.handlers.reject(response);\n      });\n    });\n    if (retryableEvents.length) {\n      this._retry(retryableEvents);\n    }\n  };\n  EventsBuffer.prototype._retry = function (retryableEvents) {\n    var _a;\n    // retryable events that haven't reached the resendLimit\n    var eligibleEvents = [];\n    retryableEvents.forEach(function (event) {\n      var _a;\n      var params = event.params;\n      var _b = params.event,\n        eventId = _b.eventId,\n        name = _b.name;\n      if (params.resendLimit-- > 0) {\n        logger.debug(\"resending event \" + eventId + \" : \" + name + \" with \" + params.resendLimit + \" retry attempts remaining\");\n        eligibleEvents.push((_a = {}, _a[eventId] = event, _a));\n        return;\n      }\n      logger.debug(\"no retry attempts remaining for event \" + eventId + \" : \" + name);\n    });\n    // add the events to the front of the buffer\n    (_a = this._buffer).unshift.apply(_a, __spread(eligibleEvents));\n  };\n  // convert buffer to map, i.e. { eventId1: { params, handler }, eventId2: { params, handlers } }\n  // this allows us to easily access the handlers after receiving a batch response\n  EventsBuffer.prototype._bufferToMap = function (buffer) {\n    return buffer.reduce(function (acc, curVal) {\n      var _a = __read(Object.entries(curVal), 1),\n        _b = __read(_a[0], 2),\n        key = _b[0],\n        value = _b[1];\n      acc[key] = value;\n      return acc;\n    }, {});\n  };\n  return EventsBuffer;\n}();\nexport default EventsBuffer;","map":{"version":3,"names":["ConsoleLogger","Logger","PutEventsCommand","isAppInForeground","logger","RETRYABLE_CODES","ACCEPTED_CODES","EventsBuffer","client","config","_pause","_flush","debug","_buffer","_client","_config","_sendBatch","bind","_startLoop","prototype","push","event","bufferSize","handlers","reject","Error","eventId","params","bufferElement","_a","pause","resume","updateClient","flush","_interval","clearInterval","flushInterval","setInterval","bufferLength","length","flushSize","batchSize","Math","min","bufferSubset","splice","_putEvents","buffer","eventMap","_bufferToMap","batchEventParams","_generateBatchEventParams","command","send","data","sent","_processPutEventsSuccessResponse","_handlePutEventsFailure","err_1","ApplicationId","EventsRequest","BatchItem","Object","values","forEach","item","timestamp","name","attributes","metrics","session","appId","endpointId","batchItem","Endpoint","Events","EventType","Timestamp","Date","toISOString","Attributes","Metrics","Session","err","statusCode","$metadata","httpStatusCode","includes","retryableEvents","_retry","Results","EventsResponse","entries","_b","__read","endpointValues","responses","EventsItemResponse","_d","_e","StatusCode","Message","eventObject","response","_c","resolve","error","eligibleEvents","resendLimit","unshift","apply","__spread","reduce","acc","curVal","key","value"],"sources":["/Users/ericli/node_modules/@aws-amplify/analytics/src/Providers/EventBuffer.ts"],"sourcesContent":["import { ConsoleLogger as Logger } from '@aws-amplify/core';\n\nimport {\n\tPutEventsResponse,\n\tEventBuffer,\n\tEventObject,\n\tEventMap,\n} from '../types';\nimport {\n\tPutEventsCommand,\n\tPutEventsCommandOutput,\n} from '@aws-sdk/client-pinpoint';\nimport { isAppInForeground } from '../utils/AppUtils';\n\nconst logger = new Logger('EventsBuffer');\nconst RETRYABLE_CODES = [429, 500];\nconst ACCEPTED_CODES = [202];\n\ntype EventsBufferConfig = {\n\tbufferSize: number;\n\tflushSize: number;\n\tflushInterval: number;\n\tresendLimit: number;\n};\n\nexport default class EventsBuffer {\n\tprivate _config;\n\tprivate _client;\n\tprivate _interval;\n\tprivate _buffer: EventBuffer;\n\tprivate _pause = false;\n\tprivate _flush = false;\n\n\tconstructor(client, config: EventsBufferConfig) {\n\t\tlogger.debug('Instantiating buffer with config:', config);\n\t\tthis._buffer = [];\n\t\tthis._client = client;\n\t\tthis._config = config;\n\n\t\tthis._sendBatch = this._sendBatch.bind(this);\n\n\t\tthis._startLoop();\n\t}\n\n\tpublic push(event: EventObject) {\n\t\tif (this._buffer > this._config.bufferSize) {\n\t\t\tlogger.debug('Exceeded analytics events buffer size');\n\t\t\treturn event.handlers.reject(\n\t\t\t\tnew Error('Exceeded the size of analytics events buffer')\n\t\t\t);\n\t\t}\n\n\t\tconst { eventId } = event.params.event;\n\t\tconst bufferElement = { [eventId]: event };\n\t\tthis._buffer.push(bufferElement);\n\t}\n\n\tpublic pause() {\n\t\tthis._pause = true;\n\t}\n\n\tpublic resume() {\n\t\tthis._pause = false;\n\t}\n\n\tpublic updateClient(client) {\n\t\tthis._client = client;\n\t}\n\n\tpublic flush() {\n\t\tthis._flush = true;\n\t}\n\n\tprivate _startLoop() {\n\t\tif (this._interval) {\n\t\t\tclearInterval(this._interval);\n\t\t}\n\n\t\tconst { flushInterval } = this._config;\n\n\t\tthis._interval = setInterval(this._sendBatch, flushInterval);\n\t}\n\n\tprivate _sendBatch() {\n\t\tconst bufferLength = this._buffer.length;\n\n\t\tif (this._flush && !bufferLength) {\n\t\t\tclearInterval(this._interval);\n\t\t}\n\n\t\t// Do not send the batch of events if\n\t\t// the Buffer is paused or is empty or the App is not in the foreground\n\t\t// Apps should be in the foreground since\n\t\t// the OS may restrict access to the network in the background\n\t\tif (this._pause || !bufferLength || !isAppInForeground()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { flushSize } = this._config;\n\n\t\tconst batchSize = Math.min(flushSize, bufferLength);\n\t\tconst bufferSubset = this._buffer.splice(0, batchSize);\n\n\t\tthis._putEvents(bufferSubset);\n\t}\n\n\tprivate async _putEvents(buffer: EventBuffer) {\n\t\tconst eventMap: EventMap = this._bufferToMap(buffer);\n\t\tconst batchEventParams = this._generateBatchEventParams(eventMap);\n\n\t\ttry {\n\t\t\tconst command: PutEventsCommand = new PutEventsCommand(batchEventParams);\n\t\t\tconst data: PutEventsCommandOutput = await this._client.send(command);\n\t\t\tthis._processPutEventsSuccessResponse(data, eventMap);\n\t\t} catch (err) {\n\t\t\treturn this._handlePutEventsFailure(err, eventMap);\n\t\t}\n\t}\n\n\tprivate _generateBatchEventParams(eventMap: EventMap) {\n\t\tconst batchEventParams = {\n\t\t\tApplicationId: '',\n\t\t\tEventsRequest: {\n\t\t\t\tBatchItem: {},\n\t\t\t},\n\t\t};\n\n\t\tObject.values(eventMap).forEach(item => {\n\t\t\tconst { params } = item;\n\t\t\tconst { event, timestamp, config } = params;\n\t\t\tconst { name, attributes, metrics, eventId, session } = event;\n\t\t\tconst { appId, endpointId } = config;\n\n\t\t\tconst batchItem = batchEventParams.EventsRequest.BatchItem;\n\n\t\t\tbatchEventParams.ApplicationId = batchEventParams.ApplicationId || appId;\n\n\t\t\tif (!batchItem[endpointId]) {\n\t\t\t\tbatchItem[endpointId] = {\n\t\t\t\t\tEndpoint: {},\n\t\t\t\t\tEvents: {},\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tbatchItem[endpointId].Events[eventId] = {\n\t\t\t\tEventType: name,\n\t\t\t\tTimestamp: new Date(timestamp).toISOString(),\n\t\t\t\tAttributes: attributes,\n\t\t\t\tMetrics: metrics,\n\t\t\t\tSession: session,\n\t\t\t};\n\t\t});\n\n\t\treturn batchEventParams;\n\t}\n\n\tprivate _handlePutEventsFailure(err, eventMap: EventMap) {\n\t\tlogger.debug('_putEvents Failed: ', err);\n\t\tconst statusCode = err.$metadata && err.$metadata.httpStatusCode;\n\n\t\tif (RETRYABLE_CODES.includes(statusCode)) {\n\t\t\tconst retryableEvents = Object.values(eventMap);\n\t\t\tthis._retry(retryableEvents);\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprivate _processPutEventsSuccessResponse(\n\t\tdata: PutEventsResponse,\n\t\teventMap: EventMap\n\t) {\n\t\tconst { Results } = data.EventsResponse;\n\t\tconst retryableEvents: EventObject[] = [];\n\n\t\tObject.entries(Results).forEach(([endpointId, endpointValues]) => {\n\t\t\tconst responses = endpointValues.EventsItemResponse;\n\n\t\t\tObject.entries(responses).forEach(\n\t\t\t\t([eventId, { StatusCode, Message }]) => {\n\t\t\t\t\tconst eventObject = eventMap[eventId];\n\n\t\t\t\t\t// manually crafting handlers response to keep API consistant\n\t\t\t\t\tconst response = {\n\t\t\t\t\t\tEventsResponse: {\n\t\t\t\t\t\t\tResults: {\n\t\t\t\t\t\t\t\t[endpointId]: {\n\t\t\t\t\t\t\t\t\tEventsItemResponse: {\n\t\t\t\t\t\t\t\t\t\t[eventId]: { StatusCode, Message },\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\n\t\t\t\t\tif (ACCEPTED_CODES.includes(StatusCode)) {\n\t\t\t\t\t\teventObject.handlers.resolve(response);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (RETRYABLE_CODES.includes(StatusCode)) {\n\t\t\t\t\t\tretryableEvents.push(eventObject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst { name } = eventObject.params.event;\n\n\t\t\t\t\tlogger.error(\n\t\t\t\t\t\t`event ${eventId} : ${name} failed with error: ${Message}`\n\t\t\t\t\t);\n\t\t\t\t\treturn eventObject.handlers.reject(response);\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\n\t\tif (retryableEvents.length) {\n\t\t\tthis._retry(retryableEvents);\n\t\t}\n\t}\n\n\tprivate _retry(retryableEvents: EventObject[]) {\n\t\t// retryable events that haven't reached the resendLimit\n\t\tconst eligibleEvents: EventBuffer = [];\n\n\t\tretryableEvents.forEach((event: EventObject) => {\n\t\t\tconst { params } = event;\n\t\t\tconst { eventId, name } = params.event;\n\n\t\t\tif (params.resendLimit-- > 0) {\n\t\t\t\tlogger.debug(\n\t\t\t\t\t`resending event ${eventId} : ${name} with ${params.resendLimit} retry attempts remaining`\n\t\t\t\t);\n\t\t\t\teligibleEvents.push({ [eventId]: event });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogger.debug(\n\t\t\t\t`no retry attempts remaining for event ${eventId} : ${name}`\n\t\t\t);\n\t\t});\n\n\t\t// add the events to the front of the buffer\n\t\tthis._buffer.unshift(...eligibleEvents);\n\t}\n\n\t// convert buffer to map, i.e. { eventId1: { params, handler }, eventId2: { params, handlers } }\n\t// this allows us to easily access the handlers after receiving a batch response\n\tprivate _bufferToMap(buffer: EventBuffer) {\n\t\treturn buffer.reduce((acc, curVal) => {\n\t\t\tconst [[key, value]] = Object.entries(curVal);\n\t\t\tacc[key] = value;\n\t\t\treturn acc;\n\t\t}, {});\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}