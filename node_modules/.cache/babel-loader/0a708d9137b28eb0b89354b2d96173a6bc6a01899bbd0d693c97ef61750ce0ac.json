{"ast":null,"code":"var alphabetByEncoding = {};\nvar alphabetByValue = new Array(64);\nfor (var i = 0, start = \"A\".charCodeAt(0), limit = \"Z\".charCodeAt(0); i + start <= limit; i++) {\n  var char = String.fromCharCode(i + start);\n  alphabetByEncoding[char] = i;\n  alphabetByValue[i] = char;\n}\nfor (var _i = 0, _start = \"a\".charCodeAt(0), _limit = \"z\".charCodeAt(0); _i + _start <= _limit; _i++) {\n  var _char = String.fromCharCode(_i + _start);\n  var index = _i + 26;\n  alphabetByEncoding[_char] = index;\n  alphabetByValue[index] = _char;\n}\nfor (var _i2 = 0; _i2 < 10; _i2++) {\n  alphabetByEncoding[_i2.toString(10)] = _i2 + 52;\n  var _char2 = _i2.toString(10);\n  var _index = _i2 + 52;\n  alphabetByEncoding[_char2] = _index;\n  alphabetByValue[_index] = _char2;\n}\nalphabetByEncoding[\"+\"] = 62;\nalphabetByValue[62] = \"+\";\nalphabetByEncoding[\"/\"] = 63;\nalphabetByValue[63] = \"/\";\nvar bitsPerLetter = 6;\nvar bitsPerByte = 8;\nvar maxLetterValue = 63;\nexport { alphabetByEncoding, alphabetByValue, bitsPerLetter, bitsPerByte, maxLetterValue };","map":{"version":3,"names":["alphabetByEncoding","alphabetByValue","Array","i","start","charCodeAt","limit","char","String","fromCharCode","index","toString","bitsPerLetter","bitsPerByte","maxLetterValue"],"sources":["/Users/ericli/Desktop/pill2/node_modules/@aws-sdk/util-base64/dist-es/constants.browser.js"],"sourcesContent":["const alphabetByEncoding = {};\nconst alphabetByValue = new Array(64);\nfor (let i = 0, start = \"A\".charCodeAt(0), limit = \"Z\".charCodeAt(0); i + start <= limit; i++) {\n    const char = String.fromCharCode(i + start);\n    alphabetByEncoding[char] = i;\n    alphabetByValue[i] = char;\n}\nfor (let i = 0, start = \"a\".charCodeAt(0), limit = \"z\".charCodeAt(0); i + start <= limit; i++) {\n    const char = String.fromCharCode(i + start);\n    const index = i + 26;\n    alphabetByEncoding[char] = index;\n    alphabetByValue[index] = char;\n}\nfor (let i = 0; i < 10; i++) {\n    alphabetByEncoding[i.toString(10)] = i + 52;\n    const char = i.toString(10);\n    const index = i + 52;\n    alphabetByEncoding[char] = index;\n    alphabetByValue[index] = char;\n}\nalphabetByEncoding[\"+\"] = 62;\nalphabetByValue[62] = \"+\";\nalphabetByEncoding[\"/\"] = 63;\nalphabetByValue[63] = \"/\";\nconst bitsPerLetter = 6;\nconst bitsPerByte = 8;\nconst maxLetterValue = 0b111111;\nexport { alphabetByEncoding, alphabetByValue, bitsPerLetter, bitsPerByte, maxLetterValue };\n"],"mappings":"AAAA,IAAMA,kBAAkB,GAAG,CAAC,CAAC;AAC7B,IAAMC,eAAe,GAAG,IAAIC,KAAK,CAAC,EAAE,CAAC;AACrC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,KAAK,GAAG,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC,EAAEC,KAAK,GAAG,GAAG,CAACD,UAAU,CAAC,CAAC,CAAC,EAAEF,CAAC,GAAGC,KAAK,IAAIE,KAAK,EAAEH,CAAC,EAAE,EAAE;EAC3F,IAAMI,IAAI,GAAGC,MAAM,CAACC,YAAY,CAACN,CAAC,GAAGC,KAAK,CAAC;EAC3CJ,kBAAkB,CAACO,IAAI,CAAC,GAAGJ,CAAC;EAC5BF,eAAe,CAACE,CAAC,CAAC,GAAGI,IAAI;AAC7B;AACA,KAAK,IAAIJ,EAAC,GAAG,CAAC,EAAEC,MAAK,GAAG,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC,EAAEC,MAAK,GAAG,GAAG,CAACD,UAAU,CAAC,CAAC,CAAC,EAAEF,EAAC,GAAGC,MAAK,IAAIE,MAAK,EAAEH,EAAC,EAAE,EAAE;EAC3F,IAAMI,KAAI,GAAGC,MAAM,CAACC,YAAY,CAACN,EAAC,GAAGC,MAAK,CAAC;EAC3C,IAAMM,KAAK,GAAGP,EAAC,GAAG,EAAE;EACpBH,kBAAkB,CAACO,KAAI,CAAC,GAAGG,KAAK;EAChCT,eAAe,CAACS,KAAK,CAAC,GAAGH,KAAI;AACjC;AACA,KAAK,IAAIJ,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAG,EAAE,EAAEA,GAAC,EAAE,EAAE;EACzBH,kBAAkB,CAACG,GAAC,CAACQ,QAAQ,CAAC,EAAE,CAAC,CAAC,GAAGR,GAAC,GAAG,EAAE;EAC3C,IAAMI,MAAI,GAAGJ,GAAC,CAACQ,QAAQ,CAAC,EAAE,CAAC;EAC3B,IAAMD,MAAK,GAAGP,GAAC,GAAG,EAAE;EACpBH,kBAAkB,CAACO,MAAI,CAAC,GAAGG,MAAK;EAChCT,eAAe,CAACS,MAAK,CAAC,GAAGH,MAAI;AACjC;AACAP,kBAAkB,CAAC,GAAG,CAAC,GAAG,EAAE;AAC5BC,eAAe,CAAC,EAAE,CAAC,GAAG,GAAG;AACzBD,kBAAkB,CAAC,GAAG,CAAC,GAAG,EAAE;AAC5BC,eAAe,CAAC,EAAE,CAAC,GAAG,GAAG;AACzB,IAAMW,aAAa,GAAG,CAAC;AACvB,IAAMC,WAAW,GAAG,CAAC;AACrB,IAAMC,cAAc,GAAG,EAAQ;AAC/B,SAASd,kBAAkB,EAAEC,eAAe,EAAEW,aAAa,EAAEC,WAAW,EAAEC,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}