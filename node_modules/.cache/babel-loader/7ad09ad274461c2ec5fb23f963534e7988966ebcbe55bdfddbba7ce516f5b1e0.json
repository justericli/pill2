{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __assign, __awaiter, __generator, __read } from \"tslib\";\nimport { isUsernamePasswordOpts, isCognitoHostedOpts, isFederatedSignInOptions, isFederatedSignInOptionsCustom, hasCustomState } from './types';\nimport { Amplify, ConsoleLogger as Logger, Credentials, Hub, StorageHelper, browserOrNode, parseAWSExports, UniversalStorage, urlSafeDecode } from '@aws-amplify/core';\nimport { CookieStorage, CognitoUserPool, AuthenticationDetails, CognitoUser, CognitoUserSession, CognitoUserAttribute, CognitoIdToken, CognitoRefreshToken, CognitoAccessToken } from 'amazon-cognito-identity-js';\nimport { parse } from 'url';\nimport OAuth from './OAuth/OAuth';\nimport { default as urlListener } from './urlListener';\nimport { AuthError, NoUserPoolError } from './Errors';\nimport { AuthErrorTypes, CognitoHostedUIIdentityProvider } from './types/Auth';\nvar logger = new Logger('AuthClass');\nvar USER_ADMIN_SCOPE = 'aws.cognito.signin.user.admin';\n// 10 sec, following this guide https://www.nngroup.com/articles/response-times-3-important-limits/\nvar OAUTH_FLOW_MS_TIMEOUT = 10 * 1000;\nvar AMPLIFY_SYMBOL = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function' ? Symbol.for('amplify_default') : '@@amplify_default';\nvar dispatchAuthEvent = function (event, data, message) {\n  Hub.dispatch('auth', {\n    event: event,\n    data: data,\n    message: message\n  }, 'Auth', AMPLIFY_SYMBOL);\n};\n// Cognito Documentation for max device\n// tslint:disable-next-line:max-line-length\n// https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ListDevices.html#API_ListDevices_RequestSyntax\nvar MAX_DEVICES = 60;\nvar MAX_AUTOSIGNIN_POLLING_MS = 3 * 60 * 1000;\n/**\n * Provide authentication steps\n */\nvar AuthClass = /** @class */function () {\n  /**\n   * Initialize Auth with AWS configurations\n   * @param {Object} config - Configuration of the Auth\n   */\n  function AuthClass(config) {\n    var _this = this;\n    this.userPool = null;\n    this.user = null;\n    this.oAuthFlowInProgress = false;\n    this.autoSignInInitiated = false;\n    this.inflightSessionPromise = null;\n    this.inflightSessionPromiseCounter = 0;\n    this.Credentials = Credentials;\n    this.wrapRefreshSessionCallback = function (callback) {\n      var wrapped = function (error, data) {\n        if (data) {\n          dispatchAuthEvent('tokenRefresh', undefined, \"New token retrieved\");\n        } else {\n          dispatchAuthEvent('tokenRefresh_failure', error, \"Failed to retrieve new token\");\n        }\n        return callback(error, data);\n      };\n      return wrapped;\n    }; // prettier-ignore\n    this.configure(config);\n    this.currentCredentials = this.currentCredentials.bind(this);\n    this.currentUserCredentials = this.currentUserCredentials.bind(this);\n    Hub.listen('auth', function (_a) {\n      var payload = _a.payload;\n      var event = payload.event;\n      switch (event) {\n        case 'verify':\n        case 'signIn':\n          _this._storage.setItem('amplify-signin-with-hostedUI', 'false');\n          break;\n        case 'signOut':\n          _this._storage.removeItem('amplify-signin-with-hostedUI');\n          break;\n        case 'cognitoHostedUI':\n          _this._storage.setItem('amplify-signin-with-hostedUI', 'true');\n          break;\n      }\n    });\n  }\n  AuthClass.prototype.getModuleName = function () {\n    return 'Auth';\n  };\n  AuthClass.prototype.configure = function (config) {\n    var _this = this;\n    if (!config) return this._config || {};\n    logger.debug('configure Auth');\n    var conf = Object.assign({}, this._config, parseAWSExports(config).Auth, config);\n    this._config = conf;\n    var _a = this._config,\n      userPoolId = _a.userPoolId,\n      userPoolWebClientId = _a.userPoolWebClientId,\n      cookieStorage = _a.cookieStorage,\n      oauth = _a.oauth,\n      region = _a.region,\n      identityPoolId = _a.identityPoolId,\n      mandatorySignIn = _a.mandatorySignIn,\n      refreshHandlers = _a.refreshHandlers,\n      identityPoolRegion = _a.identityPoolRegion,\n      clientMetadata = _a.clientMetadata,\n      endpoint = _a.endpoint;\n    if (!this._config.storage) {\n      // backward compatability\n      if (cookieStorage) this._storage = new CookieStorage(cookieStorage);else {\n        this._storage = config.ssr ? new UniversalStorage() : new StorageHelper().getStorage();\n      }\n    } else {\n      if (!this._isValidAuthStorage(this._config.storage)) {\n        logger.error('The storage in the Auth config is not valid!');\n        throw new Error('Empty storage object');\n      }\n      this._storage = this._config.storage;\n    }\n    this._storageSync = Promise.resolve();\n    if (typeof this._storage['sync'] === 'function') {\n      this._storageSync = this._storage['sync']();\n    }\n    if (userPoolId) {\n      var userPoolData = {\n        UserPoolId: userPoolId,\n        ClientId: userPoolWebClientId,\n        endpoint: endpoint\n      };\n      userPoolData.Storage = this._storage;\n      this.userPool = new CognitoUserPool(userPoolData, this.wrapRefreshSessionCallback);\n    }\n    this.Credentials.configure({\n      mandatorySignIn: mandatorySignIn,\n      region: region,\n      userPoolId: userPoolId,\n      identityPoolId: identityPoolId,\n      refreshHandlers: refreshHandlers,\n      storage: this._storage,\n      identityPoolRegion: identityPoolRegion\n    });\n    // initialize cognitoauth client if hosted ui options provided\n    // to keep backward compatibility:\n    var cognitoHostedUIConfig = oauth ? isCognitoHostedOpts(this._config.oauth) ? oauth : oauth.awsCognito : undefined;\n    if (cognitoHostedUIConfig) {\n      var cognitoAuthParams = Object.assign({\n        cognitoClientId: userPoolWebClientId,\n        UserPoolId: userPoolId,\n        domain: cognitoHostedUIConfig['domain'],\n        scopes: cognitoHostedUIConfig['scope'],\n        redirectSignIn: cognitoHostedUIConfig['redirectSignIn'],\n        redirectSignOut: cognitoHostedUIConfig['redirectSignOut'],\n        responseType: cognitoHostedUIConfig['responseType'],\n        Storage: this._storage,\n        urlOpener: cognitoHostedUIConfig['urlOpener'],\n        clientMetadata: clientMetadata\n      }, cognitoHostedUIConfig['options']);\n      this._oAuthHandler = new OAuth({\n        scopes: cognitoAuthParams.scopes,\n        config: cognitoAuthParams,\n        cognitoClientId: cognitoAuthParams.cognitoClientId\n      });\n      // **NOTE** - Remove this in a future major release as it is a breaking change\n      // Prevents _handleAuthResponse from being called multiple times in Expo\n      // See https://github.com/aws-amplify/amplify-js/issues/4388\n      var usedResponseUrls_1 = {};\n      urlListener(function (_a) {\n        var url = _a.url;\n        if (usedResponseUrls_1[url]) {\n          return;\n        }\n        usedResponseUrls_1[url] = true;\n        _this._handleAuthResponse(url);\n      });\n    }\n    dispatchAuthEvent('configured', null, \"The Auth category has been configured successfully\");\n    if (!this.autoSignInInitiated && typeof this._storage['getItem'] === 'function') {\n      var pollingInitiated = this.isTrueStorageValue('amplify-polling-started');\n      if (pollingInitiated) {\n        dispatchAuthEvent('autoSignIn_failure', null, AuthErrorTypes.AutoSignInError);\n        this._storage.removeItem('amplify-auto-sign-in');\n      }\n      this._storage.removeItem('amplify-polling-started');\n    }\n    return this._config;\n  };\n  /**\n   * Sign up with username, password and other attributes like phone, email\n   * @param {String | object} params - The user attributes used for signin\n   * @param {String[]} restOfAttrs - for the backward compatability\n   * @return - A promise resolves callback data if success\n   */\n  AuthClass.prototype.signUp = function (params) {\n    var _this = this;\n    var restOfAttrs = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      restOfAttrs[_i - 1] = arguments[_i];\n    }\n    var _a, _b, _c;\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n    var username = null;\n    var password = null;\n    var attributes = [];\n    var validationData = null;\n    var clientMetadata;\n    var autoSignIn = {\n      enabled: false\n    };\n    var autoSignInValidationData = {};\n    var autoSignInClientMetaData = {};\n    if (params && typeof params === 'string') {\n      username = params;\n      password = restOfAttrs ? restOfAttrs[0] : null;\n      var email = restOfAttrs ? restOfAttrs[1] : null;\n      var phone_number = restOfAttrs ? restOfAttrs[2] : null;\n      if (email) attributes.push(new CognitoUserAttribute({\n        Name: 'email',\n        Value: email\n      }));\n      if (phone_number) attributes.push(new CognitoUserAttribute({\n        Name: 'phone_number',\n        Value: phone_number\n      }));\n    } else if (params && typeof params === 'object') {\n      username = params['username'];\n      password = params['password'];\n      if (params && params.clientMetadata) {\n        clientMetadata = params.clientMetadata;\n      } else if (this._config.clientMetadata) {\n        clientMetadata = this._config.clientMetadata;\n      }\n      var attrs_1 = params['attributes'];\n      if (attrs_1) {\n        Object.keys(attrs_1).map(function (key) {\n          attributes.push(new CognitoUserAttribute({\n            Name: key,\n            Value: attrs_1[key]\n          }));\n        });\n      }\n      var validationDataObject_1 = params['validationData'];\n      if (validationDataObject_1) {\n        validationData = [];\n        Object.keys(validationDataObject_1).map(function (key) {\n          validationData.push(new CognitoUserAttribute({\n            Name: key,\n            Value: validationDataObject_1[key]\n          }));\n        });\n      }\n      autoSignIn = (_a = params.autoSignIn) !== null && _a !== void 0 ? _a : {\n        enabled: false\n      };\n      if (autoSignIn.enabled) {\n        this._storage.setItem('amplify-auto-sign-in', 'true');\n        autoSignInValidationData = (_b = autoSignIn.validationData) !== null && _b !== void 0 ? _b : {};\n        autoSignInClientMetaData = (_c = autoSignIn.clientMetaData) !== null && _c !== void 0 ? _c : {};\n      }\n    } else {\n      return this.rejectAuthError(AuthErrorTypes.SignUpError);\n    }\n    if (!username) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n    }\n    if (!password) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyPassword);\n    }\n    logger.debug('signUp attrs:', attributes);\n    logger.debug('signUp validation data:', validationData);\n    return new Promise(function (resolve, reject) {\n      _this.userPool.signUp(username, password, attributes, validationData, function (err, data) {\n        if (err) {\n          dispatchAuthEvent('signUp_failure', err, username + \" failed to signup\");\n          reject(err);\n        } else {\n          dispatchAuthEvent('signUp', data, username + \" has signed up successfully\");\n          if (autoSignIn.enabled) {\n            _this.handleAutoSignIn(username, password, autoSignInValidationData, autoSignInClientMetaData, data);\n          }\n          resolve(data);\n        }\n      }, clientMetadata);\n    });\n  };\n  AuthClass.prototype.handleAutoSignIn = function (username, password, validationData, clientMetadata, data) {\n    this.autoSignInInitiated = true;\n    var authDetails = new AuthenticationDetails({\n      Username: username,\n      Password: password,\n      ValidationData: validationData,\n      ClientMetadata: clientMetadata\n    });\n    if (data.userConfirmed) {\n      this.signInAfterUserConfirmed(authDetails);\n    } else if (this._config.signUpVerificationMethod === 'link') {\n      this.handleLinkAutoSignIn(authDetails);\n    } else {\n      this.handleCodeAutoSignIn(authDetails);\n    }\n  };\n  AuthClass.prototype.handleCodeAutoSignIn = function (authDetails) {\n    var _this = this;\n    var listenEvent = function (_a) {\n      var payload = _a.payload;\n      if (payload.event === 'confirmSignUp') {\n        _this.signInAfterUserConfirmed(authDetails, listenEvent);\n      }\n    };\n    Hub.listen('auth', listenEvent);\n  };\n  AuthClass.prototype.handleLinkAutoSignIn = function (authDetails) {\n    var _this = this;\n    this._storage.setItem('amplify-polling-started', 'true');\n    var start = Date.now();\n    var autoSignInPollingIntervalId = setInterval(function () {\n      if (Date.now() - start > MAX_AUTOSIGNIN_POLLING_MS) {\n        clearInterval(autoSignInPollingIntervalId);\n        dispatchAuthEvent('autoSignIn_failure', null, 'Please confirm your account and use your credentials to sign in.');\n        _this._storage.removeItem('amplify-auto-sign-in');\n      } else {\n        _this.signInAfterUserConfirmed(authDetails, null, autoSignInPollingIntervalId);\n      }\n    }, 5000);\n  };\n  AuthClass.prototype.signInAfterUserConfirmed = function (authDetails, listenEvent, autoSignInPollingIntervalId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var user, error_1;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            user = this.createCognitoUser(authDetails.getUsername());\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, user.authenticateUser(authDetails, this.authCallbacks(user, function (value) {\n              dispatchAuthEvent('autoSignIn', value, authDetails.getUsername() + \" has signed in successfully\");\n              if (listenEvent) {\n                Hub.remove('auth', listenEvent);\n              }\n              if (autoSignInPollingIntervalId) {\n                clearInterval(autoSignInPollingIntervalId);\n                _this._storage.removeItem('amplify-polling-started');\n              }\n              _this._storage.removeItem('amplify-auto-sign-in');\n            }, function (error) {\n              logger.error(error);\n              _this._storage.removeItem('amplify-auto-sign-in');\n            }))];\n          case 2:\n            _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            error_1 = _a.sent();\n            logger.error(error_1);\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Send the verification code to confirm sign up\n   * @param {String} username - The username to be confirmed\n   * @param {String} code - The verification code\n   * @param {ConfirmSignUpOptions} options - other options for confirm signup\n   * @return - A promise resolves callback data if success\n   */\n  AuthClass.prototype.confirmSignUp = function (username, code, options) {\n    var _this = this;\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n    if (!username) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n    }\n    if (!code) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyCode);\n    }\n    var user = this.createCognitoUser(username);\n    var forceAliasCreation = options && typeof options.forceAliasCreation === 'boolean' ? options.forceAliasCreation : true;\n    var clientMetadata;\n    if (options && options.clientMetadata) {\n      clientMetadata = options.clientMetadata;\n    } else if (this._config.clientMetadata) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    return new Promise(function (resolve, reject) {\n      user.confirmRegistration(code, forceAliasCreation, function (err, data) {\n        if (err) {\n          reject(err);\n        } else {\n          dispatchAuthEvent('confirmSignUp', data, username + \" has been confirmed successfully\");\n          var autoSignIn = _this.isTrueStorageValue('amplify-auto-sign-in');\n          if (autoSignIn && !_this.autoSignInInitiated) {\n            dispatchAuthEvent('autoSignIn_failure', null, AuthErrorTypes.AutoSignInError);\n            _this._storage.removeItem('amplify-auto-sign-in');\n          }\n          resolve(data);\n        }\n      }, clientMetadata);\n    });\n  };\n  AuthClass.prototype.isTrueStorageValue = function (value) {\n    var item = this._storage.getItem(value);\n    return item ? item === 'true' : false;\n  };\n  /**\n   * Resend the verification code\n   * @param {String} username - The username to be confirmed\n   * @param {ClientMetadata} clientMetadata - Metadata to be passed to Cognito Lambda triggers\n   * @return - A promise resolves code delivery details if successful\n   */\n  AuthClass.prototype.resendSignUp = function (username, clientMetadata) {\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n    if (!username) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n    }\n    var user = this.createCognitoUser(username);\n    return new Promise(function (resolve, reject) {\n      user.resendConfirmationCode(function (err, data) {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(data);\n        }\n      }, clientMetadata);\n    });\n  };\n  /**\n   * Sign in\n   * @param {String | SignInOpts} usernameOrSignInOpts - The username to be signed in or the sign in options\n   * @param {String} pw - The password of the username\n   * @param {ClientMetaData} clientMetadata - Client metadata for custom workflows\n   * @return - A promise resolves the CognitoUser\n   */\n  AuthClass.prototype.signIn = function (usernameOrSignInOpts, pw, clientMetadata) {\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n    var username = null;\n    var password = null;\n    var validationData = {};\n    // for backward compatibility\n    if (typeof usernameOrSignInOpts === 'string') {\n      username = usernameOrSignInOpts;\n      password = pw;\n    } else if (isUsernamePasswordOpts(usernameOrSignInOpts)) {\n      if (typeof pw !== 'undefined') {\n        logger.warn('The password should be defined under the first parameter object!');\n      }\n      username = usernameOrSignInOpts.username;\n      password = usernameOrSignInOpts.password;\n      validationData = usernameOrSignInOpts.validationData;\n    } else {\n      return this.rejectAuthError(AuthErrorTypes.InvalidUsername);\n    }\n    if (!username) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n    }\n    var authDetails = new AuthenticationDetails({\n      Username: username,\n      Password: password,\n      ValidationData: validationData,\n      ClientMetadata: clientMetadata\n    });\n    if (password) {\n      return this.signInWithPassword(authDetails);\n    } else {\n      return this.signInWithoutPassword(authDetails);\n    }\n  };\n  /**\n   * Return an object with the authentication callbacks\n   * @param {CognitoUser} user - the cognito user object\n   * @param {} resolve - function called when resolving the current step\n   * @param {} reject - function called when rejecting the current step\n   * @return - an object with the callback methods for user authentication\n   */\n  AuthClass.prototype.authCallbacks = function (user, resolve, reject) {\n    var _this = this;\n    var that = this;\n    return {\n      onSuccess: function (session) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var cred, e_1, currentUser, e_2;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                logger.debug(session);\n                delete user['challengeName'];\n                delete user['challengeParam'];\n                _a.label = 1;\n              case 1:\n                _a.trys.push([1, 4, 5, 9]);\n                return [4 /*yield*/, this.Credentials.clear()];\n              case 2:\n                _a.sent();\n                return [4 /*yield*/, this.Credentials.set(session, 'session')];\n              case 3:\n                cred = _a.sent();\n                logger.debug('succeed to get cognito credentials', cred);\n                return [3 /*break*/, 9];\n              case 4:\n                e_1 = _a.sent();\n                logger.debug('cannot get cognito credentials', e_1);\n                return [3 /*break*/, 9];\n              case 5:\n                _a.trys.push([5, 7,, 8]);\n                return [4 /*yield*/, this.currentUserPoolUser()];\n              case 6:\n                currentUser = _a.sent();\n                that.user = currentUser;\n                dispatchAuthEvent('signIn', currentUser, \"A user \" + user.getUsername() + \" has been signed in\");\n                resolve(currentUser);\n                return [3 /*break*/, 8];\n              case 7:\n                e_2 = _a.sent();\n                logger.error('Failed to get the signed in user', e_2);\n                reject(e_2);\n                return [3 /*break*/, 8];\n              case 8:\n                return [7 /*endfinally*/];\n              case 9:\n                return [2 /*return*/];\n            }\n          });\n        });\n      },\n\n      onFailure: function (err) {\n        logger.debug('signIn failure', err);\n        dispatchAuthEvent('signIn_failure', err, user.getUsername() + \" failed to signin\");\n        reject(err);\n      },\n      customChallenge: function (challengeParam) {\n        logger.debug('signIn custom challenge answer required');\n        user['challengeName'] = 'CUSTOM_CHALLENGE';\n        user['challengeParam'] = challengeParam;\n        resolve(user);\n      },\n      mfaRequired: function (challengeName, challengeParam) {\n        logger.debug('signIn MFA required');\n        user['challengeName'] = challengeName;\n        user['challengeParam'] = challengeParam;\n        resolve(user);\n      },\n      mfaSetup: function (challengeName, challengeParam) {\n        logger.debug('signIn mfa setup', challengeName);\n        user['challengeName'] = challengeName;\n        user['challengeParam'] = challengeParam;\n        resolve(user);\n      },\n      newPasswordRequired: function (userAttributes, requiredAttributes) {\n        logger.debug('signIn new password');\n        user['challengeName'] = 'NEW_PASSWORD_REQUIRED';\n        user['challengeParam'] = {\n          userAttributes: userAttributes,\n          requiredAttributes: requiredAttributes\n        };\n        resolve(user);\n      },\n      totpRequired: function (challengeName, challengeParam) {\n        logger.debug('signIn totpRequired');\n        user['challengeName'] = challengeName;\n        user['challengeParam'] = challengeParam;\n        resolve(user);\n      },\n      selectMFAType: function (challengeName, challengeParam) {\n        logger.debug('signIn selectMFAType', challengeName);\n        user['challengeName'] = challengeName;\n        user['challengeParam'] = challengeParam;\n        resolve(user);\n      }\n    };\n  };\n  /**\n   * Sign in with a password\n   * @private\n   * @param {AuthenticationDetails} authDetails - the user sign in data\n   * @return - A promise resolves the CognitoUser object if success or mfa required\n   */\n  AuthClass.prototype.signInWithPassword = function (authDetails) {\n    var _this = this;\n    if (this.pendingSignIn) {\n      throw new Error('Pending sign-in attempt already in progress');\n    }\n    var user = this.createCognitoUser(authDetails.getUsername());\n    this.pendingSignIn = new Promise(function (resolve, reject) {\n      user.authenticateUser(authDetails, _this.authCallbacks(user, function (value) {\n        _this.pendingSignIn = null;\n        resolve(value);\n      }, function (error) {\n        _this.pendingSignIn = null;\n        reject(error);\n      }));\n    });\n    return this.pendingSignIn;\n  };\n  /**\n   * Sign in without a password\n   * @private\n   * @param {AuthenticationDetails} authDetails - the user sign in data\n   * @return - A promise resolves the CognitoUser object if success or mfa required\n   */\n  AuthClass.prototype.signInWithoutPassword = function (authDetails) {\n    var _this = this;\n    var user = this.createCognitoUser(authDetails.getUsername());\n    user.setAuthenticationFlowType('CUSTOM_AUTH');\n    return new Promise(function (resolve, reject) {\n      user.initiateAuth(authDetails, _this.authCallbacks(user, resolve, reject));\n    });\n  };\n  /**\n   * This was previously used by an authenticated user to get MFAOptions,\n   * but no longer returns a meaningful response. Refer to the documentation for\n   * how to setup and use MFA: https://docs.amplify.aws/lib/auth/mfa/q/platform/js\n   * @deprecated\n   * @param {CognitoUser} user - the current user\n   * @return - A promise resolves the current preferred mfa option if success\n   */\n  AuthClass.prototype.getMFAOptions = function (user) {\n    return new Promise(function (res, rej) {\n      user.getMFAOptions(function (err, mfaOptions) {\n        if (err) {\n          logger.debug('get MFA Options failed', err);\n          rej(err);\n          return;\n        }\n        logger.debug('get MFA options success', mfaOptions);\n        res(mfaOptions);\n        return;\n      });\n    });\n  };\n  /**\n   * get preferred mfa method\n   * @param {CognitoUser} user - the current cognito user\n   * @param {GetPreferredMFAOpts} params - options for getting the current user preferred MFA\n   */\n  AuthClass.prototype.getPreferredMFA = function (user, params) {\n    var _this = this;\n    var that = this;\n    return new Promise(function (res, rej) {\n      var clientMetadata = _this._config.clientMetadata; // TODO: verify behavior if this is override during signIn\n      var bypassCache = params ? params.bypassCache : false;\n      user.getUserData(function (err, data) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var cleanUpError_1, mfaType;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                if (!err) return [3 /*break*/, 5];\n                logger.debug('getting preferred mfa failed', err);\n                if (!this.isSessionInvalid(err)) return [3 /*break*/, 4];\n                _a.label = 1;\n              case 1:\n                _a.trys.push([1, 3,, 4]);\n                return [4 /*yield*/, this.cleanUpInvalidSession(user)];\n              case 2:\n                _a.sent();\n                return [3 /*break*/, 4];\n              case 3:\n                cleanUpError_1 = _a.sent();\n                rej(new Error(\"Session is invalid due to: \" + err.message + \" and failed to clean up invalid session: \" + cleanUpError_1.message));\n                return [2 /*return*/];\n              case 4:\n                rej(err);\n                return [2 /*return*/];\n              case 5:\n                mfaType = that._getMfaTypeFromUserData(data);\n                if (!mfaType) {\n                  rej('invalid MFA Type');\n                  return [2 /*return*/];\n                } else {\n                  res(mfaType);\n                  return [2 /*return*/];\n                }\n\n                return [2 /*return*/];\n            }\n          });\n        });\n      }, {\n        bypassCache: bypassCache,\n        clientMetadata: clientMetadata\n      });\n    });\n  };\n  AuthClass.prototype._getMfaTypeFromUserData = function (data) {\n    var ret = null;\n    var preferredMFA = data.PreferredMfaSetting;\n    // if the user has used Auth.setPreferredMFA() to setup the mfa type\n    // then the \"PreferredMfaSetting\" would exist in the response\n    if (preferredMFA) {\n      ret = preferredMFA;\n    } else {\n      // if mfaList exists but empty, then its noMFA\n      var mfaList = data.UserMFASettingList;\n      if (!mfaList) {\n        // if SMS was enabled by using Auth.enableSMS(),\n        // the response would contain MFAOptions\n        // as for now Cognito only supports for SMS, so we will say it is 'SMS_MFA'\n        // if it does not exist, then it should be NOMFA\n        var MFAOptions = data.MFAOptions;\n        if (MFAOptions) {\n          ret = 'SMS_MFA';\n        } else {\n          ret = 'NOMFA';\n        }\n      } else if (mfaList.length === 0) {\n        ret = 'NOMFA';\n      } else {\n        logger.debug('invalid case for getPreferredMFA', data);\n      }\n    }\n    return ret;\n  };\n  AuthClass.prototype._getUserData = function (user, params) {\n    var _this = this;\n    return new Promise(function (res, rej) {\n      user.getUserData(function (err, data) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var cleanUpError_2;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                if (!err) return [3 /*break*/, 5];\n                logger.debug('getting user data failed', err);\n                if (!this.isSessionInvalid(err)) return [3 /*break*/, 4];\n                _a.label = 1;\n              case 1:\n                _a.trys.push([1, 3,, 4]);\n                return [4 /*yield*/, this.cleanUpInvalidSession(user)];\n              case 2:\n                _a.sent();\n                return [3 /*break*/, 4];\n              case 3:\n                cleanUpError_2 = _a.sent();\n                rej(new Error(\"Session is invalid due to: \" + err.message + \" and failed to clean up invalid session: \" + cleanUpError_2.message));\n                return [2 /*return*/];\n              case 4:\n                rej(err);\n                return [2 /*return*/];\n              case 5:\n                res(data);\n                _a.label = 6;\n              case 6:\n                return [2 /*return*/];\n            }\n          });\n        });\n      }, params);\n    });\n  };\n  /**\n   * set preferred MFA method\n   * @param {CognitoUser} user - the current Cognito user\n   * @param {string} mfaMethod - preferred mfa method\n   * @return - A promise resolve if success\n   */\n  AuthClass.prototype.setPreferredMFA = function (user, mfaMethod) {\n    return __awaiter(this, void 0, void 0, function () {\n      var clientMetadata, userData, smsMfaSettings, totpMfaSettings, _a, mfaList, currentMFAType, that;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            clientMetadata = this._config.clientMetadata;\n            return [4 /*yield*/, this._getUserData(user, {\n              bypassCache: true,\n              clientMetadata: clientMetadata\n            })];\n          case 1:\n            userData = _b.sent();\n            smsMfaSettings = null;\n            totpMfaSettings = null;\n            _a = mfaMethod;\n            switch (_a) {\n              case 'TOTP':\n                return [3 /*break*/, 2];\n              case 'SOFTWARE_TOKEN_MFA':\n                return [3 /*break*/, 2];\n              case 'SMS':\n                return [3 /*break*/, 3];\n              case 'SMS_MFA':\n                return [3 /*break*/, 3];\n              case 'NOMFA':\n                return [3 /*break*/, 4];\n            }\n            return [3 /*break*/, 6];\n          case 2:\n            totpMfaSettings = {\n              PreferredMfa: true,\n              Enabled: true\n            };\n            return [3 /*break*/, 7];\n          case 3:\n            smsMfaSettings = {\n              PreferredMfa: true,\n              Enabled: true\n            };\n            return [3 /*break*/, 7];\n          case 4:\n            mfaList = userData['UserMFASettingList'];\n            return [4 /*yield*/, this._getMfaTypeFromUserData(userData)];\n          case 5:\n            currentMFAType = _b.sent();\n            if (currentMFAType === 'NOMFA') {\n              return [2 /*return*/, Promise.resolve('No change for mfa type')];\n            } else if (currentMFAType === 'SMS_MFA') {\n              smsMfaSettings = {\n                PreferredMfa: false,\n                Enabled: false\n              };\n            } else if (currentMFAType === 'SOFTWARE_TOKEN_MFA') {\n              totpMfaSettings = {\n                PreferredMfa: false,\n                Enabled: false\n              };\n            } else {\n              return [2 /*return*/, this.rejectAuthError(AuthErrorTypes.InvalidMFA)];\n            }\n            // if there is a UserMFASettingList in the response\n            // we need to disable every mfa type in that list\n            if (mfaList && mfaList.length !== 0) {\n              // to disable SMS or TOTP if exists in that list\n              mfaList.forEach(function (mfaType) {\n                if (mfaType === 'SMS_MFA') {\n                  smsMfaSettings = {\n                    PreferredMfa: false,\n                    Enabled: false\n                  };\n                } else if (mfaType === 'SOFTWARE_TOKEN_MFA') {\n                  totpMfaSettings = {\n                    PreferredMfa: false,\n                    Enabled: false\n                  };\n                }\n              });\n            }\n            return [3 /*break*/, 7];\n          case 6:\n            logger.debug('no validmfa method provided');\n            return [2 /*return*/, this.rejectAuthError(AuthErrorTypes.NoMFA)];\n          case 7:\n            that = this;\n            return [2 /*return*/, new Promise(function (res, rej) {\n              user.setUserMfaPreference(smsMfaSettings, totpMfaSettings, function (err, result) {\n                if (err) {\n                  logger.debug('Set user mfa preference error', err);\n                  return rej(err);\n                }\n                logger.debug('Set user mfa success', result);\n                logger.debug('Caching the latest user data into local');\n                // cache the latest result into user data\n                user.getUserData(function (err, data) {\n                  return __awaiter(_this, void 0, void 0, function () {\n                    var cleanUpError_3;\n                    return __generator(this, function (_a) {\n                      switch (_a.label) {\n                        case 0:\n                          if (!err) return [3 /*break*/, 5];\n                          logger.debug('getting user data failed', err);\n                          if (!this.isSessionInvalid(err)) return [3 /*break*/, 4];\n                          _a.label = 1;\n                        case 1:\n                          _a.trys.push([1, 3,, 4]);\n                          return [4 /*yield*/, this.cleanUpInvalidSession(user)];\n                        case 2:\n                          _a.sent();\n                          return [3 /*break*/, 4];\n                        case 3:\n                          cleanUpError_3 = _a.sent();\n                          rej(new Error(\"Session is invalid due to: \" + err.message + \" and failed to clean up invalid session: \" + cleanUpError_3.message));\n                          return [2 /*return*/];\n                        case 4:\n                          return [2 /*return*/, rej(err)];\n                        case 5:\n                          return [2 /*return*/, res(result)];\n                      }\n                    });\n                  });\n                }, {\n                  bypassCache: true,\n                  clientMetadata: clientMetadata\n                });\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * disable SMS\n   * @deprecated\n   * @param {CognitoUser} user - the current user\n   * @return - A promise resolves is success\n   */\n  AuthClass.prototype.disableSMS = function (user) {\n    return new Promise(function (res, rej) {\n      user.disableMFA(function (err, data) {\n        if (err) {\n          logger.debug('disable mfa failed', err);\n          rej(err);\n          return;\n        }\n        logger.debug('disable mfa succeed', data);\n        res(data);\n        return;\n      });\n    });\n  };\n  /**\n   * enable SMS\n   * @deprecated\n   * @param {CognitoUser} user - the current user\n   * @return - A promise resolves is success\n   */\n  AuthClass.prototype.enableSMS = function (user) {\n    return new Promise(function (res, rej) {\n      user.enableMFA(function (err, data) {\n        if (err) {\n          logger.debug('enable mfa failed', err);\n          rej(err);\n          return;\n        }\n        logger.debug('enable mfa succeed', data);\n        res(data);\n        return;\n      });\n    });\n  };\n  /**\n   * Setup TOTP\n   * @param {CognitoUser} user - the current user\n   * @return - A promise resolves with the secret code if success\n   */\n  AuthClass.prototype.setupTOTP = function (user) {\n    return new Promise(function (res, rej) {\n      user.associateSoftwareToken({\n        onFailure: function (err) {\n          logger.debug('associateSoftwareToken failed', err);\n          rej(err);\n          return;\n        },\n        associateSecretCode: function (secretCode) {\n          logger.debug('associateSoftwareToken sucess', secretCode);\n          res(secretCode);\n          return;\n        }\n      });\n    });\n  };\n  /**\n   * verify TOTP setup\n   * @param {CognitoUser} user - the current user\n   * @param {string} challengeAnswer - challenge answer\n   * @return - A promise resolves is success\n   */\n  AuthClass.prototype.verifyTotpToken = function (user, challengeAnswer) {\n    logger.debug('verification totp token', user, challengeAnswer);\n    return new Promise(function (res, rej) {\n      user.verifySoftwareToken(challengeAnswer, 'My TOTP device', {\n        onFailure: function (err) {\n          logger.debug('verifyTotpToken failed', err);\n          rej(err);\n          return;\n        },\n        onSuccess: function (data) {\n          dispatchAuthEvent('signIn', user, \"A user \" + user.getUsername() + \" has been signed in\");\n          dispatchAuthEvent('verify', user, \"A user \" + user.getUsername() + \" has been verified\");\n          logger.debug('verifyTotpToken success', data);\n          res(data);\n          return;\n        }\n      });\n    });\n  };\n  /**\n   * Send MFA code to confirm sign in\n   * @param {Object} user - The CognitoUser object\n   * @param {String} code - The confirmation code\n   */\n  AuthClass.prototype.confirmSignIn = function (user, code, mfaType, clientMetadata) {\n    var _this = this;\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    if (!code) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyCode);\n    }\n    var that = this;\n    return new Promise(function (resolve, reject) {\n      user.sendMFACode(code, {\n        onSuccess: function (session) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var cred, e_3;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  logger.debug(session);\n                  _a.label = 1;\n                case 1:\n                  _a.trys.push([1, 4, 5, 6]);\n                  return [4 /*yield*/, this.Credentials.clear()];\n                case 2:\n                  _a.sent();\n                  return [4 /*yield*/, this.Credentials.set(session, 'session')];\n                case 3:\n                  cred = _a.sent();\n                  logger.debug('succeed to get cognito credentials', cred);\n                  return [3 /*break*/, 6];\n                case 4:\n                  e_3 = _a.sent();\n                  logger.debug('cannot get cognito credentials', e_3);\n                  return [3 /*break*/, 6];\n                case 5:\n                  that.user = user;\n                  dispatchAuthEvent('signIn', user, \"A user \" + user.getUsername() + \" has been signed in\");\n                  resolve(user);\n                  return [7 /*endfinally*/];\n                case 6:\n                  return [2 /*return*/];\n              }\n            });\n          });\n        },\n\n        onFailure: function (err) {\n          logger.debug('confirm signIn failure', err);\n          reject(err);\n        }\n      }, mfaType, clientMetadata);\n    });\n  };\n  AuthClass.prototype.completeNewPassword = function (user, password, requiredAttributes, clientMetadata) {\n    var _this = this;\n    if (requiredAttributes === void 0) {\n      requiredAttributes = {};\n    }\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    if (!password) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyPassword);\n    }\n    var that = this;\n    return new Promise(function (resolve, reject) {\n      user.completeNewPasswordChallenge(password, requiredAttributes, {\n        onSuccess: function (session) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var cred, e_4;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  logger.debug(session);\n                  _a.label = 1;\n                case 1:\n                  _a.trys.push([1, 4, 5, 6]);\n                  return [4 /*yield*/, this.Credentials.clear()];\n                case 2:\n                  _a.sent();\n                  return [4 /*yield*/, this.Credentials.set(session, 'session')];\n                case 3:\n                  cred = _a.sent();\n                  logger.debug('succeed to get cognito credentials', cred);\n                  return [3 /*break*/, 6];\n                case 4:\n                  e_4 = _a.sent();\n                  logger.debug('cannot get cognito credentials', e_4);\n                  return [3 /*break*/, 6];\n                case 5:\n                  that.user = user;\n                  dispatchAuthEvent('signIn', user, \"A user \" + user.getUsername() + \" has been signed in\");\n                  resolve(user);\n                  return [7 /*endfinally*/];\n                case 6:\n                  return [2 /*return*/];\n              }\n            });\n          });\n        },\n\n        onFailure: function (err) {\n          logger.debug('completeNewPassword failure', err);\n          dispatchAuthEvent('completeNewPassword_failure', err, _this.user + \" failed to complete the new password flow\");\n          reject(err);\n        },\n        mfaRequired: function (challengeName, challengeParam) {\n          logger.debug('signIn MFA required');\n          user['challengeName'] = challengeName;\n          user['challengeParam'] = challengeParam;\n          resolve(user);\n        },\n        mfaSetup: function (challengeName, challengeParam) {\n          logger.debug('signIn mfa setup', challengeName);\n          user['challengeName'] = challengeName;\n          user['challengeParam'] = challengeParam;\n          resolve(user);\n        },\n        totpRequired: function (challengeName, challengeParam) {\n          logger.debug('signIn mfa setup', challengeName);\n          user['challengeName'] = challengeName;\n          user['challengeParam'] = challengeParam;\n          resolve(user);\n        }\n      }, clientMetadata);\n    });\n  };\n  /**\n   * Send the answer to a custom challenge\n   * @param {CognitoUser} user - The CognitoUser object\n   * @param {String} challengeResponses - The confirmation code\n   */\n  AuthClass.prototype.sendCustomChallengeAnswer = function (user, challengeResponses, clientMetadata) {\n    var _this = this;\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n    if (!challengeResponses) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyChallengeResponse);\n    }\n    var that = this;\n    return new Promise(function (resolve, reject) {\n      user.sendCustomChallengeAnswer(challengeResponses, _this.authCallbacks(user, resolve, reject), clientMetadata);\n    });\n  };\n  /**\n   * Delete an authenticated users' attributes\n   * @param {CognitoUser} - The currently logged in user object\n   * @return {Promise}\n   **/\n  AuthClass.prototype.deleteUserAttributes = function (user, attributeNames) {\n    var that = this;\n    return new Promise(function (resolve, reject) {\n      that.userSession(user).then(function (session) {\n        user.deleteAttributes(attributeNames, function (err, result) {\n          if (err) {\n            return reject(err);\n          } else {\n            return resolve(result);\n          }\n        });\n      });\n    });\n  };\n  /**\n   * Delete the current authenticated user\n   * @return {Promise}\n   **/\n  // TODO: Check return type void\n  AuthClass.prototype.deleteUser = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_5, isSignedInHostedUI;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, this._storageSync];\n          case 1:\n            _a.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            e_5 = _a.sent();\n            logger.debug('Failed to sync cache info into memory', e_5);\n            throw new Error(e_5);\n          case 3:\n            isSignedInHostedUI = this._oAuthHandler && this._storage.getItem('amplify-signin-with-hostedUI') === 'true';\n            return [2 /*return*/, new Promise(function (res, rej) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var user_1;\n                var _this = this;\n                return __generator(this, function (_a) {\n                  if (this.userPool) {\n                    user_1 = this.userPool.getCurrentUser();\n                    if (!user_1) {\n                      logger.debug('Failed to get user from user pool');\n                      return [2 /*return*/, rej(new Error('No current user.'))];\n                    } else {\n                      user_1.getSession(function (err, session) {\n                        return __awaiter(_this, void 0, void 0, function () {\n                          var cleanUpError_4;\n                          var _this = this;\n                          return __generator(this, function (_a) {\n                            switch (_a.label) {\n                              case 0:\n                                if (!err) return [3 /*break*/, 5];\n                                logger.debug('Failed to get the user session', err);\n                                if (!this.isSessionInvalid(err)) return [3 /*break*/, 4];\n                                _a.label = 1;\n                              case 1:\n                                _a.trys.push([1, 3,, 4]);\n                                return [4 /*yield*/, this.cleanUpInvalidSession(user_1)];\n                              case 2:\n                                _a.sent();\n                                return [3 /*break*/, 4];\n                              case 3:\n                                cleanUpError_4 = _a.sent();\n                                rej(new Error(\"Session is invalid due to: \" + err.message + \" and failed to clean up invalid session: \" + cleanUpError_4.message));\n                                return [2 /*return*/];\n                              case 4:\n                                return [2 /*return*/, rej(err)];\n                              case 5:\n                                user_1.deleteUser(function (err, result) {\n                                  if (err) {\n                                    rej(err);\n                                  } else {\n                                    dispatchAuthEvent('userDeleted', result, 'The authenticated user has been deleted.');\n                                    user_1.signOut();\n                                    _this.user = null;\n                                    try {\n                                      _this.cleanCachedItems(); // clean aws credentials\n                                    } catch (e) {\n                                      // TODO: change to rejects in refactor\n                                      logger.debug('failed to clear cached items');\n                                    }\n                                    if (isSignedInHostedUI) {\n                                      _this.oAuthSignOutRedirect(res, rej);\n                                    } else {\n                                      dispatchAuthEvent('signOut', _this.user, \"A user has been signed out\");\n                                      res(result);\n                                    }\n                                  }\n                                });\n                                _a.label = 6;\n                              case 6:\n                                return [2 /*return*/];\n                            }\n                          });\n                        });\n                      });\n                    }\n                  } else {\n                    logger.debug('no Congito User pool');\n                    rej(new Error('Cognito User pool does not exist'));\n                  }\n                  return [2 /*return*/];\n                });\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Update an authenticated users' attributes\n   * @param {CognitoUser} - The currently logged in user object\n   * @return {Promise}\n   **/\n  AuthClass.prototype.updateUserAttributes = function (user, attributes, clientMetadata) {\n    var _this = this;\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    var attributeList = [];\n    var that = this;\n    return new Promise(function (resolve, reject) {\n      that.userSession(user).then(function (session) {\n        for (var key in attributes) {\n          if (key !== 'sub' && key.indexOf('_verified') < 0) {\n            var attr = {\n              Name: key,\n              Value: attributes[key]\n            };\n            attributeList.push(attr);\n          }\n        }\n        user.updateAttributes(attributeList, function (err, result, details) {\n          if (err) {\n            dispatchAuthEvent('updateUserAttributes_failure', err, 'Failed to update attributes');\n            return reject(err);\n          } else {\n            var attrs = _this.createUpdateAttributesResultList(attributes, details === null || details === void 0 ? void 0 : details.CodeDeliveryDetailsList);\n            dispatchAuthEvent('updateUserAttributes', attrs, 'Attributes successfully updated');\n            return resolve(result);\n          }\n        }, clientMetadata);\n      });\n    });\n  };\n  AuthClass.prototype.createUpdateAttributesResultList = function (attributes, codeDeliveryDetailsList) {\n    var attrs = {};\n    Object.keys(attributes).forEach(function (key) {\n      attrs[key] = {\n        isUpdated: true\n      };\n      var codeDeliveryDetails = codeDeliveryDetailsList === null || codeDeliveryDetailsList === void 0 ? void 0 : codeDeliveryDetailsList.find(function (value) {\n        return value.AttributeName === key;\n      });\n      if (codeDeliveryDetails) {\n        attrs[key].isUpdated = false;\n        attrs[key].codeDeliveryDetails = codeDeliveryDetails;\n      }\n    });\n    return attrs;\n  };\n  /**\n   * Return user attributes\n   * @param {Object} user - The CognitoUser object\n   * @return - A promise resolves to user attributes if success\n   */\n  AuthClass.prototype.userAttributes = function (user) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      _this.userSession(user).then(function (session) {\n        user.getUserAttributes(function (err, attributes) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(attributes);\n          }\n        });\n      });\n    });\n  };\n  AuthClass.prototype.verifiedContact = function (user) {\n    var that = this;\n    return this.userAttributes(user).then(function (attributes) {\n      var attrs = that.attributesToObject(attributes);\n      var unverified = {};\n      var verified = {};\n      if (attrs['email']) {\n        if (attrs['email_verified']) {\n          verified['email'] = attrs['email'];\n        } else {\n          unverified['email'] = attrs['email'];\n        }\n      }\n      if (attrs['phone_number']) {\n        if (attrs['phone_number_verified']) {\n          verified['phone_number'] = attrs['phone_number'];\n        } else {\n          unverified['phone_number'] = attrs['phone_number'];\n        }\n      }\n      return {\n        verified: verified,\n        unverified: unverified\n      };\n    });\n  };\n  AuthClass.prototype.isErrorWithMessage = function (err) {\n    return typeof err === 'object' && Object.prototype.hasOwnProperty.call(err, 'message');\n  };\n  // Session revoked by another app\n  AuthClass.prototype.isTokenRevokedError = function (err) {\n    return this.isErrorWithMessage(err) && err.message === 'Access Token has been revoked';\n  };\n  AuthClass.prototype.isRefreshTokenRevokedError = function (err) {\n    return this.isErrorWithMessage(err) && err.message === 'Refresh Token has been revoked';\n  };\n  AuthClass.prototype.isUserDisabledError = function (err) {\n    return this.isErrorWithMessage(err) && err.message === 'User is disabled.';\n  };\n  AuthClass.prototype.isUserDoesNotExistError = function (err) {\n    return this.isErrorWithMessage(err) && err.message === 'User does not exist.';\n  };\n  AuthClass.prototype.isRefreshTokenExpiredError = function (err) {\n    return this.isErrorWithMessage(err) && err.message === 'Refresh Token has expired';\n  };\n  AuthClass.prototype.isSignedInHostedUI = function () {\n    return this._oAuthHandler && this._storage.getItem('amplify-signin-with-hostedUI') === 'true';\n  };\n  AuthClass.prototype.isSessionInvalid = function (err) {\n    return this.isUserDisabledError(err) || this.isUserDoesNotExistError(err) || this.isTokenRevokedError(err) || this.isRefreshTokenRevokedError(err) || this.isRefreshTokenExpiredError(err);\n  };\n  AuthClass.prototype.cleanUpInvalidSession = function (user) {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_6;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            user.signOut();\n            this.user = null;\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this.cleanCachedItems()];\n          case 2:\n            _a.sent(); // clean aws credentials\n            return [3 /*break*/, 4];\n          case 3:\n            e_6 = _a.sent();\n            logger.debug('failed to clear cached items');\n            return [3 /*break*/, 4];\n          case 4:\n            if (this.isSignedInHostedUI()) {\n              return [2 /*return*/, new Promise(function (res, rej) {\n                _this.oAuthSignOutRedirect(res, rej);\n              })];\n            } else {\n              dispatchAuthEvent('signOut', this.user, \"A user has been signed out\");\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Get current authenticated user\n   * @return - A promise resolves to current authenticated CognitoUser if success\n   */\n  AuthClass.prototype.currentUserPoolUser = function (params) {\n    var _this = this;\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n    return new Promise(function (res, rej) {\n      _this._storageSync.then(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var user, session, bypassCache, clientMetadata, _a, scope, err_1;\n          var _this = this;\n          return __generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                if (!this.isOAuthInProgress()) return [3 /*break*/, 2];\n                logger.debug('OAuth signIn in progress, waiting for resolution...');\n                return [4 /*yield*/, new Promise(function (res) {\n                  var timeoutId = setTimeout(function () {\n                    logger.debug('OAuth signIn in progress timeout');\n                    Hub.remove('auth', hostedUISignCallback);\n                    res();\n                  }, OAUTH_FLOW_MS_TIMEOUT);\n                  Hub.listen('auth', hostedUISignCallback);\n                  function hostedUISignCallback(_a) {\n                    var payload = _a.payload;\n                    var event = payload.event;\n                    if (event === 'cognitoHostedUI' || event === 'cognitoHostedUI_failure') {\n                      logger.debug(\"OAuth signIn resolved: \" + event);\n                      clearTimeout(timeoutId);\n                      Hub.remove('auth', hostedUISignCallback);\n                      res();\n                    }\n                  }\n                })];\n              case 1:\n                _b.sent();\n                _b.label = 2;\n              case 2:\n                user = this.userPool.getCurrentUser();\n                if (!user) {\n                  logger.debug('Failed to get user from user pool');\n                  rej('No current user');\n                  return [2 /*return*/];\n                }\n\n                _b.label = 3;\n              case 3:\n                _b.trys.push([3, 7,, 8]);\n                return [4 /*yield*/, this._userSession(user)];\n              case 4:\n                session = _b.sent();\n                bypassCache = params ? params.bypassCache : false;\n                if (!bypassCache) return [3 /*break*/, 6];\n                return [4 /*yield*/, this.Credentials.clear()];\n              case 5:\n                _b.sent();\n                _b.label = 6;\n              case 6:\n                clientMetadata = this._config.clientMetadata;\n                _a = session.getAccessToken().decodePayload().scope, scope = _a === void 0 ? '' : _a;\n                if (scope.split(' ').includes(USER_ADMIN_SCOPE)) {\n                  user.getUserData(function (err, data) {\n                    return __awaiter(_this, void 0, void 0, function () {\n                      var cleanUpError_5, preferredMFA, attributeList, i, attribute, userAttribute, attributes;\n                      return __generator(this, function (_a) {\n                        switch (_a.label) {\n                          case 0:\n                            if (!err) return [3 /*break*/, 7];\n                            logger.debug('getting user data failed', err);\n                            if (!this.isSessionInvalid(err)) return [3 /*break*/, 5];\n                            _a.label = 1;\n                          case 1:\n                            _a.trys.push([1, 3,, 4]);\n                            return [4 /*yield*/, this.cleanUpInvalidSession(user)];\n                          case 2:\n                            _a.sent();\n                            return [3 /*break*/, 4];\n                          case 3:\n                            cleanUpError_5 = _a.sent();\n                            rej(new Error(\"Session is invalid due to: \" + err.message + \" and failed to clean up invalid session: \" + cleanUpError_5.message));\n                            return [2 /*return*/];\n                          case 4:\n                            rej(err);\n                            return [3 /*break*/, 6];\n                          case 5:\n                            res(user);\n                            _a.label = 6;\n                          case 6:\n                            return [2 /*return*/];\n                          case 7:\n                            preferredMFA = data.PreferredMfaSetting || 'NOMFA';\n                            attributeList = [];\n                            for (i = 0; i < data.UserAttributes.length; i++) {\n                              attribute = {\n                                Name: data.UserAttributes[i].Name,\n                                Value: data.UserAttributes[i].Value\n                              };\n                              userAttribute = new CognitoUserAttribute(attribute);\n                              attributeList.push(userAttribute);\n                            }\n                            attributes = this.attributesToObject(attributeList);\n                            Object.assign(user, {\n                              attributes: attributes,\n                              preferredMFA: preferredMFA\n                            });\n                            return [2 /*return*/, res(user)];\n                        }\n                      });\n                    });\n                  }, {\n                    bypassCache: bypassCache,\n                    clientMetadata: clientMetadata\n                  });\n                } else {\n                  logger.debug(\"Unable to get the user data because the \" + USER_ADMIN_SCOPE + \" \" + \"is not in the scopes of the access token\");\n                  return [2 /*return*/, res(user)];\n                }\n                return [3 /*break*/, 8];\n              case 7:\n                err_1 = _b.sent();\n                rej(err_1);\n                return [3 /*break*/, 8];\n              case 8:\n                return [2 /*return*/];\n            }\n          });\n        });\n      }).catch(function (e) {\n        logger.debug('Failed to sync cache info into memory', e);\n        return rej(e);\n      });\n    });\n  };\n  AuthClass.prototype.isOAuthInProgress = function () {\n    return this.oAuthFlowInProgress;\n  };\n  /**\n   * Get current authenticated user\n   * @param {CurrentUserOpts} - options for getting the current user\n   * @return - A promise resolves to current authenticated CognitoUser if success\n   */\n  AuthClass.prototype.currentAuthenticatedUser = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var federatedUser, e_7, federatedInfo, user, e_8;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('getting current authenticated user');\n            federatedUser = null;\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this._storageSync];\n          case 2:\n            _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            e_7 = _a.sent();\n            logger.debug('Failed to sync cache info into memory', e_7);\n            throw e_7;\n          case 4:\n            try {\n              federatedInfo = JSON.parse(this._storage.getItem('aws-amplify-federatedInfo'));\n              if (federatedInfo) {\n                federatedUser = __assign(__assign({}, federatedInfo.user), {\n                  token: federatedInfo.token\n                });\n              }\n            } catch (e) {\n              logger.debug('cannot load federated user from auth storage');\n            }\n            if (!federatedUser) return [3 /*break*/, 5];\n            this.user = federatedUser;\n            logger.debug('get current authenticated federated user', this.user);\n            return [2 /*return*/, this.user];\n          case 5:\n            logger.debug('get current authenticated userpool user');\n            user = null;\n            _a.label = 6;\n          case 6:\n            _a.trys.push([6, 8,, 9]);\n            return [4 /*yield*/, this.currentUserPoolUser(params)];\n          case 7:\n            user = _a.sent();\n            return [3 /*break*/, 9];\n          case 8:\n            e_8 = _a.sent();\n            if (e_8 === 'No userPool') {\n              logger.error('Cannot get the current user because the user pool is missing. ' + 'Please make sure the Auth module is configured with a valid Cognito User Pool ID');\n            }\n            logger.debug('The user is not authenticated by the error', e_8);\n            return [2 /*return*/, Promise.reject('The user is not authenticated')];\n          case 9:\n            this.user = user;\n            return [2 /*return*/, this.user];\n        }\n      });\n    });\n  };\n  /**\n   * Get current user's session\n   * @return - A promise resolves to session object if success\n   */\n  AuthClass.prototype.currentSession = function () {\n    var that = this;\n    logger.debug('Getting current session');\n    // Purposely not calling the reject method here because we don't need a console error\n    if (!this.userPool) {\n      return Promise.reject(new Error('No User Pool in the configuration.'));\n    }\n    return new Promise(function (res, rej) {\n      that.currentUserPoolUser().then(function (user) {\n        that.userSession(user).then(function (session) {\n          res(session);\n          return;\n        }).catch(function (e) {\n          logger.debug('Failed to get the current session', e);\n          rej(e);\n          return;\n        });\n      }).catch(function (e) {\n        logger.debug('Failed to get the current user', e);\n        rej(e);\n        return;\n      });\n    });\n  };\n  AuthClass.prototype._userSession = function (user) {\n    return __awaiter(this, void 0, void 0, function () {\n      var clientMetadata, userSession;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!user) {\n              logger.debug('the user is null');\n              return [2 /*return*/, this.rejectAuthError(AuthErrorTypes.NoUserSession)];\n            }\n            clientMetadata = this._config.clientMetadata;\n            // Debouncing the concurrent userSession calls by caching the promise.\n            // This solution assumes users will always call this function with the same CognitoUser instance.\n            if (this.inflightSessionPromiseCounter === 0) {\n              this.inflightSessionPromise = new Promise(function (res, rej) {\n                user.getSession(function (err, session) {\n                  return __awaiter(_this, void 0, void 0, function () {\n                    var cleanUpError_6;\n                    return __generator(this, function (_a) {\n                      switch (_a.label) {\n                        case 0:\n                          if (!err) return [3 /*break*/, 5];\n                          logger.debug('Failed to get the session from user', user);\n                          if (!this.isSessionInvalid(err)) return [3 /*break*/, 4];\n                          _a.label = 1;\n                        case 1:\n                          _a.trys.push([1, 3,, 4]);\n                          return [4 /*yield*/, this.cleanUpInvalidSession(user)];\n                        case 2:\n                          _a.sent();\n                          return [3 /*break*/, 4];\n                        case 3:\n                          cleanUpError_6 = _a.sent();\n                          rej(new Error(\"Session is invalid due to: \" + err.message + \" and failed to clean up invalid session: \" + cleanUpError_6.message));\n                          return [2 /*return*/];\n                        case 4:\n                          rej(err);\n                          return [2 /*return*/];\n                        case 5:\n                          logger.debug('Succeed to get the user session', session);\n                          res(session);\n                          return [2 /*return*/];\n                      }\n                    });\n                  });\n                }, {\n                  clientMetadata: clientMetadata\n                });\n              });\n            }\n            this.inflightSessionPromiseCounter++;\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1,, 3, 4]);\n            return [4 /*yield*/, this.inflightSessionPromise];\n          case 2:\n            userSession = _a.sent();\n            // Set private member. Avoid user.setSignInUserSession() to prevent excessive localstorage refresh.\n            // @ts-ignore\n            user.signInUserSession = userSession;\n            return [2 /*return*/, userSession];\n          case 3:\n            this.inflightSessionPromiseCounter--;\n            return [7 /*endfinally*/];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Get the corresponding user session\n   * @param {Object} user - The CognitoUser object\n   * @return - A promise resolves to the session\n   */\n  AuthClass.prototype.userSession = function (user) {\n    return this._userSession(user);\n  };\n  /**\n   * Get authenticated credentials of current user.\n   * @return - A promise resolves to be current user's credentials\n   */\n  AuthClass.prototype.currentUserCredentials = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_9, federatedInfo;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('Getting current user credentials');\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this._storageSync];\n          case 2:\n            _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            e_9 = _a.sent();\n            logger.debug('Failed to sync cache info into memory', e_9);\n            throw e_9;\n          case 4:\n            federatedInfo = null;\n            try {\n              federatedInfo = JSON.parse(this._storage.getItem('aws-amplify-federatedInfo'));\n            } catch (e) {\n              logger.debug('failed to get or parse item aws-amplify-federatedInfo', e);\n            }\n            if (federatedInfo) {\n              // refresh the jwt token here if necessary\n              return [2 /*return*/, this.Credentials.refreshFederatedToken(federatedInfo)];\n            } else {\n              return [2 /*return*/, this.currentSession().then(function (session) {\n                logger.debug('getting session success', session);\n                return _this.Credentials.set(session, 'session');\n              }).catch(function () {\n                logger.debug('getting guest credentials');\n                return _this.Credentials.set(null, 'guest');\n              })];\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AuthClass.prototype.currentCredentials = function () {\n    logger.debug('getting current credentials');\n    return this.Credentials.get();\n  };\n  /**\n   * Initiate an attribute confirmation request\n   * @param {Object} user - The CognitoUser\n   * @param {Object} attr - The attributes to be verified\n   * @return - A promise resolves to callback data if success\n   */\n  AuthClass.prototype.verifyUserAttribute = function (user, attr, clientMetadata) {\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    return new Promise(function (resolve, reject) {\n      user.getAttributeVerificationCode(attr, {\n        onSuccess: function (success) {\n          return resolve(success);\n        },\n        onFailure: function (err) {\n          return reject(err);\n        }\n      }, clientMetadata);\n    });\n  };\n  /**\n   * Confirm an attribute using a confirmation code\n   * @param {Object} user - The CognitoUser\n   * @param {Object} attr - The attribute to be verified\n   * @param {String} code - The confirmation code\n   * @return - A promise resolves to callback data if success\n   */\n  AuthClass.prototype.verifyUserAttributeSubmit = function (user, attr, code) {\n    if (!code) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyCode);\n    }\n    return new Promise(function (resolve, reject) {\n      user.verifyAttribute(attr, code, {\n        onSuccess: function (data) {\n          resolve(data);\n          return;\n        },\n        onFailure: function (err) {\n          reject(err);\n          return;\n        }\n      });\n    });\n  };\n  AuthClass.prototype.verifyCurrentUserAttribute = function (attr) {\n    var that = this;\n    return that.currentUserPoolUser().then(function (user) {\n      return that.verifyUserAttribute(user, attr);\n    });\n  };\n  /**\n   * Confirm current user's attribute using a confirmation code\n   * @param {Object} attr - The attribute to be verified\n   * @param {String} code - The confirmation code\n   * @return - A promise resolves to callback data if success\n   */\n  AuthClass.prototype.verifyCurrentUserAttributeSubmit = function (attr, code) {\n    var that = this;\n    return that.currentUserPoolUser().then(function (user) {\n      return that.verifyUserAttributeSubmit(user, attr, code);\n    });\n  };\n  AuthClass.prototype.cognitoIdentitySignOut = function (opts, user) {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_10, isSignedInHostedUI;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, this._storageSync];\n          case 1:\n            _a.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            e_10 = _a.sent();\n            logger.debug('Failed to sync cache info into memory', e_10);\n            throw e_10;\n          case 3:\n            isSignedInHostedUI = this._oAuthHandler && this._storage.getItem('amplify-signin-with-hostedUI') === 'true';\n            return [2 /*return*/, new Promise(function (res, rej) {\n              if (opts && opts.global) {\n                logger.debug('user global sign out', user);\n                // in order to use global signout\n                // we must validate the user as an authenticated user by using getSession\n                var clientMetadata = _this._config.clientMetadata; // TODO: verify behavior if this is override during signIn\n                user.getSession(function (err, result) {\n                  return __awaiter(_this, void 0, void 0, function () {\n                    var cleanUpError_7;\n                    var _this = this;\n                    return __generator(this, function (_a) {\n                      switch (_a.label) {\n                        case 0:\n                          if (!err) return [3 /*break*/, 5];\n                          logger.debug('failed to get the user session', err);\n                          if (!this.isSessionInvalid(err)) return [3 /*break*/, 4];\n                          _a.label = 1;\n                        case 1:\n                          _a.trys.push([1, 3,, 4]);\n                          return [4 /*yield*/, this.cleanUpInvalidSession(user)];\n                        case 2:\n                          _a.sent();\n                          return [3 /*break*/, 4];\n                        case 3:\n                          cleanUpError_7 = _a.sent();\n                          rej(new Error(\"Session is invalid due to: \" + err.message + \" and failed to clean up invalid session: \" + cleanUpError_7.message));\n                          return [2 /*return*/];\n                        case 4:\n                          return [2 /*return*/, rej(err)];\n                        case 5:\n                          user.globalSignOut({\n                            onSuccess: function (data) {\n                              logger.debug('global sign out success');\n                              if (isSignedInHostedUI) {\n                                _this.oAuthSignOutRedirect(res, rej);\n                              } else {\n                                return res();\n                              }\n                            },\n                            onFailure: function (err) {\n                              logger.debug('global sign out failed', err);\n                              return rej(err);\n                            }\n                          });\n                          return [2 /*return*/];\n                      }\n                    });\n                  });\n                }, {\n                  clientMetadata: clientMetadata\n                });\n              } else {\n                logger.debug('user sign out', user);\n                user.signOut(function () {\n                  if (isSignedInHostedUI) {\n                    _this.oAuthSignOutRedirect(res, rej);\n                  } else {\n                    return res();\n                  }\n                });\n              }\n            })];\n        }\n      });\n    });\n  };\n  AuthClass.prototype.oAuthSignOutRedirect = function (resolve, reject) {\n    var isBrowser = browserOrNode().isBrowser;\n    if (isBrowser) {\n      this.oAuthSignOutRedirectOrReject(reject);\n    } else {\n      this.oAuthSignOutAndResolve(resolve);\n    }\n  };\n  AuthClass.prototype.oAuthSignOutAndResolve = function (resolve) {\n    this._oAuthHandler.signOut();\n    resolve();\n  };\n  AuthClass.prototype.oAuthSignOutRedirectOrReject = function (reject) {\n    this._oAuthHandler.signOut(); // this method redirects url\n    // App should be redirected to another url otherwise it will reject\n    setTimeout(function () {\n      return reject(Error('Signout timeout fail'));\n    }, 3000);\n  };\n  /**\n   * Sign out method\n   * @\n   * @return - A promise resolved if success\n   */\n  AuthClass.prototype.signOut = function (opts) {\n    return __awaiter(this, void 0, void 0, function () {\n      var e_11, user;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, this.cleanCachedItems()];\n          case 1:\n            _a.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            e_11 = _a.sent();\n            logger.debug('failed to clear cached items');\n            return [3 /*break*/, 3];\n          case 3:\n            if (!this.userPool) return [3 /*break*/, 7];\n            user = this.userPool.getCurrentUser();\n            if (!user) return [3 /*break*/, 5];\n            return [4 /*yield*/, this.cognitoIdentitySignOut(opts, user)];\n          case 4:\n            _a.sent();\n            return [3 /*break*/, 6];\n          case 5:\n            logger.debug('no current Cognito user');\n            _a.label = 6;\n          case 6:\n            return [3 /*break*/, 8];\n          case 7:\n            logger.debug('no Cognito User pool');\n            _a.label = 8;\n          case 8:\n            /**\n             * Note for future refactor - no reliable way to get username with\n             * Cognito User Pools vs Identity when federating with Social Providers\n             * This is why we need a well structured session object that can be inspected\n             * and information passed back in the message below for Hub dispatch\n             */\n            dispatchAuthEvent('signOut', this.user, \"A user has been signed out\");\n            this.user = null;\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AuthClass.prototype.cleanCachedItems = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // clear cognito cached item\n            return [4 /*yield*/, this.Credentials.clear()];\n          case 1:\n            // clear cognito cached item\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Change a password for an authenticated user\n   * @param {Object} user - The CognitoUser object\n   * @param {String} oldPassword - the current password\n   * @param {String} newPassword - the requested new password\n   * @return - A promise resolves if success\n   */\n  AuthClass.prototype.changePassword = function (user, oldPassword, newPassword, clientMetadata) {\n    var _this = this;\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    return new Promise(function (resolve, reject) {\n      _this.userSession(user).then(function (session) {\n        user.changePassword(oldPassword, newPassword, function (err, data) {\n          if (err) {\n            logger.debug('change password failure', err);\n            return reject(err);\n          } else {\n            return resolve(data);\n          }\n        }, clientMetadata);\n      });\n    });\n  };\n  /**\n   * Initiate a forgot password request\n   * @param {String} username - the username to change password\n   * @return - A promise resolves if success\n   */\n  AuthClass.prototype.forgotPassword = function (username, clientMetadata) {\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n    if (!username) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n    }\n    var user = this.createCognitoUser(username);\n    return new Promise(function (resolve, reject) {\n      user.forgotPassword({\n        onSuccess: function () {\n          resolve();\n          return;\n        },\n        onFailure: function (err) {\n          logger.debug('forgot password failure', err);\n          dispatchAuthEvent('forgotPassword_failure', err, username + \" forgotPassword failed\");\n          reject(err);\n          return;\n        },\n        inputVerificationCode: function (data) {\n          dispatchAuthEvent('forgotPassword', user, username + \" has initiated forgot password flow\");\n          resolve(data);\n          return;\n        }\n      }, clientMetadata);\n    });\n  };\n  /**\n   * Confirm a new password using a confirmation Code\n   * @param {String} username - The username\n   * @param {String} code - The confirmation code\n   * @param {String} password - The new password\n   * @return - A promise that resolves if success\n   */\n  AuthClass.prototype.forgotPasswordSubmit = function (username, code, password, clientMetadata) {\n    if (clientMetadata === void 0) {\n      clientMetadata = this._config.clientMetadata;\n    }\n    if (!this.userPool) {\n      return this.rejectNoUserPool();\n    }\n    if (!username) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n    }\n    if (!code) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyCode);\n    }\n    if (!password) {\n      return this.rejectAuthError(AuthErrorTypes.EmptyPassword);\n    }\n    var user = this.createCognitoUser(username);\n    return new Promise(function (resolve, reject) {\n      user.confirmPassword(code, password, {\n        onSuccess: function (success) {\n          dispatchAuthEvent('forgotPasswordSubmit', user, username + \" forgotPasswordSubmit successful\");\n          resolve(success);\n          return;\n        },\n        onFailure: function (err) {\n          dispatchAuthEvent('forgotPasswordSubmit_failure', err, username + \" forgotPasswordSubmit failed\");\n          reject(err);\n          return;\n        }\n      }, clientMetadata);\n    });\n  };\n  /**\n   * Get user information\n   * @async\n   * @return {Object }- current User's information\n   */\n  AuthClass.prototype.currentUserInfo = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var source, user, attributes, userAttrs, credentials, e_12, info, err_2, user;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            source = this.Credentials.getCredSource();\n            if (!(!source || source === 'aws' || source === 'userPool')) return [3 /*break*/, 9];\n            return [4 /*yield*/, this.currentUserPoolUser().catch(function (err) {\n              return logger.error(err);\n            })];\n          case 1:\n            user = _a.sent();\n            if (!user) {\n              return [2 /*return*/, null];\n            }\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 8,, 9]);\n            return [4 /*yield*/, this.userAttributes(user)];\n          case 3:\n            attributes = _a.sent();\n            userAttrs = this.attributesToObject(attributes);\n            credentials = null;\n            _a.label = 4;\n          case 4:\n            _a.trys.push([4, 6,, 7]);\n            return [4 /*yield*/, this.currentCredentials()];\n          case 5:\n            credentials = _a.sent();\n            return [3 /*break*/, 7];\n          case 6:\n            e_12 = _a.sent();\n            logger.debug('Failed to retrieve credentials while getting current user info', e_12);\n            return [3 /*break*/, 7];\n          case 7:\n            info = {\n              id: credentials ? credentials.identityId : undefined,\n              username: user.getUsername(),\n              attributes: userAttrs\n            };\n            return [2 /*return*/, info];\n          case 8:\n            err_2 = _a.sent();\n            logger.error('currentUserInfo error', err_2);\n            return [2 /*return*/, {}];\n          case 9:\n            if (source === 'federated') {\n              user = this.user;\n              return [2 /*return*/, user ? user : {}];\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AuthClass.prototype.federatedSignIn = function (providerOrOptions, response, user) {\n    return __awaiter(this, void 0, void 0, function () {\n      var options, provider, customState, client_id, redirect_uri, provider, loggedInUser, token, identity_id, expires_at, credentials, currentUser;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this._config.identityPoolId && !this._config.userPoolId) {\n              throw new Error(\"Federation requires either a User Pool or Identity Pool in config\");\n            }\n            // Ensure backwards compatability\n            if (typeof providerOrOptions === 'undefined') {\n              if (this._config.identityPoolId && !this._config.userPoolId) {\n                throw new Error(\"Federation with Identity Pools requires tokens passed as arguments\");\n              }\n            }\n            if (!(isFederatedSignInOptions(providerOrOptions) || isFederatedSignInOptionsCustom(providerOrOptions) || hasCustomState(providerOrOptions) || typeof providerOrOptions === 'undefined')) return [3 /*break*/, 1];\n            options = providerOrOptions || {\n              provider: CognitoHostedUIIdentityProvider.Cognito\n            };\n            provider = isFederatedSignInOptions(options) ? options.provider : options.customProvider;\n            customState = isFederatedSignInOptions(options) ? options.customState : options.customState;\n            if (this._config.userPoolId) {\n              client_id = isCognitoHostedOpts(this._config.oauth) ? this._config.userPoolWebClientId : this._config.oauth.clientID;\n              redirect_uri = isCognitoHostedOpts(this._config.oauth) ? this._config.oauth.redirectSignIn : this._config.oauth.redirectUri;\n              this._oAuthHandler.oauthSignIn(this._config.oauth.responseType, this._config.oauth.domain, redirect_uri, client_id, provider, customState);\n            }\n            return [3 /*break*/, 4];\n          case 1:\n            provider = providerOrOptions;\n            // To check if the user is already logged in\n            try {\n              loggedInUser = JSON.stringify(JSON.parse(this._storage.getItem('aws-amplify-federatedInfo')).user);\n              if (loggedInUser) {\n                logger.warn(\"There is already a signed in user: \" + loggedInUser + \" in your app.\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tYou should not call Auth.federatedSignIn method again as it may cause unexpected behavior.\");\n              }\n            } catch (e) {}\n            token = response.token, identity_id = response.identity_id, expires_at = response.expires_at;\n            return [4 /*yield*/, this.Credentials.set({\n              provider: provider,\n              token: token,\n              identity_id: identity_id,\n              user: user,\n              expires_at: expires_at\n            }, 'federation')];\n          case 2:\n            credentials = _a.sent();\n            return [4 /*yield*/, this.currentAuthenticatedUser()];\n          case 3:\n            currentUser = _a.sent();\n            dispatchAuthEvent('signIn', currentUser, \"A user \" + currentUser.username + \" has been signed in\");\n            logger.debug('federated sign in credentials', credentials);\n            return [2 /*return*/, credentials];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Used to complete the OAuth flow with or without the Cognito Hosted UI\n   * @param {String} URL - optional parameter for customers to pass in the response URL\n   */\n  AuthClass.prototype._handleAuthResponse = function (URL) {\n    return __awaiter(this, void 0, void 0, function () {\n      var currentUrl, hasCodeOrError, hasTokenOrError, _a, accessToken, idToken, refreshToken, state, session, credentials, isCustomStateIncluded, currentUser, customState, err_3;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (this.oAuthFlowInProgress) {\n              logger.debug(\"Skipping URL \" + URL + \" current flow in progress\");\n              return [2 /*return*/];\n            }\n\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1,, 8, 9]);\n            this.oAuthFlowInProgress = true;\n            if (!this._config.userPoolId) {\n              throw new Error(\"OAuth responses require a User Pool defined in config\");\n            }\n            dispatchAuthEvent('parsingCallbackUrl', {\n              url: URL\n            }, \"The callback url is being parsed\");\n            currentUrl = URL || (browserOrNode().isBrowser ? window.location.href : '');\n            hasCodeOrError = !!(parse(currentUrl).query || '').split('&').map(function (entry) {\n              return entry.split('=');\n            }).find(function (_a) {\n              var _b = __read(_a, 1),\n                k = _b[0];\n              return k === 'code' || k === 'error';\n            });\n            hasTokenOrError = !!(parse(currentUrl).hash || '#').substr(1).split('&').map(function (entry) {\n              return entry.split('=');\n            }).find(function (_a) {\n              var _b = __read(_a, 1),\n                k = _b[0];\n              return k === 'access_token' || k === 'error';\n            });\n            if (!(hasCodeOrError || hasTokenOrError)) return [3 /*break*/, 7];\n            this._storage.setItem('amplify-redirected-from-hosted-ui', 'true');\n            _b.label = 2;\n          case 2:\n            _b.trys.push([2, 6,, 7]);\n            return [4 /*yield*/, this._oAuthHandler.handleAuthResponse(currentUrl)];\n          case 3:\n            _a = _b.sent(), accessToken = _a.accessToken, idToken = _a.idToken, refreshToken = _a.refreshToken, state = _a.state;\n            session = new CognitoUserSession({\n              IdToken: new CognitoIdToken({\n                IdToken: idToken\n              }),\n              RefreshToken: new CognitoRefreshToken({\n                RefreshToken: refreshToken\n              }),\n              AccessToken: new CognitoAccessToken({\n                AccessToken: accessToken\n              })\n            });\n            credentials = void 0;\n            if (!this._config.identityPoolId) return [3 /*break*/, 5];\n            return [4 /*yield*/, this.Credentials.set(session, 'session')];\n          case 4:\n            credentials = _b.sent();\n            logger.debug('AWS credentials', credentials);\n            _b.label = 5;\n          case 5:\n            isCustomStateIncluded = /-/.test(state);\n            currentUser = this.createCognitoUser(session.getIdToken().decodePayload()['cognito:username']);\n            // This calls cacheTokens() in Cognito SDK\n            currentUser.setSignInUserSession(session);\n            if (window && typeof window.history !== 'undefined') {\n              window.history.replaceState({}, null, this._config.oauth.redirectSignIn);\n            }\n            dispatchAuthEvent('signIn', currentUser, \"A user \" + currentUser.getUsername() + \" has been signed in\");\n            dispatchAuthEvent('cognitoHostedUI', currentUser, \"A user \" + currentUser.getUsername() + \" has been signed in via Cognito Hosted UI\");\n            if (isCustomStateIncluded) {\n              customState = state.split('-').splice(1).join('-');\n              dispatchAuthEvent('customOAuthState', urlSafeDecode(customState), \"State for user \" + currentUser.getUsername());\n            }\n            //#endregion\n            return [2 /*return*/, credentials];\n          case 6:\n            err_3 = _b.sent();\n            logger.debug('Error in cognito hosted auth response', err_3);\n            // Just like a successful handling of `?code`, replace the window history to \"dispose\" of the `code`.\n            // Otherwise, reloading the page will throw errors as the `code` has already been spent.\n            if (window && typeof window.history !== 'undefined') {\n              window.history.replaceState({}, null, this._config.oauth.redirectSignIn);\n            }\n            dispatchAuthEvent('signIn_failure', err_3, \"The OAuth response flow failed\");\n            dispatchAuthEvent('cognitoHostedUI_failure', err_3, \"A failure occurred when returning to the Cognito Hosted UI\");\n            dispatchAuthEvent('customState_failure', err_3, \"A failure occurred when returning state\");\n            return [3 /*break*/, 7];\n          case 7:\n            return [3 /*break*/, 9];\n          case 8:\n            this.oAuthFlowInProgress = false;\n            return [7 /*endfinally*/];\n          case 9:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Compact version of credentials\n   * @param {Object} credentials\n   * @return {Object} - Credentials\n   */\n  AuthClass.prototype.essentialCredentials = function (credentials) {\n    return {\n      accessKeyId: credentials.accessKeyId,\n      sessionToken: credentials.sessionToken,\n      secretAccessKey: credentials.secretAccessKey,\n      identityId: credentials.identityId,\n      authenticated: credentials.authenticated\n    };\n  };\n  AuthClass.prototype.attributesToObject = function (attributes) {\n    var _this = this;\n    var obj = {};\n    if (attributes) {\n      attributes.map(function (attribute) {\n        if (attribute.Name === 'email_verified' || attribute.Name === 'phone_number_verified') {\n          obj[attribute.Name] = _this.isTruthyString(attribute.Value) || attribute.Value === true;\n        } else {\n          obj[attribute.Name] = attribute.Value;\n        }\n      });\n    }\n    return obj;\n  };\n  AuthClass.prototype.isTruthyString = function (value) {\n    return typeof value.toLowerCase === 'function' && value.toLowerCase() === 'true';\n  };\n  AuthClass.prototype.createCognitoUser = function (username) {\n    var userData = {\n      Username: username,\n      Pool: this.userPool\n    };\n    userData.Storage = this._storage;\n    var authenticationFlowType = this._config.authenticationFlowType;\n    var user = new CognitoUser(userData);\n    if (authenticationFlowType) {\n      user.setAuthenticationFlowType(authenticationFlowType);\n    }\n    return user;\n  };\n  AuthClass.prototype._isValidAuthStorage = function (obj) {\n    // We need to check if the obj has the functions of Storage\n    return !!obj && typeof obj.getItem === 'function' && typeof obj.setItem === 'function' && typeof obj.removeItem === 'function' && typeof obj.clear === 'function';\n  };\n  AuthClass.prototype.noUserPoolErrorHandler = function (config) {\n    if (config) {\n      if (!config.userPoolId || !config.identityPoolId) {\n        return AuthErrorTypes.MissingAuthConfig;\n      }\n    }\n    return AuthErrorTypes.NoConfig;\n  };\n  AuthClass.prototype.rejectAuthError = function (type) {\n    return Promise.reject(new AuthError(type));\n  };\n  AuthClass.prototype.rejectNoUserPool = function () {\n    var type = this.noUserPoolErrorHandler(this._config);\n    return Promise.reject(new NoUserPoolError(type));\n  };\n  AuthClass.prototype.rememberDevice = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var currUser, error_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, this.currentUserPoolUser()];\n          case 1:\n            currUser = _a.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            error_2 = _a.sent();\n            logger.debug('The user is not authenticated by the error', error_2);\n            return [2 /*return*/, Promise.reject('The user is not authenticated')];\n          case 3:\n            currUser.getCachedDeviceKeyAndPassword();\n            return [2 /*return*/, new Promise(function (res, rej) {\n              currUser.setDeviceStatusRemembered({\n                onSuccess: function (data) {\n                  res(data);\n                },\n                onFailure: function (err) {\n                  if (err.code === 'InvalidParameterException') {\n                    rej(new AuthError(AuthErrorTypes.DeviceConfig));\n                  } else if (err.code === 'NetworkError') {\n                    rej(new AuthError(AuthErrorTypes.NetworkError));\n                  } else {\n                    rej(err);\n                  }\n                }\n              });\n            })];\n        }\n      });\n    });\n  };\n  AuthClass.prototype.forgetDevice = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var currUser, error_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, this.currentUserPoolUser()];\n          case 1:\n            currUser = _a.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            error_3 = _a.sent();\n            logger.debug('The user is not authenticated by the error', error_3);\n            return [2 /*return*/, Promise.reject('The user is not authenticated')];\n          case 3:\n            currUser.getCachedDeviceKeyAndPassword();\n            return [2 /*return*/, new Promise(function (res, rej) {\n              currUser.forgetDevice({\n                onSuccess: function (data) {\n                  res(data);\n                },\n                onFailure: function (err) {\n                  if (err.code === 'InvalidParameterException') {\n                    rej(new AuthError(AuthErrorTypes.DeviceConfig));\n                  } else if (err.code === 'NetworkError') {\n                    rej(new AuthError(AuthErrorTypes.NetworkError));\n                  } else {\n                    rej(err);\n                  }\n                }\n              });\n            })];\n        }\n      });\n    });\n  };\n  AuthClass.prototype.fetchDevices = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var currUser, error_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, this.currentUserPoolUser()];\n          case 1:\n            currUser = _a.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            error_4 = _a.sent();\n            logger.debug('The user is not authenticated by the error', error_4);\n            throw new Error('The user is not authenticated');\n          case 3:\n            currUser.getCachedDeviceKeyAndPassword();\n            return [2 /*return*/, new Promise(function (res, rej) {\n              var cb = {\n                onSuccess: function (data) {\n                  var deviceList = data.Devices.map(function (device) {\n                    var deviceName = device.DeviceAttributes.find(function (_a) {\n                      var Name = _a.Name;\n                      return Name === 'device_name';\n                    }) || {};\n                    var deviceInfo = {\n                      id: device.DeviceKey,\n                      name: deviceName.Value\n                    };\n                    return deviceInfo;\n                  });\n                  res(deviceList);\n                },\n                onFailure: function (err) {\n                  if (err.code === 'InvalidParameterException') {\n                    rej(new AuthError(AuthErrorTypes.DeviceConfig));\n                  } else if (err.code === 'NetworkError') {\n                    rej(new AuthError(AuthErrorTypes.NetworkError));\n                  } else {\n                    rej(err);\n                  }\n                }\n              };\n              currUser.listDevices(MAX_DEVICES, null, cb);\n            })];\n        }\n      });\n    });\n  };\n  return AuthClass;\n}();\nexport { AuthClass };\nexport var Auth = new AuthClass(null);\nAmplify.register(Auth);","map":{"version":3,"names":["isUsernamePasswordOpts","isCognitoHostedOpts","isFederatedSignInOptions","isFederatedSignInOptionsCustom","hasCustomState","Amplify","ConsoleLogger","Logger","Credentials","Hub","StorageHelper","browserOrNode","parseAWSExports","UniversalStorage","urlSafeDecode","CookieStorage","CognitoUserPool","AuthenticationDetails","CognitoUser","CognitoUserSession","CognitoUserAttribute","CognitoIdToken","CognitoRefreshToken","CognitoAccessToken","parse","OAuth","default","urlListener","AuthError","NoUserPoolError","AuthErrorTypes","CognitoHostedUIIdentityProvider","logger","USER_ADMIN_SCOPE","OAUTH_FLOW_MS_TIMEOUT","AMPLIFY_SYMBOL","Symbol","for","dispatchAuthEvent","event","data","message","dispatch","MAX_DEVICES","MAX_AUTOSIGNIN_POLLING_MS","AuthClass","config","_this","userPool","user","oAuthFlowInProgress","autoSignInInitiated","inflightSessionPromise","inflightSessionPromiseCounter","wrapRefreshSessionCallback","callback","wrapped","error","undefined","configure","currentCredentials","bind","currentUserCredentials","listen","_a","payload","_storage","setItem","removeItem","prototype","getModuleName","_config","debug","conf","Object","assign","Auth","userPoolId","userPoolWebClientId","cookieStorage","oauth","region","identityPoolId","mandatorySignIn","refreshHandlers","identityPoolRegion","clientMetadata","endpoint","storage","ssr","getStorage","_isValidAuthStorage","Error","_storageSync","Promise","resolve","userPoolData","UserPoolId","ClientId","Storage","cognitoHostedUIConfig","awsCognito","cognitoAuthParams","cognitoClientId","domain","scopes","redirectSignIn","redirectSignOut","responseType","urlOpener","_oAuthHandler","usedResponseUrls_1","url","_handleAuthResponse","pollingInitiated","isTrueStorageValue","AutoSignInError","signUp","params","restOfAttrs","_i","arguments","length","rejectNoUserPool","username","password","attributes","validationData","autoSignIn","enabled","autoSignInValidationData","autoSignInClientMetaData","email","phone_number","push","Name","Value","attrs_1","keys","map","key","validationDataObject_1","_b","_c","clientMetaData","rejectAuthError","SignUpError","EmptyUsername","EmptyPassword","reject","err","handleAutoSignIn","authDetails","Username","Password","ValidationData","ClientMetadata","userConfirmed","signInAfterUserConfirmed","signUpVerificationMethod","handleLinkAutoSignIn","handleCodeAutoSignIn","listenEvent","start","Date","now","autoSignInPollingIntervalId","setInterval","clearInterval","createCognitoUser","getUsername","authenticateUser","authCallbacks","value","remove","sent","error_1","confirmSignUp","code","options","EmptyCode","forceAliasCreation","confirmRegistration","item","getItem","resendSignUp","resendConfirmationCode","signIn","usernameOrSignInOpts","pw","warn","InvalidUsername","signInWithPassword","signInWithoutPassword","that","onSuccess","session","__awaiter","clear","set","cred","e_1","currentUserPoolUser","currentUser","e_2","onFailure","customChallenge","challengeParam","mfaRequired","challengeName","mfaSetup","newPasswordRequired","userAttributes","requiredAttributes","totpRequired","selectMFAType","pendingSignIn","setAuthenticationFlowType","initiateAuth","getMFAOptions","res","rej","mfaOptions","getPreferredMFA","bypassCache","getUserData","isSessionInvalid","cleanUpInvalidSession","cleanUpError_1","mfaType","_getMfaTypeFromUserData","ret","preferredMFA","PreferredMfaSetting","mfaList","UserMFASettingList","MFAOptions","_getUserData","cleanUpError_2","setPreferredMFA","mfaMethod","userData","smsMfaSettings","totpMfaSettings","PreferredMfa","Enabled","currentMFAType","InvalidMFA","forEach","NoMFA","setUserMfaPreference","result","cleanUpError_3","disableSMS","disableMFA","enableSMS","enableMFA","setupTOTP","associateSoftwareToken","associateSecretCode","secretCode","verifyTotpToken","challengeAnswer","verifySoftwareToken","confirmSignIn","sendMFACode","e_3","completeNewPassword","completeNewPasswordChallenge","e_4","sendCustomChallengeAnswer","challengeResponses","EmptyChallengeResponse","deleteUserAttributes","attributeNames","userSession","then","deleteAttributes","deleteUser","e_5","isSignedInHostedUI","user_1","getCurrentUser","getSession","cleanUpError_4","signOut","cleanCachedItems","e","oAuthSignOutRedirect","updateUserAttributes","attributeList","indexOf","attr","updateAttributes","details","attrs","createUpdateAttributesResultList","CodeDeliveryDetailsList","codeDeliveryDetailsList","isUpdated","codeDeliveryDetails","find","AttributeName","getUserAttributes","verifiedContact","attributesToObject","unverified","verified","isErrorWithMessage","hasOwnProperty","call","isTokenRevokedError","isRefreshTokenRevokedError","isUserDisabledError","isUserDoesNotExistError","isRefreshTokenExpiredError","isOAuthInProgress","timeoutId","setTimeout","hostedUISignCallback","clearTimeout","_userSession","getAccessToken","decodePayload","scope","split","includes","cleanUpError_5","i","UserAttributes","attribute","userAttribute","err_1","catch","currentAuthenticatedUser","federatedUser","e_7","federatedInfo","JSON","__assign","token","e_8","currentSession","NoUserSession","cleanUpError_6","signInUserSession","e_9","refreshFederatedToken","get","verifyUserAttribute","getAttributeVerificationCode","success","verifyUserAttributeSubmit","verifyAttribute","verifyCurrentUserAttribute","verifyCurrentUserAttributeSubmit","cognitoIdentitySignOut","opts","e_10","global","cleanUpError_7","globalSignOut","isBrowser","oAuthSignOutRedirectOrReject","oAuthSignOutAndResolve","changePassword","oldPassword","newPassword","forgotPassword","inputVerificationCode","forgotPasswordSubmit","confirmPassword","currentUserInfo","source","getCredSource","userAttrs","credentials","e_12","info","id","identityId","err_2","federatedSignIn","providerOrOptions","response","provider","Cognito","customProvider","customState","client_id","clientID","redirect_uri","redirectUri","oauthSignIn","loggedInUser","stringify","identity_id","expires_at","URL","currentUrl","window","location","href","hasCodeOrError","query","entry","__read","k","hasTokenOrError","hash","substr","handleAuthResponse","accessToken","idToken","refreshToken","state","IdToken","RefreshToken","AccessToken","isCustomStateIncluded","test","getIdToken","setSignInUserSession","history","replaceState","splice","join","err_3","essentialCredentials","accessKeyId","sessionToken","secretAccessKey","authenticated","obj","isTruthyString","toLowerCase","Pool","authenticationFlowType","noUserPoolErrorHandler","MissingAuthConfig","NoConfig","type","rememberDevice","currUser","error_2","getCachedDeviceKeyAndPassword","setDeviceStatusRemembered","DeviceConfig","NetworkError","forgetDevice","error_3","fetchDevices","error_4","cb","deviceList","Devices","device","deviceName","DeviceAttributes","deviceInfo","DeviceKey","name","listDevices","register"],"sources":["/Users/ericli/node_modules/@aws-amplify/pubsub/node_modules/@aws-amplify/auth/src/Auth.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n\tAuthOptions,\n\tFederatedResponse,\n\tSignUpParams,\n\tFederatedUser,\n\tConfirmSignUpOptions,\n\tSignOutOpts,\n\tCurrentUserOpts,\n\tGetPreferredMFAOpts,\n\tSignInOpts,\n\tisUsernamePasswordOpts,\n\tisCognitoHostedOpts,\n\tisFederatedSignInOptions,\n\tisFederatedSignInOptionsCustom,\n\thasCustomState,\n\tFederatedSignInOptionsCustom,\n\tLegacyProvider,\n\tFederatedSignInOptions,\n\tAwsCognitoOAuthOpts,\n\tClientMetaData,\n} from './types';\n\nimport {\n\tAmplify,\n\tConsoleLogger as Logger,\n\tCredentials,\n\tHub,\n\tStorageHelper,\n\tICredentials,\n\tbrowserOrNode,\n\tparseAWSExports,\n\tUniversalStorage,\n\turlSafeDecode,\n\tHubCallback,\n} from '@aws-amplify/core';\nimport {\n\tCookieStorage,\n\tCognitoUserPool,\n\tAuthenticationDetails,\n\tICognitoUserPoolData,\n\tICognitoUserData,\n\tISignUpResult,\n\tCognitoUser,\n\tMFAOption,\n\tCognitoUserSession,\n\tIAuthenticationCallback,\n\tICognitoUserAttributeData,\n\tCognitoUserAttribute,\n\tCognitoIdToken,\n\tCognitoRefreshToken,\n\tCognitoAccessToken,\n\tNodeCallback,\n\tCodeDeliveryDetails,\n} from 'amazon-cognito-identity-js';\n\nimport { parse } from 'url';\nimport OAuth from './OAuth/OAuth';\nimport { default as urlListener } from './urlListener';\nimport { AuthError, NoUserPoolError } from './Errors';\nimport {\n\tAuthErrorTypes,\n\tAutoSignInOptions,\n\tCognitoHostedUIIdentityProvider,\n\tIAuthDevice,\n} from './types/Auth';\n\nconst logger = new Logger('AuthClass');\nconst USER_ADMIN_SCOPE = 'aws.cognito.signin.user.admin';\n\n// 10 sec, following this guide https://www.nngroup.com/articles/response-times-3-important-limits/\nconst OAUTH_FLOW_MS_TIMEOUT = 10 * 1000;\n\nconst AMPLIFY_SYMBOL = (\n\ttypeof Symbol !== 'undefined' && typeof Symbol.for === 'function'\n\t\t? Symbol.for('amplify_default')\n\t\t: '@@amplify_default'\n) as Symbol;\n\nconst dispatchAuthEvent = (event: string, data: any, message: string) => {\n\tHub.dispatch('auth', { event, data, message }, 'Auth', AMPLIFY_SYMBOL);\n};\n\n// Cognito Documentation for max device\n// tslint:disable-next-line:max-line-length\n// https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ListDevices.html#API_ListDevices_RequestSyntax\nconst MAX_DEVICES = 60;\n\nconst MAX_AUTOSIGNIN_POLLING_MS = 3 * 60 * 1000;\n\n/**\n * Provide authentication steps\n */\nexport class AuthClass {\n\tprivate _config: AuthOptions;\n\tprivate userPool: CognitoUserPool = null;\n\tprivate user: any = null;\n\tprivate _oAuthHandler: OAuth;\n\tprivate _storage;\n\tprivate _storageSync;\n\tprivate oAuthFlowInProgress: boolean = false;\n\tprivate pendingSignIn: ReturnType<AuthClass['signInWithPassword']> | null;\n\tprivate autoSignInInitiated: boolean = false;\n\tprivate inflightSessionPromise: Promise<CognitoUserSession> | null = null;\n\tprivate inflightSessionPromiseCounter: number = 0;\n\tCredentials = Credentials;\n\n\t/**\n\t * Initialize Auth with AWS configurations\n\t * @param {Object} config - Configuration of the Auth\n\t */\n\tconstructor(config: AuthOptions) {\n\t\tthis.configure(config);\n\t\tthis.currentCredentials = this.currentCredentials.bind(this);\n\t\tthis.currentUserCredentials = this.currentUserCredentials.bind(this);\n\n\t\tHub.listen('auth', ({ payload }) => {\n\t\t\tconst { event } = payload;\n\t\t\tswitch (event) {\n\t\t\t\tcase 'verify':\n\t\t\t\tcase 'signIn':\n\t\t\t\t\tthis._storage.setItem('amplify-signin-with-hostedUI', 'false');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'signOut':\n\t\t\t\t\tthis._storage.removeItem('amplify-signin-with-hostedUI');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'cognitoHostedUI':\n\t\t\t\t\tthis._storage.setItem('amplify-signin-with-hostedUI', 'true');\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic getModuleName() {\n\t\treturn 'Auth';\n\t}\n\n\tconfigure(config?) {\n\t\tif (!config) return this._config || {};\n\t\tlogger.debug('configure Auth');\n\t\tconst conf = Object.assign(\n\t\t\t{},\n\t\t\tthis._config,\n\t\t\tparseAWSExports(config).Auth,\n\t\t\tconfig\n\t\t);\n\t\tthis._config = conf;\n\t\tconst {\n\t\t\tuserPoolId,\n\t\t\tuserPoolWebClientId,\n\t\t\tcookieStorage,\n\t\t\toauth,\n\t\t\tregion,\n\t\t\tidentityPoolId,\n\t\t\tmandatorySignIn,\n\t\t\trefreshHandlers,\n\t\t\tidentityPoolRegion,\n\t\t\tclientMetadata,\n\t\t\tendpoint,\n\t\t} = this._config;\n\n\t\tif (!this._config.storage) {\n\t\t\t// backward compatability\n\t\t\tif (cookieStorage) this._storage = new CookieStorage(cookieStorage);\n\t\t\telse {\n\t\t\t\tthis._storage = config.ssr\n\t\t\t\t\t? new UniversalStorage()\n\t\t\t\t\t: new StorageHelper().getStorage();\n\t\t\t}\n\t\t} else {\n\t\t\tif (!this._isValidAuthStorage(this._config.storage)) {\n\t\t\t\tlogger.error('The storage in the Auth config is not valid!');\n\t\t\t\tthrow new Error('Empty storage object');\n\t\t\t}\n\t\t\tthis._storage = this._config.storage;\n\t\t}\n\n\t\tthis._storageSync = Promise.resolve();\n\t\tif (typeof this._storage['sync'] === 'function') {\n\t\t\tthis._storageSync = this._storage['sync']();\n\t\t}\n\n\t\tif (userPoolId) {\n\t\t\tconst userPoolData: ICognitoUserPoolData = {\n\t\t\t\tUserPoolId: userPoolId,\n\t\t\t\tClientId: userPoolWebClientId,\n\t\t\t\tendpoint,\n\t\t\t};\n\t\t\tuserPoolData.Storage = this._storage;\n\n\t\t\tthis.userPool = new CognitoUserPool(\n\t\t\t\tuserPoolData,\n\t\t\t\tthis.wrapRefreshSessionCallback\n\t\t\t);\n\t\t}\n\n\t\tthis.Credentials.configure({\n\t\t\tmandatorySignIn,\n\t\t\tregion,\n\t\t\tuserPoolId,\n\t\t\tidentityPoolId,\n\t\t\trefreshHandlers,\n\t\t\tstorage: this._storage,\n\t\t\tidentityPoolRegion\n\t\t});\n\n\t\t// initialize cognitoauth client if hosted ui options provided\n\t\t// to keep backward compatibility:\n\t\tconst cognitoHostedUIConfig = oauth\n\t\t\t? isCognitoHostedOpts(this._config.oauth)\n\t\t\t\t? oauth\n\t\t\t\t: (<any>oauth).awsCognito\n\t\t\t: undefined;\n\n\t\tif (cognitoHostedUIConfig) {\n\t\t\tconst cognitoAuthParams = Object.assign(\n\t\t\t\t{\n\t\t\t\t\tcognitoClientId: userPoolWebClientId,\n\t\t\t\t\tUserPoolId: userPoolId,\n\t\t\t\t\tdomain: cognitoHostedUIConfig['domain'],\n\t\t\t\t\tscopes: cognitoHostedUIConfig['scope'],\n\t\t\t\t\tredirectSignIn: cognitoHostedUIConfig['redirectSignIn'],\n\t\t\t\t\tredirectSignOut: cognitoHostedUIConfig['redirectSignOut'],\n\t\t\t\t\tresponseType: cognitoHostedUIConfig['responseType'],\n\t\t\t\t\tStorage: this._storage,\n\t\t\t\t\turlOpener: cognitoHostedUIConfig['urlOpener'],\n\t\t\t\t\tclientMetadata,\n\t\t\t\t},\n\t\t\t\tcognitoHostedUIConfig['options']\n\t\t\t);\n\n\t\t\tthis._oAuthHandler = new OAuth({\n\t\t\t\tscopes: cognitoAuthParams.scopes,\n\t\t\t\tconfig: cognitoAuthParams,\n\t\t\t\tcognitoClientId: cognitoAuthParams.cognitoClientId,\n\t\t\t});\n\n\t\t\t// **NOTE** - Remove this in a future major release as it is a breaking change\n\t\t\t// Prevents _handleAuthResponse from being called multiple times in Expo\n\t\t\t// See https://github.com/aws-amplify/amplify-js/issues/4388\n\t\t\tconst usedResponseUrls = {};\n\t\t\turlListener(({ url }) => {\n\t\t\t\tif (usedResponseUrls[url]) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tusedResponseUrls[url] = true;\n\t\t\t\tthis._handleAuthResponse(url);\n\t\t\t});\n\t\t}\n\n\t\tdispatchAuthEvent(\n\t\t\t'configured',\n\t\t\tnull,\n\t\t\t`The Auth category has been configured successfully`\n\t\t);\n\n\t\tif (\n\t\t\t!this.autoSignInInitiated &&\n\t\t\ttypeof this._storage['getItem'] === 'function'\n\t\t) {\n\t\t\tconst pollingInitiated = this.isTrueStorageValue(\n\t\t\t\t'amplify-polling-started'\n\t\t\t);\n\t\t\tif (pollingInitiated) {\n\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t'autoSignIn_failure',\n\t\t\t\t\tnull,\n\t\t\t\t\tAuthErrorTypes.AutoSignInError\n\t\t\t\t);\n\t\t\t\tthis._storage.removeItem('amplify-auto-sign-in');\n\t\t\t}\n\t\t\tthis._storage.removeItem('amplify-polling-started');\n\t\t}\n\t\treturn this._config;\n\t}\n\n\twrapRefreshSessionCallback = (callback: NodeCallback.Any) => {\n\t\tconst wrapped: NodeCallback.Any = (error, data) => {\n\t\t\tif (data) {\n\t\t\t\tdispatchAuthEvent('tokenRefresh', undefined, `New token retrieved`);\n\t\t\t} else {\n\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t'tokenRefresh_failure',\n\t\t\t\t\terror,\n\t\t\t\t\t`Failed to retrieve new token`\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn callback(error, data);\n\t\t};\n\t\treturn wrapped;\n\t} // prettier-ignore\n\n\t/**\n\t * Sign up with username, password and other attributes like phone, email\n\t * @param {String | object} params - The user attributes used for signin\n\t * @param {String[]} restOfAttrs - for the backward compatability\n\t * @return - A promise resolves callback data if success\n\t */\n\tpublic signUp(\n\t\tparams: string | SignUpParams,\n\t\t...restOfAttrs: string[]\n\t): Promise<ISignUpResult> {\n\t\tif (!this.userPool) {\n\t\t\treturn this.rejectNoUserPool();\n\t\t}\n\n\t\tlet username: string = null;\n\t\tlet password: string = null;\n\t\tconst attributes: CognitoUserAttribute[] = [];\n\t\tlet validationData: CognitoUserAttribute[] = null;\n\t\tlet clientMetadata;\n\t\tlet autoSignIn: AutoSignInOptions = { enabled: false };\n\t\tlet autoSignInValidationData = {};\n\t\tlet autoSignInClientMetaData: ClientMetaData = {};\n\n\t\tif (params && typeof params === 'string') {\n\t\t\tusername = params;\n\t\t\tpassword = restOfAttrs ? restOfAttrs[0] : null;\n\t\t\tconst email: string = restOfAttrs ? restOfAttrs[1] : null;\n\t\t\tconst phone_number: string = restOfAttrs ? restOfAttrs[2] : null;\n\n\t\t\tif (email)\n\t\t\t\tattributes.push(\n\t\t\t\t\tnew CognitoUserAttribute({ Name: 'email', Value: email })\n\t\t\t\t);\n\n\t\t\tif (phone_number)\n\t\t\t\tattributes.push(\n\t\t\t\t\tnew CognitoUserAttribute({\n\t\t\t\t\t\tName: 'phone_number',\n\t\t\t\t\t\tValue: phone_number,\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t} else if (params && typeof params === 'object') {\n\t\t\tusername = params['username'];\n\t\t\tpassword = params['password'];\n\n\t\t\tif (params && params.clientMetadata) {\n\t\t\t\tclientMetadata = params.clientMetadata;\n\t\t\t} else if (this._config.clientMetadata) {\n\t\t\t\tclientMetadata = this._config.clientMetadata;\n\t\t\t}\n\n\t\t\tconst attrs = params['attributes'];\n\t\t\tif (attrs) {\n\t\t\t\tObject.keys(attrs).map(key => {\n\t\t\t\t\tattributes.push(\n\t\t\t\t\t\tnew CognitoUserAttribute({ Name: key, Value: attrs[key] })\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst validationDataObject = params['validationData'];\n\t\t\tif (validationDataObject) {\n\t\t\t\tvalidationData = [];\n\t\t\t\tObject.keys(validationDataObject).map(key => {\n\t\t\t\t\tvalidationData.push(\n\t\t\t\t\t\tnew CognitoUserAttribute({\n\t\t\t\t\t\t\tName: key,\n\t\t\t\t\t\t\tValue: validationDataObject[key],\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tautoSignIn = params.autoSignIn ?? { enabled: false };\n\t\t\tif (autoSignIn.enabled) {\n\t\t\t\tthis._storage.setItem('amplify-auto-sign-in', 'true');\n\t\t\t\tautoSignInValidationData = autoSignIn.validationData ?? {};\n\t\t\t\tautoSignInClientMetaData = autoSignIn.clientMetaData ?? {};\n\t\t\t}\n\t\t} else {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.SignUpError);\n\t\t}\n\n\t\tif (!username) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n\t\t}\n\t\tif (!password) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyPassword);\n\t\t}\n\n\t\tlogger.debug('signUp attrs:', attributes);\n\t\tlogger.debug('signUp validation data:', validationData);\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.userPool.signUp(\n\t\t\t\tusername,\n\t\t\t\tpassword,\n\t\t\t\tattributes,\n\t\t\t\tvalidationData,\n\t\t\t\t(err, data) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'signUp_failure',\n\t\t\t\t\t\t\terr,\n\t\t\t\t\t\t\t`${username} failed to signup`\n\t\t\t\t\t\t);\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'signUp',\n\t\t\t\t\t\t\tdata,\n\t\t\t\t\t\t\t`${username} has signed up successfully`\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (autoSignIn.enabled) {\n\t\t\t\t\t\t\tthis.handleAutoSignIn(\n\t\t\t\t\t\t\t\tusername,\n\t\t\t\t\t\t\t\tpassword,\n\t\t\t\t\t\t\t\tautoSignInValidationData,\n\t\t\t\t\t\t\t\tautoSignInClientMetaData,\n\t\t\t\t\t\t\t\tdata\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve(data);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tclientMetadata\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate handleAutoSignIn(\n\t\tusername: string,\n\t\tpassword: string,\n\t\tvalidationData: {},\n\t\tclientMetadata: any,\n\t\tdata: any\n\t) {\n\t\tthis.autoSignInInitiated = true;\n\t\tconst authDetails = new AuthenticationDetails({\n\t\t\tUsername: username,\n\t\t\tPassword: password,\n\t\t\tValidationData: validationData,\n\t\t\tClientMetadata: clientMetadata,\n\t\t});\n\t\tif (data.userConfirmed) {\n\t\t\tthis.signInAfterUserConfirmed(authDetails);\n\t\t} else if (this._config.signUpVerificationMethod === 'link') {\n\t\t\tthis.handleLinkAutoSignIn(authDetails);\n\t\t} else {\n\t\t\tthis.handleCodeAutoSignIn(authDetails);\n\t\t}\n\t}\n\n\tprivate handleCodeAutoSignIn(authDetails: AuthenticationDetails) {\n\t\tconst listenEvent = ({ payload }) => {\n\t\t\tif (payload.event === 'confirmSignUp') {\n\t\t\t\tthis.signInAfterUserConfirmed(authDetails, listenEvent);\n\t\t\t}\n\t\t};\n\t\tHub.listen('auth', listenEvent);\n\t}\n\n\tprivate handleLinkAutoSignIn(authDetails: AuthenticationDetails) {\n\t\tthis._storage.setItem('amplify-polling-started', 'true');\n\t\tconst start = Date.now();\n\t\tconst autoSignInPollingIntervalId = setInterval(() => {\n\t\t\tif (Date.now() - start > MAX_AUTOSIGNIN_POLLING_MS) {\n\t\t\t\tclearInterval(autoSignInPollingIntervalId);\n\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t'autoSignIn_failure',\n\t\t\t\t\tnull,\n\t\t\t\t\t'Please confirm your account and use your credentials to sign in.'\n\t\t\t\t);\n\t\t\t\tthis._storage.removeItem('amplify-auto-sign-in');\n\t\t\t} else {\n\t\t\t\tthis.signInAfterUserConfirmed(\n\t\t\t\t\tauthDetails,\n\t\t\t\t\tnull,\n\t\t\t\t\tautoSignInPollingIntervalId\n\t\t\t\t);\n\t\t\t}\n\t\t}, 5000);\n\t}\n\n\tprivate async signInAfterUserConfirmed(\n\t\tauthDetails: AuthenticationDetails,\n\t\tlistenEvent?: HubCallback,\n\t\tautoSignInPollingIntervalId?: ReturnType<typeof setInterval>\n\t) {\n\t\tconst user = this.createCognitoUser(authDetails.getUsername());\n\t\ttry {\n\t\t\tawait user.authenticateUser(\n\t\t\t\tauthDetails,\n\t\t\t\tthis.authCallbacks(\n\t\t\t\t\tuser,\n\t\t\t\t\tvalue => {\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'autoSignIn',\n\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\t`${authDetails.getUsername()} has signed in successfully`\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (listenEvent) {\n\t\t\t\t\t\t\tHub.remove('auth', listenEvent);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (autoSignInPollingIntervalId) {\n\t\t\t\t\t\t\tclearInterval(autoSignInPollingIntervalId);\n\t\t\t\t\t\t\tthis._storage.removeItem('amplify-polling-started');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._storage.removeItem('amplify-auto-sign-in');\n\t\t\t\t\t},\n\t\t\t\t\terror => {\n\t\t\t\t\t\tlogger.error(error);\n\t\t\t\t\t\tthis._storage.removeItem('amplify-auto-sign-in');\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tlogger.error(error);\n\t\t}\n\t}\n\n\t/**\n\t * Send the verification code to confirm sign up\n\t * @param {String} username - The username to be confirmed\n\t * @param {String} code - The verification code\n\t * @param {ConfirmSignUpOptions} options - other options for confirm signup\n\t * @return - A promise resolves callback data if success\n\t */\n\tpublic confirmSignUp(\n\t\tusername: string,\n\t\tcode: string,\n\t\toptions?: ConfirmSignUpOptions\n\t): Promise<any> {\n\t\tif (!this.userPool) {\n\t\t\treturn this.rejectNoUserPool();\n\t\t}\n\t\tif (!username) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n\t\t}\n\t\tif (!code) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyCode);\n\t\t}\n\n\t\tconst user = this.createCognitoUser(username);\n\t\tconst forceAliasCreation =\n\t\t\toptions && typeof options.forceAliasCreation === 'boolean'\n\t\t\t\t? options.forceAliasCreation\n\t\t\t\t: true;\n\n\t\tlet clientMetadata;\n\t\tif (options && options.clientMetadata) {\n\t\t\tclientMetadata = options.clientMetadata;\n\t\t} else if (this._config.clientMetadata) {\n\t\t\tclientMetadata = this._config.clientMetadata;\n\t\t}\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.confirmRegistration(\n\t\t\t\tcode,\n\t\t\t\tforceAliasCreation,\n\t\t\t\t(err, data) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'confirmSignUp',\n\t\t\t\t\t\t\tdata,\n\t\t\t\t\t\t\t`${username} has been confirmed successfully`\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst autoSignIn = this.isTrueStorageValue('amplify-auto-sign-in');\n\t\t\t\t\t\tif (autoSignIn && !this.autoSignInInitiated) {\n\t\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t\t'autoSignIn_failure',\n\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\tAuthErrorTypes.AutoSignInError\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tthis._storage.removeItem('amplify-auto-sign-in');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve(data);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tclientMetadata\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate isTrueStorageValue(value: string) {\n\t\tconst item = this._storage.getItem(value);\n\t\treturn item ? item === 'true' : false;\n\t}\n\n\t/**\n\t * Resend the verification code\n\t * @param {String} username - The username to be confirmed\n\t * @param {ClientMetadata} clientMetadata - Metadata to be passed to Cognito Lambda triggers\n\t * @return - A promise resolves code delivery details if successful\n\t */\n\tpublic resendSignUp(\n\t\tusername: string,\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<any> {\n\t\tif (!this.userPool) {\n\t\t\treturn this.rejectNoUserPool();\n\t\t}\n\t\tif (!username) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n\t\t}\n\n\t\tconst user = this.createCognitoUser(username);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.resendConfirmationCode((err, data) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(data);\n\t\t\t\t}\n\t\t\t}, clientMetadata);\n\t\t});\n\t}\n\n\t/**\n\t * Sign in\n\t * @param {String | SignInOpts} usernameOrSignInOpts - The username to be signed in or the sign in options\n\t * @param {String} pw - The password of the username\n\t * @param {ClientMetaData} clientMetadata - Client metadata for custom workflows\n\t * @return - A promise resolves the CognitoUser\n\t */\n\tpublic signIn(\n\t\tusernameOrSignInOpts: string | SignInOpts,\n\t\tpw?: string,\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<CognitoUser | any> {\n\t\tif (!this.userPool) {\n\t\t\treturn this.rejectNoUserPool();\n\t\t}\n\n\t\tlet username = null;\n\t\tlet password = null;\n\t\tlet validationData = {};\n\n\t\t// for backward compatibility\n\t\tif (typeof usernameOrSignInOpts === 'string') {\n\t\t\tusername = usernameOrSignInOpts;\n\t\t\tpassword = pw;\n\t\t} else if (isUsernamePasswordOpts(usernameOrSignInOpts)) {\n\t\t\tif (typeof pw !== 'undefined') {\n\t\t\t\tlogger.warn(\n\t\t\t\t\t'The password should be defined under the first parameter object!'\n\t\t\t\t);\n\t\t\t}\n\t\t\tusername = usernameOrSignInOpts.username;\n\t\t\tpassword = usernameOrSignInOpts.password;\n\t\t\tvalidationData = usernameOrSignInOpts.validationData;\n\t\t} else {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.InvalidUsername);\n\t\t}\n\t\tif (!username) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n\t\t}\n\t\tconst authDetails = new AuthenticationDetails({\n\t\t\tUsername: username,\n\t\t\tPassword: password,\n\t\t\tValidationData: validationData,\n\t\t\tClientMetadata: clientMetadata,\n\t\t});\n\t\tif (password) {\n\t\t\treturn this.signInWithPassword(authDetails);\n\t\t} else {\n\t\t\treturn this.signInWithoutPassword(authDetails);\n\t\t}\n\t}\n\n\t/**\n\t * Return an object with the authentication callbacks\n\t * @param {CognitoUser} user - the cognito user object\n\t * @param {} resolve - function called when resolving the current step\n\t * @param {} reject - function called when rejecting the current step\n\t * @return - an object with the callback methods for user authentication\n\t */\n\tprivate authCallbacks(\n\t\tuser: CognitoUser,\n\t\tresolve: (value?: CognitoUser | any) => void,\n\t\treject: (value?: any) => void\n\t): IAuthenticationCallback {\n\t\tconst that = this;\n\t\treturn {\n\t\t\tonSuccess: async session => {\n\t\t\t\tlogger.debug(session);\n\t\t\t\tdelete user['challengeName'];\n\t\t\t\tdelete user['challengeParam'];\n\t\t\t\ttry {\n\t\t\t\t\tawait this.Credentials.clear();\n\t\t\t\t\tconst cred = await this.Credentials.set(session, 'session');\n\t\t\t\t\tlogger.debug('succeed to get cognito credentials', cred);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tlogger.debug('cannot get cognito credentials', e);\n\t\t\t\t} finally {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// In order to get user attributes and MFA methods\n\t\t\t\t\t\t// We need to trigger currentUserPoolUser again\n\t\t\t\t\t\tconst currentUser = await this.currentUserPoolUser();\n\t\t\t\t\t\tthat.user = currentUser;\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'signIn',\n\t\t\t\t\t\t\tcurrentUser,\n\t\t\t\t\t\t\t`A user ${user.getUsername()} has been signed in`\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresolve(currentUser);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tlogger.error('Failed to get the signed in user', e);\n\t\t\t\t\t\treject(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tonFailure: err => {\n\t\t\t\tlogger.debug('signIn failure', err);\n\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t'signIn_failure',\n\t\t\t\t\terr,\n\t\t\t\t\t`${user.getUsername()} failed to signin`\n\t\t\t\t);\n\t\t\t\treject(err);\n\t\t\t},\n\t\t\tcustomChallenge: challengeParam => {\n\t\t\t\tlogger.debug('signIn custom challenge answer required');\n\t\t\t\tuser['challengeName'] = 'CUSTOM_CHALLENGE';\n\t\t\t\tuser['challengeParam'] = challengeParam;\n\t\t\t\tresolve(user);\n\t\t\t},\n\t\t\tmfaRequired: (challengeName, challengeParam) => {\n\t\t\t\tlogger.debug('signIn MFA required');\n\t\t\t\tuser['challengeName'] = challengeName;\n\t\t\t\tuser['challengeParam'] = challengeParam;\n\t\t\t\tresolve(user);\n\t\t\t},\n\t\t\tmfaSetup: (challengeName, challengeParam) => {\n\t\t\t\tlogger.debug('signIn mfa setup', challengeName);\n\t\t\t\tuser['challengeName'] = challengeName;\n\t\t\t\tuser['challengeParam'] = challengeParam;\n\t\t\t\tresolve(user);\n\t\t\t},\n\t\t\tnewPasswordRequired: (userAttributes, requiredAttributes) => {\n\t\t\t\tlogger.debug('signIn new password');\n\t\t\t\tuser['challengeName'] = 'NEW_PASSWORD_REQUIRED';\n\t\t\t\tuser['challengeParam'] = {\n\t\t\t\t\tuserAttributes,\n\t\t\t\t\trequiredAttributes,\n\t\t\t\t};\n\t\t\t\tresolve(user);\n\t\t\t},\n\t\t\ttotpRequired: (challengeName, challengeParam) => {\n\t\t\t\tlogger.debug('signIn totpRequired');\n\t\t\t\tuser['challengeName'] = challengeName;\n\t\t\t\tuser['challengeParam'] = challengeParam;\n\t\t\t\tresolve(user);\n\t\t\t},\n\t\t\tselectMFAType: (challengeName, challengeParam) => {\n\t\t\t\tlogger.debug('signIn selectMFAType', challengeName);\n\t\t\t\tuser['challengeName'] = challengeName;\n\t\t\t\tuser['challengeParam'] = challengeParam;\n\t\t\t\tresolve(user);\n\t\t\t},\n\t\t};\n\t}\n\n\t/**\n\t * Sign in with a password\n\t * @private\n\t * @param {AuthenticationDetails} authDetails - the user sign in data\n\t * @return - A promise resolves the CognitoUser object if success or mfa required\n\t */\n\tprivate signInWithPassword(\n\t\tauthDetails: AuthenticationDetails\n\t): Promise<CognitoUser | any> {\n\t\tif (this.pendingSignIn) {\n\t\t\tthrow new Error('Pending sign-in attempt already in progress');\n\t\t}\n\n\t\tconst user = this.createCognitoUser(authDetails.getUsername());\n\n\t\tthis.pendingSignIn = new Promise((resolve, reject) => {\n\t\t\tuser.authenticateUser(\n\t\t\t\tauthDetails,\n\t\t\t\tthis.authCallbacks(\n\t\t\t\t\tuser,\n\t\t\t\t\tvalue => {\n\t\t\t\t\t\tthis.pendingSignIn = null;\n\t\t\t\t\t\tresolve(value);\n\t\t\t\t\t},\n\t\t\t\t\terror => {\n\t\t\t\t\t\tthis.pendingSignIn = null;\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t);\n\t\t});\n\n\t\treturn this.pendingSignIn;\n\t}\n\n\t/**\n\t * Sign in without a password\n\t * @private\n\t * @param {AuthenticationDetails} authDetails - the user sign in data\n\t * @return - A promise resolves the CognitoUser object if success or mfa required\n\t */\n\tprivate signInWithoutPassword(\n\t\tauthDetails: AuthenticationDetails\n\t): Promise<CognitoUser | any> {\n\t\tconst user = this.createCognitoUser(authDetails.getUsername());\n\t\tuser.setAuthenticationFlowType('CUSTOM_AUTH');\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.initiateAuth(authDetails, this.authCallbacks(user, resolve, reject));\n\t\t});\n\t}\n\n\t/**\n\t * This was previously used by an authenticated user to get MFAOptions,\n\t * but no longer returns a meaningful response. Refer to the documentation for\n\t * how to setup and use MFA: https://docs.amplify.aws/lib/auth/mfa/q/platform/js\n\t * @deprecated\n\t * @param {CognitoUser} user - the current user\n\t * @return - A promise resolves the current preferred mfa option if success\n\t */\n\tpublic getMFAOptions(user: CognitoUser | any): Promise<MFAOption[]> {\n\t\treturn new Promise((res, rej) => {\n\t\t\tuser.getMFAOptions((err, mfaOptions) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tlogger.debug('get MFA Options failed', err);\n\t\t\t\t\trej(err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tlogger.debug('get MFA options success', mfaOptions);\n\t\t\t\tres(mfaOptions);\n\t\t\t\treturn;\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * get preferred mfa method\n\t * @param {CognitoUser} user - the current cognito user\n\t * @param {GetPreferredMFAOpts} params - options for getting the current user preferred MFA\n\t */\n\tpublic getPreferredMFA(\n\t\tuser: CognitoUser | any,\n\t\tparams?: GetPreferredMFAOpts\n\t): Promise<string> {\n\t\tconst that = this;\n\t\treturn new Promise((res, rej) => {\n\t\t\tconst clientMetadata = this._config.clientMetadata; // TODO: verify behavior if this is override during signIn\n\n\t\t\tconst bypassCache = params ? params.bypassCache : false;\n\t\t\tuser.getUserData(\n\t\t\t\tasync (err, data) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tlogger.debug('getting preferred mfa failed', err);\n\t\t\t\t\t\tif (this.isSessionInvalid(err)) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tawait this.cleanUpInvalidSession(user);\n\t\t\t\t\t\t\t} catch (cleanUpError) {\n\t\t\t\t\t\t\t\trej(\n\t\t\t\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t\t\t\t`Session is invalid due to: ${err.message} and failed to clean up invalid session: ${cleanUpError.message}`\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\trej(err);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst mfaType = that._getMfaTypeFromUserData(data);\n\t\t\t\t\tif (!mfaType) {\n\t\t\t\t\t\trej('invalid MFA Type');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tres(mfaType);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{ bypassCache, clientMetadata }\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate _getMfaTypeFromUserData(data) {\n\t\tlet ret = null;\n\t\tconst preferredMFA = data.PreferredMfaSetting;\n\t\t// if the user has used Auth.setPreferredMFA() to setup the mfa type\n\t\t// then the \"PreferredMfaSetting\" would exist in the response\n\t\tif (preferredMFA) {\n\t\t\tret = preferredMFA;\n\t\t} else {\n\t\t\t// if mfaList exists but empty, then its noMFA\n\t\t\tconst mfaList = data.UserMFASettingList;\n\t\t\tif (!mfaList) {\n\t\t\t\t// if SMS was enabled by using Auth.enableSMS(),\n\t\t\t\t// the response would contain MFAOptions\n\t\t\t\t// as for now Cognito only supports for SMS, so we will say it is 'SMS_MFA'\n\t\t\t\t// if it does not exist, then it should be NOMFA\n\t\t\t\tconst MFAOptions = data.MFAOptions;\n\t\t\t\tif (MFAOptions) {\n\t\t\t\t\tret = 'SMS_MFA';\n\t\t\t\t} else {\n\t\t\t\t\tret = 'NOMFA';\n\t\t\t\t}\n\t\t\t} else if (mfaList.length === 0) {\n\t\t\t\tret = 'NOMFA';\n\t\t\t} else {\n\t\t\t\tlogger.debug('invalid case for getPreferredMFA', data);\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\n\tprivate _getUserData(user, params) {\n\t\treturn new Promise((res, rej) => {\n\t\t\tuser.getUserData(async (err, data) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tlogger.debug('getting user data failed', err);\n\t\t\t\t\tif (this.isSessionInvalid(err)) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait this.cleanUpInvalidSession(user);\n\t\t\t\t\t\t} catch (cleanUpError) {\n\t\t\t\t\t\t\trej(\n\t\t\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t\t\t`Session is invalid due to: ${err.message} and failed to clean up invalid session: ${cleanUpError.message}`\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\trej(err);\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tres(data);\n\t\t\t\t}\n\t\t\t}, params);\n\t\t});\n\t}\n\n\t/**\n\t * set preferred MFA method\n\t * @param {CognitoUser} user - the current Cognito user\n\t * @param {string} mfaMethod - preferred mfa method\n\t * @return - A promise resolve if success\n\t */\n\tpublic async setPreferredMFA(\n\t\tuser: CognitoUser | any,\n\t\tmfaMethod: 'TOTP' | 'SMS' | 'NOMFA' | 'SMS_MFA' | 'SOFTWARE_TOKEN_MFA'\n\t): Promise<string> {\n\t\tconst clientMetadata = this._config.clientMetadata; // TODO: verify behavior if this is override during signIn\n\n\t\tconst userData = await this._getUserData(user, {\n\t\t\tbypassCache: true,\n\t\t\tclientMetadata,\n\t\t});\n\t\tlet smsMfaSettings = null;\n\t\tlet totpMfaSettings = null;\n\n\t\tswitch (mfaMethod) {\n\t\t\tcase 'TOTP':\n\t\t\tcase 'SOFTWARE_TOKEN_MFA':\n\t\t\t\ttotpMfaSettings = {\n\t\t\t\t\tPreferredMfa: true,\n\t\t\t\t\tEnabled: true,\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase 'SMS':\n\t\t\tcase 'SMS_MFA':\n\t\t\t\tsmsMfaSettings = {\n\t\t\t\t\tPreferredMfa: true,\n\t\t\t\t\tEnabled: true,\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase 'NOMFA':\n\t\t\t\tconst mfaList = userData['UserMFASettingList'];\n\t\t\t\tconst currentMFAType = await this._getMfaTypeFromUserData(userData);\n\t\t\t\tif (currentMFAType === 'NOMFA') {\n\t\t\t\t\treturn Promise.resolve('No change for mfa type');\n\t\t\t\t} else if (currentMFAType === 'SMS_MFA') {\n\t\t\t\t\tsmsMfaSettings = {\n\t\t\t\t\t\tPreferredMfa: false,\n\t\t\t\t\t\tEnabled: false,\n\t\t\t\t\t};\n\t\t\t\t} else if (currentMFAType === 'SOFTWARE_TOKEN_MFA') {\n\t\t\t\t\ttotpMfaSettings = {\n\t\t\t\t\t\tPreferredMfa: false,\n\t\t\t\t\t\tEnabled: false,\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\treturn this.rejectAuthError(AuthErrorTypes.InvalidMFA);\n\t\t\t\t}\n\t\t\t\t// if there is a UserMFASettingList in the response\n\t\t\t\t// we need to disable every mfa type in that list\n\t\t\t\tif (mfaList && mfaList.length !== 0) {\n\t\t\t\t\t// to disable SMS or TOTP if exists in that list\n\t\t\t\t\tmfaList.forEach(mfaType => {\n\t\t\t\t\t\tif (mfaType === 'SMS_MFA') {\n\t\t\t\t\t\t\tsmsMfaSettings = {\n\t\t\t\t\t\t\t\tPreferredMfa: false,\n\t\t\t\t\t\t\t\tEnabled: false,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else if (mfaType === 'SOFTWARE_TOKEN_MFA') {\n\t\t\t\t\t\t\ttotpMfaSettings = {\n\t\t\t\t\t\t\t\tPreferredMfa: false,\n\t\t\t\t\t\t\t\tEnabled: false,\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tlogger.debug('no validmfa method provided');\n\t\t\t\treturn this.rejectAuthError(AuthErrorTypes.NoMFA);\n\t\t}\n\n\t\tconst that = this;\n\t\treturn new Promise<string>((res, rej) => {\n\t\t\tuser.setUserMfaPreference(\n\t\t\t\tsmsMfaSettings,\n\t\t\t\ttotpMfaSettings,\n\t\t\t\t(err, result) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tlogger.debug('Set user mfa preference error', err);\n\t\t\t\t\t\treturn rej(err);\n\t\t\t\t\t}\n\t\t\t\t\tlogger.debug('Set user mfa success', result);\n\t\t\t\t\tlogger.debug('Caching the latest user data into local');\n\t\t\t\t\t// cache the latest result into user data\n\t\t\t\t\tuser.getUserData(\n\t\t\t\t\t\tasync (err, data) => {\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\tlogger.debug('getting user data failed', err);\n\t\t\t\t\t\t\t\tif (this.isSessionInvalid(err)) {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tawait this.cleanUpInvalidSession(user);\n\t\t\t\t\t\t\t\t\t} catch (cleanUpError) {\n\t\t\t\t\t\t\t\t\t\trej(\n\t\t\t\t\t\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t\t\t\t\t\t`Session is invalid due to: ${err.message} and failed to clean up invalid session: ${cleanUpError.message}`\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn rej(err);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn res(result);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbypassCache: true,\n\t\t\t\t\t\t\tclientMetadata,\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * disable SMS\n\t * @deprecated\n\t * @param {CognitoUser} user - the current user\n\t * @return - A promise resolves is success\n\t */\n\tpublic disableSMS(user: CognitoUser): Promise<string> {\n\t\treturn new Promise((res, rej) => {\n\t\t\tuser.disableMFA((err, data) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tlogger.debug('disable mfa failed', err);\n\t\t\t\t\trej(err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tlogger.debug('disable mfa succeed', data);\n\t\t\t\tres(data);\n\t\t\t\treturn;\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * enable SMS\n\t * @deprecated\n\t * @param {CognitoUser} user - the current user\n\t * @return - A promise resolves is success\n\t */\n\tpublic enableSMS(user: CognitoUser): Promise<string> {\n\t\treturn new Promise((res, rej) => {\n\t\t\tuser.enableMFA((err, data) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tlogger.debug('enable mfa failed', err);\n\t\t\t\t\trej(err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tlogger.debug('enable mfa succeed', data);\n\t\t\t\tres(data);\n\t\t\t\treturn;\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Setup TOTP\n\t * @param {CognitoUser} user - the current user\n\t * @return - A promise resolves with the secret code if success\n\t */\n\tpublic setupTOTP(user: CognitoUser | any): Promise<string> {\n\t\treturn new Promise((res, rej) => {\n\t\t\tuser.associateSoftwareToken({\n\t\t\t\tonFailure: err => {\n\t\t\t\t\tlogger.debug('associateSoftwareToken failed', err);\n\t\t\t\t\trej(err);\n\t\t\t\t\treturn;\n\t\t\t\t},\n\t\t\t\tassociateSecretCode: secretCode => {\n\t\t\t\t\tlogger.debug('associateSoftwareToken sucess', secretCode);\n\t\t\t\t\tres(secretCode);\n\t\t\t\t\treturn;\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * verify TOTP setup\n\t * @param {CognitoUser} user - the current user\n\t * @param {string} challengeAnswer - challenge answer\n\t * @return - A promise resolves is success\n\t */\n\tpublic verifyTotpToken(\n\t\tuser: CognitoUser | any,\n\t\tchallengeAnswer: string\n\t): Promise<CognitoUserSession> {\n\t\tlogger.debug('verification totp token', user, challengeAnswer);\n\t\treturn new Promise((res, rej) => {\n\t\t\tuser.verifySoftwareToken(challengeAnswer, 'My TOTP device', {\n\t\t\t\tonFailure: err => {\n\t\t\t\t\tlogger.debug('verifyTotpToken failed', err);\n\t\t\t\t\trej(err);\n\t\t\t\t\treturn;\n\t\t\t\t},\n\t\t\t\tonSuccess: data => {\n\t\t\t\t\tdispatchAuthEvent('signIn', user, `A user ${user.getUsername()} has been signed in`);\n\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t'verify',\n\t\t\t\t\t\tuser,\n\t\t\t\t\t\t`A user ${user.getUsername()} has been verified`\n\t\t\t\t\t);\n\t\t\t\t\tlogger.debug('verifyTotpToken success', data);\n\t\t\t\t\tres(data);\n\t\t\t\t\treturn;\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Send MFA code to confirm sign in\n\t * @param {Object} user - The CognitoUser object\n\t * @param {String} code - The confirmation code\n\t */\n\tpublic confirmSignIn(\n\t\tuser: CognitoUser | any,\n\t\tcode: string,\n\t\tmfaType?: 'SMS_MFA' | 'SOFTWARE_TOKEN_MFA' | null,\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<CognitoUser | any> {\n\t\tif (!code) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyCode);\n\t\t}\n\n\t\tconst that = this;\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.sendMFACode(\n\t\t\t\tcode,\n\t\t\t\t{\n\t\t\t\t\tonSuccess: async session => {\n\t\t\t\t\t\tlogger.debug(session);\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait this.Credentials.clear();\n\t\t\t\t\t\t\tconst cred = await this.Credentials.set(session, 'session');\n\t\t\t\t\t\t\tlogger.debug('succeed to get cognito credentials', cred);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tlogger.debug('cannot get cognito credentials', e);\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tthat.user = user;\n\n\t\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t\t'signIn',\n\t\t\t\t\t\t\t\tuser,\n\t\t\t\t\t\t\t\t`A user ${user.getUsername()} has been signed in`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tresolve(user);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonFailure: err => {\n\t\t\t\t\t\tlogger.debug('confirm signIn failure', err);\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tmfaType,\n\t\t\t\tclientMetadata\n\t\t\t);\n\t\t});\n\t}\n\n\tpublic completeNewPassword(\n\t\tuser: CognitoUser | any,\n\t\tpassword: string,\n\t\trequiredAttributes: any = {},\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<CognitoUser | any> {\n\t\tif (!password) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyPassword);\n\t\t}\n\n\t\tconst that = this;\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.completeNewPasswordChallenge(\n\t\t\t\tpassword,\n\t\t\t\trequiredAttributes,\n\t\t\t\t{\n\t\t\t\t\tonSuccess: async session => {\n\t\t\t\t\t\tlogger.debug(session);\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait this.Credentials.clear();\n\t\t\t\t\t\t\tconst cred = await this.Credentials.set(session, 'session');\n\t\t\t\t\t\t\tlogger.debug('succeed to get cognito credentials', cred);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tlogger.debug('cannot get cognito credentials', e);\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tthat.user = user;\n\t\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t\t'signIn',\n\t\t\t\t\t\t\t\tuser,\n\t\t\t\t\t\t\t\t`A user ${user.getUsername()} has been signed in`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tresolve(user);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tonFailure: err => {\n\t\t\t\t\t\tlogger.debug('completeNewPassword failure', err);\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'completeNewPassword_failure',\n\t\t\t\t\t\t\terr,\n\t\t\t\t\t\t\t`${this.user} failed to complete the new password flow`\n\t\t\t\t\t\t);\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t},\n\t\t\t\t\tmfaRequired: (challengeName, challengeParam) => {\n\t\t\t\t\t\tlogger.debug('signIn MFA required');\n\t\t\t\t\t\tuser['challengeName'] = challengeName;\n\t\t\t\t\t\tuser['challengeParam'] = challengeParam;\n\t\t\t\t\t\tresolve(user);\n\t\t\t\t\t},\n\t\t\t\t\tmfaSetup: (challengeName, challengeParam) => {\n\t\t\t\t\t\tlogger.debug('signIn mfa setup', challengeName);\n\t\t\t\t\t\tuser['challengeName'] = challengeName;\n\t\t\t\t\t\tuser['challengeParam'] = challengeParam;\n\t\t\t\t\t\tresolve(user);\n\t\t\t\t\t},\n\t\t\t\t\ttotpRequired: (challengeName, challengeParam) => {\n\t\t\t\t\t\tlogger.debug('signIn mfa setup', challengeName);\n\t\t\t\t\t\tuser['challengeName'] = challengeName;\n\t\t\t\t\t\tuser['challengeParam'] = challengeParam;\n\t\t\t\t\t\tresolve(user);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tclientMetadata\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Send the answer to a custom challenge\n\t * @param {CognitoUser} user - The CognitoUser object\n\t * @param {String} challengeResponses - The confirmation code\n\t */\n\tpublic sendCustomChallengeAnswer(\n\t\tuser: CognitoUser | any,\n\t\tchallengeResponses: string,\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<CognitoUser | any> {\n\t\tif (!this.userPool) {\n\t\t\treturn this.rejectNoUserPool();\n\t\t}\n\t\tif (!challengeResponses) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyChallengeResponse);\n\t\t}\n\n\t\tconst that = this;\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.sendCustomChallengeAnswer(\n\t\t\t\tchallengeResponses,\n\t\t\t\tthis.authCallbacks(user, resolve, reject),\n\t\t\t\tclientMetadata\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Delete an authenticated users' attributes\n\t * @param {CognitoUser} - The currently logged in user object\n\t * @return {Promise}\n\t **/\n\tpublic deleteUserAttributes(\n\t\tuser: CognitoUser | any,\n\t\tattributeNames: string[]\n\t) {\n\t\tconst that = this;\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthat.userSession(user).then(session => {\n\t\t\t\tuser.deleteAttributes(attributeNames, (err, result) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn resolve(result);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Delete the current authenticated user\n\t * @return {Promise}\n\t **/\n\t// TODO: Check return type void\n\tpublic async deleteUser(): Promise<string | void> {\n\t\ttry {\n\t\t\tawait this._storageSync;\n\t\t} catch (e) {\n\t\t\tlogger.debug('Failed to sync cache info into memory', e);\n\t\t\tthrow new Error(e);\n\t\t}\n\n\t\tconst isSignedInHostedUI =\n\t\t\tthis._oAuthHandler &&\n\t\t\tthis._storage.getItem('amplify-signin-with-hostedUI') === 'true';\n\n\t\treturn new Promise(async (res, rej) => {\n\t\t\tif (this.userPool) {\n\t\t\t\tconst user = this.userPool.getCurrentUser();\n\n\t\t\t\tif (!user) {\n\t\t\t\t\tlogger.debug('Failed to get user from user pool');\n\t\t\t\t\treturn rej(new Error('No current user.'));\n\t\t\t\t} else {\n\t\t\t\t\tuser.getSession(async (err, session) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tlogger.debug('Failed to get the user session', err);\n\t\t\t\t\t\t\tif (this.isSessionInvalid(err)) {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tawait this.cleanUpInvalidSession(user);\n\t\t\t\t\t\t\t\t} catch (cleanUpError) {\n\t\t\t\t\t\t\t\t\trej(\n\t\t\t\t\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t\t\t\t\t`Session is invalid due to: ${err.message} and failed to clean up invalid session: ${cleanUpError.message}`\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn rej(err);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tuser.deleteUser((err, result: string) => {\n\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\trej(err);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t\t\t\t'userDeleted',\n\t\t\t\t\t\t\t\t\t\tresult,\n\t\t\t\t\t\t\t\t\t\t'The authenticated user has been deleted.'\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tuser.signOut();\n\t\t\t\t\t\t\t\t\tthis.user = null;\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tthis.cleanCachedItems(); // clean aws credentials\n\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\t// TODO: change to rejects in refactor\n\t\t\t\t\t\t\t\t\t\tlogger.debug('failed to clear cached items');\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif (isSignedInHostedUI) {\n\t\t\t\t\t\t\t\t\t\tthis.oAuthSignOutRedirect(res, rej);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t\t\t\t\t'signOut',\n\t\t\t\t\t\t\t\t\t\t\tthis.user,\n\t\t\t\t\t\t\t\t\t\t\t`A user has been signed out`\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\tres(result);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlogger.debug('no Congito User pool');\n\t\t\t\trej(new Error('Cognito User pool does not exist'));\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Update an authenticated users' attributes\n\t * @param {CognitoUser} - The currently logged in user object\n\t * @return {Promise}\n\t **/\n\tpublic updateUserAttributes(\n\t\tuser: CognitoUser | any,\n\t\tattributes: object,\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<string> {\n\t\tconst attributeList: ICognitoUserAttributeData[] = [];\n\t\tconst that = this;\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthat.userSession(user).then(session => {\n\t\t\t\tfor (const key in attributes) {\n\t\t\t\t\tif (key !== 'sub' && key.indexOf('_verified') < 0) {\n\t\t\t\t\t\tconst attr: ICognitoUserAttributeData = {\n\t\t\t\t\t\t\tName: key,\n\t\t\t\t\t\t\tValue: attributes[key],\n\t\t\t\t\t\t};\n\t\t\t\t\t\tattributeList.push(attr);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tuser.updateAttributes(\n\t\t\t\t\tattributeList,\n\t\t\t\t\t(err, result, details) => {\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tdispatchAuthEvent('updateUserAttributes_failure', err, 'Failed to update attributes');\n\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst attrs = this.createUpdateAttributesResultList(\n\t\t\t\t\t\t\t\tattributes as Record<string, string>, details?.CodeDeliveryDetailsList\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tdispatchAuthEvent('updateUserAttributes', attrs, 'Attributes successfully updated');\n\t\t\t\t\t\t\treturn resolve(result);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tclientMetadata\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate createUpdateAttributesResultList(\n\t\tattributes: Record<string, string>, \n\t\tcodeDeliveryDetailsList?: CodeDeliveryDetails []\n\t): Record<string, string> {\n\t\tconst attrs = {};\n\t\tObject.keys(attributes).forEach(key => {\n\t\t\tattrs[key] = {\n\t\t\t\tisUpdated: true\n\t\t\t};\n\t\t\tconst codeDeliveryDetails = codeDeliveryDetailsList?.find(value => value.AttributeName === key);\n\t\t\tif (codeDeliveryDetails) {\n\t\t\t\tattrs[key].isUpdated = false;\n\t\t\t\tattrs[key].codeDeliveryDetails = codeDeliveryDetails;\n\t\t\t}\n\t\t});\n\t\treturn attrs;\n\t}\n\n\t/**\n\t * Return user attributes\n\t * @param {Object} user - The CognitoUser object\n\t * @return - A promise resolves to user attributes if success\n\t */\n\tpublic userAttributes(\n\t\tuser: CognitoUser | any\n\t): Promise<CognitoUserAttribute[]> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.userSession(user).then(session => {\n\t\t\t\tuser.getUserAttributes((err, attributes) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(attributes);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic verifiedContact(user: CognitoUser | any) {\n\t\tconst that = this;\n\t\treturn this.userAttributes(user).then(attributes => {\n\t\t\tconst attrs = that.attributesToObject(attributes);\n\t\t\tconst unverified = {};\n\t\t\tconst verified = {};\n\t\t\tif (attrs['email']) {\n\t\t\t\tif (attrs['email_verified']) {\n\t\t\t\t\tverified['email'] = attrs['email'];\n\t\t\t\t} else {\n\t\t\t\t\tunverified['email'] = attrs['email'];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (attrs['phone_number']) {\n\t\t\t\tif (attrs['phone_number_verified']) {\n\t\t\t\t\tverified['phone_number'] = attrs['phone_number'];\n\t\t\t\t} else {\n\t\t\t\t\tunverified['phone_number'] = attrs['phone_number'];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tverified,\n\t\t\t\tunverified,\n\t\t\t};\n\t\t});\n\t}\n\n\tprivate isErrorWithMessage(err: any): err is { message: string } {\n\t\treturn (\n\t\t\ttypeof err === 'object' &&\n\t\t\tObject.prototype.hasOwnProperty.call(err, 'message')\n\t\t);\n\t}\n\n\t// Session revoked by another app\n\tprivate isTokenRevokedError(\n\t\terr: any\n\t): err is { message: 'Access Token has been revoked' } {\n\t\treturn (\n\t\t\tthis.isErrorWithMessage(err) &&\n\t\t\terr.message === 'Access Token has been revoked'\n\t\t);\n\t}\n\n\tprivate isRefreshTokenRevokedError(\n\t\terr: any\n\t): err is { message: 'Refresh Token has been revoked' } {\n\t\treturn (\n\t\t\tthis.isErrorWithMessage(err) &&\n\t\t\terr.message === 'Refresh Token has been revoked'\n\t\t);\n\t}\n\n\tprivate isUserDisabledError(\n\t\terr: any\n\t): err is { message: 'User is disabled.' } {\n\t\treturn this.isErrorWithMessage(err) && err.message === 'User is disabled.';\n\t}\n\n\tprivate isUserDoesNotExistError(\n\t\terr: any\n\t): err is { message: 'User does not exist.' } {\n\t\treturn (\n\t\t\tthis.isErrorWithMessage(err) && err.message === 'User does not exist.'\n\t\t);\n\t}\n\n\tprivate isRefreshTokenExpiredError(\n\t\terr: any\n\t): err is { message: 'Refresh Token has expired' } {\n\t\treturn (\n\t\t\tthis.isErrorWithMessage(err) &&\n\t\t\terr.message === 'Refresh Token has expired'\n\t\t);\n\t}\n\n\tprivate isSignedInHostedUI() {\n\t\treturn (\n\t\t\tthis._oAuthHandler &&\n\t\t\tthis._storage.getItem('amplify-signin-with-hostedUI') === 'true'\n\t\t);\n\t}\n\n\tprivate isSessionInvalid(err: any) {\n\t\treturn (\n\t\t\tthis.isUserDisabledError(err) ||\n\t\t\tthis.isUserDoesNotExistError(err) ||\n\t\t\tthis.isTokenRevokedError(err) ||\n\t\t\tthis.isRefreshTokenRevokedError(err) ||\n\t\t\tthis.isRefreshTokenExpiredError(err)\n\t\t);\n\t}\n\n\tprivate async cleanUpInvalidSession(user: CognitoUser) {\n\t\tuser.signOut();\n\t\tthis.user = null;\n\t\ttry {\n\t\t\tawait this.cleanCachedItems(); // clean aws credentials\n\t\t} catch (e) {\n\t\t\tlogger.debug('failed to clear cached items');\n\t\t}\n\t\tif (this.isSignedInHostedUI()) {\n\t\t\treturn new Promise((res, rej) => {\n\t\t\t\tthis.oAuthSignOutRedirect(res, rej);\n\t\t\t});\n\t\t} else {\n\t\t\tdispatchAuthEvent('signOut', this.user, `A user has been signed out`);\n\t\t}\n\t}\n\n\t/**\n\t * Get current authenticated user\n\t * @return - A promise resolves to current authenticated CognitoUser if success\n\t */\n\tpublic currentUserPoolUser(\n\t\tparams?: CurrentUserOpts\n\t): Promise<CognitoUser | any> {\n\t\tif (!this.userPool) {\n\t\t\treturn this.rejectNoUserPool();\n\t\t}\n\n\t\treturn new Promise((res, rej) => {\n\t\t\tthis._storageSync\n\t\t\t\t.then(async () => {\n\t\t\t\t\tif (this.isOAuthInProgress()) {\n\t\t\t\t\t\tlogger.debug('OAuth signIn in progress, waiting for resolution...');\n\n\t\t\t\t\t\tawait new Promise(res => {\n\t\t\t\t\t\t\tconst timeoutId = setTimeout(() => {\n\t\t\t\t\t\t\t\tlogger.debug('OAuth signIn in progress timeout');\n\n\t\t\t\t\t\t\t\tHub.remove('auth', hostedUISignCallback);\n\n\t\t\t\t\t\t\t\tres();\n\t\t\t\t\t\t\t}, OAUTH_FLOW_MS_TIMEOUT);\n\n\t\t\t\t\t\t\tHub.listen('auth', hostedUISignCallback);\n\n\t\t\t\t\t\t\tfunction hostedUISignCallback({ payload }) {\n\t\t\t\t\t\t\t\tconst { event } = payload;\n\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tevent === 'cognitoHostedUI' ||\n\t\t\t\t\t\t\t\t\tevent === 'cognitoHostedUI_failure'\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tlogger.debug(`OAuth signIn resolved: ${event}`);\n\t\t\t\t\t\t\t\t\tclearTimeout(timeoutId);\n\n\t\t\t\t\t\t\t\t\tHub.remove('auth', hostedUISignCallback);\n\n\t\t\t\t\t\t\t\t\tres();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tconst user = this.userPool.getCurrentUser();\n\n\t\t\t\t\tif (!user) {\n\t\t\t\t\t\tlogger.debug('Failed to get user from user pool');\n\t\t\t\t\t\trej('No current user');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// refresh the session if the session expired.\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst session = await this._userSession(user);\n\n\t\t\t\t\t\t// get user data from Cognito\n\t\t\t\t\t\tconst bypassCache = params ? params.bypassCache : false;\n\n\t\t\t\t\t\tif (bypassCache) {\n\t\t\t\t\t\t\tawait this.Credentials.clear();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst clientMetadata = this._config.clientMetadata;\n\n\t\t\t\t\t\t// validate the token's scope first before calling this function\n\t\t\t\t\t\tconst { scope = '' } = session.getAccessToken().decodePayload();\n\t\t\t\t\t\tif (scope.split(' ').includes(USER_ADMIN_SCOPE)) {\n\t\t\t\t\t\t\tuser.getUserData(\n\t\t\t\t\t\t\t\tasync (err, data) => {\n\t\t\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\t\t\tlogger.debug('getting user data failed', err);\n\t\t\t\t\t\t\t\t\t\tif (this.isSessionInvalid(err)) {\n\t\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\t\tawait this.cleanUpInvalidSession(user);\n\t\t\t\t\t\t\t\t\t\t\t} catch (cleanUpError) {\n\t\t\t\t\t\t\t\t\t\t\t\trej(\n\t\t\t\t\t\t\t\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t`Session is invalid due to: ${err.message} and failed to clean up invalid session: ${cleanUpError.message}`\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\trej(err);\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tres(user);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tconst preferredMFA = data.PreferredMfaSetting || 'NOMFA';\n\t\t\t\t\t\t\t\t\tconst attributeList = [];\n\n\t\t\t\t\t\t\t\t\tfor (let i = 0; i < data.UserAttributes.length; i++) {\n\t\t\t\t\t\t\t\t\t\tconst attribute = {\n\t\t\t\t\t\t\t\t\t\t\tName: data.UserAttributes[i].Name,\n\t\t\t\t\t\t\t\t\t\t\tValue: data.UserAttributes[i].Value,\n\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\tconst userAttribute = new CognitoUserAttribute(attribute);\n\t\t\t\t\t\t\t\t\t\tattributeList.push(userAttribute);\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tconst attributes = this.attributesToObject(attributeList);\n\t\t\t\t\t\t\t\t\tObject.assign(user, { attributes, preferredMFA });\n\t\t\t\t\t\t\t\t\treturn res(user);\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{ bypassCache, clientMetadata }\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t\t`Unable to get the user data because the ${USER_ADMIN_SCOPE} ` +\n\t\t\t\t\t\t\t\t\t`is not in the scopes of the access token`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturn res(user);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\trej(err);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch(e => {\n\t\t\t\t\tlogger.debug('Failed to sync cache info into memory', e);\n\t\t\t\t\treturn rej(e);\n\t\t\t\t});\n\t\t});\n\t}\n\n\tprivate isOAuthInProgress(): boolean {\n\t\treturn this.oAuthFlowInProgress;\n\t}\n\n\t/**\n\t * Get current authenticated user\n\t * @param {CurrentUserOpts} - options for getting the current user\n\t * @return - A promise resolves to current authenticated CognitoUser if success\n\t */\n\tpublic async currentAuthenticatedUser(\n\t\tparams?: CurrentUserOpts\n\t): Promise<CognitoUser | any> {\n\t\tlogger.debug('getting current authenticated user');\n\t\tlet federatedUser = null;\n\t\ttry {\n\t\t\tawait this._storageSync;\n\t\t} catch (e) {\n\t\t\tlogger.debug('Failed to sync cache info into memory', e);\n\t\t\tthrow e;\n\t\t}\n\n\t\ttry {\n\t\t\tconst federatedInfo = JSON.parse(\n\t\t\t\tthis._storage.getItem('aws-amplify-federatedInfo')\n\t\t\t);\n\t\t\tif (federatedInfo) {\n\t\t\t\tfederatedUser = {\n\t\t\t\t\t...federatedInfo.user,\n\t\t\t\t\ttoken: federatedInfo.token,\n\t\t\t\t};\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tlogger.debug('cannot load federated user from auth storage');\n\t\t}\n\n\t\tif (federatedUser) {\n\t\t\tthis.user = federatedUser;\n\t\t\tlogger.debug('get current authenticated federated user', this.user);\n\t\t\treturn this.user;\n\t\t} else {\n\t\t\tlogger.debug('get current authenticated userpool user');\n\t\t\tlet user = null;\n\t\t\ttry {\n\t\t\t\tuser = await this.currentUserPoolUser(params);\n\t\t\t} catch (e) {\n\t\t\t\tif (e === 'No userPool') {\n\t\t\t\t\tlogger.error(\n\t\t\t\t\t\t'Cannot get the current user because the user pool is missing. ' +\n\t\t\t\t\t\t\t'Please make sure the Auth module is configured with a valid Cognito User Pool ID'\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tlogger.debug('The user is not authenticated by the error', e);\n\t\t\t\treturn Promise.reject('The user is not authenticated');\n\t\t\t}\n\t\t\tthis.user = user;\n\t\t\treturn this.user;\n\t\t}\n\t}\n\n\t/**\n\t * Get current user's session\n\t * @return - A promise resolves to session object if success\n\t */\n\tpublic currentSession(): Promise<CognitoUserSession> {\n\t\tconst that = this;\n\t\tlogger.debug('Getting current session');\n\t\t// Purposely not calling the reject method here because we don't need a console error\n\t\tif (!this.userPool) {\n\t\t\treturn Promise.reject(new Error('No User Pool in the configuration.'));\n\t\t}\n\n\t\treturn new Promise((res, rej) => {\n\t\t\tthat\n\t\t\t\t.currentUserPoolUser()\n\t\t\t\t.then(user => {\n\t\t\t\t\tthat\n\t\t\t\t\t\t.userSession(user)\n\t\t\t\t\t\t.then(session => {\n\t\t\t\t\t\t\tres(session);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(e => {\n\t\t\t\t\t\t\tlogger.debug('Failed to get the current session', e);\n\t\t\t\t\t\t\trej(e);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch(e => {\n\t\t\t\t\tlogger.debug('Failed to get the current user', e);\n\t\t\t\t\trej(e);\n\t\t\t\t\treturn;\n\t\t\t\t});\n\t\t});\n\t}\n\n\tprivate async _userSession(user?: CognitoUser): Promise<CognitoUserSession> {\n\t\tif (!user) {\n\t\t\tlogger.debug('the user is null');\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.NoUserSession);\n\t\t}\n\t\tconst clientMetadata = this._config.clientMetadata;\n\t\t// Debouncing the concurrent userSession calls by caching the promise.\n\t\t// This solution assumes users will always call this function with the same CognitoUser instance.\n\t\tif (this.inflightSessionPromiseCounter === 0) {\n\t\t\tthis.inflightSessionPromise = new Promise<CognitoUserSession>(\n\t\t\t\t(res, rej) => {\n\t\t\t\t\tuser.getSession(\n\t\t\t\t\t\tasync (err, session) => {\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\tlogger.debug('Failed to get the session from user', user);\n\t\t\t\t\t\t\t\tif (this.isSessionInvalid(err)) {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tawait this.cleanUpInvalidSession(user);\n\t\t\t\t\t\t\t\t\t} catch (cleanUpError) {\n\t\t\t\t\t\t\t\t\t\trej(\n\t\t\t\t\t\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t\t\t\t\t\t`Session is invalid due to: ${err.message} and failed to clean up invalid session: ${cleanUpError.message}`\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\trej(err);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tlogger.debug('Succeed to get the user session', session);\n\t\t\t\t\t\t\t\tres(session);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{ clientMetadata }\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t\tthis.inflightSessionPromiseCounter++;\n\n\t\ttry {\n\t\t\tconst userSession = await this.inflightSessionPromise;\n\t\t\t// Set private member. Avoid user.setSignInUserSession() to prevent excessive localstorage refresh.\n\t\t\t// @ts-ignore\n\t\t\tuser.signInUserSession = userSession;\n\t\t\treturn userSession!;\n\t\t} finally {\n\t\t\tthis.inflightSessionPromiseCounter--;\n\t\t}\n\t}\n\n\t/**\n\t * Get the corresponding user session\n\t * @param {Object} user - The CognitoUser object\n\t * @return - A promise resolves to the session\n\t */\n\tpublic userSession(user): Promise<CognitoUserSession> {\n\t\treturn this._userSession(user);\n\t}\n\n\t/**\n\t * Get authenticated credentials of current user.\n\t * @return - A promise resolves to be current user's credentials\n\t */\n\tpublic async currentUserCredentials(): Promise<ICredentials> {\n\t\tlogger.debug('Getting current user credentials');\n\n\t\ttry {\n\t\t\tawait this._storageSync;\n\t\t} catch (e) {\n\t\t\tlogger.debug('Failed to sync cache info into memory', e);\n\t\t\tthrow e;\n\t\t}\n\n\t\t// first to check whether there is federation info in the auth storage\n\t\tlet federatedInfo = null;\n\t\ttry {\n\t\t\tfederatedInfo = JSON.parse(\n\t\t\t\tthis._storage.getItem('aws-amplify-federatedInfo')\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tlogger.debug('failed to get or parse item aws-amplify-federatedInfo', e);\n\t\t}\n\n\t\tif (federatedInfo) {\n\t\t\t// refresh the jwt token here if necessary\n\t\t\treturn this.Credentials.refreshFederatedToken(federatedInfo);\n\t\t} else {\n\t\t\treturn this.currentSession()\n\t\t\t\t.then(session => {\n\t\t\t\t\tlogger.debug('getting session success', session);\n\t\t\t\t\treturn this.Credentials.set(session, 'session');\n\t\t\t\t})\n\t\t\t\t.catch(() => {\n\t\t\t\t\tlogger.debug('getting guest credentials');\n\t\t\t\t\treturn this.Credentials.set(null, 'guest');\n\t\t\t\t});\n\t\t}\n\t}\n\n\tpublic currentCredentials(): Promise<ICredentials> {\n\t\tlogger.debug('getting current credentials');\n\t\treturn this.Credentials.get();\n\t}\n\n\t/**\n\t * Initiate an attribute confirmation request\n\t * @param {Object} user - The CognitoUser\n\t * @param {Object} attr - The attributes to be verified\n\t * @return - A promise resolves to callback data if success\n\t */\n\tpublic verifyUserAttribute(\n\t\tuser: CognitoUser | any,\n\t\tattr: string,\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<void> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.getAttributeVerificationCode(\n\t\t\t\tattr,\n\t\t\t\t{\n\t\t\t\t\tonSuccess(success) {\n\t\t\t\t\t\treturn resolve(success);\n\t\t\t\t\t},\n\t\t\t\t\tonFailure(err) {\n\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tclientMetadata\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Confirm an attribute using a confirmation code\n\t * @param {Object} user - The CognitoUser\n\t * @param {Object} attr - The attribute to be verified\n\t * @param {String} code - The confirmation code\n\t * @return - A promise resolves to callback data if success\n\t */\n\tpublic verifyUserAttributeSubmit(\n\t\tuser: CognitoUser | any,\n\t\tattr: string,\n\t\tcode: string\n\t): Promise<string> {\n\t\tif (!code) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyCode);\n\t\t}\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.verifyAttribute(attr, code, {\n\t\t\t\tonSuccess(data) {\n\t\t\t\t\tresolve(data);\n\t\t\t\t\treturn;\n\t\t\t\t},\n\t\t\t\tonFailure(err) {\n\t\t\t\t\treject(err);\n\t\t\t\t\treturn;\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic verifyCurrentUserAttribute(attr: string): Promise<void> {\n\t\tconst that = this;\n\t\treturn that\n\t\t\t.currentUserPoolUser()\n\t\t\t.then(user => that.verifyUserAttribute(user, attr));\n\t}\n\n\t/**\n\t * Confirm current user's attribute using a confirmation code\n\t * @param {Object} attr - The attribute to be verified\n\t * @param {String} code - The confirmation code\n\t * @return - A promise resolves to callback data if success\n\t */\n\tverifyCurrentUserAttributeSubmit(\n\t\tattr: string,\n\t\tcode: string\n\t): Promise<string> {\n\t\tconst that = this;\n\t\treturn that\n\t\t\t.currentUserPoolUser()\n\t\t\t.then(user => that.verifyUserAttributeSubmit(user, attr, code));\n\t}\n\n\tprivate async cognitoIdentitySignOut(\n\t\topts: SignOutOpts,\n\t\tuser: CognitoUser | any\n\t) {\n\t\ttry {\n\t\t\tawait this._storageSync;\n\t\t} catch (e) {\n\t\t\tlogger.debug('Failed to sync cache info into memory', e);\n\t\t\tthrow e;\n\t\t}\n\n\t\tconst isSignedInHostedUI =\n\t\t\tthis._oAuthHandler &&\n\t\t\tthis._storage.getItem('amplify-signin-with-hostedUI') === 'true';\n\n\t\treturn new Promise((res, rej) => {\n\t\t\tif (opts && opts.global) {\n\t\t\t\tlogger.debug('user global sign out', user);\n\t\t\t\t// in order to use global signout\n\t\t\t\t// we must validate the user as an authenticated user by using getSession\n\t\t\t\tconst clientMetadata = this._config.clientMetadata; // TODO: verify behavior if this is override during signIn\n\n\t\t\t\tuser.getSession(\n\t\t\t\t\tasync (err, result) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tlogger.debug('failed to get the user session', err);\n\t\t\t\t\t\t\tif (this.isSessionInvalid(err)) {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tawait this.cleanUpInvalidSession(user);\n\t\t\t\t\t\t\t\t} catch (cleanUpError) {\n\t\t\t\t\t\t\t\t\trej(\n\t\t\t\t\t\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\t\t\t\t\t`Session is invalid due to: ${err.message} and failed to clean up invalid session: ${cleanUpError.message}`\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn rej(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tuser.globalSignOut({\n\t\t\t\t\t\t\tonSuccess: data => {\n\t\t\t\t\t\t\t\tlogger.debug('global sign out success');\n\t\t\t\t\t\t\t\tif (isSignedInHostedUI) {\n\t\t\t\t\t\t\t\t\tthis.oAuthSignOutRedirect(res, rej);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn res();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tonFailure: err => {\n\t\t\t\t\t\t\t\tlogger.debug('global sign out failed', err);\n\t\t\t\t\t\t\t\treturn rej(err);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\t{ clientMetadata }\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tlogger.debug('user sign out', user);\n\t\t\t\tuser.signOut(() => {\n\t\t\t\t\tif (isSignedInHostedUI) {\n\t\t\t\t\t\tthis.oAuthSignOutRedirect(res, rej);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn res();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate oAuthSignOutRedirect(\n\t\tresolve: () => void,\n\t\treject: (reason?: any) => void\n\t) {\n\t\tconst { isBrowser } = browserOrNode();\n\n\t\tif (isBrowser) {\n\t\t\tthis.oAuthSignOutRedirectOrReject(reject);\n\t\t} else {\n\t\t\tthis.oAuthSignOutAndResolve(resolve);\n\t\t}\n\t}\n\n\tprivate oAuthSignOutAndResolve(resolve: () => void) {\n\t\tthis._oAuthHandler.signOut();\n\t\tresolve();\n\t}\n\n\tprivate oAuthSignOutRedirectOrReject(reject: (reason?: any) => void) {\n\t\tthis._oAuthHandler.signOut(); // this method redirects url\n\n\t\t// App should be redirected to another url otherwise it will reject\n\t\tsetTimeout(() => reject(Error('Signout timeout fail')), 3000);\n\t}\n\n\t/**\n\t * Sign out method\n\t * @\n\t * @return - A promise resolved if success\n\t */\n\tpublic async signOut(opts?: SignOutOpts): Promise<any> {\n\t\ttry {\n\t\t\tawait this.cleanCachedItems();\n\t\t} catch (e) {\n\t\t\tlogger.debug('failed to clear cached items');\n\t\t}\n\n\t\tif (this.userPool) {\n\t\t\tconst user = this.userPool.getCurrentUser();\n\t\t\tif (user) {\n\t\t\t\tawait this.cognitoIdentitySignOut(opts, user);\n\t\t\t} else {\n\t\t\t\tlogger.debug('no current Cognito user');\n\t\t\t}\n\t\t} else {\n\t\t\tlogger.debug('no Cognito User pool');\n\t\t}\n\n\t\t/**\n\t\t * Note for future refactor - no reliable way to get username with\n\t\t * Cognito User Pools vs Identity when federating with Social Providers\n\t\t * This is why we need a well structured session object that can be inspected\n\t\t * and information passed back in the message below for Hub dispatch\n\t\t */\n\t\tdispatchAuthEvent('signOut', this.user, `A user has been signed out`);\n\t\tthis.user = null;\n\t}\n\n\tprivate async cleanCachedItems() {\n\t\t// clear cognito cached item\n\t\tawait this.Credentials.clear();\n\t}\n\n\t/**\n\t * Change a password for an authenticated user\n\t * @param {Object} user - The CognitoUser object\n\t * @param {String} oldPassword - the current password\n\t * @param {String} newPassword - the requested new password\n\t * @return - A promise resolves if success\n\t */\n\tpublic changePassword(\n\t\tuser: CognitoUser | any,\n\t\toldPassword: string,\n\t\tnewPassword: string,\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<'SUCCESS'> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.userSession(user).then(session => {\n\t\t\t\tuser.changePassword(\n\t\t\t\t\toldPassword,\n\t\t\t\t\tnewPassword,\n\t\t\t\t\t(err, data) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tlogger.debug('change password failure', err);\n\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn resolve(data);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tclientMetadata\n\t\t\t\t);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Initiate a forgot password request\n\t * @param {String} username - the username to change password\n\t * @return - A promise resolves if success\n\t */\n\tpublic forgotPassword(\n\t\tusername: string,\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<any> {\n\t\tif (!this.userPool) {\n\t\t\treturn this.rejectNoUserPool();\n\t\t}\n\t\tif (!username) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n\t\t}\n\n\t\tconst user = this.createCognitoUser(username);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.forgotPassword(\n\t\t\t\t{\n\t\t\t\t\tonSuccess: () => {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t},\n\t\t\t\t\tonFailure: err => {\n\t\t\t\t\t\tlogger.debug('forgot password failure', err);\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'forgotPassword_failure',\n\t\t\t\t\t\t\terr,\n\t\t\t\t\t\t\t`${username} forgotPassword failed`\n\t\t\t\t\t\t);\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t},\n\t\t\t\t\tinputVerificationCode: data => {\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'forgotPassword',\n\t\t\t\t\t\t\tuser,\n\t\t\t\t\t\t\t`${username} has initiated forgot password flow`\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresolve(data);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tclientMetadata\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Confirm a new password using a confirmation Code\n\t * @param {String} username - The username\n\t * @param {String} code - The confirmation code\n\t * @param {String} password - The new password\n\t * @return - A promise that resolves if success\n\t */\n\tpublic forgotPasswordSubmit(\n\t\tusername: string,\n\t\tcode: string,\n\t\tpassword: string,\n\t\tclientMetadata: ClientMetaData = this._config.clientMetadata\n\t): Promise<string> {\n\t\tif (!this.userPool) {\n\t\t\treturn this.rejectNoUserPool();\n\t\t}\n\t\tif (!username) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyUsername);\n\t\t}\n\t\tif (!code) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyCode);\n\t\t}\n\t\tif (!password) {\n\t\t\treturn this.rejectAuthError(AuthErrorTypes.EmptyPassword);\n\t\t}\n\n\t\tconst user = this.createCognitoUser(username);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tuser.confirmPassword(\n\t\t\t\tcode,\n\t\t\t\tpassword,\n\t\t\t\t{\n\t\t\t\t\tonSuccess: success => {\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'forgotPasswordSubmit',\n\t\t\t\t\t\t\tuser,\n\t\t\t\t\t\t\t`${username} forgotPasswordSubmit successful`\n\t\t\t\t\t\t);\n\t\t\t\t\t\tresolve(success);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t},\n\t\t\t\t\tonFailure: err => {\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'forgotPasswordSubmit_failure',\n\t\t\t\t\t\t\terr,\n\t\t\t\t\t\t\t`${username} forgotPasswordSubmit failed`\n\t\t\t\t\t\t);\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tclientMetadata\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * Get user information\n\t * @async\n\t * @return {Object }- current User's information\n\t */\n\tpublic async currentUserInfo() {\n\t\tconst source = this.Credentials.getCredSource();\n\n\t\tif (!source || source === 'aws' || source === 'userPool') {\n\t\t\tconst user = await this.currentUserPoolUser().catch(err =>\n\t\t\t\tlogger.error(err)\n\t\t\t);\n\t\t\tif (!user) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst attributes = await this.userAttributes(user);\n\t\t\t\tconst userAttrs: object = this.attributesToObject(attributes);\n\t\t\t\tlet credentials = null;\n\t\t\t\ttry {\n\t\t\t\t\tcredentials = await this.currentCredentials();\n\t\t\t\t} catch (e) {\n\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t'Failed to retrieve credentials while getting current user info',\n\t\t\t\t\t\te\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst info = {\n\t\t\t\t\tid: credentials ? credentials.identityId : undefined,\n\t\t\t\t\tusername: user.getUsername(),\n\t\t\t\t\tattributes: userAttrs,\n\t\t\t\t};\n\t\t\t\treturn info;\n\t\t\t} catch (err) {\n\t\t\t\tlogger.error('currentUserInfo error', err);\n\t\t\t\treturn {};\n\t\t\t}\n\t\t}\n\n\t\tif (source === 'federated') {\n\t\t\tconst user = this.user;\n\t\t\treturn user ? user : {};\n\t\t}\n\t}\n\n\tpublic async federatedSignIn(\n\t\toptions?: FederatedSignInOptions\n\t): Promise<ICredentials>;\n\tpublic async federatedSignIn(\n\t\tprovider: LegacyProvider,\n\t\tresponse: FederatedResponse,\n\t\tuser: FederatedUser\n\t): Promise<ICredentials>;\n\tpublic async federatedSignIn(\n\t\toptions?: FederatedSignInOptionsCustom\n\t): Promise<ICredentials>;\n\tpublic async federatedSignIn(\n\t\tproviderOrOptions:\n\t\t\t| LegacyProvider\n\t\t\t| FederatedSignInOptions\n\t\t\t| FederatedSignInOptionsCustom,\n\t\tresponse?: FederatedResponse,\n\t\tuser?: FederatedUser\n\t): Promise<ICredentials> {\n\t\tif (!this._config.identityPoolId && !this._config.userPoolId) {\n\t\t\tthrow new Error(\n\t\t\t\t`Federation requires either a User Pool or Identity Pool in config`\n\t\t\t);\n\t\t}\n\n\t\t// Ensure backwards compatability\n\t\tif (typeof providerOrOptions === 'undefined') {\n\t\t\tif (this._config.identityPoolId && !this._config.userPoolId) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Federation with Identity Pools requires tokens passed as arguments`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\tisFederatedSignInOptions(providerOrOptions) ||\n\t\t\tisFederatedSignInOptionsCustom(providerOrOptions) ||\n\t\t\thasCustomState(providerOrOptions) ||\n\t\t\ttypeof providerOrOptions === 'undefined'\n\t\t) {\n\t\t\tconst options = providerOrOptions || {\n\t\t\t\tprovider: CognitoHostedUIIdentityProvider.Cognito,\n\t\t\t};\n\t\t\tconst provider = isFederatedSignInOptions(options)\n\t\t\t\t? options.provider\n\t\t\t\t: (options as FederatedSignInOptionsCustom).customProvider;\n\n\t\t\tconst customState = isFederatedSignInOptions(options)\n\t\t\t\t? options.customState\n\t\t\t\t: (options as FederatedSignInOptionsCustom).customState;\n\n\t\t\tif (this._config.userPoolId) {\n\t\t\t\tconst client_id = isCognitoHostedOpts(this._config.oauth)\n\t\t\t\t\t? this._config.userPoolWebClientId\n\t\t\t\t\t: this._config.oauth.clientID;\n\t\t\t\t/*Note: Invenstigate automatically adding trailing slash */\n\t\t\t\tconst redirect_uri = isCognitoHostedOpts(this._config.oauth)\n\t\t\t\t\t? this._config.oauth.redirectSignIn\n\t\t\t\t\t: this._config.oauth.redirectUri;\n\n\t\t\t\tthis._oAuthHandler.oauthSignIn(\n\t\t\t\t\tthis._config.oauth.responseType,\n\t\t\t\t\tthis._config.oauth.domain,\n\t\t\t\t\tredirect_uri,\n\t\t\t\t\tclient_id,\n\t\t\t\t\tprovider,\n\t\t\t\t\tcustomState\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tconst provider = providerOrOptions;\n\t\t\t// To check if the user is already logged in\n\t\t\ttry {\n\t\t\t\tconst loggedInUser = JSON.stringify(\n\t\t\t\t\tJSON.parse(this._storage.getItem('aws-amplify-federatedInfo')).user\n\t\t\t\t);\n\t\t\t\tif (loggedInUser) {\n\t\t\t\t\tlogger.warn(`There is already a signed in user: ${loggedInUser} in your app.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tYou should not call Auth.federatedSignIn method again as it may cause unexpected behavior.`);\n\t\t\t\t}\n\t\t\t} catch (e) {}\n\n\t\t\tconst { token, identity_id, expires_at } = response;\n\t\t\t// Because this.Credentials.set would update the user info with identity id\n\t\t\t// So we need to retrieve the user again.\n\t\t\tconst credentials = await this.Credentials.set(\n\t\t\t\t{ provider, token, identity_id, user, expires_at },\n\t\t\t\t'federation'\n\t\t\t);\n\t\t\tconst currentUser = await this.currentAuthenticatedUser();\n\t\t\tdispatchAuthEvent(\n\t\t\t\t'signIn',\n\t\t\t\tcurrentUser,\n\t\t\t\t`A user ${currentUser.username} has been signed in`\n\t\t\t);\n\t\t\tlogger.debug('federated sign in credentials', credentials);\n\t\t\treturn credentials;\n\t\t}\n\t}\n\n\t/**\n\t * Used to complete the OAuth flow with or without the Cognito Hosted UI\n\t * @param {String} URL - optional parameter for customers to pass in the response URL\n\t */\n\tprivate async _handleAuthResponse(URL?: string) {\n\t\tif (this.oAuthFlowInProgress) {\n\t\t\tlogger.debug(`Skipping URL ${URL} current flow in progress`);\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tthis.oAuthFlowInProgress = true;\n\t\t\tif (!this._config.userPoolId) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`OAuth responses require a User Pool defined in config`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tdispatchAuthEvent(\n\t\t\t\t'parsingCallbackUrl',\n\t\t\t\t{ url: URL },\n\t\t\t\t`The callback url is being parsed`\n\t\t\t);\n\n\t\t\tconst currentUrl =\n\t\t\t\tURL || (browserOrNode().isBrowser ? window.location.href : '');\n\n\t\t\tconst hasCodeOrError = !!(parse(currentUrl).query || '')\n\t\t\t\t.split('&')\n\t\t\t\t.map(entry => entry.split('='))\n\t\t\t\t.find(([k]) => k === 'code' || k === 'error');\n\n\t\t\tconst hasTokenOrError = !!(parse(currentUrl).hash || '#')\n\t\t\t\t.substr(1)\n\t\t\t\t.split('&')\n\t\t\t\t.map(entry => entry.split('='))\n\t\t\t\t.find(([k]) => k === 'access_token' || k === 'error');\n\n\t\t\tif (hasCodeOrError || hasTokenOrError) {\n\t\t\t\tthis._storage.setItem('amplify-redirected-from-hosted-ui', 'true');\n\t\t\t\ttry {\n\t\t\t\t\tconst { accessToken, idToken, refreshToken, state } =\n\t\t\t\t\t\tawait this._oAuthHandler.handleAuthResponse(currentUrl);\n\t\t\t\t\tconst session = new CognitoUserSession({\n\t\t\t\t\t\tIdToken: new CognitoIdToken({ IdToken: idToken }),\n\t\t\t\t\t\tRefreshToken: new CognitoRefreshToken({\n\t\t\t\t\t\t\tRefreshToken: refreshToken,\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tAccessToken: new CognitoAccessToken({\n\t\t\t\t\t\t\tAccessToken: accessToken,\n\t\t\t\t\t\t}),\n\t\t\t\t\t});\n\n\t\t\t\t\tlet credentials;\n\t\t\t\t\t// Get AWS Credentials & store if Identity Pool is defined\n\t\t\t\t\tif (this._config.identityPoolId) {\n\t\t\t\t\t\tcredentials = await this.Credentials.set(session, 'session');\n\t\t\t\t\t\tlogger.debug('AWS credentials', credentials);\n\t\t\t\t\t}\n\n\t\t\t\t\t/*\n\t\t\t\tPrior to the request we do sign the custom state along with the state we set. This check will verify\n\t\t\t\tif there is a dash indicated when setting custom state from the request. If a dash is contained\n\t\t\t\tthen there is custom state present on the state string.\n\t\t\t\t*/\n\t\t\t\t\tconst isCustomStateIncluded = /-/.test(state);\n\n\t\t\t\t\t/*\n\t\t\t\tThe following is to create a user for the Cognito Identity SDK to store the tokens\n\t\t\t\tWhen we remove this SDK later that logic will have to be centralized in our new version\n\t\t\t\t*/\n\t\t\t\t\t//#region\n\t\t\t\t\tconst currentUser = this.createCognitoUser(\n\t\t\t\t\t\tsession.getIdToken().decodePayload()['cognito:username']\n\t\t\t\t\t);\n\n\t\t\t\t\t// This calls cacheTokens() in Cognito SDK\n\t\t\t\t\tcurrentUser.setSignInUserSession(session);\n\n\t\t\t\t\tif (window && typeof window.history !== 'undefined') {\n\t\t\t\t\t\twindow.history.replaceState(\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t(this._config.oauth as AwsCognitoOAuthOpts).redirectSignIn\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t'signIn',\n\t\t\t\t\t\tcurrentUser,\n\t\t\t\t\t\t`A user ${currentUser.getUsername()} has been signed in`\n\t\t\t\t\t);\n\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t'cognitoHostedUI',\n\t\t\t\t\t\tcurrentUser,\n\t\t\t\t\t\t`A user ${currentUser.getUsername()} has been signed in via Cognito Hosted UI`\n\t\t\t\t\t);\n\n\t\t\t\t\tif (isCustomStateIncluded) {\n\t\t\t\t\t\tconst customState = state.split('-').splice(1).join('-');\n\n\t\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t\t'customOAuthState',\n\t\t\t\t\t\t\turlSafeDecode(customState),\n\t\t\t\t\t\t\t`State for user ${currentUser.getUsername()}`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\t//#endregion\n\n\t\t\t\t\treturn credentials;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tlogger.debug('Error in cognito hosted auth response', err);\n\n\t\t\t\t\t// Just like a successful handling of `?code`, replace the window history to \"dispose\" of the `code`.\n\t\t\t\t\t// Otherwise, reloading the page will throw errors as the `code` has already been spent.\n\t\t\t\t\tif (window && typeof window.history !== 'undefined') {\n\t\t\t\t\t\twindow.history.replaceState(\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t(this._config.oauth as AwsCognitoOAuthOpts).redirectSignIn\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t'signIn_failure',\n\t\t\t\t\t\terr,\n\t\t\t\t\t\t`The OAuth response flow failed`\n\t\t\t\t\t);\n\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t'cognitoHostedUI_failure',\n\t\t\t\t\t\terr,\n\t\t\t\t\t\t`A failure occurred when returning to the Cognito Hosted UI`\n\t\t\t\t\t);\n\t\t\t\t\tdispatchAuthEvent(\n\t\t\t\t\t\t'customState_failure',\n\t\t\t\t\t\terr,\n\t\t\t\t\t\t`A failure occurred when returning state`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tthis.oAuthFlowInProgress = false;\n\t\t}\n\t}\n\n\t/**\n\t * Compact version of credentials\n\t * @param {Object} credentials\n\t * @return {Object} - Credentials\n\t */\n\tpublic essentialCredentials(credentials): ICredentials {\n\t\treturn {\n\t\t\taccessKeyId: credentials.accessKeyId,\n\t\t\tsessionToken: credentials.sessionToken,\n\t\t\tsecretAccessKey: credentials.secretAccessKey,\n\t\t\tidentityId: credentials.identityId,\n\t\t\tauthenticated: credentials.authenticated,\n\t\t};\n\t}\n\n\tprivate attributesToObject(attributes) {\n\t\tconst obj = {};\n\t\tif (attributes) {\n\t\t\tattributes.map(attribute => {\n\t\t\t\tif (\n\t\t\t\t\tattribute.Name === 'email_verified' ||\n\t\t\t\t\tattribute.Name === 'phone_number_verified'\n\t\t\t\t) {\n\t\t\t\t\tobj[attribute.Name] =\n\t\t\t\t\t\tthis.isTruthyString(attribute.Value) || attribute.Value === true;\n\t\t\t\t} else {\n\t\t\t\t\tobj[attribute.Name] = attribute.Value;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn obj;\n\t}\n\n\tprivate isTruthyString(value: any): boolean {\n\t\treturn (\n\t\t\ttypeof value.toLowerCase === 'function' && value.toLowerCase() === 'true'\n\t\t);\n\t}\n\n\tprivate createCognitoUser(username: string): CognitoUser {\n\t\tconst userData: ICognitoUserData = {\n\t\t\tUsername: username,\n\t\t\tPool: this.userPool,\n\t\t};\n\t\tuserData.Storage = this._storage;\n\n\t\tconst { authenticationFlowType } = this._config;\n\n\t\tconst user = new CognitoUser(userData);\n\t\tif (authenticationFlowType) {\n\t\t\tuser.setAuthenticationFlowType(authenticationFlowType);\n\t\t}\n\t\treturn user;\n\t}\n\n\tprivate _isValidAuthStorage(obj) {\n\t\t// We need to check if the obj has the functions of Storage\n\t\treturn (\n\t\t\t!!obj &&\n\t\t\ttypeof obj.getItem === 'function' &&\n\t\t\ttypeof obj.setItem === 'function' &&\n\t\t\ttypeof obj.removeItem === 'function' &&\n\t\t\ttypeof obj.clear === 'function'\n\t\t);\n\t}\n\n\tprivate noUserPoolErrorHandler(config: AuthOptions): AuthErrorTypes {\n\t\tif (config) {\n\t\t\tif (!config.userPoolId || !config.identityPoolId) {\n\t\t\t\treturn AuthErrorTypes.MissingAuthConfig;\n\t\t\t}\n\t\t}\n\t\treturn AuthErrorTypes.NoConfig;\n\t}\n\n\tprivate rejectAuthError(type: AuthErrorTypes): Promise<never> {\n\t\treturn Promise.reject(new AuthError(type));\n\t}\n\n\tprivate rejectNoUserPool(): Promise<never> {\n\t\tconst type = this.noUserPoolErrorHandler(this._config);\n\t\treturn Promise.reject(new NoUserPoolError(type));\n\t}\n\n\tpublic async rememberDevice(): Promise<string | AuthError> {\n\t\tlet currUser;\n\n\t\ttry {\n\t\t\tcurrUser = await this.currentUserPoolUser();\n\t\t} catch (error) {\n\t\t\tlogger.debug('The user is not authenticated by the error', error);\n\t\t\treturn Promise.reject('The user is not authenticated');\n\t\t}\n\n\t\tcurrUser.getCachedDeviceKeyAndPassword();\n\t\treturn new Promise((res, rej) => {\n\t\t\tcurrUser.setDeviceStatusRemembered({\n\t\t\t\tonSuccess: data => {\n\t\t\t\t\tres(data);\n\t\t\t\t},\n\t\t\t\tonFailure: err => {\n\t\t\t\t\tif (err.code === 'InvalidParameterException') {\n\t\t\t\t\t\trej(new AuthError(AuthErrorTypes.DeviceConfig));\n\t\t\t\t\t} else if (err.code === 'NetworkError') {\n\t\t\t\t\t\trej(new AuthError(AuthErrorTypes.NetworkError));\n\t\t\t\t\t} else {\n\t\t\t\t\t\trej(err);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic async forgetDevice(): Promise<void> {\n\t\tlet currUser;\n\n\t\ttry {\n\t\t\tcurrUser = await this.currentUserPoolUser();\n\t\t} catch (error) {\n\t\t\tlogger.debug('The user is not authenticated by the error', error);\n\t\t\treturn Promise.reject('The user is not authenticated');\n\t\t}\n\n\t\tcurrUser.getCachedDeviceKeyAndPassword();\n\t\treturn new Promise((res, rej) => {\n\t\t\tcurrUser.forgetDevice({\n\t\t\t\tonSuccess: data => {\n\t\t\t\t\tres(data);\n\t\t\t\t},\n\t\t\t\tonFailure: err => {\n\t\t\t\t\tif (err.code === 'InvalidParameterException') {\n\t\t\t\t\t\trej(new AuthError(AuthErrorTypes.DeviceConfig));\n\t\t\t\t\t} else if (err.code === 'NetworkError') {\n\t\t\t\t\t\trej(new AuthError(AuthErrorTypes.NetworkError));\n\t\t\t\t\t} else {\n\t\t\t\t\t\trej(err);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic async fetchDevices(): Promise<IAuthDevice[]> {\n\t\tlet currUser;\n\n\t\ttry {\n\t\t\tcurrUser = await this.currentUserPoolUser();\n\t\t} catch (error) {\n\t\t\tlogger.debug('The user is not authenticated by the error', error);\n\t\t\tthrow new Error('The user is not authenticated');\n\t\t}\n\n\t\tcurrUser.getCachedDeviceKeyAndPassword();\n\t\treturn new Promise((res, rej) => {\n\t\t\tconst cb = {\n\t\t\t\tonSuccess(data) {\n\t\t\t\t\tconst deviceList: IAuthDevice[] = data.Devices.map(device => {\n\t\t\t\t\t\tconst deviceName =\n\t\t\t\t\t\t\tdevice.DeviceAttributes.find(\n\t\t\t\t\t\t\t\t({ Name }) => Name === 'device_name'\n\t\t\t\t\t\t\t) || {};\n\n\t\t\t\t\t\tconst deviceInfo: IAuthDevice = {\n\t\t\t\t\t\t\tid: device.DeviceKey,\n\t\t\t\t\t\t\tname: deviceName.Value,\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn deviceInfo;\n\t\t\t\t\t});\n\t\t\t\t\tres(deviceList);\n\t\t\t\t},\n\t\t\t\tonFailure: err => {\n\t\t\t\t\tif (err.code === 'InvalidParameterException') {\n\t\t\t\t\t\trej(new AuthError(AuthErrorTypes.DeviceConfig));\n\t\t\t\t\t} else if (err.code === 'NetworkError') {\n\t\t\t\t\t\trej(new AuthError(AuthErrorTypes.NetworkError));\n\t\t\t\t\t} else {\n\t\t\t\t\t\trej(err);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t};\n\t\t\tcurrUser.listDevices(MAX_DEVICES, null, cb);\n\t\t});\n\t}\n}\n\nexport const Auth = new AuthClass(null);\n\nAmplify.register(Auth);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}