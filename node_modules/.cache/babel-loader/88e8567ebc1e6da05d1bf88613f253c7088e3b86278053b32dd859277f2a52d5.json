{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { ConsoleLogger as Logger } from './Logger';\nimport { StorageHelper } from './StorageHelper';\nimport { makeQuerablePromise } from './JS';\nimport { FacebookOAuth, GoogleOAuth } from './OAuthHelper';\nimport { jitteredExponentialRetry } from './Util';\nimport { getAmplifyUserAgent } from './Platform';\nimport { Amplify } from './Amplify';\nimport { fromCognitoIdentity, fromCognitoIdentityPool } from '@aws-sdk/credential-provider-cognito-identity';\nimport { CognitoIdentityClient, GetIdCommand } from '@aws-sdk/client-cognito-identity';\nvar logger = new Logger('Credentials');\nvar CREDENTIALS_TTL = 50 * 60 * 1000; // 50 min, can be modified on config if required in the future\nvar CredentialsClass = /** @class */function () {\n  function CredentialsClass(config) {\n    this._gettingCredPromise = null;\n    this._refreshHandlers = {};\n    // Allow `Auth` to be injected for SSR, but Auth isn't a required dependency for Credentials\n    this.Auth = undefined;\n    this.configure(config);\n    this._refreshHandlers['google'] = GoogleOAuth.refreshGoogleToken;\n    this._refreshHandlers['facebook'] = FacebookOAuth.refreshFacebookToken;\n  }\n  CredentialsClass.prototype.getModuleName = function () {\n    return 'Credentials';\n  };\n  CredentialsClass.prototype.getCredSource = function () {\n    return this._credentials_source;\n  };\n  CredentialsClass.prototype.configure = function (config) {\n    if (!config) return this._config || {};\n    this._config = Object.assign({}, this._config, config);\n    var refreshHandlers = this._config.refreshHandlers;\n    // If the developer has provided an object of refresh handlers,\n    // then we can merge the provided handlers with the current handlers.\n    if (refreshHandlers) {\n      this._refreshHandlers = __assign(__assign({}, this._refreshHandlers), refreshHandlers);\n    }\n    this._storage = this._config.storage;\n    if (!this._storage) {\n      this._storage = new StorageHelper().getStorage();\n    }\n    this._storageSync = Promise.resolve();\n    if (typeof this._storage['sync'] === 'function') {\n      this._storageSync = this._storage['sync']();\n    }\n    return this._config;\n  };\n  CredentialsClass.prototype.get = function () {\n    logger.debug('getting credentials');\n    return this._pickupCredentials();\n  };\n  CredentialsClass.prototype._pickupCredentials = function () {\n    logger.debug('picking up credentials');\n    if (!this._gettingCredPromise || !this._gettingCredPromise.isPending()) {\n      logger.debug('getting new cred promise');\n      this._gettingCredPromise = makeQuerablePromise(this._keepAlive());\n    } else {\n      logger.debug('getting old cred promise');\n    }\n    return this._gettingCredPromise;\n  };\n  CredentialsClass.prototype._keepAlive = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var cred, _a, Auth, user_1, session, refreshToken_1, refreshRequest, err_1;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            logger.debug('checking if credentials exists and not expired');\n            cred = this._credentials;\n            if (cred && !this._isExpired(cred) && !this._isPastTTL()) {\n              logger.debug('credentials not changed and not expired, directly return');\n              return [2 /*return*/, Promise.resolve(cred)];\n            }\n            logger.debug('need to get a new credential or refresh the existing one');\n            _a = this.Auth, Auth = _a === void 0 ? Amplify.Auth : _a;\n            if (!Auth || typeof Auth.currentUserCredentials !== 'function') {\n              return [2 /*return*/, Promise.reject('No Auth module registered in Amplify')];\n            }\n            if (!(!this._isExpired(cred) && this._isPastTTL())) return [3 /*break*/, 6];\n            logger.debug('ttl has passed but token is not yet expired');\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 5,, 6]);\n            return [4 /*yield*/, Auth.currentUserPoolUser()];\n          case 2:\n            user_1 = _b.sent();\n            return [4 /*yield*/, Auth.currentSession()];\n          case 3:\n            session = _b.sent();\n            refreshToken_1 = session.refreshToken;\n            refreshRequest = new Promise(function (res, rej) {\n              user_1.refreshSession(refreshToken_1, function (err, data) {\n                return err ? rej(err) : res(data);\n              });\n            });\n            return [4 /*yield*/, refreshRequest];\n          case 4:\n            _b.sent(); // note that rejections will be caught and handled in the catch block.\n            return [3 /*break*/, 6];\n          case 5:\n            err_1 = _b.sent();\n            // should not throw because user might just be on guest access or is authenticated through federation\n            logger.debug('Error attempting to refreshing the session', err_1);\n            return [3 /*break*/, 6];\n          case 6:\n            return [2 /*return*/, Auth.currentUserCredentials()];\n        }\n      });\n    });\n  };\n  CredentialsClass.prototype.refreshFederatedToken = function (federatedInfo) {\n    logger.debug('Getting federated credentials');\n    var provider = federatedInfo.provider,\n      user = federatedInfo.user,\n      token = federatedInfo.token,\n      identity_id = federatedInfo.identity_id;\n    var expires_at = federatedInfo.expires_at;\n    // Make sure expires_at is in millis\n    expires_at = new Date(expires_at).getFullYear() === 1970 ? expires_at * 1000 : expires_at;\n    var that = this;\n    logger.debug('checking if federated jwt token expired');\n    if (expires_at > new Date().getTime()) {\n      // if not expired\n      logger.debug('token not expired');\n      return this._setCredentialsFromFederation({\n        provider: provider,\n        token: token,\n        user: user,\n        identity_id: identity_id,\n        expires_at: expires_at\n      });\n    } else {\n      // if refresh handler exists\n      if (that._refreshHandlers[provider] && typeof that._refreshHandlers[provider] === 'function') {\n        logger.debug('getting refreshed jwt token from federation provider');\n        return this._providerRefreshWithRetry({\n          refreshHandler: that._refreshHandlers[provider],\n          provider: provider,\n          user: user\n        });\n      } else {\n        logger.debug('no refresh handler for provider:', provider);\n        this.clear();\n        return Promise.reject('no refresh handler for provider');\n      }\n    }\n  };\n  CredentialsClass.prototype._providerRefreshWithRetry = function (_a) {\n    var _this = this;\n    var refreshHandler = _a.refreshHandler,\n      provider = _a.provider,\n      user = _a.user;\n    var MAX_DELAY_MS = 10 * 1000;\n    // refreshHandler will retry network errors, otherwise it will\n    // return NonRetryableError to break out of jitteredExponentialRetry\n    return jitteredExponentialRetry(refreshHandler, [], MAX_DELAY_MS).then(function (data) {\n      logger.debug('refresh federated token sucessfully', data);\n      return _this._setCredentialsFromFederation({\n        provider: provider,\n        token: data.token,\n        user: user,\n        identity_id: data.identity_id,\n        expires_at: data.expires_at\n      });\n    }).catch(function (e) {\n      var isNetworkError = typeof e === 'string' && e.toLowerCase().lastIndexOf('network error', e.length) === 0;\n      if (!isNetworkError) {\n        _this.clear();\n      }\n      logger.debug('refresh federated token failed', e);\n      return Promise.reject('refreshing federation token failed: ' + e);\n    });\n  };\n  CredentialsClass.prototype._isExpired = function (credentials) {\n    if (!credentials) {\n      logger.debug('no credentials for expiration check');\n      return true;\n    }\n    logger.debug('are these credentials expired?', credentials);\n    var ts = Date.now();\n    /* returns date object.\n        https://github.com/aws/aws-sdk-js-v3/blob/v1.0.0-beta.1/packages/types/src/credentials.ts#L26\n    */\n    var expiration = credentials.expiration;\n    return expiration.getTime() <= ts;\n  };\n  CredentialsClass.prototype._isPastTTL = function () {\n    return this._nextCredentialsRefresh <= Date.now();\n  };\n  CredentialsClass.prototype._setCredentialsForGuest = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, identityPoolId, region, mandatorySignIn, identityId, e_1, cognitoClient, credentials, cognitoIdentityParams, credentialsProvider;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            logger.debug('setting credentials for guest');\n            _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region, mandatorySignIn = _a.mandatorySignIn;\n            if (mandatorySignIn) {\n              return [2 /*return*/, Promise.reject('cannot get guest credentials when mandatory signin enabled')];\n            }\n            if (!identityPoolId) {\n              logger.debug('No Cognito Identity pool provided for unauthenticated access');\n              return [2 /*return*/, Promise.reject('No Cognito Identity pool provided for unauthenticated access')];\n            }\n            if (!region) {\n              logger.debug('region is not configured for getting the credentials');\n              return [2 /*return*/, Promise.reject('region is not configured for getting the credentials')];\n            }\n            identityId = undefined;\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this._storageSync];\n          case 2:\n            _b.sent();\n            identityId = this._storage.getItem('CognitoIdentityId-' + identityPoolId);\n            this._identityId = identityId;\n            return [3 /*break*/, 4];\n          case 3:\n            e_1 = _b.sent();\n            logger.debug('Failed to get the cached identityId', e_1);\n            return [3 /*break*/, 4];\n          case 4:\n            cognitoClient = new CognitoIdentityClient({\n              region: region,\n              customUserAgent: getAmplifyUserAgent()\n            });\n            credentials = undefined;\n            if (identityId) {\n              cognitoIdentityParams = {\n                identityId: identityId,\n                client: cognitoClient\n              };\n              credentials = fromCognitoIdentity(cognitoIdentityParams)();\n            } else {\n              credentialsProvider = function () {\n                return __awaiter(_this, void 0, void 0, function () {\n                  var IdentityId, cognitoIdentityParams, credentialsFromCognitoIdentity;\n                  return __generator(this, function (_a) {\n                    switch (_a.label) {\n                      case 0:\n                        return [4 /*yield*/, cognitoClient.send(new GetIdCommand({\n                          IdentityPoolId: identityPoolId\n                        }))];\n                      case 1:\n                        IdentityId = _a.sent().IdentityId;\n                        this._identityId = IdentityId;\n                        cognitoIdentityParams = {\n                          client: cognitoClient,\n                          identityId: IdentityId\n                        };\n                        credentialsFromCognitoIdentity = fromCognitoIdentity(cognitoIdentityParams);\n                        return [2 /*return*/, credentialsFromCognitoIdentity()];\n                    }\n                  });\n                });\n              };\n              credentials = credentialsProvider().catch(function (err) {\n                return __awaiter(_this, void 0, void 0, function () {\n                  return __generator(this, function (_a) {\n                    throw err;\n                  });\n                });\n              });\n            }\n            return [2 /*return*/, this._loadCredentials(credentials, 'guest', false, null).then(function (res) {\n              return res;\n            }).catch(function (e) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var credentialsProvider;\n                var _this = this;\n                return __generator(this, function (_a) {\n                  // If identity id is deleted in the console, we make one attempt to recreate it\n                  // and remove existing id from cache.\n                  if (e.name === 'ResourceNotFoundException' && e.message === \"Identity '\" + identityId + \"' not found.\") {\n                    logger.debug('Failed to load guest credentials');\n                    this._storage.removeItem('CognitoIdentityId-' + identityPoolId);\n                    credentialsProvider = function () {\n                      return __awaiter(_this, void 0, void 0, function () {\n                        var IdentityId, cognitoIdentityParams, credentialsFromCognitoIdentity;\n                        return __generator(this, function (_a) {\n                          switch (_a.label) {\n                            case 0:\n                              return [4 /*yield*/, cognitoClient.send(new GetIdCommand({\n                                IdentityPoolId: identityPoolId\n                              }))];\n                            case 1:\n                              IdentityId = _a.sent().IdentityId;\n                              this._identityId = IdentityId;\n                              cognitoIdentityParams = {\n                                client: cognitoClient,\n                                identityId: IdentityId\n                              };\n                              credentialsFromCognitoIdentity = fromCognitoIdentity(cognitoIdentityParams);\n                              return [2 /*return*/, credentialsFromCognitoIdentity()];\n                          }\n                        });\n                      });\n                    };\n                    credentials = credentialsProvider().catch(function (err) {\n                      return __awaiter(_this, void 0, void 0, function () {\n                        return __generator(this, function (_a) {\n                          throw err;\n                        });\n                      });\n                    });\n                    return [2 /*return*/, this._loadCredentials(credentials, 'guest', false, null)];\n                  } else {\n                    return [2 /*return*/, e];\n                  }\n                  return [2 /*return*/];\n                });\n              });\n            })];\n        }\n      });\n    });\n  };\n\n  CredentialsClass.prototype._setCredentialsFromFederation = function (params) {\n    var provider = params.provider,\n      token = params.token,\n      identity_id = params.identity_id;\n    var domains = {\n      google: 'accounts.google.com',\n      facebook: 'graph.facebook.com',\n      amazon: 'www.amazon.com',\n      developer: 'cognito-identity.amazonaws.com'\n    };\n    // Use custom provider url instead of the predefined ones\n    var domain = domains[provider] || provider;\n    if (!domain) {\n      return Promise.reject('You must specify a federated provider');\n    }\n    var logins = {};\n    logins[domain] = token;\n    var _a = this._config,\n      identityPoolId = _a.identityPoolId,\n      region = _a.region;\n    if (!identityPoolId) {\n      logger.debug('No Cognito Federated Identity pool provided');\n      return Promise.reject('No Cognito Federated Identity pool provided');\n    }\n    if (!region) {\n      logger.debug('region is not configured for getting the credentials');\n      return Promise.reject('region is not configured for getting the credentials');\n    }\n    var cognitoClient = new CognitoIdentityClient({\n      region: region,\n      customUserAgent: getAmplifyUserAgent()\n    });\n    var credentials = undefined;\n    if (identity_id) {\n      var cognitoIdentityParams = {\n        identityId: identity_id,\n        logins: logins,\n        client: cognitoClient\n      };\n      credentials = fromCognitoIdentity(cognitoIdentityParams)();\n    } else {\n      var cognitoIdentityParams = {\n        logins: logins,\n        identityPoolId: identityPoolId,\n        client: cognitoClient\n      };\n      credentials = fromCognitoIdentityPool(cognitoIdentityParams)();\n    }\n    return this._loadCredentials(credentials, 'federated', true, params);\n  };\n  CredentialsClass.prototype._setCredentialsFromSession = function (session) {\n    var _this = this;\n    logger.debug('set credentials from session');\n    var idToken = session.getIdToken().getJwtToken();\n    var _a = this._config,\n      region = _a.region,\n      userPoolId = _a.userPoolId,\n      identityPoolId = _a.identityPoolId;\n    if (!identityPoolId) {\n      logger.debug('No Cognito Federated Identity pool provided');\n      return Promise.reject('No Cognito Federated Identity pool provided');\n    }\n    if (!region) {\n      logger.debug('region is not configured for getting the credentials');\n      return Promise.reject('region is not configured for getting the credentials');\n    }\n    var key = 'cognito-idp.' + region + '.amazonaws.com/' + userPoolId;\n    var logins = {};\n    logins[key] = idToken;\n    var cognitoClient = new CognitoIdentityClient({\n      region: region,\n      customUserAgent: getAmplifyUserAgent()\n    });\n    /*\n        Retreiving identityId with GetIdCommand to mimic the behavior in the following code in aws-sdk-v3:\n        https://git.io/JeDxU\n         Note: Retreive identityId from CredentialsProvider once aws-sdk-js v3 supports this.\n    */\n    var credentialsProvider = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var IdentityId, cognitoIdentityParams, credentialsFromCognitoIdentity;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, cognitoClient.send(new GetIdCommand({\n                IdentityPoolId: identityPoolId,\n                Logins: logins\n              }))];\n            case 1:\n              IdentityId = _a.sent().IdentityId;\n              this._identityId = IdentityId;\n              cognitoIdentityParams = {\n                client: cognitoClient,\n                logins: logins,\n                identityId: IdentityId\n              };\n              credentialsFromCognitoIdentity = fromCognitoIdentity(cognitoIdentityParams);\n              return [2 /*return*/, credentialsFromCognitoIdentity()];\n          }\n        });\n      });\n    };\n    var credentials = credentialsProvider().catch(function (err) {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          throw err;\n        });\n      });\n    });\n    return this._loadCredentials(credentials, 'userPool', true, null);\n  };\n  CredentialsClass.prototype._loadCredentials = function (credentials, source, authenticated, info) {\n    var _this = this;\n    var that = this;\n    var identityPoolId = this._config.identityPoolId;\n    return new Promise(function (res, rej) {\n      credentials.then(function (credentials) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var user, provider, token, expires_at, identity_id, e_2;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                logger.debug('Load credentials successfully', credentials);\n                if (this._identityId && !credentials.identityId) {\n                  credentials['identityId'] = this._identityId;\n                }\n                that._credentials = credentials;\n                that._credentials.authenticated = authenticated;\n                that._credentials_source = source;\n                that._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;\n                if (source === 'federated') {\n                  user = Object.assign({\n                    id: this._credentials.identityId\n                  }, info.user);\n                  provider = info.provider, token = info.token, expires_at = info.expires_at, identity_id = info.identity_id;\n                  try {\n                    this._storage.setItem('aws-amplify-federatedInfo', JSON.stringify({\n                      provider: provider,\n                      token: token,\n                      user: user,\n                      expires_at: expires_at,\n                      identity_id: identity_id\n                    }));\n                  } catch (e) {\n                    logger.debug('Failed to put federated info into auth storage', e);\n                  }\n                }\n                if (!(source === 'guest')) return [3 /*break*/, 4];\n                _a.label = 1;\n              case 1:\n                _a.trys.push([1, 3,, 4]);\n                return [4 /*yield*/, this._storageSync];\n              case 2:\n                _a.sent();\n                this._storage.setItem('CognitoIdentityId-' + identityPoolId, credentials.identityId // TODO: IdentityId is currently not returned by fromCognitoIdentityPool()\n                );\n\n                return [3 /*break*/, 4];\n              case 3:\n                e_2 = _a.sent();\n                logger.debug('Failed to cache identityId', e_2);\n                return [3 /*break*/, 4];\n              case 4:\n                res(that._credentials);\n                return [2 /*return*/];\n            }\n          });\n        });\n      }).catch(function (err) {\n        if (err) {\n          logger.debug('Failed to load credentials', credentials);\n          logger.debug('Error loading credentials', err);\n          rej(err);\n          return;\n        }\n      });\n    });\n  };\n  CredentialsClass.prototype.set = function (params, source) {\n    if (source === 'session') {\n      return this._setCredentialsFromSession(params);\n    } else if (source === 'federation') {\n      return this._setCredentialsFromFederation(params);\n    } else if (source === 'guest') {\n      return this._setCredentialsForGuest();\n    } else {\n      logger.debug('no source specified for setting credentials');\n      return Promise.reject('invalid source');\n    }\n  };\n  CredentialsClass.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        this._credentials = null;\n        this._credentials_source = null;\n        logger.debug('removing aws-amplify-federatedInfo from storage');\n        this._storage.removeItem('aws-amplify-federatedInfo');\n        return [2 /*return*/];\n      });\n    });\n  };\n  /**\n   * Compact version of credentials\n   * @param {Object} credentials\n   * @return {Object} - Credentials\n   */\n  CredentialsClass.prototype.shear = function (credentials) {\n    return {\n      accessKeyId: credentials.accessKeyId,\n      sessionToken: credentials.sessionToken,\n      secretAccessKey: credentials.secretAccessKey,\n      identityId: credentials.identityId,\n      authenticated: credentials.authenticated\n    };\n  };\n  return CredentialsClass;\n}();\nexport { CredentialsClass };\nexport var Credentials = new CredentialsClass(null);\nAmplify.register(Credentials);\n/**\n * @deprecated use named import\n */\nexport default Credentials;","map":{"version":3,"names":["ConsoleLogger","Logger","StorageHelper","makeQuerablePromise","FacebookOAuth","GoogleOAuth","jitteredExponentialRetry","getAmplifyUserAgent","Amplify","fromCognitoIdentity","fromCognitoIdentityPool","CognitoIdentityClient","GetIdCommand","logger","CREDENTIALS_TTL","CredentialsClass","config","_gettingCredPromise","_refreshHandlers","Auth","undefined","configure","refreshGoogleToken","refreshFacebookToken","prototype","getModuleName","getCredSource","_credentials_source","_config","Object","assign","refreshHandlers","__assign","_storage","storage","getStorage","_storageSync","Promise","resolve","get","debug","_pickupCredentials","isPending","_keepAlive","cred","_credentials","_isExpired","_isPastTTL","_a","currentUserCredentials","reject","currentUserPoolUser","user_1","_b","sent","currentSession","session","refreshToken_1","refreshToken","refreshRequest","res","rej","refreshSession","err","data","err_1","refreshFederatedToken","federatedInfo","provider","user","token","identity_id","expires_at","Date","getFullYear","that","getTime","_setCredentialsFromFederation","_providerRefreshWithRetry","refreshHandler","clear","_this","MAX_DELAY_MS","then","catch","e","isNetworkError","toLowerCase","lastIndexOf","length","credentials","ts","now","expiration","_nextCredentialsRefresh","_setCredentialsForGuest","identityPoolId","region","mandatorySignIn","identityId","getItem","_identityId","e_1","cognitoClient","customUserAgent","cognitoIdentityParams","client","credentialsProvider","__awaiter","send","IdentityPoolId","IdentityId","credentialsFromCognitoIdentity","_loadCredentials","name","message","removeItem","params","domains","google","facebook","amazon","developer","domain","logins","_setCredentialsFromSession","idToken","getIdToken","getJwtToken","userPoolId","key","Logins","source","authenticated","info","id","setItem","JSON","stringify","e_2","set","shear","accessKeyId","sessionToken","secretAccessKey","Credentials","register"],"sources":["/Users/ericli/node_modules/@aws-amplify/core/src/Credentials.ts"],"sourcesContent":["import { ConsoleLogger as Logger } from './Logger';\nimport { StorageHelper } from './StorageHelper';\nimport { makeQuerablePromise } from './JS';\nimport { FacebookOAuth, GoogleOAuth } from './OAuthHelper';\nimport { jitteredExponentialRetry } from './Util';\nimport { ICredentials } from './types';\nimport { getAmplifyUserAgent } from './Platform';\nimport { Amplify } from './Amplify';\nimport {\n\tfromCognitoIdentity,\n\tFromCognitoIdentityParameters,\n\tfromCognitoIdentityPool,\n\tFromCognitoIdentityPoolParameters,\n} from '@aws-sdk/credential-provider-cognito-identity';\nimport {\n\tCognitoIdentityClient,\n\tGetIdCommand,\n} from '@aws-sdk/client-cognito-identity';\nimport { CredentialProvider } from '@aws-sdk/types';\n\nconst logger = new Logger('Credentials');\n\nconst CREDENTIALS_TTL = 50 * 60 * 1000; // 50 min, can be modified on config if required in the future\n\nexport class CredentialsClass {\n\tprivate _config;\n\tprivate _credentials;\n\tprivate _credentials_source;\n\tprivate _gettingCredPromise = null;\n\tprivate _refreshHandlers = {};\n\tprivate _storage;\n\tprivate _storageSync;\n\tprivate _identityId;\n\tprivate _nextCredentialsRefresh: Number;\n\n\t// Allow `Auth` to be injected for SSR, but Auth isn't a required dependency for Credentials\n\tAuth = undefined;\n\n\tconstructor(config) {\n\t\tthis.configure(config);\n\t\tthis._refreshHandlers['google'] = GoogleOAuth.refreshGoogleToken;\n\t\tthis._refreshHandlers['facebook'] = FacebookOAuth.refreshFacebookToken;\n\t}\n\n\tpublic getModuleName() {\n\t\treturn 'Credentials';\n\t}\n\n\tpublic getCredSource() {\n\t\treturn this._credentials_source;\n\t}\n\n\tpublic configure(config) {\n\t\tif (!config) return this._config || {};\n\n\t\tthis._config = Object.assign({}, this._config, config);\n\t\tconst { refreshHandlers } = this._config;\n\t\t// If the developer has provided an object of refresh handlers,\n\t\t// then we can merge the provided handlers with the current handlers.\n\t\tif (refreshHandlers) {\n\t\t\tthis._refreshHandlers = {\n\t\t\t\t...this._refreshHandlers,\n\t\t\t\t...refreshHandlers,\n\t\t\t};\n\t\t}\n\n\t\tthis._storage = this._config.storage;\n\n\t\tif (!this._storage) {\n\t\t\tthis._storage = new StorageHelper().getStorage();\n\t\t}\n\n\t\tthis._storageSync = Promise.resolve();\n\t\tif (typeof this._storage['sync'] === 'function') {\n\t\t\tthis._storageSync = this._storage['sync']();\n\t\t}\n\n\t\treturn this._config;\n\t}\n\n\tpublic get() {\n\t\tlogger.debug('getting credentials');\n\t\treturn this._pickupCredentials();\n\t}\n\n\tprivate _pickupCredentials() {\n\t\tlogger.debug('picking up credentials');\n\t\tif (!this._gettingCredPromise || !this._gettingCredPromise.isPending()) {\n\t\t\tlogger.debug('getting new cred promise');\n\t\t\tthis._gettingCredPromise = makeQuerablePromise(this._keepAlive());\n\t\t} else {\n\t\t\tlogger.debug('getting old cred promise');\n\t\t}\n\t\treturn this._gettingCredPromise;\n\t}\n\n\tprivate async _keepAlive() {\n\t\tlogger.debug('checking if credentials exists and not expired');\n\t\tconst cred = this._credentials;\n\t\tif (cred && !this._isExpired(cred) && !this._isPastTTL()) {\n\t\t\tlogger.debug('credentials not changed and not expired, directly return');\n\t\t\treturn Promise.resolve(cred);\n\t\t}\n\n\t\tlogger.debug('need to get a new credential or refresh the existing one');\n\n\t\t// Some use-cases don't require Auth for signing in, but use Credentials for guest users (e.g. Analytics)\n\t\t// Prefer locally scoped `Auth`, but fallback to registered `Amplify.Auth` global otherwise.\n\t\tconst { Auth = Amplify.Auth } = this;\n\n\t\tif (!Auth || typeof Auth.currentUserCredentials !== 'function') {\n\t\t\treturn Promise.reject('No Auth module registered in Amplify');\n\t\t}\n\n\t\tif (!this._isExpired(cred) && this._isPastTTL()) {\n\t\t\tlogger.debug('ttl has passed but token is not yet expired');\n\t\t\ttry {\n\t\t\t\tconst user = await Auth.currentUserPoolUser();\n\t\t\t\tconst session = await Auth.currentSession();\n\t\t\t\tconst refreshToken = session.refreshToken;\n\t\t\t\tconst refreshRequest = new Promise((res, rej) => {\n\t\t\t\t\tuser.refreshSession(refreshToken, (err, data) => {\n\t\t\t\t\t\treturn err ? rej(err) : res(data);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tawait refreshRequest; // note that rejections will be caught and handled in the catch block.\n\t\t\t} catch (err) {\n\t\t\t\t// should not throw because user might just be on guest access or is authenticated through federation\n\t\t\t\tlogger.debug('Error attempting to refreshing the session', err);\n\t\t\t}\n\t\t}\n\t\treturn Auth.currentUserCredentials();\n\t}\n\n\tpublic refreshFederatedToken(federatedInfo) {\n\t\tlogger.debug('Getting federated credentials');\n\t\tconst { provider, user, token, identity_id } = federatedInfo;\n\t\tlet { expires_at } = federatedInfo;\n\n\t\t// Make sure expires_at is in millis\n\t\texpires_at =\n\t\t\tnew Date(expires_at).getFullYear() === 1970\n\t\t\t\t? expires_at * 1000\n\t\t\t\t: expires_at;\n\n\t\tconst that = this;\n\t\tlogger.debug('checking if federated jwt token expired');\n\t\tif (expires_at > new Date().getTime()) {\n\t\t\t// if not expired\n\t\t\tlogger.debug('token not expired');\n\t\t\treturn this._setCredentialsFromFederation({\n\t\t\t\tprovider,\n\t\t\t\ttoken,\n\t\t\t\tuser,\n\t\t\t\tidentity_id,\n\t\t\t\texpires_at,\n\t\t\t});\n\t\t} else {\n\t\t\t// if refresh handler exists\n\t\t\tif (\n\t\t\t\tthat._refreshHandlers[provider] &&\n\t\t\t\ttypeof that._refreshHandlers[provider] === 'function'\n\t\t\t) {\n\t\t\t\tlogger.debug('getting refreshed jwt token from federation provider');\n\t\t\t\treturn this._providerRefreshWithRetry({\n\t\t\t\t\trefreshHandler: that._refreshHandlers[provider],\n\t\t\t\t\tprovider,\n\t\t\t\t\tuser,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlogger.debug('no refresh handler for provider:', provider);\n\t\t\t\tthis.clear();\n\t\t\t\treturn Promise.reject('no refresh handler for provider');\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _providerRefreshWithRetry({ refreshHandler, provider, user }) {\n\t\tconst MAX_DELAY_MS = 10 * 1000;\n\t\t// refreshHandler will retry network errors, otherwise it will\n\t\t// return NonRetryableError to break out of jitteredExponentialRetry\n\t\treturn jitteredExponentialRetry(refreshHandler, [], MAX_DELAY_MS)\n\t\t\t.then(data => {\n\t\t\t\tlogger.debug('refresh federated token sucessfully', data);\n\t\t\t\treturn this._setCredentialsFromFederation({\n\t\t\t\t\tprovider,\n\t\t\t\t\ttoken: data.token,\n\t\t\t\t\tuser,\n\t\t\t\t\tidentity_id: data.identity_id,\n\t\t\t\t\texpires_at: data.expires_at,\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(e => {\n\t\t\t\tconst isNetworkError =\n\t\t\t\t\ttypeof e === 'string' &&\n\t\t\t\t\te.toLowerCase().lastIndexOf('network error', e.length) === 0;\n\n\t\t\t\tif (!isNetworkError) {\n\t\t\t\t\tthis.clear();\n\t\t\t\t}\n\n\t\t\t\tlogger.debug('refresh federated token failed', e);\n\t\t\t\treturn Promise.reject('refreshing federation token failed: ' + e);\n\t\t\t});\n\t}\n\n\tprivate _isExpired(credentials): boolean {\n\t\tif (!credentials) {\n\t\t\tlogger.debug('no credentials for expiration check');\n\t\t\treturn true;\n\t\t}\n\t\tlogger.debug('are these credentials expired?', credentials);\n\t\tconst ts = Date.now();\n\n\t\t/* returns date object.\n\t\t\thttps://github.com/aws/aws-sdk-js-v3/blob/v1.0.0-beta.1/packages/types/src/credentials.ts#L26\n\t\t*/\n\t\tconst { expiration } = credentials;\n\t\treturn expiration.getTime() <= ts;\n\t}\n\n\tprivate _isPastTTL(): boolean {\n\t\treturn this._nextCredentialsRefresh <= Date.now();\n\t}\n\n\tprivate async _setCredentialsForGuest() {\n\t\tlogger.debug('setting credentials for guest');\n\t\tconst { identityPoolId, region, mandatorySignIn } = this._config;\n\t\tif (mandatorySignIn) {\n\t\t\treturn Promise.reject(\n\t\t\t\t'cannot get guest credentials when mandatory signin enabled'\n\t\t\t);\n\t\t}\n\n\t\tif (!identityPoolId) {\n\t\t\tlogger.debug(\n\t\t\t\t'No Cognito Identity pool provided for unauthenticated access'\n\t\t\t);\n\t\t\treturn Promise.reject(\n\t\t\t\t'No Cognito Identity pool provided for unauthenticated access'\n\t\t\t);\n\t\t}\n\n\t\tif (!region) {\n\t\t\tlogger.debug('region is not configured for getting the credentials');\n\t\t\treturn Promise.reject(\n\t\t\t\t'region is not configured for getting the credentials'\n\t\t\t);\n\t\t}\n\n\t\tlet identityId = undefined;\n\t\ttry {\n\t\t\tawait this._storageSync;\n\t\t\tidentityId = this._storage.getItem('CognitoIdentityId-' + identityPoolId);\n\t\t\tthis._identityId = identityId;\n\t\t} catch (e) {\n\t\t\tlogger.debug('Failed to get the cached identityId', e);\n\t\t}\n\n\t\tconst cognitoClient = new CognitoIdentityClient({\n\t\t\tregion,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\n\t\tlet credentials = undefined;\n\t\tif (identityId) {\n\t\t\tconst cognitoIdentityParams: FromCognitoIdentityParameters = {\n\t\t\t\tidentityId,\n\t\t\t\tclient: cognitoClient,\n\t\t\t};\n\t\t\tcredentials = fromCognitoIdentity(cognitoIdentityParams)();\n\t\t} else {\n\t\t\t/*\n\t\t\tRetreiving identityId with GetIdCommand to mimic the behavior in the following code in aws-sdk-v3:\n\t\t\thttps://git.io/JeDxU\n\n\t\t\tNote: Retreive identityId from CredentialsProvider once aws-sdk-js v3 supports this.\n\t\t\t*/\n\t\t\tconst credentialsProvider: CredentialProvider = async () => {\n\t\t\t\tconst { IdentityId } = await cognitoClient.send(\n\t\t\t\t\tnew GetIdCommand({\n\t\t\t\t\t\tIdentityPoolId: identityPoolId,\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t\tthis._identityId = IdentityId;\n\t\t\t\tconst cognitoIdentityParams: FromCognitoIdentityParameters = {\n\t\t\t\t\tclient: cognitoClient,\n\t\t\t\t\tidentityId: IdentityId,\n\t\t\t\t};\n\n\t\t\t\tconst credentialsFromCognitoIdentity = fromCognitoIdentity(\n\t\t\t\t\tcognitoIdentityParams\n\t\t\t\t);\n\n\t\t\t\treturn credentialsFromCognitoIdentity();\n\t\t\t};\n\n\t\t\tcredentials = credentialsProvider().catch(async err => {\n\t\t\t\tthrow err;\n\t\t\t});\n\t\t}\n\n\t\treturn this._loadCredentials(credentials, 'guest', false, null)\n\t\t\t.then(res => {\n\t\t\t\treturn res;\n\t\t\t})\n\t\t\t.catch(async e => {\n\t\t\t\t// If identity id is deleted in the console, we make one attempt to recreate it\n\t\t\t\t// and remove existing id from cache.\n\t\t\t\tif (\n\t\t\t\t\te.name === 'ResourceNotFoundException' &&\n\t\t\t\t\te.message === `Identity '${identityId}' not found.`\n\t\t\t\t) {\n\t\t\t\t\tlogger.debug('Failed to load guest credentials');\n\t\t\t\t\tthis._storage.removeItem('CognitoIdentityId-' + identityPoolId);\n\n\t\t\t\t\tconst credentialsProvider: CredentialProvider = async () => {\n\t\t\t\t\t\tconst { IdentityId } = await cognitoClient.send(\n\t\t\t\t\t\t\tnew GetIdCommand({\n\t\t\t\t\t\t\t\tIdentityPoolId: identityPoolId,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis._identityId = IdentityId;\n\t\t\t\t\t\tconst cognitoIdentityParams: FromCognitoIdentityParameters = {\n\t\t\t\t\t\t\tclient: cognitoClient,\n\t\t\t\t\t\t\tidentityId: IdentityId,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst credentialsFromCognitoIdentity = fromCognitoIdentity(\n\t\t\t\t\t\t\tcognitoIdentityParams\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\treturn credentialsFromCognitoIdentity();\n\t\t\t\t\t};\n\n\t\t\t\t\tcredentials = credentialsProvider().catch(async err => {\n\t\t\t\t\t\tthrow err;\n\t\t\t\t\t});\n\n\t\t\t\t\treturn this._loadCredentials(credentials, 'guest', false, null);\n\t\t\t\t} else {\n\t\t\t\t\treturn e;\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprivate _setCredentialsFromFederation(params) {\n\t\tconst { provider, token, identity_id } = params;\n\t\tconst domains = {\n\t\t\tgoogle: 'accounts.google.com',\n\t\t\tfacebook: 'graph.facebook.com',\n\t\t\tamazon: 'www.amazon.com',\n\t\t\tdeveloper: 'cognito-identity.amazonaws.com',\n\t\t};\n\n\t\t// Use custom provider url instead of the predefined ones\n\t\tconst domain = domains[provider] || provider;\n\t\tif (!domain) {\n\t\t\treturn Promise.reject('You must specify a federated provider');\n\t\t}\n\n\t\tconst logins = {};\n\t\tlogins[domain] = token;\n\n\t\tconst { identityPoolId, region } = this._config;\n\t\tif (!identityPoolId) {\n\t\t\tlogger.debug('No Cognito Federated Identity pool provided');\n\t\t\treturn Promise.reject('No Cognito Federated Identity pool provided');\n\t\t}\n\t\tif (!region) {\n\t\t\tlogger.debug('region is not configured for getting the credentials');\n\t\t\treturn Promise.reject(\n\t\t\t\t'region is not configured for getting the credentials'\n\t\t\t);\n\t\t}\n\n\t\tconst cognitoClient = new CognitoIdentityClient({\n\t\t\tregion,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\n\t\tlet credentials = undefined;\n\t\tif (identity_id) {\n\t\t\tconst cognitoIdentityParams: FromCognitoIdentityParameters = {\n\t\t\t\tidentityId: identity_id,\n\t\t\t\tlogins,\n\t\t\t\tclient: cognitoClient,\n\t\t\t};\n\t\t\tcredentials = fromCognitoIdentity(cognitoIdentityParams)();\n\t\t} else {\n\t\t\tconst cognitoIdentityParams: FromCognitoIdentityPoolParameters = {\n\t\t\t\tlogins,\n\t\t\t\tidentityPoolId,\n\t\t\t\tclient: cognitoClient,\n\t\t\t};\n\t\t\tcredentials = fromCognitoIdentityPool(cognitoIdentityParams)();\n\t\t}\n\t\treturn this._loadCredentials(credentials, 'federated', true, params);\n\t}\n\n\tprivate _setCredentialsFromSession(session): Promise<ICredentials> {\n\t\tlogger.debug('set credentials from session');\n\t\tconst idToken = session.getIdToken().getJwtToken();\n\t\tconst { region, userPoolId, identityPoolId } = this._config;\n\t\tif (!identityPoolId) {\n\t\t\tlogger.debug('No Cognito Federated Identity pool provided');\n\t\t\treturn Promise.reject('No Cognito Federated Identity pool provided');\n\t\t}\n\t\tif (!region) {\n\t\t\tlogger.debug('region is not configured for getting the credentials');\n\t\t\treturn Promise.reject(\n\t\t\t\t'region is not configured for getting the credentials'\n\t\t\t);\n\t\t}\n\t\tconst key = 'cognito-idp.' + region + '.amazonaws.com/' + userPoolId;\n\t\tconst logins = {};\n\t\tlogins[key] = idToken;\n\n\t\tconst cognitoClient = new CognitoIdentityClient({\n\t\t\tregion,\n\t\t\tcustomUserAgent: getAmplifyUserAgent(),\n\t\t});\n\n\t\t/* \n\t\t\tRetreiving identityId with GetIdCommand to mimic the behavior in the following code in aws-sdk-v3:\n\t\t\thttps://git.io/JeDxU\n\n\t\t\tNote: Retreive identityId from CredentialsProvider once aws-sdk-js v3 supports this.\n\t\t*/\n\t\tconst credentialsProvider: CredentialProvider = async () => {\n\t\t\tconst { IdentityId } = await cognitoClient.send(\n\t\t\t\tnew GetIdCommand({\n\t\t\t\t\tIdentityPoolId: identityPoolId,\n\t\t\t\t\tLogins: logins,\n\t\t\t\t})\n\t\t\t);\n\t\t\tthis._identityId = IdentityId;\n\n\t\t\tconst cognitoIdentityParams: FromCognitoIdentityParameters = {\n\t\t\t\tclient: cognitoClient,\n\t\t\t\tlogins,\n\t\t\t\tidentityId: IdentityId,\n\t\t\t};\n\n\t\t\tconst credentialsFromCognitoIdentity = fromCognitoIdentity(\n\t\t\t\tcognitoIdentityParams\n\t\t\t);\n\n\t\t\treturn credentialsFromCognitoIdentity();\n\t\t};\n\n\t\tconst credentials = credentialsProvider().catch(async err => {\n\t\t\tthrow err;\n\t\t});\n\n\t\treturn this._loadCredentials(credentials, 'userPool', true, null);\n\t}\n\n\tprivate _loadCredentials(\n\t\tcredentials,\n\t\tsource,\n\t\tauthenticated,\n\t\tinfo\n\t): Promise<ICredentials> {\n\t\tconst that = this;\n\t\tconst { identityPoolId } = this._config;\n\t\treturn new Promise((res, rej) => {\n\t\t\tcredentials\n\t\t\t\t.then(async credentials => {\n\t\t\t\t\tlogger.debug('Load credentials successfully', credentials);\n\t\t\t\t\tif (this._identityId && !credentials.identityId) {\n\t\t\t\t\t\tcredentials['identityId'] = this._identityId;\n\t\t\t\t\t}\n\n\t\t\t\t\tthat._credentials = credentials;\n\t\t\t\t\tthat._credentials.authenticated = authenticated;\n\t\t\t\t\tthat._credentials_source = source;\n\t\t\t\t\tthat._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;\n\t\t\t\t\tif (source === 'federated') {\n\t\t\t\t\t\tconst user = Object.assign(\n\t\t\t\t\t\t\t{ id: this._credentials.identityId },\n\t\t\t\t\t\t\tinfo.user\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst { provider, token, expires_at, identity_id } = info;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tthis._storage.setItem(\n\t\t\t\t\t\t\t\t'aws-amplify-federatedInfo',\n\t\t\t\t\t\t\t\tJSON.stringify({\n\t\t\t\t\t\t\t\t\tprovider,\n\t\t\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t\t\t\tuser,\n\t\t\t\t\t\t\t\t\texpires_at,\n\t\t\t\t\t\t\t\t\tidentity_id,\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tlogger.debug('Failed to put federated info into auth storage', e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (source === 'guest') {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait this._storageSync;\n\t\t\t\t\t\t\tthis._storage.setItem(\n\t\t\t\t\t\t\t\t'CognitoIdentityId-' + identityPoolId,\n\t\t\t\t\t\t\t\tcredentials.identityId // TODO: IdentityId is currently not returned by fromCognitoIdentityPool()\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tlogger.debug('Failed to cache identityId', e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tres(that._credentials);\n\t\t\t\t\treturn;\n\t\t\t\t})\n\t\t\t\t.catch(err => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tlogger.debug('Failed to load credentials', credentials);\n\t\t\t\t\t\tlogger.debug('Error loading credentials', err);\n\t\t\t\t\t\trej(err);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\t}\n\n\tpublic set(params, source): Promise<ICredentials> {\n\t\tif (source === 'session') {\n\t\t\treturn this._setCredentialsFromSession(params);\n\t\t} else if (source === 'federation') {\n\t\t\treturn this._setCredentialsFromFederation(params);\n\t\t} else if (source === 'guest') {\n\t\t\treturn this._setCredentialsForGuest();\n\t\t} else {\n\t\t\tlogger.debug('no source specified for setting credentials');\n\t\t\treturn Promise.reject('invalid source');\n\t\t}\n\t}\n\n\tpublic async clear() {\n\t\tthis._credentials = null;\n\t\tthis._credentials_source = null;\n\t\tlogger.debug('removing aws-amplify-federatedInfo from storage');\n\t\tthis._storage.removeItem('aws-amplify-federatedInfo');\n\t}\n\n\t/**\n\t * Compact version of credentials\n\t * @param {Object} credentials\n\t * @return {Object} - Credentials\n\t */\n\tpublic shear(credentials) {\n\t\treturn {\n\t\t\taccessKeyId: credentials.accessKeyId,\n\t\t\tsessionToken: credentials.sessionToken,\n\t\t\tsecretAccessKey: credentials.secretAccessKey,\n\t\t\tidentityId: credentials.identityId,\n\t\t\tauthenticated: credentials.authenticated,\n\t\t};\n\t}\n}\n\nexport const Credentials = new CredentialsClass(null);\n\nAmplify.register(Credentials);\n\n/**\n * @deprecated use named import\n */\nexport default Credentials;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}