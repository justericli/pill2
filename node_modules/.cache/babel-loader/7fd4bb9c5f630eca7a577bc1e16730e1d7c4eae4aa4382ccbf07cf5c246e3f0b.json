{"ast":null,"code":"export const constructStack = () => {\n  let absoluteEntries = [];\n  let relativeEntries = [];\n  const entriesNameSet = new Set();\n  const sort = entries => entries.sort((a, b) => stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || \"normal\"] - priorityWeights[a.priority || \"normal\"]);\n  const removeByName = toRemove => {\n    let isRemoved = false;\n    const filterCb = entry => {\n      if (entry.name && entry.name === toRemove) {\n        isRemoved = true;\n        entriesNameSet.delete(toRemove);\n        return false;\n      }\n      return true;\n    };\n    absoluteEntries = absoluteEntries.filter(filterCb);\n    relativeEntries = relativeEntries.filter(filterCb);\n    return isRemoved;\n  };\n  const removeByReference = toRemove => {\n    let isRemoved = false;\n    const filterCb = entry => {\n      if (entry.middleware === toRemove) {\n        isRemoved = true;\n        if (entry.name) entriesNameSet.delete(entry.name);\n        return false;\n      }\n      return true;\n    };\n    absoluteEntries = absoluteEntries.filter(filterCb);\n    relativeEntries = relativeEntries.filter(filterCb);\n    return isRemoved;\n  };\n  const cloneTo = toStack => {\n    absoluteEntries.forEach(entry => {\n      toStack.add(entry.middleware, {\n        ...entry\n      });\n    });\n    relativeEntries.forEach(entry => {\n      toStack.addRelativeTo(entry.middleware, {\n        ...entry\n      });\n    });\n    return toStack;\n  };\n  const expandRelativeMiddlewareList = from => {\n    const expandedMiddlewareList = [];\n    from.before.forEach(entry => {\n      if (entry.before.length === 0 && entry.after.length === 0) {\n        expandedMiddlewareList.push(entry);\n      } else {\n        expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));\n      }\n    });\n    expandedMiddlewareList.push(from);\n    from.after.reverse().forEach(entry => {\n      if (entry.before.length === 0 && entry.after.length === 0) {\n        expandedMiddlewareList.push(entry);\n      } else {\n        expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));\n      }\n    });\n    return expandedMiddlewareList;\n  };\n  const getMiddlewareList = function () {\n    let debug = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const normalizedAbsoluteEntries = [];\n    const normalizedRelativeEntries = [];\n    const normalizedEntriesNameMap = {};\n    absoluteEntries.forEach(entry => {\n      const normalizedEntry = {\n        ...entry,\n        before: [],\n        after: []\n      };\n      if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;\n      normalizedAbsoluteEntries.push(normalizedEntry);\n    });\n    relativeEntries.forEach(entry => {\n      const normalizedEntry = {\n        ...entry,\n        before: [],\n        after: []\n      };\n      if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;\n      normalizedRelativeEntries.push(normalizedEntry);\n    });\n    normalizedRelativeEntries.forEach(entry => {\n      if (entry.toMiddleware) {\n        const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];\n        if (toMiddleware === undefined) {\n          if (debug) {\n            return;\n          }\n          throw new Error(`${entry.toMiddleware} is not found when adding ${entry.name || \"anonymous\"} middleware ${entry.relation} ${entry.toMiddleware}`);\n        }\n        if (entry.relation === \"after\") {\n          toMiddleware.after.push(entry);\n        }\n        if (entry.relation === \"before\") {\n          toMiddleware.before.push(entry);\n        }\n      }\n    });\n    const mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce((wholeList, expendedMiddlewareList) => {\n      wholeList.push(...expendedMiddlewareList);\n      return wholeList;\n    }, []);\n    return mainChain;\n  };\n  const stack = {\n    add: function (middleware) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      const {\n        name,\n        override\n      } = options;\n      const entry = {\n        step: \"initialize\",\n        priority: \"normal\",\n        middleware,\n        ...options\n      };\n      if (name) {\n        if (entriesNameSet.has(name)) {\n          if (!override) throw new Error(`Duplicate middleware name '${name}'`);\n          const toOverrideIndex = absoluteEntries.findIndex(entry => entry.name === name);\n          const toOverride = absoluteEntries[toOverrideIndex];\n          if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {\n            throw new Error(`\"${name}\" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be ` + `overridden by same-name middleware with ${entry.priority} priority in ${entry.step} step.`);\n          }\n          absoluteEntries.splice(toOverrideIndex, 1);\n        }\n        entriesNameSet.add(name);\n      }\n      absoluteEntries.push(entry);\n    },\n    addRelativeTo: (middleware, options) => {\n      const {\n        name,\n        override\n      } = options;\n      const entry = {\n        middleware,\n        ...options\n      };\n      if (name) {\n        if (entriesNameSet.has(name)) {\n          if (!override) throw new Error(`Duplicate middleware name '${name}'`);\n          const toOverrideIndex = relativeEntries.findIndex(entry => entry.name === name);\n          const toOverride = relativeEntries[toOverrideIndex];\n          if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {\n            throw new Error(`\"${name}\" middleware ${toOverride.relation} \"${toOverride.toMiddleware}\" middleware cannot be overridden ` + `by same-name middleware ${entry.relation} \"${entry.toMiddleware}\" middleware.`);\n          }\n          relativeEntries.splice(toOverrideIndex, 1);\n        }\n        entriesNameSet.add(name);\n      }\n      relativeEntries.push(entry);\n    },\n    clone: () => cloneTo(constructStack()),\n    use: plugin => {\n      plugin.applyToStack(stack);\n    },\n    remove: toRemove => {\n      if (typeof toRemove === \"string\") return removeByName(toRemove);else return removeByReference(toRemove);\n    },\n    removeByTag: toRemove => {\n      let isRemoved = false;\n      const filterCb = entry => {\n        const {\n          tags,\n          name\n        } = entry;\n        if (tags && tags.includes(toRemove)) {\n          if (name) entriesNameSet.delete(name);\n          isRemoved = true;\n          return false;\n        }\n        return true;\n      };\n      absoluteEntries = absoluteEntries.filter(filterCb);\n      relativeEntries = relativeEntries.filter(filterCb);\n      return isRemoved;\n    },\n    concat: from => {\n      const cloned = cloneTo(constructStack());\n      cloned.use(from);\n      return cloned;\n    },\n    applyToStack: cloneTo,\n    identify: () => {\n      return getMiddlewareList(true).map(mw => {\n        return mw.name + \": \" + (mw.tags || []).join(\",\");\n      });\n    },\n    resolve: (handler, context) => {\n      for (const middleware of getMiddlewareList().map(entry => entry.middleware).reverse()) {\n        handler = middleware(handler, context);\n      }\n      return handler;\n    }\n  };\n  return stack;\n};\nconst stepWeights = {\n  initialize: 5,\n  serialize: 4,\n  build: 3,\n  finalizeRequest: 2,\n  deserialize: 1\n};\nconst priorityWeights = {\n  high: 3,\n  normal: 2,\n  low: 1\n};","map":{"version":3,"names":["constructStack","absoluteEntries","relativeEntries","entriesNameSet","Set","sort","entries","a","b","stepWeights","step","priorityWeights","priority","removeByName","toRemove","isRemoved","filterCb","entry","name","delete","filter","removeByReference","middleware","cloneTo","toStack","forEach","add","addRelativeTo","expandRelativeMiddlewareList","from","expandedMiddlewareList","before","length","after","push","reverse","getMiddlewareList","debug","arguments","undefined","normalizedAbsoluteEntries","normalizedRelativeEntries","normalizedEntriesNameMap","normalizedEntry","toMiddleware","Error","relation","mainChain","map","reduce","wholeList","expendedMiddlewareList","stack","options","override","has","toOverrideIndex","findIndex","toOverride","splice","clone","use","plugin","applyToStack","remove","removeByTag","tags","includes","concat","cloned","identify","mw","join","resolve","handler","context","initialize","serialize","build","finalizeRequest","deserialize","high","normal","low"],"sources":["/Users/ericli/Desktop/pill2/node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/middleware-stack/dist-es/MiddlewareStack.js"],"sourcesContent":["export const constructStack = () => {\n    let absoluteEntries = [];\n    let relativeEntries = [];\n    const entriesNameSet = new Set();\n    const sort = (entries) => entries.sort((a, b) => stepWeights[b.step] - stepWeights[a.step] ||\n        priorityWeights[b.priority || \"normal\"] - priorityWeights[a.priority || \"normal\"]);\n    const removeByName = (toRemove) => {\n        let isRemoved = false;\n        const filterCb = (entry) => {\n            if (entry.name && entry.name === toRemove) {\n                isRemoved = true;\n                entriesNameSet.delete(toRemove);\n                return false;\n            }\n            return true;\n        };\n        absoluteEntries = absoluteEntries.filter(filterCb);\n        relativeEntries = relativeEntries.filter(filterCb);\n        return isRemoved;\n    };\n    const removeByReference = (toRemove) => {\n        let isRemoved = false;\n        const filterCb = (entry) => {\n            if (entry.middleware === toRemove) {\n                isRemoved = true;\n                if (entry.name)\n                    entriesNameSet.delete(entry.name);\n                return false;\n            }\n            return true;\n        };\n        absoluteEntries = absoluteEntries.filter(filterCb);\n        relativeEntries = relativeEntries.filter(filterCb);\n        return isRemoved;\n    };\n    const cloneTo = (toStack) => {\n        absoluteEntries.forEach((entry) => {\n            toStack.add(entry.middleware, { ...entry });\n        });\n        relativeEntries.forEach((entry) => {\n            toStack.addRelativeTo(entry.middleware, { ...entry });\n        });\n        return toStack;\n    };\n    const expandRelativeMiddlewareList = (from) => {\n        const expandedMiddlewareList = [];\n        from.before.forEach((entry) => {\n            if (entry.before.length === 0 && entry.after.length === 0) {\n                expandedMiddlewareList.push(entry);\n            }\n            else {\n                expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));\n            }\n        });\n        expandedMiddlewareList.push(from);\n        from.after.reverse().forEach((entry) => {\n            if (entry.before.length === 0 && entry.after.length === 0) {\n                expandedMiddlewareList.push(entry);\n            }\n            else {\n                expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));\n            }\n        });\n        return expandedMiddlewareList;\n    };\n    const getMiddlewareList = (debug = false) => {\n        const normalizedAbsoluteEntries = [];\n        const normalizedRelativeEntries = [];\n        const normalizedEntriesNameMap = {};\n        absoluteEntries.forEach((entry) => {\n            const normalizedEntry = {\n                ...entry,\n                before: [],\n                after: [],\n            };\n            if (normalizedEntry.name)\n                normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;\n            normalizedAbsoluteEntries.push(normalizedEntry);\n        });\n        relativeEntries.forEach((entry) => {\n            const normalizedEntry = {\n                ...entry,\n                before: [],\n                after: [],\n            };\n            if (normalizedEntry.name)\n                normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;\n            normalizedRelativeEntries.push(normalizedEntry);\n        });\n        normalizedRelativeEntries.forEach((entry) => {\n            if (entry.toMiddleware) {\n                const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];\n                if (toMiddleware === undefined) {\n                    if (debug) {\n                        return;\n                    }\n                    throw new Error(`${entry.toMiddleware} is not found when adding ${entry.name || \"anonymous\"} middleware ${entry.relation} ${entry.toMiddleware}`);\n                }\n                if (entry.relation === \"after\") {\n                    toMiddleware.after.push(entry);\n                }\n                if (entry.relation === \"before\") {\n                    toMiddleware.before.push(entry);\n                }\n            }\n        });\n        const mainChain = sort(normalizedAbsoluteEntries)\n            .map(expandRelativeMiddlewareList)\n            .reduce((wholeList, expendedMiddlewareList) => {\n            wholeList.push(...expendedMiddlewareList);\n            return wholeList;\n        }, []);\n        return mainChain;\n    };\n    const stack = {\n        add: (middleware, options = {}) => {\n            const { name, override } = options;\n            const entry = {\n                step: \"initialize\",\n                priority: \"normal\",\n                middleware,\n                ...options,\n            };\n            if (name) {\n                if (entriesNameSet.has(name)) {\n                    if (!override)\n                        throw new Error(`Duplicate middleware name '${name}'`);\n                    const toOverrideIndex = absoluteEntries.findIndex((entry) => entry.name === name);\n                    const toOverride = absoluteEntries[toOverrideIndex];\n                    if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {\n                        throw new Error(`\"${name}\" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be ` +\n                            `overridden by same-name middleware with ${entry.priority} priority in ${entry.step} step.`);\n                    }\n                    absoluteEntries.splice(toOverrideIndex, 1);\n                }\n                entriesNameSet.add(name);\n            }\n            absoluteEntries.push(entry);\n        },\n        addRelativeTo: (middleware, options) => {\n            const { name, override } = options;\n            const entry = {\n                middleware,\n                ...options,\n            };\n            if (name) {\n                if (entriesNameSet.has(name)) {\n                    if (!override)\n                        throw new Error(`Duplicate middleware name '${name}'`);\n                    const toOverrideIndex = relativeEntries.findIndex((entry) => entry.name === name);\n                    const toOverride = relativeEntries[toOverrideIndex];\n                    if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {\n                        throw new Error(`\"${name}\" middleware ${toOverride.relation} \"${toOverride.toMiddleware}\" middleware cannot be overridden ` +\n                            `by same-name middleware ${entry.relation} \"${entry.toMiddleware}\" middleware.`);\n                    }\n                    relativeEntries.splice(toOverrideIndex, 1);\n                }\n                entriesNameSet.add(name);\n            }\n            relativeEntries.push(entry);\n        },\n        clone: () => cloneTo(constructStack()),\n        use: (plugin) => {\n            plugin.applyToStack(stack);\n        },\n        remove: (toRemove) => {\n            if (typeof toRemove === \"string\")\n                return removeByName(toRemove);\n            else\n                return removeByReference(toRemove);\n        },\n        removeByTag: (toRemove) => {\n            let isRemoved = false;\n            const filterCb = (entry) => {\n                const { tags, name } = entry;\n                if (tags && tags.includes(toRemove)) {\n                    if (name)\n                        entriesNameSet.delete(name);\n                    isRemoved = true;\n                    return false;\n                }\n                return true;\n            };\n            absoluteEntries = absoluteEntries.filter(filterCb);\n            relativeEntries = relativeEntries.filter(filterCb);\n            return isRemoved;\n        },\n        concat: (from) => {\n            const cloned = cloneTo(constructStack());\n            cloned.use(from);\n            return cloned;\n        },\n        applyToStack: cloneTo,\n        identify: () => {\n            return getMiddlewareList(true).map((mw) => {\n                return mw.name + \": \" + (mw.tags || []).join(\",\");\n            });\n        },\n        resolve: (handler, context) => {\n            for (const middleware of getMiddlewareList()\n                .map((entry) => entry.middleware)\n                .reverse()) {\n                handler = middleware(handler, context);\n            }\n            return handler;\n        },\n    };\n    return stack;\n};\nconst stepWeights = {\n    initialize: 5,\n    serialize: 4,\n    build: 3,\n    finalizeRequest: 2,\n    deserialize: 1,\n};\nconst priorityWeights = {\n    high: 3,\n    normal: 2,\n    low: 1,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}