{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport inspect from '../jsutils/inspect';\nimport { Source } from './source';\nimport { syntaxError } from '../error';\nimport { createLexer, TokenKind, getTokenDesc } from './lexer';\nimport { Kind } from './kinds';\nimport { DirectiveLocation } from './directiveLocation';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\n  if (!(sourceObj instanceof Source)) {\n    throw new TypeError(\"Must provide Source. Received: \".concat(inspect(sourceObj)));\n  }\n  var lexer = createLexer(sourceObj, options || {});\n  return parseDocument(lexer);\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\n  var lexer = createLexer(sourceObj, options || {});\n  expect(lexer, TokenKind.SOF);\n  var value = parseValueLiteral(lexer, false);\n  expect(lexer, TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\n  var lexer = createLexer(sourceObj, options || {});\n  expect(lexer, TokenKind.SOF);\n  var type = parseTypeReference(lexer);\n  expect(lexer, TokenKind.EOF);\n  return type;\n}\n/**\n * Converts a name lex token into a name parse node.\n */\n\nfunction parseName(lexer) {\n  var token = expect(lexer, TokenKind.NAME);\n  return {\n    kind: Kind.NAME,\n    value: token.value,\n    loc: loc(lexer, token)\n  };\n} // Implements the parsing rules in the Document section.\n\n/**\n * Document : Definition+\n */\n\nfunction parseDocument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.DOCUMENT,\n    definitions: many(lexer, TokenKind.SOF, parseDefinition, TokenKind.EOF),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Definition :\n *   - ExecutableDefinition\n *   - TypeSystemDefinition\n *   - TypeSystemExtension\n */\n\nfunction parseDefinition(lexer) {\n  if (peek(lexer, TokenKind.NAME)) {\n    switch (lexer.token.value) {\n      case 'query':\n      case 'mutation':\n      case 'subscription':\n      case 'fragment':\n        return parseExecutableDefinition(lexer);\n      case 'schema':\n      case 'scalar':\n      case 'type':\n      case 'interface':\n      case 'union':\n      case 'enum':\n      case 'input':\n      case 'directive':\n        return parseTypeSystemDefinition(lexer);\n      case 'extend':\n        return parseTypeSystemExtension(lexer);\n    }\n  } else if (peek(lexer, TokenKind.BRACE_L)) {\n    return parseExecutableDefinition(lexer);\n  } else if (peekDescription(lexer)) {\n    return parseTypeSystemDefinition(lexer);\n  }\n  throw unexpected(lexer);\n}\n/**\n * ExecutableDefinition :\n *   - OperationDefinition\n *   - FragmentDefinition\n */\n\nfunction parseExecutableDefinition(lexer) {\n  if (peek(lexer, TokenKind.NAME)) {\n    switch (lexer.token.value) {\n      case 'query':\n      case 'mutation':\n      case 'subscription':\n        return parseOperationDefinition(lexer);\n      case 'fragment':\n        return parseFragmentDefinition(lexer);\n    }\n  } else if (peek(lexer, TokenKind.BRACE_L)) {\n    return parseOperationDefinition(lexer);\n  }\n  throw unexpected(lexer);\n} // Implements the parsing rules in the Operations section.\n\n/**\n * OperationDefinition :\n *  - SelectionSet\n *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n */\n\nfunction parseOperationDefinition(lexer) {\n  var start = lexer.token;\n  if (peek(lexer, TokenKind.BRACE_L)) {\n    return {\n      kind: Kind.OPERATION_DEFINITION,\n      operation: 'query',\n      name: undefined,\n      variableDefinitions: [],\n      directives: [],\n      selectionSet: parseSelectionSet(lexer),\n      loc: loc(lexer, start)\n    };\n  }\n  var operation = parseOperationType(lexer);\n  var name;\n  if (peek(lexer, TokenKind.NAME)) {\n    name = parseName(lexer);\n  }\n  return {\n    kind: Kind.OPERATION_DEFINITION,\n    operation: operation,\n    name: name,\n    variableDefinitions: parseVariableDefinitions(lexer),\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * OperationType : one of query mutation subscription\n */\n\nfunction parseOperationType(lexer) {\n  var operationToken = expect(lexer, TokenKind.NAME);\n  switch (operationToken.value) {\n    case 'query':\n      return 'query';\n    case 'mutation':\n      return 'mutation';\n    case 'subscription':\n      return 'subscription';\n  }\n  throw unexpected(lexer, operationToken);\n}\n/**\n * VariableDefinitions : ( VariableDefinition+ )\n */\n\nfunction parseVariableDefinitions(lexer) {\n  return peek(lexer, TokenKind.PAREN_L) ? many(lexer, TokenKind.PAREN_L, parseVariableDefinition, TokenKind.PAREN_R) : [];\n}\n/**\n * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n */\n\nfunction parseVariableDefinition(lexer) {\n  var start = lexer.token;\n  if (lexer.options.experimentalVariableDefinitionDirectives) {\n    return {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: parseVariable(lexer),\n      type: (expect(lexer, TokenKind.COLON), parseTypeReference(lexer)),\n      defaultValue: skip(lexer, TokenKind.EQUALS) ? parseValueLiteral(lexer, true) : undefined,\n      directives: parseDirectives(lexer, true),\n      loc: loc(lexer, start)\n    };\n  }\n  return {\n    kind: Kind.VARIABLE_DEFINITION,\n    variable: parseVariable(lexer),\n    type: (expect(lexer, TokenKind.COLON), parseTypeReference(lexer)),\n    defaultValue: skip(lexer, TokenKind.EQUALS) ? parseValueLiteral(lexer, true) : undefined,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Variable : $ Name\n */\n\nfunction parseVariable(lexer) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.DOLLAR);\n  return {\n    kind: Kind.VARIABLE,\n    name: parseName(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * SelectionSet : { Selection+ }\n */\n\nfunction parseSelectionSet(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.SELECTION_SET,\n    selections: many(lexer, TokenKind.BRACE_L, parseSelection, TokenKind.BRACE_R),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Selection :\n *   - Field\n *   - FragmentSpread\n *   - InlineFragment\n */\n\nfunction parseSelection(lexer) {\n  return peek(lexer, TokenKind.SPREAD) ? parseFragment(lexer) : parseField(lexer);\n}\n/**\n * Field : Alias? Name Arguments? Directives? SelectionSet?\n *\n * Alias : Name :\n */\n\nfunction parseField(lexer) {\n  var start = lexer.token;\n  var nameOrAlias = parseName(lexer);\n  var alias;\n  var name;\n  if (skip(lexer, TokenKind.COLON)) {\n    alias = nameOrAlias;\n    name = parseName(lexer);\n  } else {\n    name = nameOrAlias;\n  }\n  return {\n    kind: Kind.FIELD,\n    alias: alias,\n    name: name,\n    arguments: parseArguments(lexer, false),\n    directives: parseDirectives(lexer, false),\n    selectionSet: peek(lexer, TokenKind.BRACE_L) ? parseSelectionSet(lexer) : undefined,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Arguments[Const] : ( Argument[?Const]+ )\n */\n\nfunction parseArguments(lexer, isConst) {\n  var item = isConst ? parseConstArgument : parseArgument;\n  return peek(lexer, TokenKind.PAREN_L) ? many(lexer, TokenKind.PAREN_L, item, TokenKind.PAREN_R) : [];\n}\n/**\n * Argument[Const] : Name : Value[?Const]\n */\n\nfunction parseArgument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.ARGUMENT,\n    name: parseName(lexer),\n    value: (expect(lexer, TokenKind.COLON), parseValueLiteral(lexer, false)),\n    loc: loc(lexer, start)\n  };\n}\nfunction parseConstArgument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.ARGUMENT,\n    name: parseName(lexer),\n    value: (expect(lexer, TokenKind.COLON), parseConstValue(lexer)),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Fragments section.\n\n/**\n * Corresponds to both FragmentSpread and InlineFragment in the spec.\n *\n * FragmentSpread : ... FragmentName Directives?\n *\n * InlineFragment : ... TypeCondition? Directives? SelectionSet\n */\n\nfunction parseFragment(lexer) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.SPREAD);\n  if (peek(lexer, TokenKind.NAME) && lexer.token.value !== 'on') {\n    return {\n      kind: Kind.FRAGMENT_SPREAD,\n      name: parseFragmentName(lexer),\n      directives: parseDirectives(lexer, false),\n      loc: loc(lexer, start)\n    };\n  }\n  var typeCondition;\n  if (lexer.token.value === 'on') {\n    lexer.advance();\n    typeCondition = parseNamedType(lexer);\n  }\n  return {\n    kind: Kind.INLINE_FRAGMENT,\n    typeCondition: typeCondition,\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * FragmentDefinition :\n *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n *\n * TypeCondition : NamedType\n */\n\nfunction parseFragmentDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'fragment'); // Experimental support for defining variables within fragments changes\n  // the grammar of FragmentDefinition:\n  //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n  if (lexer.options.experimentalFragmentVariables) {\n    return {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: parseFragmentName(lexer),\n      variableDefinitions: parseVariableDefinitions(lexer),\n      typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\n      directives: parseDirectives(lexer, false),\n      selectionSet: parseSelectionSet(lexer),\n      loc: loc(lexer, start)\n    };\n  }\n  return {\n    kind: Kind.FRAGMENT_DEFINITION,\n    name: parseFragmentName(lexer),\n    typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * FragmentName : Name but not `on`\n */\n\nfunction parseFragmentName(lexer) {\n  if (lexer.token.value === 'on') {\n    throw unexpected(lexer);\n  }\n  return parseName(lexer);\n} // Implements the parsing rules in the Values section.\n\n/**\n * Value[Const] :\n *   - [~Const] Variable\n *   - IntValue\n *   - FloatValue\n *   - StringValue\n *   - BooleanValue\n *   - NullValue\n *   - EnumValue\n *   - ListValue[?Const]\n *   - ObjectValue[?Const]\n *\n * BooleanValue : one of `true` `false`\n *\n * NullValue : `null`\n *\n * EnumValue : Name but not `true`, `false` or `null`\n */\n\nfunction parseValueLiteral(lexer, isConst) {\n  var token = lexer.token;\n  switch (token.kind) {\n    case TokenKind.BRACKET_L:\n      return parseList(lexer, isConst);\n    case TokenKind.BRACE_L:\n      return parseObject(lexer, isConst);\n    case TokenKind.INT:\n      lexer.advance();\n      return {\n        kind: Kind.INT,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n    case TokenKind.FLOAT:\n      lexer.advance();\n      return {\n        kind: Kind.FLOAT,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n    case TokenKind.STRING:\n    case TokenKind.BLOCK_STRING:\n      return parseStringLiteral(lexer);\n    case TokenKind.NAME:\n      if (token.value === 'true' || token.value === 'false') {\n        lexer.advance();\n        return {\n          kind: Kind.BOOLEAN,\n          value: token.value === 'true',\n          loc: loc(lexer, token)\n        };\n      } else if (token.value === 'null') {\n        lexer.advance();\n        return {\n          kind: Kind.NULL,\n          loc: loc(lexer, token)\n        };\n      }\n      lexer.advance();\n      return {\n        kind: Kind.ENUM,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n    case TokenKind.DOLLAR:\n      if (!isConst) {\n        return parseVariable(lexer);\n      }\n      break;\n  }\n  throw unexpected(lexer);\n}\nfunction parseStringLiteral(lexer) {\n  var token = lexer.token;\n  lexer.advance();\n  return {\n    kind: Kind.STRING,\n    value: token.value,\n    block: token.kind === TokenKind.BLOCK_STRING,\n    loc: loc(lexer, token)\n  };\n}\nexport function parseConstValue(lexer) {\n  return parseValueLiteral(lexer, true);\n}\nfunction parseValueValue(lexer) {\n  return parseValueLiteral(lexer, false);\n}\n/**\n * ListValue[Const] :\n *   - [ ]\n *   - [ Value[?Const]+ ]\n */\n\nfunction parseList(lexer, isConst) {\n  var start = lexer.token;\n  var item = isConst ? parseConstValue : parseValueValue;\n  return {\n    kind: Kind.LIST,\n    values: any(lexer, TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectValue[Const] :\n *   - { }\n *   - { ObjectField[?Const]+ }\n */\n\nfunction parseObject(lexer, isConst) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.BRACE_L);\n  var fields = [];\n  while (!skip(lexer, TokenKind.BRACE_R)) {\n    fields.push(parseObjectField(lexer, isConst));\n  }\n  return {\n    kind: Kind.OBJECT,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectField[Const] : Name : Value[?Const]\n */\n\nfunction parseObjectField(lexer, isConst) {\n  var start = lexer.token;\n  return {\n    kind: Kind.OBJECT_FIELD,\n    name: parseName(lexer),\n    value: (expect(lexer, TokenKind.COLON), parseValueLiteral(lexer, isConst)),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Directives section.\n\n/**\n * Directives[Const] : Directive[?Const]+\n */\n\nfunction parseDirectives(lexer, isConst) {\n  var directives = [];\n  while (peek(lexer, TokenKind.AT)) {\n    directives.push(parseDirective(lexer, isConst));\n  }\n  return directives;\n}\n/**\n * Directive[Const] : @ Name Arguments[?Const]?\n */\n\nfunction parseDirective(lexer, isConst) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.AT);\n  return {\n    kind: Kind.DIRECTIVE,\n    name: parseName(lexer),\n    arguments: parseArguments(lexer, isConst),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Types section.\n\n/**\n * Type :\n *   - NamedType\n *   - ListType\n *   - NonNullType\n */\n\nexport function parseTypeReference(lexer) {\n  var start = lexer.token;\n  var type;\n  if (skip(lexer, TokenKind.BRACKET_L)) {\n    type = parseTypeReference(lexer);\n    expect(lexer, TokenKind.BRACKET_R);\n    type = {\n      kind: Kind.LIST_TYPE,\n      type: type,\n      loc: loc(lexer, start)\n    };\n  } else {\n    type = parseNamedType(lexer);\n  }\n  if (skip(lexer, TokenKind.BANG)) {\n    return {\n      kind: Kind.NON_NULL_TYPE,\n      type: type,\n      loc: loc(lexer, start)\n    };\n  }\n  return type;\n}\n/**\n * NamedType : Name\n */\n\nexport function parseNamedType(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.NAMED_TYPE,\n    name: parseName(lexer),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Type Definition section.\n\n/**\n * TypeSystemDefinition :\n *   - SchemaDefinition\n *   - TypeDefinition\n *   - DirectiveDefinition\n *\n * TypeDefinition :\n *   - ScalarTypeDefinition\n *   - ObjectTypeDefinition\n *   - InterfaceTypeDefinition\n *   - UnionTypeDefinition\n *   - EnumTypeDefinition\n *   - InputObjectTypeDefinition\n */\n\nfunction parseTypeSystemDefinition(lexer) {\n  // Many definitions begin with a description and require a lookahead.\n  var keywordToken = peekDescription(lexer) ? lexer.lookahead() : lexer.token;\n  if (keywordToken.kind === TokenKind.NAME) {\n    switch (keywordToken.value) {\n      case 'schema':\n        return parseSchemaDefinition(lexer);\n      case 'scalar':\n        return parseScalarTypeDefinition(lexer);\n      case 'type':\n        return parseObjectTypeDefinition(lexer);\n      case 'interface':\n        return parseInterfaceTypeDefinition(lexer);\n      case 'union':\n        return parseUnionTypeDefinition(lexer);\n      case 'enum':\n        return parseEnumTypeDefinition(lexer);\n      case 'input':\n        return parseInputObjectTypeDefinition(lexer);\n      case 'directive':\n        return parseDirectiveDefinition(lexer);\n    }\n  }\n  throw unexpected(lexer, keywordToken);\n}\nfunction peekDescription(lexer) {\n  return peek(lexer, TokenKind.STRING) || peek(lexer, TokenKind.BLOCK_STRING);\n}\n/**\n * Description : StringValue\n */\n\nfunction parseDescription(lexer) {\n  if (peekDescription(lexer)) {\n    return parseStringLiteral(lexer);\n  }\n}\n/**\n * SchemaDefinition : schema Directives[Const]? { OperationTypeDefinition+ }\n */\n\nfunction parseSchemaDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'schema');\n  var directives = parseDirectives(lexer, true);\n  var operationTypes = many(lexer, TokenKind.BRACE_L, parseOperationTypeDefinition, TokenKind.BRACE_R);\n  return {\n    kind: Kind.SCHEMA_DEFINITION,\n    directives: directives,\n    operationTypes: operationTypes,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * OperationTypeDefinition : OperationType : NamedType\n */\n\nfunction parseOperationTypeDefinition(lexer) {\n  var start = lexer.token;\n  var operation = parseOperationType(lexer);\n  expect(lexer, TokenKind.COLON);\n  var type = parseNamedType(lexer);\n  return {\n    kind: Kind.OPERATION_TYPE_DEFINITION,\n    operation: operation,\n    type: type,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n */\n\nfunction parseScalarTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'scalar');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.SCALAR_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectTypeDefinition :\n *   Description?\n *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n */\n\nfunction parseObjectTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'type');\n  var name = parseName(lexer);\n  var interfaces = parseImplementsInterfaces(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  return {\n    kind: Kind.OBJECT_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    interfaces: interfaces,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ImplementsInterfaces :\n *   - implements `&`? NamedType\n *   - ImplementsInterfaces & NamedType\n */\n\nfunction parseImplementsInterfaces(lexer) {\n  var types = [];\n  if (lexer.token.value === 'implements') {\n    lexer.advance(); // Optional leading ampersand\n\n    skip(lexer, TokenKind.AMP);\n    do {\n      types.push(parseNamedType(lexer));\n    } while (skip(lexer, TokenKind.AMP) ||\n    // Legacy support for the SDL?\n    lexer.options.allowLegacySDLImplementsInterfaces && peek(lexer, TokenKind.NAME));\n  }\n  return types;\n}\n/**\n * FieldsDefinition : { FieldDefinition+ }\n */\n\nfunction parseFieldsDefinition(lexer) {\n  // Legacy support for the SDL?\n  if (lexer.options.allowLegacySDLEmptyFields && peek(lexer, TokenKind.BRACE_L) && lexer.lookahead().kind === TokenKind.BRACE_R) {\n    lexer.advance();\n    lexer.advance();\n    return [];\n  }\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseFieldDefinition, TokenKind.BRACE_R) : [];\n}\n/**\n * FieldDefinition :\n *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n */\n\nfunction parseFieldDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  var args = parseArgumentDefs(lexer);\n  expect(lexer, TokenKind.COLON);\n  var type = parseTypeReference(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.FIELD_DEFINITION,\n    description: description,\n    name: name,\n    arguments: args,\n    type: type,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ArgumentsDefinition : ( InputValueDefinition+ )\n */\n\nfunction parseArgumentDefs(lexer) {\n  if (!peek(lexer, TokenKind.PAREN_L)) {\n    return [];\n  }\n  return many(lexer, TokenKind.PAREN_L, parseInputValueDef, TokenKind.PAREN_R);\n}\n/**\n * InputValueDefinition :\n *   - Description? Name : Type DefaultValue? Directives[Const]?\n */\n\nfunction parseInputValueDef(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  expect(lexer, TokenKind.COLON);\n  var type = parseTypeReference(lexer);\n  var defaultValue;\n  if (skip(lexer, TokenKind.EQUALS)) {\n    defaultValue = parseConstValue(lexer);\n  }\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.INPUT_VALUE_DEFINITION,\n    description: description,\n    name: name,\n    type: type,\n    defaultValue: defaultValue,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InterfaceTypeDefinition :\n *   - Description? interface Name Directives[Const]? FieldsDefinition?\n */\n\nfunction parseInterfaceTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'interface');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  return {\n    kind: Kind.INTERFACE_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionTypeDefinition :\n *   - Description? union Name Directives[Const]? UnionMemberTypes?\n */\n\nfunction parseUnionTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'union');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var types = parseUnionMemberTypes(lexer);\n  return {\n    kind: Kind.UNION_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    types: types,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionMemberTypes :\n *   - = `|`? NamedType\n *   - UnionMemberTypes | NamedType\n */\n\nfunction parseUnionMemberTypes(lexer) {\n  var types = [];\n  if (skip(lexer, TokenKind.EQUALS)) {\n    // Optional leading pipe\n    skip(lexer, TokenKind.PIPE);\n    do {\n      types.push(parseNamedType(lexer));\n    } while (skip(lexer, TokenKind.PIPE));\n  }\n  return types;\n}\n/**\n * EnumTypeDefinition :\n *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n */\n\nfunction parseEnumTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'enum');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var values = parseEnumValuesDefinition(lexer);\n  return {\n    kind: Kind.ENUM_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    values: values,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * EnumValuesDefinition : { EnumValueDefinition+ }\n */\n\nfunction parseEnumValuesDefinition(lexer) {\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseEnumValueDefinition, TokenKind.BRACE_R) : [];\n}\n/**\n * EnumValueDefinition : Description? EnumValue Directives[Const]?\n *\n * EnumValue : Name\n */\n\nfunction parseEnumValueDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.ENUM_VALUE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputObjectTypeDefinition :\n *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n */\n\nfunction parseInputObjectTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'input');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseInputFieldsDefinition(lexer);\n  return {\n    kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputFieldsDefinition : { InputValueDefinition+ }\n */\n\nfunction parseInputFieldsDefinition(lexer) {\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseInputValueDef, TokenKind.BRACE_R) : [];\n}\n/**\n * TypeSystemExtension :\n *   - SchemaExtension\n *   - TypeExtension\n *\n * TypeExtension :\n *   - ScalarTypeExtension\n *   - ObjectTypeExtension\n *   - InterfaceTypeExtension\n *   - UnionTypeExtension\n *   - EnumTypeExtension\n *   - InputObjectTypeDefinition\n */\n\nfunction parseTypeSystemExtension(lexer) {\n  var keywordToken = lexer.lookahead();\n  if (keywordToken.kind === TokenKind.NAME) {\n    switch (keywordToken.value) {\n      case 'schema':\n        return parseSchemaExtension(lexer);\n      case 'scalar':\n        return parseScalarTypeExtension(lexer);\n      case 'type':\n        return parseObjectTypeExtension(lexer);\n      case 'interface':\n        return parseInterfaceTypeExtension(lexer);\n      case 'union':\n        return parseUnionTypeExtension(lexer);\n      case 'enum':\n        return parseEnumTypeExtension(lexer);\n      case 'input':\n        return parseInputObjectTypeExtension(lexer);\n    }\n  }\n  throw unexpected(lexer, keywordToken);\n}\n/**\n * SchemaExtension :\n *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n *  - extend schema Directives[Const]\n */\n\nfunction parseSchemaExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'schema');\n  var directives = parseDirectives(lexer, true);\n  var operationTypes = peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseOperationTypeDefinition, TokenKind.BRACE_R) : [];\n  if (directives.length === 0 && operationTypes.length === 0) {\n    throw unexpected(lexer);\n  }\n  return {\n    kind: Kind.SCHEMA_EXTENSION,\n    directives: directives,\n    operationTypes: operationTypes,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ScalarTypeExtension :\n *   - extend scalar Name Directives[Const]\n */\n\nfunction parseScalarTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'scalar');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  if (directives.length === 0) {\n    throw unexpected(lexer);\n  }\n  return {\n    kind: Kind.SCALAR_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectTypeExtension :\n *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n *  - extend type Name ImplementsInterfaces? Directives[Const]\n *  - extend type Name ImplementsInterfaces\n */\n\nfunction parseObjectTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'type');\n  var name = parseName(lexer);\n  var interfaces = parseImplementsInterfaces(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n  return {\n    kind: Kind.OBJECT_TYPE_EXTENSION,\n    name: name,\n    interfaces: interfaces,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InterfaceTypeExtension :\n *   - extend interface Name Directives[Const]? FieldsDefinition\n *   - extend interface Name Directives[Const]\n */\n\nfunction parseInterfaceTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'interface');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  if (directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n  return {\n    kind: Kind.INTERFACE_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionTypeExtension :\n *   - extend union Name Directives[Const]? UnionMemberTypes\n *   - extend union Name Directives[Const]\n */\n\nfunction parseUnionTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'union');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var types = parseUnionMemberTypes(lexer);\n  if (directives.length === 0 && types.length === 0) {\n    throw unexpected(lexer);\n  }\n  return {\n    kind: Kind.UNION_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    types: types,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * EnumTypeExtension :\n *   - extend enum Name Directives[Const]? EnumValuesDefinition\n *   - extend enum Name Directives[Const]\n */\n\nfunction parseEnumTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'enum');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var values = parseEnumValuesDefinition(lexer);\n  if (directives.length === 0 && values.length === 0) {\n    throw unexpected(lexer);\n  }\n  return {\n    kind: Kind.ENUM_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    values: values,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputObjectTypeExtension :\n *   - extend input Name Directives[Const]? InputFieldsDefinition\n *   - extend input Name Directives[Const]\n */\n\nfunction parseInputObjectTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'input');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseInputFieldsDefinition(lexer);\n  if (directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n  return {\n    kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * DirectiveDefinition :\n *   - Description? directive @ Name ArgumentsDefinition? on DirectiveLocations\n */\n\nfunction parseDirectiveDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'directive');\n  expect(lexer, TokenKind.AT);\n  var name = parseName(lexer);\n  var args = parseArgumentDefs(lexer);\n  expectKeyword(lexer, 'on');\n  var locations = parseDirectiveLocations(lexer);\n  return {\n    kind: Kind.DIRECTIVE_DEFINITION,\n    description: description,\n    name: name,\n    arguments: args,\n    locations: locations,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * DirectiveLocations :\n *   - `|`? DirectiveLocation\n *   - DirectiveLocations | DirectiveLocation\n */\n\nfunction parseDirectiveLocations(lexer) {\n  // Optional leading pipe\n  skip(lexer, TokenKind.PIPE);\n  var locations = [];\n  do {\n    locations.push(parseDirectiveLocation(lexer));\n  } while (skip(lexer, TokenKind.PIPE));\n  return locations;\n}\n/*\n * DirectiveLocation :\n *   - ExecutableDirectiveLocation\n *   - TypeSystemDirectiveLocation\n *\n * ExecutableDirectiveLocation : one of\n *   `QUERY`\n *   `MUTATION`\n *   `SUBSCRIPTION`\n *   `FIELD`\n *   `FRAGMENT_DEFINITION`\n *   `FRAGMENT_SPREAD`\n *   `INLINE_FRAGMENT`\n *\n * TypeSystemDirectiveLocation : one of\n *   `SCHEMA`\n *   `SCALAR`\n *   `OBJECT`\n *   `FIELD_DEFINITION`\n *   `ARGUMENT_DEFINITION`\n *   `INTERFACE`\n *   `UNION`\n *   `ENUM`\n *   `ENUM_VALUE`\n *   `INPUT_OBJECT`\n *   `INPUT_FIELD_DEFINITION`\n */\n\nfunction parseDirectiveLocation(lexer) {\n  var start = lexer.token;\n  var name = parseName(lexer);\n  if (DirectiveLocation.hasOwnProperty(name.value)) {\n    return name;\n  }\n  throw unexpected(lexer, start);\n} // Core parsing utility functions\n\n/**\n * Returns a location object, used to identify the place in\n * the source that created a given parsed object.\n */\n\nfunction loc(lexer, startToken) {\n  if (!lexer.options.noLocation) {\n    return new Loc(startToken, lexer.lastToken, lexer.source);\n  }\n}\nfunction Loc(startToken, endToken, source) {\n  this.start = startToken.start;\n  this.end = endToken.end;\n  this.startToken = startToken;\n  this.endToken = endToken;\n  this.source = source;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\nLoc.prototype.toJSON = Loc.prototype.inspect = function toJSON() {\n  return {\n    start: this.start,\n    end: this.end\n  };\n};\n/**\n * Determines if the next token is of a given kind\n */\n\nfunction peek(lexer, kind) {\n  return lexer.token.kind === kind;\n}\n/**\n * If the next token is of the given kind, return true after advancing\n * the lexer. Otherwise, do not change the parser state and return false.\n */\n\nfunction skip(lexer, kind) {\n  var match = lexer.token.kind === kind;\n  if (match) {\n    lexer.advance();\n  }\n  return match;\n}\n/**\n * If the next token is of the given kind, return that token after advancing\n * the lexer. Otherwise, do not change the parser state and throw an error.\n */\n\nfunction expect(lexer, kind) {\n  var token = lexer.token;\n  if (token.kind === kind) {\n    lexer.advance();\n    return token;\n  }\n  throw syntaxError(lexer.source, token.start, \"Expected \".concat(kind, \", found \").concat(getTokenDesc(token)));\n}\n/**\n * If the next token is a keyword with the given value, return that token after\n * advancing the lexer. Otherwise, do not change the parser state and return\n * false.\n */\n\nfunction expectKeyword(lexer, value) {\n  var token = lexer.token;\n  if (token.kind === TokenKind.NAME && token.value === value) {\n    lexer.advance();\n    return token;\n  }\n  throw syntaxError(lexer.source, token.start, \"Expected \\\"\".concat(value, \"\\\", found \").concat(getTokenDesc(token)));\n}\n/**\n * Helper function for creating an error when an unexpected lexed token\n * is encountered.\n */\n\nfunction unexpected(lexer, atToken) {\n  var token = atToken || lexer.token;\n  return syntaxError(lexer.source, token.start, \"Unexpected \".concat(getTokenDesc(token)));\n}\n/**\n * Returns a possibly empty list of parse nodes, determined by\n * the parseFn. This list begins with a lex token of openKind\n * and ends with a lex token of closeKind. Advances the parser\n * to the next lex token after the closing token.\n */\n\nfunction any(lexer, openKind, parseFn, closeKind) {\n  expect(lexer, openKind);\n  var nodes = [];\n  while (!skip(lexer, closeKind)) {\n    nodes.push(parseFn(lexer));\n  }\n  return nodes;\n}\n/**\n * Returns a non-empty list of parse nodes, determined by\n * the parseFn. This list begins with a lex token of openKind\n * and ends with a lex token of closeKind. Advances the parser\n * to the next lex token after the closing token.\n */\n\nfunction many(lexer, openKind, parseFn, closeKind) {\n  expect(lexer, openKind);\n  var nodes = [parseFn(lexer)];\n  while (!skip(lexer, closeKind)) {\n    nodes.push(parseFn(lexer));\n  }\n  return nodes;\n}","map":{"version":3,"names":["inspect","Source","syntaxError","createLexer","TokenKind","getTokenDesc","Kind","DirectiveLocation","parse","source","options","sourceObj","TypeError","concat","lexer","parseDocument","parseValue","expect","SOF","value","parseValueLiteral","EOF","parseType","type","parseTypeReference","parseName","token","NAME","kind","loc","start","DOCUMENT","definitions","many","parseDefinition","peek","parseExecutableDefinition","parseTypeSystemDefinition","parseTypeSystemExtension","BRACE_L","peekDescription","unexpected","parseOperationDefinition","parseFragmentDefinition","OPERATION_DEFINITION","operation","name","undefined","variableDefinitions","directives","selectionSet","parseSelectionSet","parseOperationType","parseVariableDefinitions","parseDirectives","operationToken","PAREN_L","parseVariableDefinition","PAREN_R","experimentalVariableDefinitionDirectives","VARIABLE_DEFINITION","variable","parseVariable","COLON","defaultValue","skip","EQUALS","DOLLAR","VARIABLE","SELECTION_SET","selections","parseSelection","BRACE_R","SPREAD","parseFragment","parseField","nameOrAlias","alias","FIELD","arguments","parseArguments","isConst","item","parseConstArgument","parseArgument","ARGUMENT","parseConstValue","FRAGMENT_SPREAD","parseFragmentName","typeCondition","advance","parseNamedType","INLINE_FRAGMENT","expectKeyword","experimentalFragmentVariables","FRAGMENT_DEFINITION","BRACKET_L","parseList","parseObject","INT","FLOAT","STRING","BLOCK_STRING","parseStringLiteral","BOOLEAN","NULL","ENUM","block","parseValueValue","LIST","values","any","BRACKET_R","fields","push","parseObjectField","OBJECT","OBJECT_FIELD","AT","parseDirective","DIRECTIVE","LIST_TYPE","BANG","NON_NULL_TYPE","NAMED_TYPE","keywordToken","lookahead","parseSchemaDefinition","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","parseDirectiveDefinition","parseDescription","operationTypes","parseOperationTypeDefinition","SCHEMA_DEFINITION","OPERATION_TYPE_DEFINITION","description","SCALAR_TYPE_DEFINITION","interfaces","parseImplementsInterfaces","parseFieldsDefinition","OBJECT_TYPE_DEFINITION","types","AMP","allowLegacySDLImplementsInterfaces","allowLegacySDLEmptyFields","parseFieldDefinition","args","parseArgumentDefs","FIELD_DEFINITION","parseInputValueDef","INPUT_VALUE_DEFINITION","INTERFACE_TYPE_DEFINITION","parseUnionMemberTypes","UNION_TYPE_DEFINITION","PIPE","parseEnumValuesDefinition","ENUM_TYPE_DEFINITION","parseEnumValueDefinition","ENUM_VALUE_DEFINITION","parseInputFieldsDefinition","INPUT_OBJECT_TYPE_DEFINITION","parseSchemaExtension","parseScalarTypeExtension","parseObjectTypeExtension","parseInterfaceTypeExtension","parseUnionTypeExtension","parseEnumTypeExtension","parseInputObjectTypeExtension","length","SCHEMA_EXTENSION","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_EXTENSION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_EXTENSION","locations","parseDirectiveLocations","DIRECTIVE_DEFINITION","parseDirectiveLocation","hasOwnProperty","startToken","noLocation","Loc","lastToken","endToken","end","prototype","toJSON","match","atToken","openKind","parseFn","closeKind","nodes"],"sources":["/Users/ericli/node_modules/@aws-amplify/api-graphql/node_modules/graphql/language/parser.mjs"],"sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport inspect from '../jsutils/inspect';\nimport { Source } from './source';\nimport { syntaxError } from '../error';\nimport { createLexer, TokenKind, getTokenDesc } from './lexer';\nimport { Kind } from './kinds';\nimport { DirectiveLocation } from './directiveLocation';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\n\n  if (!(sourceObj instanceof Source)) {\n    throw new TypeError(\"Must provide Source. Received: \".concat(inspect(sourceObj)));\n  }\n\n  var lexer = createLexer(sourceObj, options || {});\n  return parseDocument(lexer);\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\n  var lexer = createLexer(sourceObj, options || {});\n  expect(lexer, TokenKind.SOF);\n  var value = parseValueLiteral(lexer, false);\n  expect(lexer, TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\n  var lexer = createLexer(sourceObj, options || {});\n  expect(lexer, TokenKind.SOF);\n  var type = parseTypeReference(lexer);\n  expect(lexer, TokenKind.EOF);\n  return type;\n}\n/**\n * Converts a name lex token into a name parse node.\n */\n\nfunction parseName(lexer) {\n  var token = expect(lexer, TokenKind.NAME);\n  return {\n    kind: Kind.NAME,\n    value: token.value,\n    loc: loc(lexer, token)\n  };\n} // Implements the parsing rules in the Document section.\n\n/**\n * Document : Definition+\n */\n\n\nfunction parseDocument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.DOCUMENT,\n    definitions: many(lexer, TokenKind.SOF, parseDefinition, TokenKind.EOF),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Definition :\n *   - ExecutableDefinition\n *   - TypeSystemDefinition\n *   - TypeSystemExtension\n */\n\n\nfunction parseDefinition(lexer) {\n  if (peek(lexer, TokenKind.NAME)) {\n    switch (lexer.token.value) {\n      case 'query':\n      case 'mutation':\n      case 'subscription':\n      case 'fragment':\n        return parseExecutableDefinition(lexer);\n\n      case 'schema':\n      case 'scalar':\n      case 'type':\n      case 'interface':\n      case 'union':\n      case 'enum':\n      case 'input':\n      case 'directive':\n        return parseTypeSystemDefinition(lexer);\n\n      case 'extend':\n        return parseTypeSystemExtension(lexer);\n    }\n  } else if (peek(lexer, TokenKind.BRACE_L)) {\n    return parseExecutableDefinition(lexer);\n  } else if (peekDescription(lexer)) {\n    return parseTypeSystemDefinition(lexer);\n  }\n\n  throw unexpected(lexer);\n}\n/**\n * ExecutableDefinition :\n *   - OperationDefinition\n *   - FragmentDefinition\n */\n\n\nfunction parseExecutableDefinition(lexer) {\n  if (peek(lexer, TokenKind.NAME)) {\n    switch (lexer.token.value) {\n      case 'query':\n      case 'mutation':\n      case 'subscription':\n        return parseOperationDefinition(lexer);\n\n      case 'fragment':\n        return parseFragmentDefinition(lexer);\n    }\n  } else if (peek(lexer, TokenKind.BRACE_L)) {\n    return parseOperationDefinition(lexer);\n  }\n\n  throw unexpected(lexer);\n} // Implements the parsing rules in the Operations section.\n\n/**\n * OperationDefinition :\n *  - SelectionSet\n *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n */\n\n\nfunction parseOperationDefinition(lexer) {\n  var start = lexer.token;\n\n  if (peek(lexer, TokenKind.BRACE_L)) {\n    return {\n      kind: Kind.OPERATION_DEFINITION,\n      operation: 'query',\n      name: undefined,\n      variableDefinitions: [],\n      directives: [],\n      selectionSet: parseSelectionSet(lexer),\n      loc: loc(lexer, start)\n    };\n  }\n\n  var operation = parseOperationType(lexer);\n  var name;\n\n  if (peek(lexer, TokenKind.NAME)) {\n    name = parseName(lexer);\n  }\n\n  return {\n    kind: Kind.OPERATION_DEFINITION,\n    operation: operation,\n    name: name,\n    variableDefinitions: parseVariableDefinitions(lexer),\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * OperationType : one of query mutation subscription\n */\n\n\nfunction parseOperationType(lexer) {\n  var operationToken = expect(lexer, TokenKind.NAME);\n\n  switch (operationToken.value) {\n    case 'query':\n      return 'query';\n\n    case 'mutation':\n      return 'mutation';\n\n    case 'subscription':\n      return 'subscription';\n  }\n\n  throw unexpected(lexer, operationToken);\n}\n/**\n * VariableDefinitions : ( VariableDefinition+ )\n */\n\n\nfunction parseVariableDefinitions(lexer) {\n  return peek(lexer, TokenKind.PAREN_L) ? many(lexer, TokenKind.PAREN_L, parseVariableDefinition, TokenKind.PAREN_R) : [];\n}\n/**\n * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n */\n\n\nfunction parseVariableDefinition(lexer) {\n  var start = lexer.token;\n\n  if (lexer.options.experimentalVariableDefinitionDirectives) {\n    return {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: parseVariable(lexer),\n      type: (expect(lexer, TokenKind.COLON), parseTypeReference(lexer)),\n      defaultValue: skip(lexer, TokenKind.EQUALS) ? parseValueLiteral(lexer, true) : undefined,\n      directives: parseDirectives(lexer, true),\n      loc: loc(lexer, start)\n    };\n  }\n\n  return {\n    kind: Kind.VARIABLE_DEFINITION,\n    variable: parseVariable(lexer),\n    type: (expect(lexer, TokenKind.COLON), parseTypeReference(lexer)),\n    defaultValue: skip(lexer, TokenKind.EQUALS) ? parseValueLiteral(lexer, true) : undefined,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Variable : $ Name\n */\n\n\nfunction parseVariable(lexer) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.DOLLAR);\n  return {\n    kind: Kind.VARIABLE,\n    name: parseName(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * SelectionSet : { Selection+ }\n */\n\n\nfunction parseSelectionSet(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.SELECTION_SET,\n    selections: many(lexer, TokenKind.BRACE_L, parseSelection, TokenKind.BRACE_R),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Selection :\n *   - Field\n *   - FragmentSpread\n *   - InlineFragment\n */\n\n\nfunction parseSelection(lexer) {\n  return peek(lexer, TokenKind.SPREAD) ? parseFragment(lexer) : parseField(lexer);\n}\n/**\n * Field : Alias? Name Arguments? Directives? SelectionSet?\n *\n * Alias : Name :\n */\n\n\nfunction parseField(lexer) {\n  var start = lexer.token;\n  var nameOrAlias = parseName(lexer);\n  var alias;\n  var name;\n\n  if (skip(lexer, TokenKind.COLON)) {\n    alias = nameOrAlias;\n    name = parseName(lexer);\n  } else {\n    name = nameOrAlias;\n  }\n\n  return {\n    kind: Kind.FIELD,\n    alias: alias,\n    name: name,\n    arguments: parseArguments(lexer, false),\n    directives: parseDirectives(lexer, false),\n    selectionSet: peek(lexer, TokenKind.BRACE_L) ? parseSelectionSet(lexer) : undefined,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Arguments[Const] : ( Argument[?Const]+ )\n */\n\n\nfunction parseArguments(lexer, isConst) {\n  var item = isConst ? parseConstArgument : parseArgument;\n  return peek(lexer, TokenKind.PAREN_L) ? many(lexer, TokenKind.PAREN_L, item, TokenKind.PAREN_R) : [];\n}\n/**\n * Argument[Const] : Name : Value[?Const]\n */\n\n\nfunction parseArgument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.ARGUMENT,\n    name: parseName(lexer),\n    value: (expect(lexer, TokenKind.COLON), parseValueLiteral(lexer, false)),\n    loc: loc(lexer, start)\n  };\n}\n\nfunction parseConstArgument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.ARGUMENT,\n    name: parseName(lexer),\n    value: (expect(lexer, TokenKind.COLON), parseConstValue(lexer)),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Fragments section.\n\n/**\n * Corresponds to both FragmentSpread and InlineFragment in the spec.\n *\n * FragmentSpread : ... FragmentName Directives?\n *\n * InlineFragment : ... TypeCondition? Directives? SelectionSet\n */\n\n\nfunction parseFragment(lexer) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.SPREAD);\n\n  if (peek(lexer, TokenKind.NAME) && lexer.token.value !== 'on') {\n    return {\n      kind: Kind.FRAGMENT_SPREAD,\n      name: parseFragmentName(lexer),\n      directives: parseDirectives(lexer, false),\n      loc: loc(lexer, start)\n    };\n  }\n\n  var typeCondition;\n\n  if (lexer.token.value === 'on') {\n    lexer.advance();\n    typeCondition = parseNamedType(lexer);\n  }\n\n  return {\n    kind: Kind.INLINE_FRAGMENT,\n    typeCondition: typeCondition,\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * FragmentDefinition :\n *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n *\n * TypeCondition : NamedType\n */\n\n\nfunction parseFragmentDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'fragment'); // Experimental support for defining variables within fragments changes\n  // the grammar of FragmentDefinition:\n  //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n  if (lexer.options.experimentalFragmentVariables) {\n    return {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: parseFragmentName(lexer),\n      variableDefinitions: parseVariableDefinitions(lexer),\n      typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\n      directives: parseDirectives(lexer, false),\n      selectionSet: parseSelectionSet(lexer),\n      loc: loc(lexer, start)\n    };\n  }\n\n  return {\n    kind: Kind.FRAGMENT_DEFINITION,\n    name: parseFragmentName(lexer),\n    typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * FragmentName : Name but not `on`\n */\n\n\nfunction parseFragmentName(lexer) {\n  if (lexer.token.value === 'on') {\n    throw unexpected(lexer);\n  }\n\n  return parseName(lexer);\n} // Implements the parsing rules in the Values section.\n\n/**\n * Value[Const] :\n *   - [~Const] Variable\n *   - IntValue\n *   - FloatValue\n *   - StringValue\n *   - BooleanValue\n *   - NullValue\n *   - EnumValue\n *   - ListValue[?Const]\n *   - ObjectValue[?Const]\n *\n * BooleanValue : one of `true` `false`\n *\n * NullValue : `null`\n *\n * EnumValue : Name but not `true`, `false` or `null`\n */\n\n\nfunction parseValueLiteral(lexer, isConst) {\n  var token = lexer.token;\n\n  switch (token.kind) {\n    case TokenKind.BRACKET_L:\n      return parseList(lexer, isConst);\n\n    case TokenKind.BRACE_L:\n      return parseObject(lexer, isConst);\n\n    case TokenKind.INT:\n      lexer.advance();\n      return {\n        kind: Kind.INT,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case TokenKind.FLOAT:\n      lexer.advance();\n      return {\n        kind: Kind.FLOAT,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case TokenKind.STRING:\n    case TokenKind.BLOCK_STRING:\n      return parseStringLiteral(lexer);\n\n    case TokenKind.NAME:\n      if (token.value === 'true' || token.value === 'false') {\n        lexer.advance();\n        return {\n          kind: Kind.BOOLEAN,\n          value: token.value === 'true',\n          loc: loc(lexer, token)\n        };\n      } else if (token.value === 'null') {\n        lexer.advance();\n        return {\n          kind: Kind.NULL,\n          loc: loc(lexer, token)\n        };\n      }\n\n      lexer.advance();\n      return {\n        kind: Kind.ENUM,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case TokenKind.DOLLAR:\n      if (!isConst) {\n        return parseVariable(lexer);\n      }\n\n      break;\n  }\n\n  throw unexpected(lexer);\n}\n\nfunction parseStringLiteral(lexer) {\n  var token = lexer.token;\n  lexer.advance();\n  return {\n    kind: Kind.STRING,\n    value: token.value,\n    block: token.kind === TokenKind.BLOCK_STRING,\n    loc: loc(lexer, token)\n  };\n}\n\nexport function parseConstValue(lexer) {\n  return parseValueLiteral(lexer, true);\n}\n\nfunction parseValueValue(lexer) {\n  return parseValueLiteral(lexer, false);\n}\n/**\n * ListValue[Const] :\n *   - [ ]\n *   - [ Value[?Const]+ ]\n */\n\n\nfunction parseList(lexer, isConst) {\n  var start = lexer.token;\n  var item = isConst ? parseConstValue : parseValueValue;\n  return {\n    kind: Kind.LIST,\n    values: any(lexer, TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectValue[Const] :\n *   - { }\n *   - { ObjectField[?Const]+ }\n */\n\n\nfunction parseObject(lexer, isConst) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.BRACE_L);\n  var fields = [];\n\n  while (!skip(lexer, TokenKind.BRACE_R)) {\n    fields.push(parseObjectField(lexer, isConst));\n  }\n\n  return {\n    kind: Kind.OBJECT,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectField[Const] : Name : Value[?Const]\n */\n\n\nfunction parseObjectField(lexer, isConst) {\n  var start = lexer.token;\n  return {\n    kind: Kind.OBJECT_FIELD,\n    name: parseName(lexer),\n    value: (expect(lexer, TokenKind.COLON), parseValueLiteral(lexer, isConst)),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Directives section.\n\n/**\n * Directives[Const] : Directive[?Const]+\n */\n\n\nfunction parseDirectives(lexer, isConst) {\n  var directives = [];\n\n  while (peek(lexer, TokenKind.AT)) {\n    directives.push(parseDirective(lexer, isConst));\n  }\n\n  return directives;\n}\n/**\n * Directive[Const] : @ Name Arguments[?Const]?\n */\n\n\nfunction parseDirective(lexer, isConst) {\n  var start = lexer.token;\n  expect(lexer, TokenKind.AT);\n  return {\n    kind: Kind.DIRECTIVE,\n    name: parseName(lexer),\n    arguments: parseArguments(lexer, isConst),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Types section.\n\n/**\n * Type :\n *   - NamedType\n *   - ListType\n *   - NonNullType\n */\n\n\nexport function parseTypeReference(lexer) {\n  var start = lexer.token;\n  var type;\n\n  if (skip(lexer, TokenKind.BRACKET_L)) {\n    type = parseTypeReference(lexer);\n    expect(lexer, TokenKind.BRACKET_R);\n    type = {\n      kind: Kind.LIST_TYPE,\n      type: type,\n      loc: loc(lexer, start)\n    };\n  } else {\n    type = parseNamedType(lexer);\n  }\n\n  if (skip(lexer, TokenKind.BANG)) {\n    return {\n      kind: Kind.NON_NULL_TYPE,\n      type: type,\n      loc: loc(lexer, start)\n    };\n  }\n\n  return type;\n}\n/**\n * NamedType : Name\n */\n\nexport function parseNamedType(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.NAMED_TYPE,\n    name: parseName(lexer),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Type Definition section.\n\n/**\n * TypeSystemDefinition :\n *   - SchemaDefinition\n *   - TypeDefinition\n *   - DirectiveDefinition\n *\n * TypeDefinition :\n *   - ScalarTypeDefinition\n *   - ObjectTypeDefinition\n *   - InterfaceTypeDefinition\n *   - UnionTypeDefinition\n *   - EnumTypeDefinition\n *   - InputObjectTypeDefinition\n */\n\nfunction parseTypeSystemDefinition(lexer) {\n  // Many definitions begin with a description and require a lookahead.\n  var keywordToken = peekDescription(lexer) ? lexer.lookahead() : lexer.token;\n\n  if (keywordToken.kind === TokenKind.NAME) {\n    switch (keywordToken.value) {\n      case 'schema':\n        return parseSchemaDefinition(lexer);\n\n      case 'scalar':\n        return parseScalarTypeDefinition(lexer);\n\n      case 'type':\n        return parseObjectTypeDefinition(lexer);\n\n      case 'interface':\n        return parseInterfaceTypeDefinition(lexer);\n\n      case 'union':\n        return parseUnionTypeDefinition(lexer);\n\n      case 'enum':\n        return parseEnumTypeDefinition(lexer);\n\n      case 'input':\n        return parseInputObjectTypeDefinition(lexer);\n\n      case 'directive':\n        return parseDirectiveDefinition(lexer);\n    }\n  }\n\n  throw unexpected(lexer, keywordToken);\n}\n\nfunction peekDescription(lexer) {\n  return peek(lexer, TokenKind.STRING) || peek(lexer, TokenKind.BLOCK_STRING);\n}\n/**\n * Description : StringValue\n */\n\n\nfunction parseDescription(lexer) {\n  if (peekDescription(lexer)) {\n    return parseStringLiteral(lexer);\n  }\n}\n/**\n * SchemaDefinition : schema Directives[Const]? { OperationTypeDefinition+ }\n */\n\n\nfunction parseSchemaDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'schema');\n  var directives = parseDirectives(lexer, true);\n  var operationTypes = many(lexer, TokenKind.BRACE_L, parseOperationTypeDefinition, TokenKind.BRACE_R);\n  return {\n    kind: Kind.SCHEMA_DEFINITION,\n    directives: directives,\n    operationTypes: operationTypes,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * OperationTypeDefinition : OperationType : NamedType\n */\n\n\nfunction parseOperationTypeDefinition(lexer) {\n  var start = lexer.token;\n  var operation = parseOperationType(lexer);\n  expect(lexer, TokenKind.COLON);\n  var type = parseNamedType(lexer);\n  return {\n    kind: Kind.OPERATION_TYPE_DEFINITION,\n    operation: operation,\n    type: type,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n */\n\n\nfunction parseScalarTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'scalar');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.SCALAR_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectTypeDefinition :\n *   Description?\n *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n */\n\n\nfunction parseObjectTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'type');\n  var name = parseName(lexer);\n  var interfaces = parseImplementsInterfaces(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  return {\n    kind: Kind.OBJECT_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    interfaces: interfaces,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ImplementsInterfaces :\n *   - implements `&`? NamedType\n *   - ImplementsInterfaces & NamedType\n */\n\n\nfunction parseImplementsInterfaces(lexer) {\n  var types = [];\n\n  if (lexer.token.value === 'implements') {\n    lexer.advance(); // Optional leading ampersand\n\n    skip(lexer, TokenKind.AMP);\n\n    do {\n      types.push(parseNamedType(lexer));\n    } while (skip(lexer, TokenKind.AMP) || // Legacy support for the SDL?\n    lexer.options.allowLegacySDLImplementsInterfaces && peek(lexer, TokenKind.NAME));\n  }\n\n  return types;\n}\n/**\n * FieldsDefinition : { FieldDefinition+ }\n */\n\n\nfunction parseFieldsDefinition(lexer) {\n  // Legacy support for the SDL?\n  if (lexer.options.allowLegacySDLEmptyFields && peek(lexer, TokenKind.BRACE_L) && lexer.lookahead().kind === TokenKind.BRACE_R) {\n    lexer.advance();\n    lexer.advance();\n    return [];\n  }\n\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseFieldDefinition, TokenKind.BRACE_R) : [];\n}\n/**\n * FieldDefinition :\n *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n */\n\n\nfunction parseFieldDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  var args = parseArgumentDefs(lexer);\n  expect(lexer, TokenKind.COLON);\n  var type = parseTypeReference(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.FIELD_DEFINITION,\n    description: description,\n    name: name,\n    arguments: args,\n    type: type,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ArgumentsDefinition : ( InputValueDefinition+ )\n */\n\n\nfunction parseArgumentDefs(lexer) {\n  if (!peek(lexer, TokenKind.PAREN_L)) {\n    return [];\n  }\n\n  return many(lexer, TokenKind.PAREN_L, parseInputValueDef, TokenKind.PAREN_R);\n}\n/**\n * InputValueDefinition :\n *   - Description? Name : Type DefaultValue? Directives[Const]?\n */\n\n\nfunction parseInputValueDef(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  expect(lexer, TokenKind.COLON);\n  var type = parseTypeReference(lexer);\n  var defaultValue;\n\n  if (skip(lexer, TokenKind.EQUALS)) {\n    defaultValue = parseConstValue(lexer);\n  }\n\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.INPUT_VALUE_DEFINITION,\n    description: description,\n    name: name,\n    type: type,\n    defaultValue: defaultValue,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InterfaceTypeDefinition :\n *   - Description? interface Name Directives[Const]? FieldsDefinition?\n */\n\n\nfunction parseInterfaceTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'interface');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  return {\n    kind: Kind.INTERFACE_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionTypeDefinition :\n *   - Description? union Name Directives[Const]? UnionMemberTypes?\n */\n\n\nfunction parseUnionTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'union');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var types = parseUnionMemberTypes(lexer);\n  return {\n    kind: Kind.UNION_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    types: types,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionMemberTypes :\n *   - = `|`? NamedType\n *   - UnionMemberTypes | NamedType\n */\n\n\nfunction parseUnionMemberTypes(lexer) {\n  var types = [];\n\n  if (skip(lexer, TokenKind.EQUALS)) {\n    // Optional leading pipe\n    skip(lexer, TokenKind.PIPE);\n\n    do {\n      types.push(parseNamedType(lexer));\n    } while (skip(lexer, TokenKind.PIPE));\n  }\n\n  return types;\n}\n/**\n * EnumTypeDefinition :\n *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n */\n\n\nfunction parseEnumTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'enum');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var values = parseEnumValuesDefinition(lexer);\n  return {\n    kind: Kind.ENUM_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    values: values,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * EnumValuesDefinition : { EnumValueDefinition+ }\n */\n\n\nfunction parseEnumValuesDefinition(lexer) {\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseEnumValueDefinition, TokenKind.BRACE_R) : [];\n}\n/**\n * EnumValueDefinition : Description? EnumValue Directives[Const]?\n *\n * EnumValue : Name\n */\n\n\nfunction parseEnumValueDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.ENUM_VALUE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputObjectTypeDefinition :\n *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n */\n\n\nfunction parseInputObjectTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'input');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseInputFieldsDefinition(lexer);\n  return {\n    kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputFieldsDefinition : { InputValueDefinition+ }\n */\n\n\nfunction parseInputFieldsDefinition(lexer) {\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseInputValueDef, TokenKind.BRACE_R) : [];\n}\n/**\n * TypeSystemExtension :\n *   - SchemaExtension\n *   - TypeExtension\n *\n * TypeExtension :\n *   - ScalarTypeExtension\n *   - ObjectTypeExtension\n *   - InterfaceTypeExtension\n *   - UnionTypeExtension\n *   - EnumTypeExtension\n *   - InputObjectTypeDefinition\n */\n\n\nfunction parseTypeSystemExtension(lexer) {\n  var keywordToken = lexer.lookahead();\n\n  if (keywordToken.kind === TokenKind.NAME) {\n    switch (keywordToken.value) {\n      case 'schema':\n        return parseSchemaExtension(lexer);\n\n      case 'scalar':\n        return parseScalarTypeExtension(lexer);\n\n      case 'type':\n        return parseObjectTypeExtension(lexer);\n\n      case 'interface':\n        return parseInterfaceTypeExtension(lexer);\n\n      case 'union':\n        return parseUnionTypeExtension(lexer);\n\n      case 'enum':\n        return parseEnumTypeExtension(lexer);\n\n      case 'input':\n        return parseInputObjectTypeExtension(lexer);\n    }\n  }\n\n  throw unexpected(lexer, keywordToken);\n}\n/**\n * SchemaExtension :\n *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n *  - extend schema Directives[Const]\n */\n\n\nfunction parseSchemaExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'schema');\n  var directives = parseDirectives(lexer, true);\n  var operationTypes = peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseOperationTypeDefinition, TokenKind.BRACE_R) : [];\n\n  if (directives.length === 0 && operationTypes.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.SCHEMA_EXTENSION,\n    directives: directives,\n    operationTypes: operationTypes,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ScalarTypeExtension :\n *   - extend scalar Name Directives[Const]\n */\n\n\nfunction parseScalarTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'scalar');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n\n  if (directives.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.SCALAR_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectTypeExtension :\n *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n *  - extend type Name ImplementsInterfaces? Directives[Const]\n *  - extend type Name ImplementsInterfaces\n */\n\n\nfunction parseObjectTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'type');\n  var name = parseName(lexer);\n  var interfaces = parseImplementsInterfaces(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n\n  if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.OBJECT_TYPE_EXTENSION,\n    name: name,\n    interfaces: interfaces,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InterfaceTypeExtension :\n *   - extend interface Name Directives[Const]? FieldsDefinition\n *   - extend interface Name Directives[Const]\n */\n\n\nfunction parseInterfaceTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'interface');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n\n  if (directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.INTERFACE_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionTypeExtension :\n *   - extend union Name Directives[Const]? UnionMemberTypes\n *   - extend union Name Directives[Const]\n */\n\n\nfunction parseUnionTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'union');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var types = parseUnionMemberTypes(lexer);\n\n  if (directives.length === 0 && types.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.UNION_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    types: types,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * EnumTypeExtension :\n *   - extend enum Name Directives[Const]? EnumValuesDefinition\n *   - extend enum Name Directives[Const]\n */\n\n\nfunction parseEnumTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'enum');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var values = parseEnumValuesDefinition(lexer);\n\n  if (directives.length === 0 && values.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.ENUM_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    values: values,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputObjectTypeExtension :\n *   - extend input Name Directives[Const]? InputFieldsDefinition\n *   - extend input Name Directives[Const]\n */\n\n\nfunction parseInputObjectTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'input');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseInputFieldsDefinition(lexer);\n\n  if (directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * DirectiveDefinition :\n *   - Description? directive @ Name ArgumentsDefinition? on DirectiveLocations\n */\n\n\nfunction parseDirectiveDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'directive');\n  expect(lexer, TokenKind.AT);\n  var name = parseName(lexer);\n  var args = parseArgumentDefs(lexer);\n  expectKeyword(lexer, 'on');\n  var locations = parseDirectiveLocations(lexer);\n  return {\n    kind: Kind.DIRECTIVE_DEFINITION,\n    description: description,\n    name: name,\n    arguments: args,\n    locations: locations,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * DirectiveLocations :\n *   - `|`? DirectiveLocation\n *   - DirectiveLocations | DirectiveLocation\n */\n\n\nfunction parseDirectiveLocations(lexer) {\n  // Optional leading pipe\n  skip(lexer, TokenKind.PIPE);\n  var locations = [];\n\n  do {\n    locations.push(parseDirectiveLocation(lexer));\n  } while (skip(lexer, TokenKind.PIPE));\n\n  return locations;\n}\n/*\n * DirectiveLocation :\n *   - ExecutableDirectiveLocation\n *   - TypeSystemDirectiveLocation\n *\n * ExecutableDirectiveLocation : one of\n *   `QUERY`\n *   `MUTATION`\n *   `SUBSCRIPTION`\n *   `FIELD`\n *   `FRAGMENT_DEFINITION`\n *   `FRAGMENT_SPREAD`\n *   `INLINE_FRAGMENT`\n *\n * TypeSystemDirectiveLocation : one of\n *   `SCHEMA`\n *   `SCALAR`\n *   `OBJECT`\n *   `FIELD_DEFINITION`\n *   `ARGUMENT_DEFINITION`\n *   `INTERFACE`\n *   `UNION`\n *   `ENUM`\n *   `ENUM_VALUE`\n *   `INPUT_OBJECT`\n *   `INPUT_FIELD_DEFINITION`\n */\n\n\nfunction parseDirectiveLocation(lexer) {\n  var start = lexer.token;\n  var name = parseName(lexer);\n\n  if (DirectiveLocation.hasOwnProperty(name.value)) {\n    return name;\n  }\n\n  throw unexpected(lexer, start);\n} // Core parsing utility functions\n\n/**\n * Returns a location object, used to identify the place in\n * the source that created a given parsed object.\n */\n\n\nfunction loc(lexer, startToken) {\n  if (!lexer.options.noLocation) {\n    return new Loc(startToken, lexer.lastToken, lexer.source);\n  }\n}\n\nfunction Loc(startToken, endToken, source) {\n  this.start = startToken.start;\n  this.end = endToken.end;\n  this.startToken = startToken;\n  this.endToken = endToken;\n  this.source = source;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\nLoc.prototype.toJSON = Loc.prototype.inspect = function toJSON() {\n  return {\n    start: this.start,\n    end: this.end\n  };\n};\n/**\n * Determines if the next token is of a given kind\n */\n\n\nfunction peek(lexer, kind) {\n  return lexer.token.kind === kind;\n}\n/**\n * If the next token is of the given kind, return true after advancing\n * the lexer. Otherwise, do not change the parser state and return false.\n */\n\n\nfunction skip(lexer, kind) {\n  var match = lexer.token.kind === kind;\n\n  if (match) {\n    lexer.advance();\n  }\n\n  return match;\n}\n/**\n * If the next token is of the given kind, return that token after advancing\n * the lexer. Otherwise, do not change the parser state and throw an error.\n */\n\n\nfunction expect(lexer, kind) {\n  var token = lexer.token;\n\n  if (token.kind === kind) {\n    lexer.advance();\n    return token;\n  }\n\n  throw syntaxError(lexer.source, token.start, \"Expected \".concat(kind, \", found \").concat(getTokenDesc(token)));\n}\n/**\n * If the next token is a keyword with the given value, return that token after\n * advancing the lexer. Otherwise, do not change the parser state and return\n * false.\n */\n\n\nfunction expectKeyword(lexer, value) {\n  var token = lexer.token;\n\n  if (token.kind === TokenKind.NAME && token.value === value) {\n    lexer.advance();\n    return token;\n  }\n\n  throw syntaxError(lexer.source, token.start, \"Expected \\\"\".concat(value, \"\\\", found \").concat(getTokenDesc(token)));\n}\n/**\n * Helper function for creating an error when an unexpected lexed token\n * is encountered.\n */\n\n\nfunction unexpected(lexer, atToken) {\n  var token = atToken || lexer.token;\n  return syntaxError(lexer.source, token.start, \"Unexpected \".concat(getTokenDesc(token)));\n}\n/**\n * Returns a possibly empty list of parse nodes, determined by\n * the parseFn. This list begins with a lex token of openKind\n * and ends with a lex token of closeKind. Advances the parser\n * to the next lex token after the closing token.\n */\n\n\nfunction any(lexer, openKind, parseFn, closeKind) {\n  expect(lexer, openKind);\n  var nodes = [];\n\n  while (!skip(lexer, closeKind)) {\n    nodes.push(parseFn(lexer));\n  }\n\n  return nodes;\n}\n/**\n * Returns a non-empty list of parse nodes, determined by\n * the parseFn. This list begins with a lex token of openKind\n * and ends with a lex token of closeKind. Advances the parser\n * to the next lex token after the closing token.\n */\n\n\nfunction many(lexer, openKind, parseFn, closeKind) {\n  expect(lexer, openKind);\n  var nodes = [parseFn(lexer)];\n\n  while (!skip(lexer, closeKind)) {\n    nodes.push(parseFn(lexer));\n  }\n\n  return nodes;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}