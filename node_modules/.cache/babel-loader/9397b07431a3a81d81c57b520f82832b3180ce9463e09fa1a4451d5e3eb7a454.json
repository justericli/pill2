{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ericli/Desktop/pill2/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/ericli/Desktop/pill2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"/Users/ericli/Desktop/pill2/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { normalizeProvider } from \"@aws-sdk/util-middleware\";\nimport { AdaptiveRetryStrategy, DEFAULT_MAX_ATTEMPTS, DEFAULT_RETRY_MODE, RETRY_MODES, StandardRetryStrategy } from \"@aws-sdk/util-retry\";\nexport var ENV_MAX_ATTEMPTS = \"AWS_MAX_ATTEMPTS\";\nexport var CONFIG_MAX_ATTEMPTS = \"max_attempts\";\nexport var NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {\n  environmentVariableSelector: function environmentVariableSelector(env) {\n    var value = env[ENV_MAX_ATTEMPTS];\n    if (!value) return undefined;\n    var maxAttempt = parseInt(value);\n    if (Number.isNaN(maxAttempt)) {\n      throw new Error(\"Environment variable \".concat(ENV_MAX_ATTEMPTS, \" mast be a number, got \\\"\").concat(value, \"\\\"\"));\n    }\n    return maxAttempt;\n  },\n  configFileSelector: function configFileSelector(profile) {\n    var value = profile[CONFIG_MAX_ATTEMPTS];\n    if (!value) return undefined;\n    var maxAttempt = parseInt(value);\n    if (Number.isNaN(maxAttempt)) {\n      throw new Error(\"Shared config file entry \".concat(CONFIG_MAX_ATTEMPTS, \" mast be a number, got \\\"\").concat(value, \"\\\"\"));\n    }\n    return maxAttempt;\n  },\n  default: DEFAULT_MAX_ATTEMPTS\n};\nexport var resolveRetryConfig = function resolveRetryConfig(input) {\n  var _input$maxAttempts;\n  var _retryStrategy = input.retryStrategy;\n  var maxAttempts = normalizeProvider((_input$maxAttempts = input.maxAttempts) !== null && _input$maxAttempts !== void 0 ? _input$maxAttempts : DEFAULT_MAX_ATTEMPTS);\n  return _objectSpread(_objectSpread({}, input), {}, {\n    maxAttempts: maxAttempts,\n    retryStrategy: function () {\n      var _retryStrategy2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var retryMode;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!_retryStrategy) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\", _retryStrategy);\n            case 2:\n              _context.next = 4;\n              return normalizeProvider(input.retryMode)();\n            case 4:\n              retryMode = _context.sent;\n              if (!(retryMode === RETRY_MODES.ADAPTIVE)) {\n                _context.next = 7;\n                break;\n              }\n              return _context.abrupt(\"return\", new AdaptiveRetryStrategy(maxAttempts));\n            case 7:\n              return _context.abrupt(\"return\", new StandardRetryStrategy(maxAttempts));\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function retryStrategy() {\n        return _retryStrategy2.apply(this, arguments);\n      }\n      return retryStrategy;\n    }()\n  });\n};\nexport var ENV_RETRY_MODE = \"AWS_RETRY_MODE\";\nexport var CONFIG_RETRY_MODE = \"retry_mode\";\nexport var NODE_RETRY_MODE_CONFIG_OPTIONS = {\n  environmentVariableSelector: function environmentVariableSelector(env) {\n    return env[ENV_RETRY_MODE];\n  },\n  configFileSelector: function configFileSelector(profile) {\n    return profile[CONFIG_RETRY_MODE];\n  },\n  default: DEFAULT_RETRY_MODE\n};","map":{"version":3,"names":["normalizeProvider","AdaptiveRetryStrategy","DEFAULT_MAX_ATTEMPTS","DEFAULT_RETRY_MODE","RETRY_MODES","StandardRetryStrategy","ENV_MAX_ATTEMPTS","CONFIG_MAX_ATTEMPTS","NODE_MAX_ATTEMPT_CONFIG_OPTIONS","environmentVariableSelector","env","value","undefined","maxAttempt","parseInt","Number","isNaN","Error","concat","configFileSelector","profile","default","resolveRetryConfig","input","_input$maxAttempts","retryStrategy","maxAttempts","_objectSpread","_retryStrategy2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","retryMode","wrap","_callee$","_context","prev","next","abrupt","sent","ADAPTIVE","stop","apply","arguments","ENV_RETRY_MODE","CONFIG_RETRY_MODE","NODE_RETRY_MODE_CONFIG_OPTIONS"],"sources":["/Users/ericli/Desktop/pill2/node_modules/@aws-sdk/client-s3/node_modules/@aws-sdk/middleware-retry/dist-es/configurations.js"],"sourcesContent":["import { normalizeProvider } from \"@aws-sdk/util-middleware\";\nimport { AdaptiveRetryStrategy, DEFAULT_MAX_ATTEMPTS, DEFAULT_RETRY_MODE, RETRY_MODES, StandardRetryStrategy, } from \"@aws-sdk/util-retry\";\nexport const ENV_MAX_ATTEMPTS = \"AWS_MAX_ATTEMPTS\";\nexport const CONFIG_MAX_ATTEMPTS = \"max_attempts\";\nexport const NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => {\n        const value = env[ENV_MAX_ATTEMPTS];\n        if (!value)\n            return undefined;\n        const maxAttempt = parseInt(value);\n        if (Number.isNaN(maxAttempt)) {\n            throw new Error(`Environment variable ${ENV_MAX_ATTEMPTS} mast be a number, got \"${value}\"`);\n        }\n        return maxAttempt;\n    },\n    configFileSelector: (profile) => {\n        const value = profile[CONFIG_MAX_ATTEMPTS];\n        if (!value)\n            return undefined;\n        const maxAttempt = parseInt(value);\n        if (Number.isNaN(maxAttempt)) {\n            throw new Error(`Shared config file entry ${CONFIG_MAX_ATTEMPTS} mast be a number, got \"${value}\"`);\n        }\n        return maxAttempt;\n    },\n    default: DEFAULT_MAX_ATTEMPTS,\n};\nexport const resolveRetryConfig = (input) => {\n    const { retryStrategy } = input;\n    const maxAttempts = normalizeProvider(input.maxAttempts ?? DEFAULT_MAX_ATTEMPTS);\n    return {\n        ...input,\n        maxAttempts,\n        retryStrategy: async () => {\n            if (retryStrategy) {\n                return retryStrategy;\n            }\n            const retryMode = await normalizeProvider(input.retryMode)();\n            if (retryMode === RETRY_MODES.ADAPTIVE) {\n                return new AdaptiveRetryStrategy(maxAttempts);\n            }\n            return new StandardRetryStrategy(maxAttempts);\n        },\n    };\n};\nexport const ENV_RETRY_MODE = \"AWS_RETRY_MODE\";\nexport const CONFIG_RETRY_MODE = \"retry_mode\";\nexport const NODE_RETRY_MODE_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => env[ENV_RETRY_MODE],\n    configFileSelector: (profile) => profile[CONFIG_RETRY_MODE],\n    default: DEFAULT_RETRY_MODE,\n};\n"],"mappings":";;;AAAA,SAASA,iBAAiB,QAAQ,0BAA0B;AAC5D,SAASC,qBAAqB,EAAEC,oBAAoB,EAAEC,kBAAkB,EAAEC,WAAW,EAAEC,qBAAqB,QAAS,qBAAqB;AAC1I,OAAO,IAAMC,gBAAgB,GAAG,kBAAkB;AAClD,OAAO,IAAMC,mBAAmB,GAAG,cAAc;AACjD,OAAO,IAAMC,+BAA+B,GAAG;EAC3CC,2BAA2B,EAAE,SAAAA,4BAACC,GAAG,EAAK;IAClC,IAAMC,KAAK,GAAGD,GAAG,CAACJ,gBAAgB,CAAC;IACnC,IAAI,CAACK,KAAK,EACN,OAAOC,SAAS;IACpB,IAAMC,UAAU,GAAGC,QAAQ,CAACH,KAAK,CAAC;IAClC,IAAII,MAAM,CAACC,KAAK,CAACH,UAAU,CAAC,EAAE;MAC1B,MAAM,IAAII,KAAK,yBAAAC,MAAA,CAAyBZ,gBAAgB,+BAAAY,MAAA,CAA2BP,KAAK,QAAI;IAChG;IACA,OAAOE,UAAU;EACrB,CAAC;EACDM,kBAAkB,EAAE,SAAAA,mBAACC,OAAO,EAAK;IAC7B,IAAMT,KAAK,GAAGS,OAAO,CAACb,mBAAmB,CAAC;IAC1C,IAAI,CAACI,KAAK,EACN,OAAOC,SAAS;IACpB,IAAMC,UAAU,GAAGC,QAAQ,CAACH,KAAK,CAAC;IAClC,IAAII,MAAM,CAACC,KAAK,CAACH,UAAU,CAAC,EAAE;MAC1B,MAAM,IAAII,KAAK,6BAAAC,MAAA,CAA6BX,mBAAmB,+BAAAW,MAAA,CAA2BP,KAAK,QAAI;IACvG;IACA,OAAOE,UAAU;EACrB,CAAC;EACDQ,OAAO,EAAEnB;AACb,CAAC;AACD,OAAO,IAAMoB,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAIC,KAAK,EAAK;EAAA,IAAAC,kBAAA;EACzC,IAAQC,cAAa,GAAKF,KAAK,CAAvBE,aAAa;EACrB,IAAMC,WAAW,GAAG1B,iBAAiB,EAAAwB,kBAAA,GAACD,KAAK,CAACG,WAAW,cAAAF,kBAAA,cAAAA,kBAAA,GAAItB,oBAAoB,CAAC;EAChF,OAAAyB,aAAA,CAAAA,aAAA,KACOJ,KAAK;IACRG,WAAW,EAAXA,WAAW;IACXD,aAAa;MAAA,IAAAG,eAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAE,SAAAC,QAAA;QAAA,IAAAC,SAAA;QAAA,OAAAH,mBAAA,GAAAI,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAA,KACPb,cAAa;gBAAAW,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAAA,OAAAF,QAAA,CAAAG,MAAA,WACNd,cAAa;YAAA;cAAAW,QAAA,CAAAE,IAAA;cAAA,OAEAtC,iBAAiB,CAACuB,KAAK,CAACU,SAAS,CAAC,EAAE;YAAA;cAAtDA,SAAS,GAAAG,QAAA,CAAAI,IAAA;cAAA,MACXP,SAAS,KAAK7B,WAAW,CAACqC,QAAQ;gBAAAL,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAAA,OAAAF,QAAA,CAAAG,MAAA,WAC3B,IAAItC,qBAAqB,CAACyB,WAAW,CAAC;YAAA;cAAA,OAAAU,QAAA,CAAAG,MAAA,WAE1C,IAAIlC,qBAAqB,CAACqB,WAAW,CAAC;YAAA;YAAA;cAAA,OAAAU,QAAA,CAAAM,IAAA;UAAA;QAAA,GAAAV,OAAA;MAAA,CAChD;MAAA,SAAAP,cAAA;QAAA,OAAAG,eAAA,CAAAe,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAnB,aAAA;IAAA;EAAA;AAET,CAAC;AACD,OAAO,IAAMoB,cAAc,GAAG,gBAAgB;AAC9C,OAAO,IAAMC,iBAAiB,GAAG,YAAY;AAC7C,OAAO,IAAMC,8BAA8B,GAAG;EAC1CtC,2BAA2B,EAAE,SAAAA,4BAACC,GAAG;IAAA,OAAKA,GAAG,CAACmC,cAAc,CAAC;EAAA;EACzD1B,kBAAkB,EAAE,SAAAA,mBAACC,OAAO;IAAA,OAAKA,OAAO,CAAC0B,iBAAiB,CAAC;EAAA;EAC3DzB,OAAO,EAAElB;AACb,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}