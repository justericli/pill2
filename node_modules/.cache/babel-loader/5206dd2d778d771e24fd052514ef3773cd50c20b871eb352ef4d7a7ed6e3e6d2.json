{"ast":null,"code":"import { __assign, __awaiter, __extends, __generator, __values } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ConsoleLogger as Logger, Signer, Credentials, Constants } from '@aws-amplify/core';\nimport { AbstractXRProvider } from './XRProvider';\nimport { XRNoSceneConfiguredError, XRSceneNotFoundError, XRSceneNotLoadedError, XRNoDomElement, XRSceneLoadFailure } from '../Errors';\nvar SUMERIAN_SERVICE_NAME = 'sumerian';\nvar logger = new Logger('SumerianProvider');\nvar SumerianProvider = /** @class */function (_super) {\n  __extends(SumerianProvider, _super);\n  function SumerianProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    return _super.call(this, options) || this;\n  }\n  SumerianProvider.prototype.getProviderName = function () {\n    return 'SumerianProvider';\n  };\n  SumerianProvider.prototype.loadScript = function (url) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, new Promise(function (resolve, reject) {\n          var scriptElement = document.createElement('script');\n          scriptElement.src = url;\n          scriptElement.addEventListener('load', function (event) {\n            resolve();\n          });\n          scriptElement.addEventListener('error', function (event) {\n            reject(new Error(\"Failed to load script: \" + url));\n          });\n          document.head.appendChild(scriptElement);\n        })];\n      });\n    });\n  };\n  SumerianProvider.prototype.loadScene = function (sceneName, domElementId, sceneOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var errorMsg, errorMsg, element, errorMsg, scene, errorMsg, sceneUrl, sceneId, sceneRegion, errorMsg, awsSDKConfigOverride, fetchOptions, url, credentials, accessInfo, serviceInfo, request, e_1, apiResponse, apiResponseJson, sceneBundleData, sceneBundle, sceneBundleJson, error_1, progressCallback, publishParamOverrides, sceneLoadParams, sceneController, _a, _b, warning;\n      var e_2, _c;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            if (!sceneName) {\n              errorMsg = 'No scene name passed into loadScene';\n              logger.error(errorMsg);\n              throw new XRSceneLoadFailure(errorMsg);\n            }\n            if (!domElementId) {\n              errorMsg = 'No dom element id passed into loadScene';\n              logger.error(errorMsg);\n              throw new XRNoDomElement(errorMsg);\n            }\n            element = document.getElementById(domElementId);\n            if (!element) {\n              errorMsg = \"DOM element id, \" + domElementId + \" not found\";\n              logger.error(errorMsg);\n              throw new XRNoDomElement(errorMsg);\n            }\n            scene = this.getScene(sceneName);\n            if (!scene.sceneConfig) {\n              errorMsg = \"No scene config configured for scene: \" + sceneName;\n              logger.error(errorMsg);\n              throw new XRSceneLoadFailure(errorMsg);\n            }\n            sceneUrl = scene.sceneConfig.url;\n            sceneId = scene.sceneConfig.sceneId;\n            if (scene.sceneConfig.hasOwnProperty('region')) {\n              // Use the scene region on the Sumerian scene configuration\n              sceneRegion = scene.sceneConfig.region;\n            } else if (this.options.hasOwnProperty('region')) {\n              // Use the scene region on the XR category configuration\n              sceneRegion = this.options.region;\n            } else {\n              errorMsg = \"No region configured for scene: \" + sceneName;\n              logger.error(errorMsg);\n              throw new XRSceneLoadFailure(errorMsg);\n            }\n            awsSDKConfigOverride = {\n              region: sceneRegion,\n              // This is passed to the AWS clients created in\n              // Sumerian's AwsSystem\n              // This helps other services(like Lex and Polly) to track\n              // traffic coming from Sumerian scenes embedded with Amplify\n              customUserAgent: Constants.userAgent + \"-SumerianScene\"\n            };\n            fetchOptions = {\n              headers: {\n                // This sets the AWS user agent string\n                // So the Sumerian service knows this request is\n                // from Amplify\n                'X-Amz-User-Agent': Constants.userAgent\n              }\n            };\n            url = sceneUrl;\n            _d.label = 1;\n          case 1:\n            _d.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, Credentials.get()];\n          case 2:\n            credentials = _d.sent();\n            awsSDKConfigOverride['credentials'] = credentials;\n            accessInfo = {\n              secret_key: credentials.secretAccessKey,\n              access_key: credentials.accessKeyId,\n              session_token: credentials.sessionToken\n            };\n            serviceInfo = {\n              region: sceneRegion,\n              service: SUMERIAN_SERVICE_NAME\n            };\n            request = Signer.sign({\n              method: 'GET',\n              url: sceneUrl\n            }, accessInfo, serviceInfo);\n            fetchOptions.headers = __assign(__assign({}, fetchOptions.headers), request.headers);\n            url = request.url;\n            return [3 /*break*/, 4];\n          case 3:\n            e_1 = _d.sent();\n            logger.debug('No credentials available, the request will be unsigned');\n            return [3 /*break*/, 4];\n          case 4:\n            return [4 /*yield*/, fetch(url, fetchOptions)];\n          case 5:\n            apiResponse = _d.sent();\n            return [4 /*yield*/, apiResponse.json()];\n          case 6:\n            apiResponseJson = _d.sent();\n            if (apiResponse.status === 403) {\n              if (apiResponseJson.message) {\n                logger.error(\"Failure to authenticate user: \" + apiResponseJson.message);\n                throw new XRSceneLoadFailure(\"Failure to authenticate user: \" + apiResponseJson.message);\n              } else {\n                logger.error(\"Failure to authenticate user\");\n                throw new XRSceneLoadFailure(\"Failure to authenticate user\");\n              }\n            }\n            sceneBundleData = apiResponseJson.bundleData[sceneId];\n            return [4 /*yield*/, fetch(sceneBundleData.url, {\n              headers: sceneBundleData.headers\n            })];\n          case 7:\n            sceneBundle = _d.sent();\n            return [4 /*yield*/, sceneBundle.json()];\n          case 8:\n            sceneBundleJson = _d.sent();\n            _d.label = 9;\n          case 9:\n            _d.trys.push([9, 11,, 12]);\n            // Load the Sumerian bootstrapper script into the DOM\n            return [4 /*yield*/, this.loadScript(sceneBundleJson[sceneId].bootstrapperUrl)];\n          case 10:\n            // Load the Sumerian bootstrapper script into the DOM\n            _d.sent();\n            return [3 /*break*/, 12];\n          case 11:\n            error_1 = _d.sent();\n            logger.error(error_1);\n            throw new XRSceneLoadFailure(error_1);\n          case 12:\n            progressCallback = sceneOptions.progressCallback ? sceneOptions.progressCallback : undefined;\n            publishParamOverrides = scene.publishParamOverrides ? scene.publishParamOverrides : undefined;\n            sceneLoadParams = {\n              element: element,\n              sceneId: sceneId,\n              sceneBundle: sceneBundleJson,\n              apiResponse: apiResponseJson,\n              progressCallback: progressCallback,\n              publishParamOverrides: publishParamOverrides,\n              awsSDKConfigOverride: awsSDKConfigOverride\n            };\n            return [4 /*yield*/, window.SumerianBootstrapper.loadScene(sceneLoadParams)];\n          case 13:\n            sceneController = _d.sent();\n            scene.sceneController = sceneController;\n            scene.isLoaded = true;\n            try {\n              // Log scene warnings\n              for (_a = __values(sceneController.sceneLoadWarnings), _b = _a.next(); !_b.done; _b = _a.next()) {\n                warning = _b.value;\n                logger.warn(\"loadScene warning: \" + warning);\n              }\n            } catch (e_2_1) {\n              e_2 = {\n                error: e_2_1\n              };\n            } finally {\n              try {\n                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n              } finally {\n                if (e_2) throw e_2.error;\n              }\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  SumerianProvider.prototype.isSceneLoaded = function (sceneName) {\n    var scene = this.getScene(sceneName);\n    return scene.isLoaded || false;\n  };\n  SumerianProvider.prototype.getScene = function (sceneName) {\n    if (!this.options.scenes) {\n      var errorMsg = 'No scenes were defined in the configuration';\n      logger.error(errorMsg);\n      throw new XRNoSceneConfiguredError(errorMsg);\n    }\n    if (!sceneName) {\n      var errorMsg = 'No scene name was passed';\n      logger.error(errorMsg);\n      throw new XRSceneNotFoundError(errorMsg);\n    }\n    if (!this.options.scenes[sceneName]) {\n      var errorMsg = \"Scene '\" + sceneName + \"' is not configured\";\n      logger.error(errorMsg);\n      throw new XRSceneNotFoundError(errorMsg);\n    }\n    return this.options.scenes[sceneName];\n  };\n  SumerianProvider.prototype.getSceneController = function (sceneName) {\n    if (!this.options.scenes) {\n      var errorMsg = 'No scenes were defined in the configuration';\n      logger.error(errorMsg);\n      throw new XRNoSceneConfiguredError(errorMsg);\n    }\n    var scene = this.options.scenes[sceneName];\n    if (!scene) {\n      var errorMsg = \"Scene '\" + sceneName + \"' is not configured\";\n      logger.error(errorMsg);\n      throw new XRSceneNotFoundError(errorMsg);\n    }\n    var sceneController = scene.sceneController;\n    if (!sceneController) {\n      var errorMsg = \"Scene controller for '\" + sceneName + \"' has not been loaded\";\n      logger.error(errorMsg);\n      throw new XRSceneNotLoadedError(errorMsg);\n    }\n    return sceneController;\n  };\n  SumerianProvider.prototype.isVRCapable = function (sceneName) {\n    var sceneController = this.getSceneController(sceneName);\n    return sceneController.vrCapable;\n  };\n  SumerianProvider.prototype.isVRPresentationActive = function (sceneName) {\n    var sceneController = this.getSceneController(sceneName);\n    return sceneController.vrPresentationActive;\n  };\n  SumerianProvider.prototype.start = function (sceneName) {\n    var sceneController = this.getSceneController(sceneName);\n    sceneController.start();\n  };\n  SumerianProvider.prototype.enterVR = function (sceneName) {\n    var sceneController = this.getSceneController(sceneName);\n    sceneController.enterVR();\n  };\n  SumerianProvider.prototype.exitVR = function (sceneName) {\n    var sceneController = this.getSceneController(sceneName);\n    sceneController.exitVR();\n  };\n  SumerianProvider.prototype.isMuted = function (sceneName) {\n    var sceneController = this.getSceneController(sceneName);\n    return sceneController.muted;\n  };\n  SumerianProvider.prototype.setMuted = function (sceneName, muted) {\n    var sceneController = this.getSceneController(sceneName);\n    sceneController.muted = muted;\n  };\n  SumerianProvider.prototype.onSceneEvent = function (sceneName, eventName, eventHandler) {\n    var sceneController = this.getSceneController(sceneName);\n    sceneController.on(eventName, eventHandler);\n  };\n  SumerianProvider.prototype.enableAudio = function (sceneName) {\n    var sceneController = this.getSceneController(sceneName);\n    sceneController.enableAudio();\n  };\n  return SumerianProvider;\n}(AbstractXRProvider);\nexport { SumerianProvider };","map":{"version":3,"names":["ConsoleLogger","Logger","Signer","Credentials","Constants","AbstractXRProvider","XRNoSceneConfiguredError","XRSceneNotFoundError","XRSceneNotLoadedError","XRNoDomElement","XRSceneLoadFailure","SUMERIAN_SERVICE_NAME","logger","SumerianProvider","_super","__extends","options","call","prototype","getProviderName","loadScript","url","Promise","resolve","reject","scriptElement","document","createElement","src","addEventListener","event","Error","head","appendChild","loadScene","sceneName","domElementId","sceneOptions","errorMsg","error","element","getElementById","scene","getScene","sceneConfig","sceneUrl","sceneId","hasOwnProperty","sceneRegion","region","awsSDKConfigOverride","customUserAgent","userAgent","fetchOptions","headers","get","credentials","_d","sent","accessInfo","secret_key","secretAccessKey","access_key","accessKeyId","session_token","sessionToken","serviceInfo","service","request","sign","method","__assign","debug","fetch","apiResponse","json","apiResponseJson","status","message","sceneBundleData","bundleData","sceneBundle","sceneBundleJson","bootstrapperUrl","error_1","progressCallback","undefined","publishParamOverrides","sceneLoadParams","window","SumerianBootstrapper","sceneController","isLoaded","_a","__values","sceneLoadWarnings","_b","next","done","warning","value","warn","isSceneLoaded","scenes","getSceneController","isVRCapable","vrCapable","isVRPresentationActive","vrPresentationActive","start","enterVR","exitVR","isMuted","muted","setMuted","onSceneEvent","eventName","eventHandler","on","enableAudio"],"sources":["/Users/ericli/node_modules/aws-amplify/node_modules/@aws-amplify/xr/src/Providers/SumerianProvider.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport {\n\tConsoleLogger as Logger,\n\tSigner,\n\tCredentials,\n\tConstants,\n} from '@aws-amplify/core';\n\nimport { AbstractXRProvider } from './XRProvider';\nimport { ProviderOptions, SceneOptions } from '../types';\nimport {\n\tXRNoSceneConfiguredError,\n\tXRSceneNotFoundError,\n\tXRSceneNotLoadedError,\n\tXRNoDomElement,\n\tXRSceneLoadFailure,\n} from '../Errors';\n\ntype SumerianSceneOptions = SceneOptions & { progressCallback: Function };\n\nconst SUMERIAN_SERVICE_NAME = 'sumerian';\n\nconst logger = new Logger('SumerianProvider');\n\nexport class SumerianProvider extends AbstractXRProvider {\n\tconstructor(options: ProviderOptions = {}) {\n\t\tsuper(options);\n\t}\n\n\tgetProviderName() {\n\t\treturn 'SumerianProvider';\n\t}\n\n\tprivate async loadScript(url) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst scriptElement = document.createElement('script');\n\t\t\tscriptElement.src = url;\n\n\t\t\tscriptElement.addEventListener('load', event => {\n\t\t\t\tresolve();\n\t\t\t});\n\n\t\t\tscriptElement.addEventListener('error', event => {\n\t\t\t\treject(new Error(`Failed to load script: ${url}`));\n\t\t\t});\n\n\t\t\tdocument.head.appendChild(scriptElement);\n\t\t});\n\t}\n\n\tpublic async loadScene(\n\t\tsceneName: string,\n\t\tdomElementId: string,\n\t\tsceneOptions: SumerianSceneOptions\n\t) {\n\t\tif (!sceneName) {\n\t\t\tconst errorMsg = 'No scene name passed into loadScene';\n\t\t\tlogger.error(errorMsg);\n\t\t\tthrow new XRSceneLoadFailure(errorMsg);\n\t\t}\n\n\t\tif (!domElementId) {\n\t\t\tconst errorMsg = 'No dom element id passed into loadScene';\n\t\t\tlogger.error(errorMsg);\n\t\t\tthrow new XRNoDomElement(errorMsg);\n\t\t}\n\n\t\tconst element = document.getElementById(domElementId);\n\t\tif (!element) {\n\t\t\tconst errorMsg = `DOM element id, ${domElementId} not found`;\n\t\t\tlogger.error(errorMsg);\n\t\t\tthrow new XRNoDomElement(errorMsg);\n\t\t}\n\n\t\tconst scene = this.getScene(sceneName);\n\t\tif (!scene.sceneConfig) {\n\t\t\tconst errorMsg = `No scene config configured for scene: ${sceneName}`;\n\t\t\tlogger.error(errorMsg);\n\t\t\tthrow new XRSceneLoadFailure(errorMsg);\n\t\t}\n\n\t\tconst sceneUrl = scene.sceneConfig.url;\n\t\tconst sceneId = scene.sceneConfig.sceneId;\n\n\t\tlet sceneRegion;\n\t\tif (scene.sceneConfig.hasOwnProperty('region')) {\n\t\t\t// Use the scene region on the Sumerian scene configuration\n\t\t\tsceneRegion = scene.sceneConfig.region;\n\t\t} else if (this.options.hasOwnProperty('region')) {\n\t\t\t// Use the scene region on the XR category configuration\n\t\t\tsceneRegion = this.options.region;\n\t\t} else {\n\t\t\tconst errorMsg = `No region configured for scene: ${sceneName}`;\n\t\t\tlogger.error(errorMsg);\n\t\t\tthrow new XRSceneLoadFailure(errorMsg);\n\t\t}\n\n\t\tconst awsSDKConfigOverride = {\n\t\t\tregion: sceneRegion,\n\t\t\t// This is passed to the AWS clients created in\n\t\t\t// Sumerian's AwsSystem\n\t\t\t// This helps other services(like Lex and Polly) to track\n\t\t\t// traffic coming from Sumerian scenes embedded with Amplify\n\t\t\tcustomUserAgent: `${Constants.userAgent}-SumerianScene`,\n\t\t};\n\n\t\t// We are signing the requests to Sumerian ourselves instead of using the AWS SDK\n\t\t// We want to set the user agent header\n\t\tconst fetchOptions = {\n\t\t\theaders: {\n\t\t\t\t// This sets the AWS user agent string\n\t\t\t\t// So the Sumerian service knows this request is\n\t\t\t\t// from Amplify\n\t\t\t\t'X-Amz-User-Agent': Constants.userAgent,\n\t\t\t},\n\t\t};\n\n\t\tlet url = sceneUrl;\n\t\ttry {\n\t\t\t// Get credentials from Auth and sign the request\n\t\t\tconst credentials = await Credentials.get();\n\t\t\tawsSDKConfigOverride['credentials'] = credentials;\n\t\t\tconst accessInfo = {\n\t\t\t\tsecret_key: credentials.secretAccessKey,\n\t\t\t\taccess_key: credentials.accessKeyId,\n\t\t\t\tsession_token: credentials.sessionToken,\n\t\t\t};\n\n\t\t\tconst serviceInfo = {\n\t\t\t\tregion: sceneRegion,\n\t\t\t\tservice: SUMERIAN_SERVICE_NAME,\n\t\t\t};\n\t\t\tconst request = Signer.sign(\n\t\t\t\t{ method: 'GET', url: sceneUrl },\n\t\t\t\taccessInfo,\n\t\t\t\tserviceInfo\n\t\t\t);\n\t\t\tfetchOptions.headers = { ...fetchOptions.headers, ...request.headers };\n\t\t\turl = request.url;\n\t\t} catch (e) {\n\t\t\tlogger.debug('No credentials available, the request will be unsigned');\n\t\t}\n\n\t\tconst apiResponse = await fetch(url, fetchOptions);\n\t\tconst apiResponseJson = await apiResponse.json();\n\t\tif (apiResponse.status === 403) {\n\t\t\tif (apiResponseJson.message) {\n\t\t\t\tlogger.error(\n\t\t\t\t\t`Failure to authenticate user: ${apiResponseJson.message}`\n\t\t\t\t);\n\t\t\t\tthrow new XRSceneLoadFailure(\n\t\t\t\t\t`Failure to authenticate user: ${apiResponseJson.message}`\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tlogger.error(`Failure to authenticate user`);\n\t\t\t\tthrow new XRSceneLoadFailure(`Failure to authenticate user`);\n\t\t\t}\n\t\t}\n\n\t\t// Get bundle data from scene api response\n\t\tconst sceneBundleData = apiResponseJson.bundleData[sceneId];\n\t\tconst sceneBundle = await fetch(sceneBundleData.url, {\n\t\t\theaders: sceneBundleData.headers,\n\t\t});\n\t\tconst sceneBundleJson = await sceneBundle.json();\n\n\t\ttry {\n\t\t\t// Load the Sumerian bootstrapper script into the DOM\n\t\t\tawait this.loadScript(sceneBundleJson[sceneId].bootstrapperUrl);\n\t\t} catch (error) {\n\t\t\tlogger.error(error);\n\t\t\tthrow new XRSceneLoadFailure(error);\n\t\t}\n\n\t\tconst progressCallback = sceneOptions.progressCallback\n\t\t\t? sceneOptions.progressCallback\n\t\t\t: undefined;\n\t\tconst publishParamOverrides = scene.publishParamOverrides\n\t\t\t? scene.publishParamOverrides\n\t\t\t: undefined;\n\n\t\tconst sceneLoadParams = {\n\t\t\telement,\n\t\t\tsceneId,\n\t\t\tsceneBundle: sceneBundleJson,\n\t\t\tapiResponse: apiResponseJson,\n\t\t\tprogressCallback,\n\t\t\tpublishParamOverrides,\n\t\t\tawsSDKConfigOverride,\n\t\t};\n\n\t\t// Load the scene into the dom and set the scene controller\n\t\tconst sceneController = await (<any>window).SumerianBootstrapper.loadScene(\n\t\t\tsceneLoadParams\n\t\t);\n\t\tscene.sceneController = sceneController;\n\t\tscene.isLoaded = true;\n\n\t\t// Log scene warnings\n\t\tfor (const warning of sceneController.sceneLoadWarnings) {\n\t\t\tlogger.warn(`loadScene warning: ${warning}`);\n\t\t}\n\t}\n\n\tpublic isSceneLoaded(sceneName: string) {\n\t\tconst scene = this.getScene(sceneName);\n\t\treturn scene.isLoaded || false;\n\t}\n\n\tprivate getScene(sceneName: string) {\n\t\tif (!this.options.scenes) {\n\t\t\tconst errorMsg = 'No scenes were defined in the configuration';\n\t\t\tlogger.error(errorMsg);\n\t\t\tthrow new XRNoSceneConfiguredError(errorMsg);\n\t\t}\n\n\t\tif (!sceneName) {\n\t\t\tconst errorMsg = 'No scene name was passed';\n\t\t\tlogger.error(errorMsg);\n\t\t\tthrow new XRSceneNotFoundError(errorMsg);\n\t\t}\n\n\t\tif (!this.options.scenes[sceneName]) {\n\t\t\tconst errorMsg = `Scene '${sceneName}' is not configured`;\n\t\t\tlogger.error(errorMsg);\n\t\t\tthrow new XRSceneNotFoundError(errorMsg);\n\t\t}\n\n\t\treturn this.options.scenes[sceneName];\n\t}\n\n\tpublic getSceneController(sceneName: string) {\n\t\tif (!this.options.scenes) {\n\t\t\tconst errorMsg = 'No scenes were defined in the configuration';\n\t\t\tlogger.error(errorMsg);\n\t\t\tthrow new XRNoSceneConfiguredError(errorMsg);\n\t\t}\n\n\t\tconst scene = this.options.scenes[sceneName];\n\t\tif (!scene) {\n\t\t\tconst errorMsg = `Scene '${sceneName}' is not configured`;\n\t\t\tlogger.error(errorMsg);\n\t\t\tthrow new XRSceneNotFoundError(errorMsg);\n\t\t}\n\n\t\tconst sceneController = scene.sceneController;\n\t\tif (!sceneController) {\n\t\t\tconst errorMsg = `Scene controller for '${sceneName}' has not been loaded`;\n\t\t\tlogger.error(errorMsg);\n\t\t\tthrow new XRSceneNotLoadedError(errorMsg);\n\t\t}\n\n\t\treturn sceneController;\n\t}\n\n\tpublic isVRCapable(sceneName: string): boolean {\n\t\tconst sceneController = this.getSceneController(sceneName);\n\t\treturn sceneController.vrCapable;\n\t}\n\n\tpublic isVRPresentationActive(sceneName: string): boolean {\n\t\tconst sceneController = this.getSceneController(sceneName);\n\t\treturn sceneController.vrPresentationActive;\n\t}\n\n\tpublic start(sceneName: string) {\n\t\tconst sceneController = this.getSceneController(sceneName);\n\t\tsceneController.start();\n\t}\n\n\tpublic enterVR(sceneName: string) {\n\t\tconst sceneController = this.getSceneController(sceneName);\n\t\tsceneController.enterVR();\n\t}\n\n\tpublic exitVR(sceneName: string) {\n\t\tconst sceneController = this.getSceneController(sceneName);\n\t\tsceneController.exitVR();\n\t}\n\n\tpublic isMuted(sceneName: string): boolean {\n\t\tconst sceneController = this.getSceneController(sceneName);\n\t\treturn sceneController.muted;\n\t}\n\n\tpublic setMuted(sceneName: string, muted: boolean) {\n\t\tconst sceneController = this.getSceneController(sceneName);\n\t\tsceneController.muted = muted;\n\t}\n\n\tpublic onSceneEvent(\n\t\tsceneName: string,\n\t\teventName: string,\n\t\teventHandler: Function\n\t) {\n\t\tconst sceneController = this.getSceneController(sceneName);\n\t\tsceneController.on(eventName, eventHandler);\n\t}\n\n\tpublic enableAudio(sceneName: string) {\n\t\tconst sceneController = this.getSceneController(sceneName);\n\t\tsceneController.enableAudio();\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}