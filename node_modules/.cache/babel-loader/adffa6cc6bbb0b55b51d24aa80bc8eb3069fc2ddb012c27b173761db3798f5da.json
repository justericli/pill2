{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ericli/Desktop/pill2/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/ericli/Desktop/pill2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { isStreaming } from \"./isStreaming\";\nimport { stringHasher } from \"./stringHasher\";\nexport var getChecksum = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(body, _ref) {\n    var streamHasher, checksumAlgorithmFn, base64Encoder, digest;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          streamHasher = _ref.streamHasher, checksumAlgorithmFn = _ref.checksumAlgorithmFn, base64Encoder = _ref.base64Encoder;\n          digest = isStreaming(body) ? streamHasher(checksumAlgorithmFn, body) : stringHasher(checksumAlgorithmFn, body);\n          _context.t0 = base64Encoder;\n          _context.next = 5;\n          return digest;\n        case 5:\n          _context.t1 = _context.sent;\n          return _context.abrupt(\"return\", (0, _context.t0)(_context.t1));\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function getChecksum(_x, _x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["isStreaming","stringHasher","getChecksum","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","body","_ref","streamHasher","checksumAlgorithmFn","base64Encoder","digest","wrap","_callee$","_context","prev","next","t0","t1","sent","abrupt","stop","_x","_x2","apply","arguments"],"sources":["/Users/ericli/Desktop/pill2/node_modules/@aws-sdk/middleware-flexible-checksums/dist-es/getChecksum.js"],"sourcesContent":["import { isStreaming } from \"./isStreaming\";\nimport { stringHasher } from \"./stringHasher\";\nexport const getChecksum = async (body, { streamHasher, checksumAlgorithmFn, base64Encoder }) => {\n    const digest = isStreaming(body) ? streamHasher(checksumAlgorithmFn, body) : stringHasher(checksumAlgorithmFn, body);\n    return base64Encoder(await digest);\n};\n"],"mappings":";;AAAA,SAASA,WAAW,QAAQ,eAAe;AAC3C,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,OAAO,IAAMC,WAAW;EAAA,IAAAC,KAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAG,SAAAC,QAAOC,IAAI,EAAAC,IAAA;IAAA,IAAAC,YAAA,EAAAC,mBAAA,EAAAC,aAAA,EAAAC,MAAA;IAAA,OAAAR,mBAAA,GAAAS,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAIR,YAAY,GAAAD,IAAA,CAAZC,YAAY,EAAEC,mBAAmB,GAAAF,IAAA,CAAnBE,mBAAmB,EAAEC,aAAa,GAAAH,IAAA,CAAbG,aAAa;UAChFC,MAAM,GAAGb,WAAW,CAACQ,IAAI,CAAC,GAAGE,YAAY,CAACC,mBAAmB,EAAEH,IAAI,CAAC,GAAGP,YAAY,CAACU,mBAAmB,EAAEH,IAAI,CAAC;UAAAQ,QAAA,CAAAG,EAAA,GAC7GP,aAAa;UAAAI,QAAA,CAAAE,IAAA;UAAA,OAAOL,MAAM;QAAA;UAAAG,QAAA,CAAAI,EAAA,GAAAJ,QAAA,CAAAK,IAAA;UAAA,OAAAL,QAAA,CAAAM,MAAA,eAAAN,QAAA,CAAAG,EAAA,EAAAH,QAAA,CAAAI,EAAA;QAAA;QAAA;UAAA,OAAAJ,QAAA,CAAAO,IAAA;MAAA;IAAA,GAAAhB,OAAA;EAAA,CACpC;EAAA,gBAHYL,WAAWA,CAAAsB,EAAA,EAAAC,GAAA;IAAA,OAAAtB,KAAA,CAAAuB,KAAA,OAAAC,SAAA;EAAA;AAAA,GAGvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}